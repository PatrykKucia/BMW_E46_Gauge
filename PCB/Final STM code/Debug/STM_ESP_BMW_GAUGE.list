
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f0  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a448  0800a448  0000b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c8  0800a4c8  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c8  0800a4c8  0000b4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d0  0800a4d0  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d0  0800a4d0  0000b4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4d4  0800a4d4  0000b4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a4d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000000c  0800a4e4  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800a4e4  0000c2cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184c2  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca2  00000000  00000000  00024504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  000271a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f34  00000000  00000000  00028520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba94  00000000  00000000  00029454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aff0  00000000  00000000  00054ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001160e8  00000000  00000000  0006fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005378  00000000  00000000  00186004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0018b37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800a430 	.word	0x0800a430

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	0800a430 	.word	0x0800a430

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_dmul>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002b6:	bf1d      	ittte	ne
 80002b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002bc:	ea94 0f0c 	teqne	r4, ip
 80002c0:	ea95 0f0c 	teqne	r5, ip
 80002c4:	f000 f8de 	bleq	8000484 <__aeabi_dmul+0x1dc>
 80002c8:	442c      	add	r4, r5
 80002ca:	ea81 0603 	eor.w	r6, r1, r3
 80002ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002da:	bf18      	it	ne
 80002dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e8:	d038      	beq.n	800035c <__aeabi_dmul+0xb4>
 80002ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80002ee:	f04f 0500 	mov.w	r5, #0
 80002f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002fe:	f04f 0600 	mov.w	r6, #0
 8000302:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000306:	f09c 0f00 	teq	ip, #0
 800030a:	bf18      	it	ne
 800030c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000310:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000314:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000318:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800031c:	d204      	bcs.n	8000328 <__aeabi_dmul+0x80>
 800031e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000322:	416d      	adcs	r5, r5
 8000324:	eb46 0606 	adc.w	r6, r6, r6
 8000328:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800032c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000330:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000334:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000338:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800033c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000340:	bf88      	it	hi
 8000342:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000346:	d81e      	bhi.n	8000386 <__aeabi_dmul+0xde>
 8000348:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000360:	ea46 0101 	orr.w	r1, r6, r1
 8000364:	ea40 0002 	orr.w	r0, r0, r2
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000370:	bfc2      	ittt	gt
 8000372:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800037a:	bd70      	popgt	{r4, r5, r6, pc}
 800037c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000380:	f04f 0e00 	mov.w	lr, #0
 8000384:	3c01      	subs	r4, #1
 8000386:	f300 80ab 	bgt.w	80004e0 <__aeabi_dmul+0x238>
 800038a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800038e:	bfde      	ittt	le
 8000390:	2000      	movle	r0, #0
 8000392:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd70      	pople	{r4, r5, r6, pc}
 8000398:	f1c4 0400 	rsb	r4, r4, #0
 800039c:	3c20      	subs	r4, #32
 800039e:	da35      	bge.n	800040c <__aeabi_dmul+0x164>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc1b      	bgt.n	80003dc <__aeabi_dmul+0x134>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f305 	lsl.w	r3, r0, r5
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f205 	lsl.w	r2, r1, r5
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c8:	fa21 f604 	lsr.w	r6, r1, r4
 80003cc:	eb42 0106 	adc.w	r1, r2, r6
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f1c4 040c 	rsb	r4, r4, #12
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f304 	lsl.w	r3, r0, r4
 80003e8:	fa20 f005 	lsr.w	r0, r0, r5
 80003ec:	fa01 f204 	lsl.w	r2, r1, r4
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f1c4 0520 	rsb	r5, r4, #32
 8000410:	fa00 f205 	lsl.w	r2, r0, r5
 8000414:	ea4e 0e02 	orr.w	lr, lr, r2
 8000418:	fa20 f304 	lsr.w	r3, r0, r4
 800041c:	fa01 f205 	lsl.w	r2, r1, r5
 8000420:	ea43 0302 	orr.w	r3, r3, r2
 8000424:	fa21 f004 	lsr.w	r0, r1, r4
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	fa21 f204 	lsr.w	r2, r1, r4
 8000430:	ea20 0002 	bic.w	r0, r0, r2
 8000434:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f094 0f00 	teq	r4, #0
 8000448:	d10f      	bne.n	800046a <__aeabi_dmul+0x1c2>
 800044a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800044e:	0040      	lsls	r0, r0, #1
 8000450:	eb41 0101 	adc.w	r1, r1, r1
 8000454:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000458:	bf08      	it	eq
 800045a:	3c01      	subeq	r4, #1
 800045c:	d0f7      	beq.n	800044e <__aeabi_dmul+0x1a6>
 800045e:	ea41 0106 	orr.w	r1, r1, r6
 8000462:	f095 0f00 	teq	r5, #0
 8000466:	bf18      	it	ne
 8000468:	4770      	bxne	lr
 800046a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800046e:	0052      	lsls	r2, r2, #1
 8000470:	eb43 0303 	adc.w	r3, r3, r3
 8000474:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000478:	bf08      	it	eq
 800047a:	3d01      	subeq	r5, #1
 800047c:	d0f7      	beq.n	800046e <__aeabi_dmul+0x1c6>
 800047e:	ea43 0306 	orr.w	r3, r3, r6
 8000482:	4770      	bx	lr
 8000484:	ea94 0f0c 	teq	r4, ip
 8000488:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800048c:	bf18      	it	ne
 800048e:	ea95 0f0c 	teqne	r5, ip
 8000492:	d00c      	beq.n	80004ae <__aeabi_dmul+0x206>
 8000494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000498:	bf18      	it	ne
 800049a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800049e:	d1d1      	bne.n	8000444 <__aeabi_dmul+0x19c>
 80004a0:	ea81 0103 	eor.w	r1, r1, r3
 80004a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd70      	pop	{r4, r5, r6, pc}
 80004ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b2:	bf06      	itte	eq
 80004b4:	4610      	moveq	r0, r2
 80004b6:	4619      	moveq	r1, r3
 80004b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004bc:	d019      	beq.n	80004f2 <__aeabi_dmul+0x24a>
 80004be:	ea94 0f0c 	teq	r4, ip
 80004c2:	d102      	bne.n	80004ca <__aeabi_dmul+0x222>
 80004c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c8:	d113      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004ca:	ea95 0f0c 	teq	r5, ip
 80004ce:	d105      	bne.n	80004dc <__aeabi_dmul+0x234>
 80004d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004d4:	bf1c      	itt	ne
 80004d6:	4610      	movne	r0, r2
 80004d8:	4619      	movne	r1, r3
 80004da:	d10a      	bne.n	80004f2 <__aeabi_dmul+0x24a>
 80004dc:	ea81 0103 	eor.w	r1, r1, r3
 80004e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004fa:	bd70      	pop	{r4, r5, r6, pc}

080004fc <__aeabi_drsub>:
 80004fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000500:	e002      	b.n	8000508 <__adddf3>
 8000502:	bf00      	nop

08000504 <__aeabi_dsub>:
 8000504:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000508 <__adddf3>:
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800050e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	bf1f      	itttt	ne
 800051e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000522:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000526:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800052e:	f000 80e2 	beq.w	80006f6 <__adddf3+0x1ee>
 8000532:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000536:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053a:	bfb8      	it	lt
 800053c:	426d      	neglt	r5, r5
 800053e:	dd0c      	ble.n	800055a <__adddf3+0x52>
 8000540:	442c      	add	r4, r5
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	ea82 0000 	eor.w	r0, r2, r0
 800054e:	ea83 0101 	eor.w	r1, r3, r1
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	2d36      	cmp	r5, #54	@ 0x36
 800055c:	bf88      	it	hi
 800055e:	bd30      	pophi	{r4, r5, pc}
 8000560:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000564:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000568:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800056c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x70>
 8000572:	4240      	negs	r0, r0
 8000574:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000578:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800057c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000580:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000584:	d002      	beq.n	800058c <__adddf3+0x84>
 8000586:	4252      	negs	r2, r2
 8000588:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800058c:	ea94 0f05 	teq	r4, r5
 8000590:	f000 80a7 	beq.w	80006e2 <__adddf3+0x1da>
 8000594:	f1a4 0401 	sub.w	r4, r4, #1
 8000598:	f1d5 0e20 	rsbs	lr, r5, #32
 800059c:	db0d      	blt.n	80005ba <__adddf3+0xb2>
 800059e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a2:	fa22 f205 	lsr.w	r2, r2, r5
 80005a6:	1880      	adds	r0, r0, r2
 80005a8:	f141 0100 	adc.w	r1, r1, #0
 80005ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b0:	1880      	adds	r0, r0, r2
 80005b2:	fa43 f305 	asr.w	r3, r3, r5
 80005b6:	4159      	adcs	r1, r3
 80005b8:	e00e      	b.n	80005d8 <__adddf3+0xd0>
 80005ba:	f1a5 0520 	sub.w	r5, r5, #32
 80005be:	f10e 0e20 	add.w	lr, lr, #32
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c8:	bf28      	it	cs
 80005ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ce:	fa43 f305 	asr.w	r3, r3, r5
 80005d2:	18c0      	adds	r0, r0, r3
 80005d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	d507      	bpl.n	80005ee <__adddf3+0xe6>
 80005de:	f04f 0e00 	mov.w	lr, #0
 80005e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005f2:	d31b      	bcc.n	800062c <__adddf3+0x124>
 80005f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f8:	d30c      	bcc.n	8000614 <__adddf3+0x10c>
 80005fa:	0849      	lsrs	r1, r1, #1
 80005fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000600:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000604:	f104 0401 	add.w	r4, r4, #1
 8000608:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800060c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000610:	f080 809a 	bcs.w	8000748 <__adddf3+0x240>
 8000614:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	ea41 0105 	orr.w	r1, r1, r5
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000630:	4140      	adcs	r0, r0
 8000632:	eb41 0101 	adc.w	r1, r1, r1
 8000636:	3c01      	subs	r4, #1
 8000638:	bf28      	it	cs
 800063a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800063e:	d2e9      	bcs.n	8000614 <__adddf3+0x10c>
 8000640:	f091 0f00 	teq	r1, #0
 8000644:	bf04      	itt	eq
 8000646:	4601      	moveq	r1, r0
 8000648:	2000      	moveq	r0, #0
 800064a:	fab1 f381 	clz	r3, r1
 800064e:	bf08      	it	eq
 8000650:	3320      	addeq	r3, #32
 8000652:	f1a3 030b 	sub.w	r3, r3, #11
 8000656:	f1b3 0220 	subs.w	r2, r3, #32
 800065a:	da0c      	bge.n	8000676 <__adddf3+0x16e>
 800065c:	320c      	adds	r2, #12
 800065e:	dd08      	ble.n	8000672 <__adddf3+0x16a>
 8000660:	f102 0c14 	add.w	ip, r2, #20
 8000664:	f1c2 020c 	rsb	r2, r2, #12
 8000668:	fa01 f00c 	lsl.w	r0, r1, ip
 800066c:	fa21 f102 	lsr.w	r1, r1, r2
 8000670:	e00c      	b.n	800068c <__adddf3+0x184>
 8000672:	f102 0214 	add.w	r2, r2, #20
 8000676:	bfd8      	it	le
 8000678:	f1c2 0c20 	rsble	ip, r2, #32
 800067c:	fa01 f102 	lsl.w	r1, r1, r2
 8000680:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000684:	bfdc      	itt	le
 8000686:	ea41 010c 	orrle.w	r1, r1, ip
 800068a:	4090      	lslle	r0, r2
 800068c:	1ae4      	subs	r4, r4, r3
 800068e:	bfa2      	ittt	ge
 8000690:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000694:	4329      	orrge	r1, r5
 8000696:	bd30      	popge	{r4, r5, pc}
 8000698:	ea6f 0404 	mvn.w	r4, r4
 800069c:	3c1f      	subs	r4, #31
 800069e:	da1c      	bge.n	80006da <__adddf3+0x1d2>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc0e      	bgt.n	80006c2 <__adddf3+0x1ba>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0220 	rsb	r2, r4, #32
 80006ac:	fa20 f004 	lsr.w	r0, r0, r4
 80006b0:	fa01 f302 	lsl.w	r3, r1, r2
 80006b4:	ea40 0003 	orr.w	r0, r0, r3
 80006b8:	fa21 f304 	lsr.w	r3, r1, r4
 80006bc:	ea45 0103 	orr.w	r1, r5, r3
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f1c4 040c 	rsb	r4, r4, #12
 80006c6:	f1c4 0220 	rsb	r2, r4, #32
 80006ca:	fa20 f002 	lsr.w	r0, r0, r2
 80006ce:	fa01 f304 	lsl.w	r3, r1, r4
 80006d2:	ea40 0003 	orr.w	r0, r0, r3
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	fa21 f004 	lsr.w	r0, r1, r4
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f094 0f00 	teq	r4, #0
 80006e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ea:	bf06      	itte	eq
 80006ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f0:	3401      	addeq	r4, #1
 80006f2:	3d01      	subne	r5, #1
 80006f4:	e74e      	b.n	8000594 <__adddf3+0x8c>
 80006f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fa:	bf18      	it	ne
 80006fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000700:	d029      	beq.n	8000756 <__adddf3+0x24e>
 8000702:	ea94 0f05 	teq	r4, r5
 8000706:	bf08      	it	eq
 8000708:	ea90 0f02 	teqeq	r0, r2
 800070c:	d005      	beq.n	800071a <__adddf3+0x212>
 800070e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000712:	bf04      	itt	eq
 8000714:	4619      	moveq	r1, r3
 8000716:	4610      	moveq	r0, r2
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea91 0f03 	teq	r1, r3
 800071e:	bf1e      	ittt	ne
 8000720:	2100      	movne	r1, #0
 8000722:	2000      	movne	r0, #0
 8000724:	bd30      	popne	{r4, r5, pc}
 8000726:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072a:	d105      	bne.n	8000738 <__adddf3+0x230>
 800072c:	0040      	lsls	r0, r0, #1
 800072e:	4149      	adcs	r1, r1
 8000730:	bf28      	it	cs
 8000732:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd30      	pop	{r4, r5, pc}
 8000738:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800073c:	bf3c      	itt	cc
 800073e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000742:	bd30      	popcc	{r4, r5, pc}
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075a:	bf1a      	itte	ne
 800075c:	4619      	movne	r1, r3
 800075e:	4610      	movne	r0, r2
 8000760:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000764:	bf1c      	itt	ne
 8000766:	460b      	movne	r3, r1
 8000768:	4602      	movne	r2, r0
 800076a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800076e:	bf06      	itte	eq
 8000770:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000774:	ea91 0f03 	teqeq	r1, r3
 8000778:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	bf00      	nop

08000780 <__aeabi_ui2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000794:	f04f 0500 	mov.w	r5, #0
 8000798:	f04f 0100 	mov.w	r1, #0
 800079c:	e750      	b.n	8000640 <__adddf3+0x138>
 800079e:	bf00      	nop

080007a0 <__aeabi_i2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b8:	bf48      	it	mi
 80007ba:	4240      	negmi	r0, r0
 80007bc:	f04f 0100 	mov.w	r1, #0
 80007c0:	e73e      	b.n	8000640 <__adddf3+0x138>
 80007c2:	bf00      	nop

080007c4 <__aeabi_f2d>:
 80007c4:	0042      	lsls	r2, r0, #1
 80007c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d2:	bf1f      	itttt	ne
 80007d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e0:	4770      	bxne	lr
 80007e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007e6:	bf08      	it	eq
 80007e8:	4770      	bxeq	lr
 80007ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007ee:	bf04      	itt	eq
 80007f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007f4:	4770      	bxeq	lr
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	e71c      	b.n	8000640 <__adddf3+0x138>
 8000806:	bf00      	nop

08000808 <__aeabi_ul2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f04f 0500 	mov.w	r5, #0
 8000816:	e00a      	b.n	800082e <__aeabi_l2d+0x16>

08000818 <__aeabi_l2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000826:	d502      	bpl.n	800082e <__aeabi_l2d+0x16>
 8000828:	4240      	negs	r0, r0
 800082a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000832:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800083a:	f43f aed8 	beq.w	80005ee <__adddf3+0xe6>
 800083e:	f04f 0203 	mov.w	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000856:	f1c2 0320 	rsb	r3, r2, #32
 800085a:	fa00 fc03 	lsl.w	ip, r0, r3
 800085e:	fa20 f002 	lsr.w	r0, r0, r2
 8000862:	fa01 fe03 	lsl.w	lr, r1, r3
 8000866:	ea40 000e 	orr.w	r0, r0, lr
 800086a:	fa21 f102 	lsr.w	r1, r1, r2
 800086e:	4414      	add	r4, r2
 8000870:	e6bd      	b.n	80005ee <__adddf3+0xe6>
 8000872:	bf00      	nop

08000874 <__aeabi_d2f>:
 8000874:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800087c:	bf24      	itt	cs
 800087e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000886:	d90d      	bls.n	80008a4 <__aeabi_d2f+0x30>
 8000888:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800088c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000894:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800089c:	bf08      	it	eq
 800089e:	f020 0001 	biceq.w	r0, r0, #1
 80008a2:	4770      	bx	lr
 80008a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a8:	d121      	bne.n	80008ee <__aeabi_d2f+0x7a>
 80008aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ae:	bfbc      	itt	lt
 80008b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008b4:	4770      	bxlt	lr
 80008b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008be:	f1c2 0218 	rsb	r2, r2, #24
 80008c2:	f1c2 0c20 	rsb	ip, r2, #32
 80008c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ca:	fa20 f002 	lsr.w	r0, r0, r2
 80008ce:	bf18      	it	ne
 80008d0:	f040 0001 	orrne.w	r0, r0, #1
 80008d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e0:	ea40 000c 	orr.w	r0, r0, ip
 80008e4:	fa23 f302 	lsr.w	r3, r3, r2
 80008e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008ec:	e7cc      	b.n	8000888 <__aeabi_d2f+0x14>
 80008ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008f2:	d107      	bne.n	8000904 <__aeabi_d2f+0x90>
 80008f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f8:	bf1e      	ittt	ne
 80008fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000902:	4770      	bxne	lr
 8000904:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <__aeabi_uldivmod>:
 8000914:	b953      	cbnz	r3, 800092c <__aeabi_uldivmod+0x18>
 8000916:	b94a      	cbnz	r2, 800092c <__aeabi_uldivmod+0x18>
 8000918:	2900      	cmp	r1, #0
 800091a:	bf08      	it	eq
 800091c:	2800      	cmpeq	r0, #0
 800091e:	bf1c      	itt	ne
 8000920:	f04f 31ff 	movne.w	r1, #4294967295
 8000924:	f04f 30ff 	movne.w	r0, #4294967295
 8000928:	f000 b97e 	b.w	8000c28 <__aeabi_idiv0>
 800092c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000934:	f000 f806 	bl	8000944 <__udivmoddi4>
 8000938:	f8dd e004 	ldr.w	lr, [sp, #4]
 800093c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr

08000944 <__udivmoddi4>:
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800094a:	460c      	mov	r4, r1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14d      	bne.n	80009ec <__udivmoddi4+0xa8>
 8000950:	428a      	cmp	r2, r1
 8000952:	460f      	mov	r7, r1
 8000954:	4684      	mov	ip, r0
 8000956:	4696      	mov	lr, r2
 8000958:	fab2 f382 	clz	r3, r2
 800095c:	d960      	bls.n	8000a20 <__udivmoddi4+0xdc>
 800095e:	b14b      	cbz	r3, 8000974 <__udivmoddi4+0x30>
 8000960:	fa02 fe03 	lsl.w	lr, r2, r3
 8000964:	f1c3 0220 	rsb	r2, r3, #32
 8000968:	409f      	lsls	r7, r3
 800096a:	fa00 fc03 	lsl.w	ip, r0, r3
 800096e:	fa20 f202 	lsr.w	r2, r0, r2
 8000972:	4317      	orrs	r7, r2
 8000974:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000978:	fa1f f48e 	uxth.w	r4, lr
 800097c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000980:	fbb7 f1f6 	udiv	r1, r7, r6
 8000984:	fb06 7711 	mls	r7, r6, r1, r7
 8000988:	fb01 f004 	mul.w	r0, r1, r4
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	4290      	cmp	r0, r2
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x62>
 8000994:	eb1e 0202 	adds.w	r2, lr, r2
 8000998:	f101 37ff 	add.w	r7, r1, #4294967295
 800099c:	d202      	bcs.n	80009a4 <__udivmoddi4+0x60>
 800099e:	4290      	cmp	r0, r2
 80009a0:	f200 812d 	bhi.w	8000bfe <__udivmoddi4+0x2ba>
 80009a4:	4639      	mov	r1, r7
 80009a6:	1a12      	subs	r2, r2, r0
 80009a8:	fa1f fc8c 	uxth.w	ip, ip
 80009ac:	fbb2 f0f6 	udiv	r0, r2, r6
 80009b0:	fb06 2210 	mls	r2, r6, r0, r2
 80009b4:	fb00 f404 	mul.w	r4, r0, r4
 80009b8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009bc:	4564      	cmp	r4, ip
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x8e>
 80009c0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x8c>
 80009ca:	4564      	cmp	r4, ip
 80009cc:	f200 811a 	bhi.w	8000c04 <__udivmoddi4+0x2c0>
 80009d0:	4610      	mov	r0, r2
 80009d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d6:	ebac 0c04 	sub.w	ip, ip, r4
 80009da:	2100      	movs	r1, #0
 80009dc:	b125      	cbz	r5, 80009e8 <__udivmoddi4+0xa4>
 80009de:	fa2c f303 	lsr.w	r3, ip, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	e9c5 3200 	strd	r3, r2, [r5]
 80009e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d905      	bls.n	80009fc <__udivmoddi4+0xb8>
 80009f0:	b10d      	cbz	r5, 80009f6 <__udivmoddi4+0xb2>
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	2100      	movs	r1, #0
 80009f8:	4608      	mov	r0, r1
 80009fa:	e7f5      	b.n	80009e8 <__udivmoddi4+0xa4>
 80009fc:	fab3 f183 	clz	r1, r3
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d14d      	bne.n	8000aa0 <__udivmoddi4+0x15c>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	f0c0 80f2 	bcc.w	8000bee <__udivmoddi4+0x2aa>
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	f080 80ef 	bcs.w	8000bee <__udivmoddi4+0x2aa>
 8000a10:	4606      	mov	r6, r0
 8000a12:	4623      	mov	r3, r4
 8000a14:	4608      	mov	r0, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0e6      	beq.n	80009e8 <__udivmoddi4+0xa4>
 8000a1a:	e9c5 6300 	strd	r6, r3, [r5]
 8000a1e:	e7e3      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f040 80a2 	bne.w	8000b6a <__udivmoddi4+0x226>
 8000a26:	1a8a      	subs	r2, r1, r2
 8000a28:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a2c:	fa1f f68e 	uxth.w	r6, lr
 8000a30:	2101      	movs	r1, #1
 8000a32:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a36:	fb07 2014 	mls	r0, r7, r4, r2
 8000a3a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a42:	fb06 f004 	mul.w	r0, r6, r4
 8000a46:	4290      	cmp	r0, r2
 8000a48:	d90f      	bls.n	8000a6a <__udivmoddi4+0x126>
 8000a4a:	eb1e 0202 	adds.w	r2, lr, r2
 8000a4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000a52:	bf2c      	ite	cs
 8000a54:	f04f 0901 	movcs.w	r9, #1
 8000a58:	f04f 0900 	movcc.w	r9, #0
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d903      	bls.n	8000a68 <__udivmoddi4+0x124>
 8000a60:	f1b9 0f00 	cmp.w	r9, #0
 8000a64:	f000 80c8 	beq.w	8000bf8 <__udivmoddi4+0x2b4>
 8000a68:	4644      	mov	r4, r8
 8000a6a:	1a12      	subs	r2, r2, r0
 8000a6c:	fa1f fc8c 	uxth.w	ip, ip
 8000a70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a74:	fb07 2210 	mls	r2, r7, r0, r2
 8000a78:	fb00 f606 	mul.w	r6, r0, r6
 8000a7c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a80:	4566      	cmp	r6, ip
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x152>
 8000a84:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a8c:	d202      	bcs.n	8000a94 <__udivmoddi4+0x150>
 8000a8e:	4566      	cmp	r6, ip
 8000a90:	f200 80bb 	bhi.w	8000c0a <__udivmoddi4+0x2c6>
 8000a94:	4610      	mov	r0, r2
 8000a96:	ebac 0c06 	sub.w	ip, ip, r6
 8000a9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a9e:	e79d      	b.n	80009dc <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000aaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000aae:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ab2:	40f4      	lsrs	r4, r6
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	ea4e 030c 	orr.w	r3, lr, ip
 8000abc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ac0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac8:	fa1f fc87 	uxth.w	ip, r7
 8000acc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ad0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ad4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad8:	fb00 f90c 	mul.w	r9, r0, ip
 8000adc:	45a1      	cmp	r9, r4
 8000ade:	d90e      	bls.n	8000afe <__udivmoddi4+0x1ba>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	bf2c      	ite	cs
 8000ae8:	f04f 0b01 	movcs.w	fp, #1
 8000aec:	f04f 0b00 	movcc.w	fp, #0
 8000af0:	45a1      	cmp	r9, r4
 8000af2:	d903      	bls.n	8000afc <__udivmoddi4+0x1b8>
 8000af4:	f1bb 0f00 	cmp.w	fp, #0
 8000af8:	f000 8093 	beq.w	8000c22 <__udivmoddi4+0x2de>
 8000afc:	4650      	mov	r0, sl
 8000afe:	eba4 0409 	sub.w	r4, r4, r9
 8000b02:	fa1f f983 	uxth.w	r9, r3
 8000b06:	fbb4 f3f8 	udiv	r3, r4, r8
 8000b0a:	fb08 4413 	mls	r4, r8, r3, r4
 8000b0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d906      	bls.n	8000b28 <__udivmoddi4+0x1e4>
 8000b1a:	193c      	adds	r4, r7, r4
 8000b1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b20:	d201      	bcs.n	8000b26 <__udivmoddi4+0x1e2>
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d87a      	bhi.n	8000c1c <__udivmoddi4+0x2d8>
 8000b26:	4643      	mov	r3, r8
 8000b28:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	fba0 9802 	umull	r9, r8, r0, r2
 8000b34:	4544      	cmp	r4, r8
 8000b36:	46cc      	mov	ip, r9
 8000b38:	4643      	mov	r3, r8
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0x1fe>
 8000b3c:	d106      	bne.n	8000b4c <__udivmoddi4+0x208>
 8000b3e:	45ce      	cmp	lr, r9
 8000b40:	d204      	bcs.n	8000b4c <__udivmoddi4+0x208>
 8000b42:	3801      	subs	r0, #1
 8000b44:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b48:	eb68 0307 	sbc.w	r3, r8, r7
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x222>
 8000b4e:	ebbe 020c 	subs.w	r2, lr, ip
 8000b52:	eb64 0403 	sbc.w	r4, r4, r3
 8000b56:	fa04 f606 	lsl.w	r6, r4, r6
 8000b5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b5e:	40cc      	lsrs	r4, r1
 8000b60:	431e      	orrs	r6, r3
 8000b62:	e9c5 6400 	strd	r6, r4, [r5]
 8000b66:	2100      	movs	r1, #0
 8000b68:	e73e      	b.n	80009e8 <__udivmoddi4+0xa4>
 8000b6a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b6e:	f1c3 0120 	rsb	r1, r3, #32
 8000b72:	fa04 f203 	lsl.w	r2, r4, r3
 8000b76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7a:	40cc      	lsrs	r4, r1
 8000b7c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b80:	fa20 f101 	lsr.w	r1, r0, r1
 8000b84:	fa1f f68e 	uxth.w	r6, lr
 8000b88:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	fb07 4410 	mls	r4, r7, r0, r4
 8000b92:	0c11      	lsrs	r1, r2, #16
 8000b94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b98:	fb00 f406 	mul.w	r4, r0, r6
 8000b9c:	428c      	cmp	r4, r1
 8000b9e:	d90e      	bls.n	8000bbe <__udivmoddi4+0x27a>
 8000ba0:	eb1e 0101 	adds.w	r1, lr, r1
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	bf2c      	ite	cs
 8000baa:	f04f 0901 	movcs.w	r9, #1
 8000bae:	f04f 0900 	movcc.w	r9, #0
 8000bb2:	428c      	cmp	r4, r1
 8000bb4:	d902      	bls.n	8000bbc <__udivmoddi4+0x278>
 8000bb6:	f1b9 0f00 	cmp.w	r9, #0
 8000bba:	d02c      	beq.n	8000c16 <__udivmoddi4+0x2d2>
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	1b09      	subs	r1, r1, r4
 8000bc0:	b292      	uxth	r2, r2
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4291      	cmp	r1, r2
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x2a2>
 8000bd6:	eb1e 0202 	adds.w	r2, lr, r2
 8000bda:	f104 38ff 	add.w	r8, r4, #4294967295
 8000bde:	d201      	bcs.n	8000be4 <__udivmoddi4+0x2a0>
 8000be0:	4291      	cmp	r1, r2
 8000be2:	d815      	bhi.n	8000c10 <__udivmoddi4+0x2cc>
 8000be4:	4644      	mov	r4, r8
 8000be6:	1a52      	subs	r2, r2, r1
 8000be8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bec:	e721      	b.n	8000a32 <__udivmoddi4+0xee>
 8000bee:	1a86      	subs	r6, r0, r2
 8000bf0:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	e70e      	b.n	8000a16 <__udivmoddi4+0xd2>
 8000bf8:	3c02      	subs	r4, #2
 8000bfa:	4472      	add	r2, lr
 8000bfc:	e735      	b.n	8000a6a <__udivmoddi4+0x126>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4472      	add	r2, lr
 8000c02:	e6d0      	b.n	80009a6 <__udivmoddi4+0x62>
 8000c04:	44f4      	add	ip, lr
 8000c06:	3802      	subs	r0, #2
 8000c08:	e6e3      	b.n	80009d2 <__udivmoddi4+0x8e>
 8000c0a:	44f4      	add	ip, lr
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	e742      	b.n	8000a96 <__udivmoddi4+0x152>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4472      	add	r2, lr
 8000c14:	e7e7      	b.n	8000be6 <__udivmoddi4+0x2a2>
 8000c16:	3802      	subs	r0, #2
 8000c18:	4471      	add	r1, lr
 8000c1a:	e7d0      	b.n	8000bbe <__udivmoddi4+0x27a>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	e782      	b.n	8000b28 <__udivmoddi4+0x1e4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	e76a      	b.n	8000afe <__udivmoddi4+0x1ba>

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_GPDMA1_Init+0x3c>)
 8000c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	201b      	movs	r0, #27
 8000c56:	f001 f821 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c5a:	201b      	movs	r0, #27
 8000c5c:	f001 f838 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	44020c00 	.word	0x44020c00

08000c6c <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	4a2a      	ldr	r2, [pc, #168]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c92:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_GPIO_Init+0xc8>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce2:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <MX_GPIO_Init+0xcc>)
 8000ce4:	f002 f940 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D1_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2118      	movs	r1, #24
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_GPIO_Init+0xd0>)
 8000cee:	f002 f93b 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <MX_GPIO_Init+0xcc>)
 8000d0c:	f001 ffda 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D1_Pin;
 8000d10:	2318      	movs	r3, #24
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_GPIO_Init+0xd0>)
 8000d28:	f001 ffcc 	bl	8002cc4 <HAL_GPIO_Init>

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	44020c00 	.word	0x44020c00
 8000d38:	42020000 	.word	0x42020000
 8000d3c:	42020400 	.word	0x42020400

08000d40 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f002 f941 	bl	8002fcc <HAL_ICACHE_ConfigAssociativityMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d50:	f000 faba 	bl	80012c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d54:	f002 f95a 	bl	800300c <HAL_ICACHE_Enable>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d5e:	f000 fab3 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <ESP32_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP32_SendCommand(const char* command) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fa91 	bl	8000298 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <ESP32_SendCommand+0x3c>)
 8000d82:	f007 ffe3 	bl	8008d4c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4906      	ldr	r1, [pc, #24]	@ (8000da8 <ESP32_SendCommand+0x40>)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <ESP32_SendCommand+0x3c>)
 8000d90:	f007 ffdc 	bl	8008d4c <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8000d94:	2064      	movs	r0, #100	@ 0x64
 8000d96:	f000 fea5 	bl	8001ae4 <HAL_Delay>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001bc 	.word	0x200001bc
 8000da8:	0800a448 	.word	0x0800a448

08000dac <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8000db4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db8:	486a      	ldr	r0, [pc, #424]	@ (8000f64 <parse_frame+0x1b8>)
 8000dba:	f002 f8ed 	bl	8002f98 <HAL_GPIO_TogglePin>

    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b66      	ldr	r3, [pc, #408]	@ (8000f68 <parse_frame+0x1bc>)
 8000dce:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b61      	ldr	r3, [pc, #388]	@ (8000f68 <parse_frame+0x1bc>)
 8000de2:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	3304      	adds	r3, #4
 8000de8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f68 <parse_frame+0x1bc>)
 8000df6:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <parse_frame+0x1bc>)
 8000e08:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b53      	ldr	r3, [pc, #332]	@ (8000f68 <parse_frame+0x1bc>)
 8000e1a:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <parse_frame+0x1bc>)
 8000e2e:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	3304      	adds	r3, #4
 8000e34:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <parse_frame+0x1bc>)
 8000e42:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	3304      	adds	r3, #4
 8000e48:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b44      	ldr	r3, [pc, #272]	@ (8000f68 <parse_frame+0x1bc>)
 8000e56:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <parse_frame+0x1bc>)
 8000e6a:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <parse_frame+0x1bc>)
 8000e7e:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	3304      	adds	r3, #4
 8000e84:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <parse_frame+0x1bc>)
 8000e92:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	3304      	adds	r3, #4
 8000e98:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <parse_frame+0x1bc>)
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f68 <parse_frame+0x1bc>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <parse_frame+0x1bc>)
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <parse_frame+0x1bc>)
 8000ee2:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <parse_frame+0x1bc>)
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3304      	adds	r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <parse_frame+0x1bc>)
 8000f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	441a      	add	r2, r3
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <parse_frame+0x1bc>)
 8000f1a:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8000f1e:	4613      	mov	r3, r2
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	6859      	ldr	r1, [r3, #4]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	441a      	add	r2, r3
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <parse_frame+0x1bc>)
 8000f38:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	6859      	ldr	r1, [r3, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <parse_frame+0x1bc>)
 8000f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    // W tym miejscu masz już poprawnie wypełnioną strukturę `frame`
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	42020000 	.word	0x42020000
 8000f68:	2000010c 	.word	0x2000010c

08000f6c <process_frame>:
void process_frame(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    if (frameReady) {
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <process_frame+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <process_frame+0x20>)
 8000f7a:	f7ff ff17 	bl	8000dac <parse_frame>
        frameReady = false;
 8000f7e:	4b02      	ldr	r3, [pc, #8]	@ (8000f88 <process_frame+0x1c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
    }
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000010a 	.word	0x2000010a
 8000f8c:	200000a8 	.word	0x200000a8

08000f90 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
    // Poprawiona interpolacja częstotliwości
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f44f 62d7 	mov.w	r2, #1720	@ 0x6b8
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <Set_PWM_Frequency+0xa0>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	441a      	add	r2, r3
 8000fac:	1212      	asrs	r2, r2, #8
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	3332      	adds	r3, #50	@ 0x32
 8000fb4:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d817      	bhi.n	8000ff0 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <Set_PWM_Frequency+0xa4>)
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd2:	d302      	bcc.n	8000fda <Set_PWM_Frequency+0x4a>
 8000fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd8:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <Set_PWM_Frequency+0xa4>)
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e007      	b.n	8001000 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <Set_PWM_Frequency+0xa4>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001006:	d302      	bcc.n	800100e <Set_PWM_Frequency+0x7e>
 8001008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800100c:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <Set_PWM_Frequency+0xa8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <Set_PWM_Frequency+0xa8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <Set_PWM_Frequency+0xa8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

    // W niektórych przypadkach wymagane jest wygenerowanie zdarzenia aktualizacji
    //__HAL_TIM_GENERATE_EVENT(&htim1, TIM_EVENTSOURCE_UPDATE);
}
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	f2b9d649 	.word	0xf2b9d649
 8001034:	0ee6b280 	.word	0x0ee6b280
 8001038:	20000170 	.word	0x20000170
 800103c:	00000000 	.word	0x00000000

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fc8f 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f855 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f7ff fe0d 	bl	8000c6c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001052:	f7ff fdeb 	bl	8000c2c <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001056:	f000 fb59 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800105a:	f000 fa29 	bl	80014b0 <MX_TIM1_Init>
  MX_ICACHE_Init();
 800105e:	f7ff fe6f 	bl	8000d40 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001062:	2104      	movs	r1, #4
 8001064:	481e      	ldr	r0, [pc, #120]	@ (80010e0 <main+0xa0>)
 8001066:	f006 fa97 	bl	8007598 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 800106a:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <main+0xa4>)
 800106c:	f7ff fe7c 	bl	8000d68 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 8001070:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001074:	f000 fd36 	bl	8001ae4 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001078:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <main+0xa8>)
 800107a:	f7ff fe75 	bl	8000d68 <ESP32_SendCommand>
  HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001082:	f000 fd2f 	bl	8001ae4 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	4918      	ldr	r1, [pc, #96]	@ (80010ec <main+0xac>)
 800108a:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <main+0xb0>)
 800108c:	f007 fefc 	bl	8008e88 <HAL_UART_Receive_DMA>
  int8_t direction = 1; // 1 = rośnie, -1 = maleje
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 	  float speed = 0; // 1 = rośnie, -1 = maleje
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <main+0xb4>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fb90 	bl	80007c4 <__aeabi_f2d>
 80010a4:	a30c      	add	r3, pc, #48	@ (adr r3, 80010d8 <main+0x98>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff f8fd 	bl	80002a8 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fbdd 	bl	8000874 <__aeabi_d2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	603b      	str	r3, [r7, #0]
    // Set_PWM_Frequency(speed_kph);

        Set_PWM_Frequency(speed);
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5f 	bl	8000f90 <Set_PWM_Frequency>
	 speed = frame.speed * 3.6;
 80010d2:	bf00      	nop
 80010d4:	e7e1      	b.n	800109a <main+0x5a>
 80010d6:	bf00      	nop
 80010d8:	cccccccd 	.word	0xcccccccd
 80010dc:	400ccccc 	.word	0x400ccccc
 80010e0:	20000170 	.word	0x20000170
 80010e4:	0800a44c 	.word	0x0800a44c
 80010e8:	0800a454 	.word	0x0800a454
 80010ec:	20000028 	.word	0x20000028
 80010f0:	200001bc 	.word	0x200001bc
 80010f4:	2000010c 	.word	0x2000010c

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	@ 0x70
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2250      	movs	r2, #80	@ 0x50
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f009 f966 	bl	800a3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <SystemClock_Config+0xdc>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4a2c      	ldr	r2, [pc, #176]	@ (80011d4 <SystemClock_Config+0xdc>)
 8001124:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001128:	6113      	str	r3, [r2, #16]
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <SystemClock_Config+0xdc>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001136:	bf00      	nop
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <SystemClock_Config+0xdc>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b08      	cmp	r3, #8
 8001142:	d1f9      	bne.n	8001138 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001152:	2303      	movs	r3, #3
 8001154:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 800115a:	233e      	movs	r3, #62	@ 0x3e
 800115c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001162:	2302      	movs	r3, #2
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800116a:	230c      	movs	r3, #12
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800116e:	2300      	movs	r3, #0
 8001170:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001176:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 ff55 	bl	800302c <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 f89e 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	231f      	movs	r3, #31
 800118e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2303      	movs	r3, #3
 8001192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	2105      	movs	r1, #5
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fb76 	bl	800389c <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b6:	f000 f887 	bl	80012c8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <SystemClock_Config+0xe0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SystemClock_Config+0xe0>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3770      	adds	r7, #112	@ 0x70
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	44020800 	.word	0x44020800
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80011e4:	2108      	movs	r1, #8
 80011e6:	482e      	ldr	r0, [pc, #184]	@ (80012a0 <HAL_UART_RxCpltCallback+0xc4>)
 80011e8:	f001 fed6 	bl	8002f98 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a2c      	ldr	r2, [pc, #176]	@ (80012a4 <HAL_UART_RxCpltCallback+0xc8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d150      	bne.n	8001298 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <HAL_UART_RxCpltCallback+0xcc>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <HAL_UART_RxCpltCallback+0xd0>)
 80011fc:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 80011fe:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d813      	bhi.n	800122e <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <HAL_UART_RxCpltCallback+0xd8>)
 800120e:	5c9a      	ldrb	r2, [r3, r2]
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <HAL_UART_RxCpltCallback+0xd0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d106      	bne.n	8001226 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e033      	b.n	800128e <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001226:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e02f      	b.n	800128e <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d10d      	bne.n	8001252 <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <HAL_UART_RxCpltCallback+0xd0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b3a      	cmp	r3, #58	@ 0x3a
 800123c:	d127      	bne.n	800128e <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001248:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e01d      	b.n	800128e <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b5f      	cmp	r3, #95	@ 0x5f
 8001258:	d80a      	bhi.n	8001270 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	b2d1      	uxtb	r1, r2
 8001262:	4a15      	ldr	r2, [pc, #84]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 8001264:	7011      	strb	r1, [r2, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_UART_RxCpltCallback+0xd0>)
 800126a:	7819      	ldrb	r1, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_UART_RxCpltCallback+0xe0>)
 800126e:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b5f      	cmp	r3, #95	@ 0x5f
 8001276:	d90a      	bls.n	800128e <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_RxCpltCallback+0xe4>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
                process_frame();
 800127e:	f7ff fe75 	bl	8000f6c <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_UART_RxCpltCallback+0xd4>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_UART_RxCpltCallback+0xdc>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	4905      	ldr	r1, [pc, #20]	@ (80012a8 <HAL_UART_RxCpltCallback+0xcc>)
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <HAL_UART_RxCpltCallback+0xe8>)
 8001294:	f007 fdf8 	bl	8008e88 <HAL_UART_Receive_DMA>
    }
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	42020400 	.word	0x42020400
 80012a4:	40013800 	.word	0x40013800
 80012a8:	20000028 	.word	0x20000028
 80012ac:	2000016c 	.word	0x2000016c
 80012b0:	20000108 	.word	0x20000108
 80012b4:	0800a480 	.word	0x0800a480
 80012b8:	20000109 	.word	0x20000109
 80012bc:	200000a8 	.word	0x200000a8
 80012c0:	2000010a 	.word	0x2000010a
 80012c4:	200001bc 	.word	0x200001bc

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	bf00      	nop
 80012f0:	e7fd      	b.n	80012ee <HardFault_Handler+0x4>

080012f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	bf00      	nop
 8001300:	e7fd      	b.n	80012fe <BusFault_Handler+0x4>

08001302 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001306:	bf00      	nop
 8001308:	e7fd      	b.n	8001306 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 fbb4 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001346:	f000 ffb2 	bl	80022ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000250 	.word	0x20000250

08001354 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM1_BRK_IRQHandler+0x10>)
 800135a:	f006 fa61 	bl	8007820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000170 	.word	0x20000170

08001368 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM1_UP_IRQHandler+0x10>)
 800136e:	f006 fa57 	bl	8007820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000170 	.word	0x20000170

0800137c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001382:	f006 fa4d 	bl	8007820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000170 	.word	0x20000170

08001390 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <TIM1_CC_IRQHandler+0x10>)
 8001396:	f006 fa43 	bl	8007820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000170 	.word	0x20000170

080013a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <USART1_IRQHandler+0x10>)
 80013aa:	f007 fdbf 	bl	8008f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001bc 	.word	0x200001bc

080013b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013be:	4b35      	ldr	r3, [pc, #212]	@ (8001494 <SystemInit+0xdc>)
 80013c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c4:	4a33      	ldr	r2, [pc, #204]	@ (8001494 <SystemInit+0xdc>)
 80013c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <SystemInit+0xe0>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <SystemInit+0xe0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <SystemInit+0xe0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <SystemInit+0xe0>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	492c      	ldr	r1, [pc, #176]	@ (8001498 <SystemInit+0xe0>)
 80013e6:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <SystemInit+0xe4>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <SystemInit+0xe0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <SystemInit+0xe0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <SystemInit+0xe0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <SystemInit+0xe0>)
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <SystemInit+0xe8>)
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <SystemInit+0xe0>)
 8001406:	2200      	movs	r2, #0
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <SystemInit+0xe0>)
 800140c:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <SystemInit+0xe8>)
 800140e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001410:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <SystemInit+0xe0>)
 8001412:	2200      	movs	r2, #0
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <SystemInit+0xe0>)
 8001418:	4a21      	ldr	r2, [pc, #132]	@ (80014a0 <SystemInit+0xe8>)
 800141a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <SystemInit+0xe0>)
 800141e:	2200      	movs	r2, #0
 8001420:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <SystemInit+0xe0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <SystemInit+0xe0>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <SystemInit+0xe0>)
 8001430:	2200      	movs	r2, #0
 8001432:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <SystemInit+0xdc>)
 8001436:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800143a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <SystemInit+0xec>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001444:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800144c:	d003      	beq.n	8001456 <SystemInit+0x9e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001454:	d117      	bne.n	8001486 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <SystemInit+0xec>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <SystemInit+0xec>)
 8001464:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <SystemInit+0xf0>)
 8001466:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <SystemInit+0xec>)
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <SystemInit+0xf4>)
 800146c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <SystemInit+0xec>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <SystemInit+0xec>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <SystemInit+0xec>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <SystemInit+0xec>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	44020c00 	.word	0x44020c00
 800149c:	eae2eae3 	.word	0xeae2eae3
 80014a0:	01010280 	.word	0x01010280
 80014a4:	40022000 	.word	0x40022000
 80014a8:	08192a3b 	.word	0x08192a3b
 80014ac:	4c5d6e7f 	.word	0x4c5d6e7f

080014b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	@ 0x70
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2234      	movs	r2, #52	@ 0x34
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f008 ff74 	bl	800a3d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f0:	4b46      	ldr	r3, [pc, #280]	@ (800160c <MX_TIM1_Init+0x15c>)
 80014f2:	4a47      	ldr	r2, [pc, #284]	@ (8001610 <MX_TIM1_Init+0x160>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80014f6:	4b45      	ldr	r3, [pc, #276]	@ (800160c <MX_TIM1_Init+0x15c>)
 80014f8:	2231      	movs	r2, #49	@ 0x31
 80014fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b43      	ldr	r3, [pc, #268]	@ (800160c <MX_TIM1_Init+0x15c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001502:	4b42      	ldr	r3, [pc, #264]	@ (800160c <MX_TIM1_Init+0x15c>)
 8001504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b40      	ldr	r3, [pc, #256]	@ (800160c <MX_TIM1_Init+0x15c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001510:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <MX_TIM1_Init+0x15c>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001516:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <MX_TIM1_Init+0x15c>)
 8001518:	2280      	movs	r2, #128	@ 0x80
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151c:	483b      	ldr	r0, [pc, #236]	@ (800160c <MX_TIM1_Init+0x15c>)
 800151e:	f005 ff83 	bl	8007428 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001528:	f7ff fece 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001530:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001536:	4619      	mov	r1, r3
 8001538:	4834      	ldr	r0, [pc, #208]	@ (800160c <MX_TIM1_Init+0x15c>)
 800153a:	f006 fbd5 	bl	8007ce8 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001544:	f7ff fec0 	bl	80012c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001548:	4830      	ldr	r0, [pc, #192]	@ (800160c <MX_TIM1_Init+0x15c>)
 800154a:	f005 ffc4 	bl	80074d6 <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001554:	f7ff feb8 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001564:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001568:	4619      	mov	r1, r3
 800156a:	4828      	ldr	r0, [pc, #160]	@ (800160c <MX_TIM1_Init+0x15c>)
 800156c:	f007 f9ee 	bl	800894c <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001576:	f7ff fea7 	bl	80012c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	@ 0x60
 800157c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800157e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800159c:	2204      	movs	r2, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	481a      	ldr	r0, [pc, #104]	@ (800160c <MX_TIM1_Init+0x15c>)
 80015a2:	f006 fa8d 	bl	8007ac0 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80015ac:	f7ff fe8c 	bl	80012c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	@ (800160c <MX_TIM1_Init+0x15c>)
 80015ee:	f007 fa7d 	bl	8008aec <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80015f8:	f7ff fe66 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <MX_TIM1_Init+0x15c>)
 80015fe:	f000 f849 	bl	8001694 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3770      	adds	r7, #112	@ 0x70
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000170 	.word	0x20000170
 8001610:	40012c00 	.word	0x40012c00

08001614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_TIM_Base_MspInit+0x78>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12e      	bne.n	8001684 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800162c:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 800162e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001632:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <HAL_TIM_Base_MspInit+0x7c>)
 8001638:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800163c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2029      	movs	r0, #41	@ 0x29
 800164a:	f000 fb27 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800164e:	2029      	movs	r0, #41	@ 0x29
 8001650:	f000 fb3e 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	202a      	movs	r0, #42	@ 0x2a
 800165a:	f000 fb1f 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800165e:	202a      	movs	r0, #42	@ 0x2a
 8001660:	f000 fb36 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	202b      	movs	r0, #43	@ 0x2b
 800166a:	f000 fb17 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800166e:	202b      	movs	r0, #43	@ 0x2b
 8001670:	f000 fb2e 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	202c      	movs	r0, #44	@ 0x2c
 800167a:	f000 fb0f 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800167e:	202c      	movs	r0, #44	@ 0x2c
 8001680:	f000 fb26 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40012c00 	.word	0x40012c00
 8001690:	44020c00 	.word	0x44020c00

08001694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <HAL_TIM_MspPostInit+0x6c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d11f      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <HAL_TIM_MspPostInit+0x70>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <HAL_TIM_MspPostInit+0x70>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_TIM_MspPostInit+0x70>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <HAL_TIM_MspPostInit+0x74>)
 80016f2:	f001 fae7 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40012c00 	.word	0x40012c00
 8001704:	44020c00 	.word	0x44020c00
 8001708:	42020000 	.word	0x42020000

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_USART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001756:	f007 faa9 	bl	8008cac <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f7ff fdb2 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001768:	f008 fd6b 	bl	800a242 <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f7ff fda9 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800177a:	f008 fda0 	bl	800a2be <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f7ff fda0 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800178a:	f008 fd21 	bl	800a1d0 <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f7ff fd98 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200001bc 	.word	0x200001bc
 80017a0:	40013800 	.word	0x40013800

080017a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0be      	sub	sp, #248	@ 0xf8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	22d0      	movs	r2, #208	@ 0xd0
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 fe07 	bl	800a3d8 <memset>
  if(uartHandle->Instance==USART1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001900 <HAL_UART_MspInit+0x15c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f040 8090 	bne.w	80018f6 <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d6:	f04f 0201 	mov.w	r2, #1
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017e2:	2300      	movs	r3, #0
 80017e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fb98 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017f6:	f7ff fd67 	bl	80012c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fa:	4b42      	ldr	r3, [pc, #264]	@ (8001904 <HAL_UART_MspInit+0x160>)
 80017fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001800:	4a40      	ldr	r2, [pc, #256]	@ (8001904 <HAL_UART_MspInit+0x160>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001806:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800180a:	4b3e      	ldr	r3, [pc, #248]	@ (8001904 <HAL_UART_MspInit+0x160>)
 800180c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_UART_MspInit+0x160>)
 800181a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181e:	4a39      	ldr	r2, [pc, #228]	@ (8001904 <HAL_UART_MspInit+0x160>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001828:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <HAL_UART_MspInit+0x160>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001836:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800183a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001850:	2304      	movs	r3, #4
 8001852:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800185a:	4619      	mov	r1, r3
 800185c:	482a      	ldr	r0, [pc, #168]	@ (8001908 <HAL_UART_MspInit+0x164>)
 800185e:	f001 fa31 	bl	8002cc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001862:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001864:	4a2a      	ldr	r2, [pc, #168]	@ (8001910 <HAL_UART_MspInit+0x16c>)
 8001866:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <HAL_UART_MspInit+0x168>)
 800186a:	2215      	movs	r2, #21
 800186c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_UART_MspInit+0x168>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <HAL_UART_MspInit+0x168>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_UART_MspInit+0x168>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_UART_MspInit+0x168>)
 800189a:	2201      	movs	r2, #1
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018aa:	4b18      	ldr	r3, [pc, #96]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80018b6:	4815      	ldr	r0, [pc, #84]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018b8:	f000 fac8 	bl	8001e4c <HAL_DMA_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80018c2:	f7ff fd01 	bl	80012c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018d4:	2110      	movs	r1, #16
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <HAL_UART_MspInit+0x168>)
 80018d8:	f000 fe4a 	bl	8002570 <HAL_DMA_ConfigChannelAttributes>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80018e2:	f7ff fcf1 	bl	80012c8 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	203a      	movs	r0, #58	@ 0x3a
 80018ec:	f000 f9d6 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018f0:	203a      	movs	r0, #58	@ 0x3a
 80018f2:	f000 f9ed 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018f6:	bf00      	nop
 80018f8:	37f8      	adds	r7, #248	@ 0xf8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40013800 	.word	0x40013800
 8001904:	44020c00 	.word	0x44020c00
 8001908:	42020400 	.word	0x42020400
 800190c:	20000250 	.word	0x20000250
 8001910:	40020050 	.word	0x40020050

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001916:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001918:	f7ff fd4e 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001942:	f008 fd51 	bl	800a3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001946:	f7ff fb7b 	bl	8001040 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   r0, =_estack
 800194c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001958:	0800a4d8 	.word	0x0800a4d8
  ldr r2, =_sbss
 800195c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001960:	200002cc 	.word	0x200002cc

08001964 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_IRQHandler>
	...

08001968 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f98a 	bl	8001c86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001972:	f002 f94b 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_Init+0x44>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	490b      	ldr	r1, [pc, #44]	@ (80019b0 <HAL_Init+0x48>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_Init+0x4c>)
 800198a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800198c:	2004      	movs	r0, #4
 800198e:	f000 f9cf 	bl	8001d30 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001992:	200f      	movs	r0, #15
 8001994:	f000 f810 	bl	80019b8 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e002      	b.n	80019a8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019a2:	f7ff fc97 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	44020c00 	.word	0x44020c00
 80019b0:	0800a488 	.word	0x0800a488
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019c4:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <HAL_InitTick+0xdc>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e05c      	b.n	8001a8a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019d0:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <HAL_InitTick+0xe0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d10c      	bne.n	80019f6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019dc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <HAL_InitTick+0xe4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_InitTick+0xdc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e037      	b.n	8001a66 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80019f6:	f000 f9f3 	bl	8001de0 <HAL_SYSTICK_GetCLKSourceConfig>
 80019fa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d023      	beq.n	8001a4a <HAL_InitTick+0x92>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d82d      	bhi.n	8001a64 <HAL_InitTick+0xac>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_InitTick+0x5e>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d00d      	beq.n	8001a30 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a14:	e026      	b.n	8001a64 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <HAL_InitTick+0xe4>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_InitTick+0xdc>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	60fb      	str	r3, [r7, #12]
        break;
 8001a2e:	e01a      	b.n	8001a66 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_InitTick+0xdc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a3e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	60fb      	str	r3, [r7, #12]
        break;
 8001a48:	e00d      	b.n	8001a66 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0xdc>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	60fb      	str	r3, [r7, #12]
        break;
 8001a62:	e000      	b.n	8001a66 <HAL_InitTick+0xae>
        break;
 8001a64:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f940 	bl	8001cec <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e009      	b.n	8001a8a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a76:	2200      	movs	r2, #0
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7e:	f000 f90d 	bl	8001c9c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a82:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <HAL_InitTick+0xe8>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	e000e010 	.word	0xe000e010
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	200002c8 	.word	0x200002c8

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200002c8 	.word	0x200002c8

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff4c 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001caa:	f7ff ff63 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	6978      	ldr	r0, [r7, #20]
 8001cb6:	f7ff ffb3 	bl	8001c20 <NVIC_EncodePriority>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff82 	bl	8001bcc <__NVIC_SetPriority>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff56 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00d      	b.n	8001d1e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d16:	f043 0303 	orr.w	r3, r3, #3
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d844      	bhi.n	8001dc8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d67 	.word	0x08001d67
 8001d48:	08001d85 	.word	0x08001d85
 8001d4c:	08001da7 	.word	0x08001da7
 8001d50:	08001dc9 	.word	0x08001dc9
 8001d54:	08001d59 	.word	0x08001d59
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d58:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6013      	str	r3, [r2, #0]
      break;
 8001d64:	e031      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d78:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d7a:	f023 030c 	bic.w	r3, r3, #12
 8001d7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001d82:	e022      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d96:	f023 030c 	bic.w	r3, r3, #12
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001da4:	e011      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001db8:	f023 030c 	bic.w	r3, r3, #12
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001dc6:	e000      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001dc8:	bf00      	nop
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010
 8001ddc:	44020c00 	.word	0x44020c00

08001de0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001df2:	2304      	movs	r3, #4
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e01e      	b.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d00f      	beq.n	8001e2a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d80f      	bhi.n	8001e30 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d003      	beq.n	8001e24 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001e1c:	e008      	b.n	8001e30 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
        break;
 8001e22:	e008      	b.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001e24:	2301      	movs	r3, #1
 8001e26:	607b      	str	r3, [r7, #4]
        break;
 8001e28:	e005      	b.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	607b      	str	r3, [r7, #4]
        break;
 8001e2e:	e002      	b.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
        break;
 8001e34:	bf00      	nop
    }
  }
  return systick_source;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e010 	.word	0xe000e010
 8001e48:	44020c00 	.word	0x44020c00

08001e4c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fe3a 	bl	8001acc <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0db      	b.n	800201c <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6e      	ldr	r2, [pc, #440]	@ (8002024 <HAL_DMA_Init+0x1d8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f000 809f 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	@ (8002028 <HAL_DMA_Init+0x1dc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f000 8099 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <HAL_DMA_Init+0x1e0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f000 8093 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a68      	ldr	r2, [pc, #416]	@ (8002030 <HAL_DMA_Init+0x1e4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f000 808d 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a66      	ldr	r2, [pc, #408]	@ (8002034 <HAL_DMA_Init+0x1e8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a64      	ldr	r2, [pc, #400]	@ (8002038 <HAL_DMA_Init+0x1ec>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 8081 	beq.w	8001fae <HAL_DMA_Init+0x162>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a62      	ldr	r2, [pc, #392]	@ (800203c <HAL_DMA_Init+0x1f0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d07b      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a61      	ldr	r2, [pc, #388]	@ (8002040 <HAL_DMA_Init+0x1f4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d076      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8002044 <HAL_DMA_Init+0x1f8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d071      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5e      	ldr	r2, [pc, #376]	@ (8002048 <HAL_DMA_Init+0x1fc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d06c      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800204c <HAL_DMA_Init+0x200>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d067      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8002050 <HAL_DMA_Init+0x204>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d062      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a59      	ldr	r2, [pc, #356]	@ (8002054 <HAL_DMA_Init+0x208>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d05d      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a58      	ldr	r2, [pc, #352]	@ (8002058 <HAL_DMA_Init+0x20c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a56      	ldr	r2, [pc, #344]	@ (800205c <HAL_DMA_Init+0x210>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d053      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a55      	ldr	r2, [pc, #340]	@ (8002060 <HAL_DMA_Init+0x214>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d04e      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a53      	ldr	r2, [pc, #332]	@ (8002064 <HAL_DMA_Init+0x218>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d049      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a52      	ldr	r2, [pc, #328]	@ (8002068 <HAL_DMA_Init+0x21c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d044      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a50      	ldr	r2, [pc, #320]	@ (800206c <HAL_DMA_Init+0x220>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d03f      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a4f      	ldr	r2, [pc, #316]	@ (8002070 <HAL_DMA_Init+0x224>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d03a      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002074 <HAL_DMA_Init+0x228>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d035      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a4c      	ldr	r2, [pc, #304]	@ (8002078 <HAL_DMA_Init+0x22c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d030      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	@ (800207c <HAL_DMA_Init+0x230>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a49      	ldr	r2, [pc, #292]	@ (8002080 <HAL_DMA_Init+0x234>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d026      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a47      	ldr	r2, [pc, #284]	@ (8002084 <HAL_DMA_Init+0x238>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d021      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a46      	ldr	r2, [pc, #280]	@ (8002088 <HAL_DMA_Init+0x23c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01c      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a44      	ldr	r2, [pc, #272]	@ (800208c <HAL_DMA_Init+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d017      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a43      	ldr	r2, [pc, #268]	@ (8002090 <HAL_DMA_Init+0x244>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d012      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a41      	ldr	r2, [pc, #260]	@ (8002094 <HAL_DMA_Init+0x248>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a40      	ldr	r2, [pc, #256]	@ (8002098 <HAL_DMA_Init+0x24c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3e      	ldr	r2, [pc, #248]	@ (800209c <HAL_DMA_Init+0x250>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_DMA_Init+0x162>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <HAL_DMA_Init+0x254>)
 8001fac:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0206 	orr.w	r2, r2, #6
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001fce:	e00f      	b.n	8001ff0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001fd0:	f7ff fd7c 	bl	8001acc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d908      	bls.n	8001ff0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e015      	b.n	800201c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e8      	bne.n	8001fd0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fb18 	bl	8002634 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020050 	.word	0x40020050
 8002028:	50020050 	.word	0x50020050
 800202c:	400200d0 	.word	0x400200d0
 8002030:	500200d0 	.word	0x500200d0
 8002034:	40020150 	.word	0x40020150
 8002038:	50020150 	.word	0x50020150
 800203c:	400201d0 	.word	0x400201d0
 8002040:	500201d0 	.word	0x500201d0
 8002044:	40020250 	.word	0x40020250
 8002048:	50020250 	.word	0x50020250
 800204c:	400202d0 	.word	0x400202d0
 8002050:	500202d0 	.word	0x500202d0
 8002054:	40020350 	.word	0x40020350
 8002058:	50020350 	.word	0x50020350
 800205c:	400203d0 	.word	0x400203d0
 8002060:	500203d0 	.word	0x500203d0
 8002064:	40021050 	.word	0x40021050
 8002068:	50021050 	.word	0x50021050
 800206c:	400210d0 	.word	0x400210d0
 8002070:	500210d0 	.word	0x500210d0
 8002074:	40021150 	.word	0x40021150
 8002078:	50021150 	.word	0x50021150
 800207c:	400211d0 	.word	0x400211d0
 8002080:	500211d0 	.word	0x500211d0
 8002084:	40021250 	.word	0x40021250
 8002088:	50021250 	.word	0x50021250
 800208c:	400212d0 	.word	0x400212d0
 8002090:	500212d0 	.word	0x500212d0
 8002094:	40021350 	.word	0x40021350
 8002098:	50021350 	.word	0x50021350
 800209c:	400213d0 	.word	0x400213d0
 80020a0:	500213d0 	.word	0x500213d0

080020a4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04f      	b.n	800215c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Start_IT+0x26>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e048      	b.n	800215c <HAL_DMA_Start_IT+0xb8>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d136      	bne.n	800214c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fa78 	bl	80025e8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002106:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002136:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e007      	b.n	800215c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800216c:	f7ff fcae 	bl	8001acc <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e06b      	b.n	8002254 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d008      	beq.n	800219a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e05c      	b.n	8002254 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021b2:	e020      	b.n	80021f6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021b4:	f7ff fc8a 	bl	8001acc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d919      	bls.n	80021f6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	2201      	movs	r2, #1
 80021e8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02e      	b.n	8002254 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0d7      	beq.n	80021b4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0202 	orr.w	r2, r2, #2
 8002212:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002224:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223e:	2201      	movs	r2, #1
 8002240:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e019      	b.n	80022a2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d004      	beq.n	8002284 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e00e      	b.n	80022a2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80022be:	f023 030f 	bic.w	r3, r3, #15
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	3b50      	subs	r3, #80	@ 0x50
 80022ce:	09db      	lsrs	r3, r3, #7
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2201      	movs	r2, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 813b 	beq.w	8002564 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d011      	beq.n	8002320 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002312:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232a:	2b00      	cmp	r3, #0
 800232c:	d011      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002344:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d011      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002376:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d011      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f043 0208 	orr.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023da:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04c      	beq.n	8002494 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d045      	beq.n	8002494 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002410:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b04      	cmp	r3, #4
 800241c:	d12e      	bne.n	800247c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800242c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0202 	orr.w	r2, r2, #2
 800243c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002456:	2201      	movs	r2, #1
 8002458:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07a      	beq.n	8002568 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }

        return;
 800247a:	e075      	b.n	8002568 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d039      	beq.n	8002516 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024dc:	2201      	movs	r2, #1
 80024de:	731a      	strb	r2, [r3, #12]
 80024e0:	e008      	b.n	80024f4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80024fc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	2b00      	cmp	r3, #0
 800251c:	d025      	beq.n	800256a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0202 	orr.w	r2, r2, #2
 800252c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002546:	2201      	movs	r2, #1
 8002548:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e002      	b.n	800256a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002568:	bf00      	nop
    }
  }
}
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e02b      	b.n	80025dc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800258c:	f023 030f 	bic.w	r3, r3, #15
 8002590:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	3b50      	subs	r3, #80	@ 0x50
 800259c:	09db      	lsrs	r3, r3, #7
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f003 0311 	and.w	r3, r3, #17
 80025ba:	2b11      	cmp	r3, #17
 80025bc:	d106      	bne.n	80025cc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	e006      	b.n	80025da <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b291      	uxth	r1, r2
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002614:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	430a      	orrs	r2, r1
 8002654:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a53      	ldr	r2, [pc, #332]	@ (80027c0 <DMA_Init+0x18c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f000 80a0 	beq.w	80027ba <DMA_Init+0x186>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a51      	ldr	r2, [pc, #324]	@ (80027c4 <DMA_Init+0x190>)
 8002680:	4293      	cmp	r3, r2
 8002682:	f000 809a 	beq.w	80027ba <DMA_Init+0x186>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4f      	ldr	r2, [pc, #316]	@ (80027c8 <DMA_Init+0x194>)
 800268c:	4293      	cmp	r3, r2
 800268e:	f000 8094 	beq.w	80027ba <DMA_Init+0x186>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4d      	ldr	r2, [pc, #308]	@ (80027cc <DMA_Init+0x198>)
 8002698:	4293      	cmp	r3, r2
 800269a:	f000 808e 	beq.w	80027ba <DMA_Init+0x186>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a4b      	ldr	r2, [pc, #300]	@ (80027d0 <DMA_Init+0x19c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	f000 8088 	beq.w	80027ba <DMA_Init+0x186>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a49      	ldr	r2, [pc, #292]	@ (80027d4 <DMA_Init+0x1a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	f000 8082 	beq.w	80027ba <DMA_Init+0x186>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <DMA_Init+0x1a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d07c      	beq.n	80027ba <DMA_Init+0x186>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a45      	ldr	r2, [pc, #276]	@ (80027dc <DMA_Init+0x1a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d077      	beq.n	80027ba <DMA_Init+0x186>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a44      	ldr	r2, [pc, #272]	@ (80027e0 <DMA_Init+0x1ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d072      	beq.n	80027ba <DMA_Init+0x186>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a42      	ldr	r2, [pc, #264]	@ (80027e4 <DMA_Init+0x1b0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d06d      	beq.n	80027ba <DMA_Init+0x186>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a41      	ldr	r2, [pc, #260]	@ (80027e8 <DMA_Init+0x1b4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d068      	beq.n	80027ba <DMA_Init+0x186>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3f      	ldr	r2, [pc, #252]	@ (80027ec <DMA_Init+0x1b8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d063      	beq.n	80027ba <DMA_Init+0x186>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3e      	ldr	r2, [pc, #248]	@ (80027f0 <DMA_Init+0x1bc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d05e      	beq.n	80027ba <DMA_Init+0x186>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	@ (80027f4 <DMA_Init+0x1c0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d059      	beq.n	80027ba <DMA_Init+0x186>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a3b      	ldr	r2, [pc, #236]	@ (80027f8 <DMA_Init+0x1c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d054      	beq.n	80027ba <DMA_Init+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a39      	ldr	r2, [pc, #228]	@ (80027fc <DMA_Init+0x1c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04f      	beq.n	80027ba <DMA_Init+0x186>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a38      	ldr	r2, [pc, #224]	@ (8002800 <DMA_Init+0x1cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d04a      	beq.n	80027ba <DMA_Init+0x186>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a36      	ldr	r2, [pc, #216]	@ (8002804 <DMA_Init+0x1d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d045      	beq.n	80027ba <DMA_Init+0x186>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a35      	ldr	r2, [pc, #212]	@ (8002808 <DMA_Init+0x1d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d040      	beq.n	80027ba <DMA_Init+0x186>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a33      	ldr	r2, [pc, #204]	@ (800280c <DMA_Init+0x1d8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d03b      	beq.n	80027ba <DMA_Init+0x186>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a32      	ldr	r2, [pc, #200]	@ (8002810 <DMA_Init+0x1dc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d036      	beq.n	80027ba <DMA_Init+0x186>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a30      	ldr	r2, [pc, #192]	@ (8002814 <DMA_Init+0x1e0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <DMA_Init+0x186>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <DMA_Init+0x1e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d02c      	beq.n	80027ba <DMA_Init+0x186>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2d      	ldr	r2, [pc, #180]	@ (800281c <DMA_Init+0x1e8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d027      	beq.n	80027ba <DMA_Init+0x186>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <DMA_Init+0x1ec>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <DMA_Init+0x186>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <DMA_Init+0x1f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01d      	beq.n	80027ba <DMA_Init+0x186>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <DMA_Init+0x1f4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <DMA_Init+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a27      	ldr	r2, [pc, #156]	@ (800282c <DMA_Init+0x1f8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <DMA_Init+0x186>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <DMA_Init+0x1fc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <DMA_Init+0x186>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a24      	ldr	r2, [pc, #144]	@ (8002834 <DMA_Init+0x200>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <DMA_Init+0x186>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <DMA_Init+0x204>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <DMA_Init+0x186>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a21      	ldr	r2, [pc, #132]	@ (800283c <DMA_Init+0x208>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d142      	bne.n	8002840 <DMA_Init+0x20c>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e041      	b.n	8002842 <DMA_Init+0x20e>
 80027be:	bf00      	nop
 80027c0:	40020050 	.word	0x40020050
 80027c4:	50020050 	.word	0x50020050
 80027c8:	400200d0 	.word	0x400200d0
 80027cc:	500200d0 	.word	0x500200d0
 80027d0:	40020150 	.word	0x40020150
 80027d4:	50020150 	.word	0x50020150
 80027d8:	400201d0 	.word	0x400201d0
 80027dc:	500201d0 	.word	0x500201d0
 80027e0:	40020250 	.word	0x40020250
 80027e4:	50020250 	.word	0x50020250
 80027e8:	400202d0 	.word	0x400202d0
 80027ec:	500202d0 	.word	0x500202d0
 80027f0:	40020350 	.word	0x40020350
 80027f4:	50020350 	.word	0x50020350
 80027f8:	400203d0 	.word	0x400203d0
 80027fc:	500203d0 	.word	0x500203d0
 8002800:	40021050 	.word	0x40021050
 8002804:	50021050 	.word	0x50021050
 8002808:	400210d0 	.word	0x400210d0
 800280c:	500210d0 	.word	0x500210d0
 8002810:	40021150 	.word	0x40021150
 8002814:	50021150 	.word	0x50021150
 8002818:	400211d0 	.word	0x400211d0
 800281c:	500211d0 	.word	0x500211d0
 8002820:	40021250 	.word	0x40021250
 8002824:	50021250 	.word	0x50021250
 8002828:	400212d0 	.word	0x400212d0
 800282c:	500212d0 	.word	0x500212d0
 8002830:	40021350 	.word	0x40021350
 8002834:	50021350 	.word	0x50021350
 8002838:	400213d0 	.word	0x400213d0
 800283c:	500213d0 	.word	0x500213d0
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	051b      	lsls	r3, r3, #20
 8002852:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002856:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	3b01      	subs	r3, #1
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002864:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	430a      	orrs	r2, r1
 800287e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289c:	f040 80b0 	bne.w	8002a00 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a84      	ldr	r2, [pc, #528]	@ (8002ab8 <DMA_Init+0x484>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f000 80a0 	beq.w	80029ec <DMA_Init+0x3b8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a82      	ldr	r2, [pc, #520]	@ (8002abc <DMA_Init+0x488>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f000 809a 	beq.w	80029ec <DMA_Init+0x3b8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a80      	ldr	r2, [pc, #512]	@ (8002ac0 <DMA_Init+0x48c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f000 8094 	beq.w	80029ec <DMA_Init+0x3b8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac4 <DMA_Init+0x490>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 808e 	beq.w	80029ec <DMA_Init+0x3b8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ac8 <DMA_Init+0x494>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f000 8088 	beq.w	80029ec <DMA_Init+0x3b8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7a      	ldr	r2, [pc, #488]	@ (8002acc <DMA_Init+0x498>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f000 8082 	beq.w	80029ec <DMA_Init+0x3b8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a78      	ldr	r2, [pc, #480]	@ (8002ad0 <DMA_Init+0x49c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d07c      	beq.n	80029ec <DMA_Init+0x3b8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a77      	ldr	r2, [pc, #476]	@ (8002ad4 <DMA_Init+0x4a0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d077      	beq.n	80029ec <DMA_Init+0x3b8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <DMA_Init+0x4a4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d072      	beq.n	80029ec <DMA_Init+0x3b8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a74      	ldr	r2, [pc, #464]	@ (8002adc <DMA_Init+0x4a8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d06d      	beq.n	80029ec <DMA_Init+0x3b8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a72      	ldr	r2, [pc, #456]	@ (8002ae0 <DMA_Init+0x4ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d068      	beq.n	80029ec <DMA_Init+0x3b8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a71      	ldr	r2, [pc, #452]	@ (8002ae4 <DMA_Init+0x4b0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d063      	beq.n	80029ec <DMA_Init+0x3b8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6f      	ldr	r2, [pc, #444]	@ (8002ae8 <DMA_Init+0x4b4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d05e      	beq.n	80029ec <DMA_Init+0x3b8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	@ (8002aec <DMA_Init+0x4b8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d059      	beq.n	80029ec <DMA_Init+0x3b8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6c      	ldr	r2, [pc, #432]	@ (8002af0 <DMA_Init+0x4bc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d054      	beq.n	80029ec <DMA_Init+0x3b8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6b      	ldr	r2, [pc, #428]	@ (8002af4 <DMA_Init+0x4c0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d04f      	beq.n	80029ec <DMA_Init+0x3b8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a69      	ldr	r2, [pc, #420]	@ (8002af8 <DMA_Init+0x4c4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d04a      	beq.n	80029ec <DMA_Init+0x3b8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a68      	ldr	r2, [pc, #416]	@ (8002afc <DMA_Init+0x4c8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d045      	beq.n	80029ec <DMA_Init+0x3b8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a66      	ldr	r2, [pc, #408]	@ (8002b00 <DMA_Init+0x4cc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d040      	beq.n	80029ec <DMA_Init+0x3b8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <DMA_Init+0x4d0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d03b      	beq.n	80029ec <DMA_Init+0x3b8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a63      	ldr	r2, [pc, #396]	@ (8002b08 <DMA_Init+0x4d4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d036      	beq.n	80029ec <DMA_Init+0x3b8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a62      	ldr	r2, [pc, #392]	@ (8002b0c <DMA_Init+0x4d8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d031      	beq.n	80029ec <DMA_Init+0x3b8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <DMA_Init+0x4dc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02c      	beq.n	80029ec <DMA_Init+0x3b8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5f      	ldr	r2, [pc, #380]	@ (8002b14 <DMA_Init+0x4e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d027      	beq.n	80029ec <DMA_Init+0x3b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <DMA_Init+0x4e4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d022      	beq.n	80029ec <DMA_Init+0x3b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <DMA_Init+0x4e8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01d      	beq.n	80029ec <DMA_Init+0x3b8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <DMA_Init+0x4ec>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d018      	beq.n	80029ec <DMA_Init+0x3b8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a59      	ldr	r2, [pc, #356]	@ (8002b24 <DMA_Init+0x4f0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <DMA_Init+0x3b8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <DMA_Init+0x4f4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <DMA_Init+0x3b8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <DMA_Init+0x4f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d009      	beq.n	80029ec <DMA_Init+0x3b8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a54      	ldr	r2, [pc, #336]	@ (8002b30 <DMA_Init+0x4fc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <DMA_Init+0x3b8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a53      	ldr	r2, [pc, #332]	@ (8002b34 <DMA_Init+0x500>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <DMA_Init+0x3bc>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <DMA_Init+0x3be>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e008      	b.n	8002a12 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a08:	d103      	bne.n	8002a12 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a10:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a22:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <DMA_Init+0x504>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2200      	movs	r2, #0
 8002a36:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <DMA_Init+0x4b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d022      	beq.n	8002a88 <DMA_Init+0x454>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a29      	ldr	r2, [pc, #164]	@ (8002aec <DMA_Init+0x4b8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d01d      	beq.n	8002a88 <DMA_Init+0x454>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <DMA_Init+0x4bc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <DMA_Init+0x454>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a26      	ldr	r2, [pc, #152]	@ (8002af4 <DMA_Init+0x4c0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <DMA_Init+0x454>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <DMA_Init+0x4f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <DMA_Init+0x454>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <DMA_Init+0x4f8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <DMA_Init+0x454>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2d      	ldr	r2, [pc, #180]	@ (8002b30 <DMA_Init+0x4fc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <DMA_Init+0x454>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2c      	ldr	r2, [pc, #176]	@ (8002b34 <DMA_Init+0x500>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <DMA_Init+0x458>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <DMA_Init+0x45a>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40020050 	.word	0x40020050
 8002abc:	50020050 	.word	0x50020050
 8002ac0:	400200d0 	.word	0x400200d0
 8002ac4:	500200d0 	.word	0x500200d0
 8002ac8:	40020150 	.word	0x40020150
 8002acc:	50020150 	.word	0x50020150
 8002ad0:	400201d0 	.word	0x400201d0
 8002ad4:	500201d0 	.word	0x500201d0
 8002ad8:	40020250 	.word	0x40020250
 8002adc:	50020250 	.word	0x50020250
 8002ae0:	400202d0 	.word	0x400202d0
 8002ae4:	500202d0 	.word	0x500202d0
 8002ae8:	40020350 	.word	0x40020350
 8002aec:	50020350 	.word	0x50020350
 8002af0:	400203d0 	.word	0x400203d0
 8002af4:	500203d0 	.word	0x500203d0
 8002af8:	40021050 	.word	0x40021050
 8002afc:	50021050 	.word	0x50021050
 8002b00:	400210d0 	.word	0x400210d0
 8002b04:	500210d0 	.word	0x500210d0
 8002b08:	40021150 	.word	0x40021150
 8002b0c:	50021150 	.word	0x50021150
 8002b10:	400211d0 	.word	0x400211d0
 8002b14:	500211d0 	.word	0x500211d0
 8002b18:	40021250 	.word	0x40021250
 8002b1c:	50021250 	.word	0x50021250
 8002b20:	400212d0 	.word	0x400212d0
 8002b24:	500212d0 	.word	0x500212d0
 8002b28:	40021350 	.word	0x40021350
 8002b2c:	50021350 	.word	0x50021350
 8002b30:	400213d0 	.word	0x400213d0
 8002b34:	500213d0 	.word	0x500213d0
 8002b38:	3cc02100 	.word	0x3cc02100

08002b3c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_DMAEx_List_Start_IT+0x16>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e082      	b.n	8002c5c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b5c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b68:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMAEx_List_Start_IT+0x40>
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d16a      	bne.n	8002c4c <HAL_DMAEx_List_Start_IT+0x110>
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d067      	beq.n	8002c4c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d157      	bne.n	8002c38 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_DMAEx_List_Start_IT+0x5a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e062      	b.n	8002c5c <HAL_DMAEx_List_Start_IT+0x120>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002baa:	2202      	movs	r2, #2
 8002bac:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002bca:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bfa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f107 010c 	add.w	r1, r7, #12
 8002c06:	2200      	movs	r2, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f82b 	bl	8002c64 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	0c0b      	lsrs	r3, r1, #16
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e007      	b.n	8002c5c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	@ 0x40
 8002c50:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00c      	beq.n	8002c96 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <DMA_List_GetCLLRNodeInfo+0x58>)
 8002c86:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00f      	beq.n	8002cae <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002c94:	e00b      	b.n	8002cae <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	@ (8002cc0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002ca0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2205      	movs	r2, #5
 8002cac:	601a      	str	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	fe010000 	.word	0xfe010000
 8002cc0:	f8010000 	.word	0xf8010000

08002cc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cd2:	e136      	b.n	8002f42 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8128 	beq.w	8002f3c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x38>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b12      	cmp	r3, #18
 8002cfa:	d125      	bne.n	8002d48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	6979      	ldr	r1, [r7, #20]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00b      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d90:	2b11      	cmp	r3, #17
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4013      	ands	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d017      	beq.n	8002e36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07c      	beq.n	8002f3c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e42:	4a47      	ldr	r2, [pc, #284]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3318      	adds	r3, #24
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0a9a      	lsrs	r2, r3, #10
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <HAL_GPIO_Init+0x2a0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f002 0203 	and.w	r2, r2, #3
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	4093      	lsls	r3, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e7e:	4938      	ldr	r1, [pc, #224]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3318      	adds	r3, #24
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002eda:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f06:	4a16      	ldr	r2, [pc, #88]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f aec1 	bne.w	8002cd4 <HAL_GPIO_Init+0x10>
  }
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	44022000 	.word	0x44022000
 8002f64:	002f7f7f 	.word	0x002f7f7f

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43d9      	mvns	r1, r3
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	400b      	ands	r3, r1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e007      	b.n	8002ffa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0204 	bic.w	r2, r3, #4
 8002ff2:	4905      	ldr	r1, [pc, #20]	@ (8003008 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40030400 	.word	0x40030400

0800300c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_ICACHE_Enable+0x1c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <HAL_ICACHE_Enable+0x1c>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40030400 	.word	0x40030400

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f000 bc28 	b.w	8003890 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f003 0318 	and.w	r3, r3, #24
 8003048:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800304a:	4b92      	ldr	r3, [pc, #584]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05b      	beq.n	8003118 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b18      	cmp	r3, #24
 800306a:	d114      	bne.n	8003096 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d111      	bne.n	8003096 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f000 bc08 	b.w	8003890 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003080:	4b84      	ldr	r3, [pc, #528]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	4981      	ldr	r1, [pc, #516]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003090:	4313      	orrs	r3, r2
 8003092:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800309e:	4b7d      	ldr	r3, [pc, #500]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fd0f 	bl	8001acc <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030b2:	f7fe fd0b 	bl	8001acc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e3e5      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030c4:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80030d0:	4b70      	ldr	r3, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	496d      	ldr	r1, [pc, #436]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	618b      	str	r3, [r1, #24]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fceb 	bl	8001acc <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030fa:	f7fe fce7 	bl	8001acc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e3c1      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800310c:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b10      	cmp	r3, #16
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x10c>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b18      	cmp	r3, #24
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8092 	bne.w	8003266 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e3a4      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x132>
 8003150:	4b50      	ldr	r3, [pc, #320]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4f      	ldr	r2, [pc, #316]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e058      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x160>
 8003166:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4a      	ldr	r2, [pc, #296]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b48      	ldr	r3, [pc, #288]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a47      	ldr	r2, [pc, #284]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003178:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a44      	ldr	r2, [pc, #272]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003184:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e041      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x190>
 8003196:	4b3f      	ldr	r3, [pc, #252]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3e      	ldr	r2, [pc, #248]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800319c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80031c4:	d112      	bne.n	80031ec <HAL_RCC_OscConfig+0x1c0>
 80031c6:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a32      	ldr	r2, [pc, #200]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e011      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a28      	ldr	r2, [pc, #160]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800320a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fc58 	bl	8001acc <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003220:	f7fe fc54 	bl	8001acc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e32e      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003232:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x1f4>
 800323e:	e012      	b.n	8003266 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fc44 	bl	8001acc <HAL_GetTick>
 8003244:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003248:	f7fe fc40 	bl	8001acc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e31a      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_RCC_OscConfig+0x268>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 809a 	beq.w	80033a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x25a>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b18      	cmp	r3, #24
 800327e:	d149      	bne.n	8003314 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d146      	bne.n	8003314 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e2fe      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
 8003292:	bf00      	nop
 8003294:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800329e:	4b9a      	ldr	r3, [pc, #616]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0218 	and.w	r2, r3, #24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d014      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80032ae:	4b96      	ldr	r3, [pc, #600]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0218 	bic.w	r2, r3, #24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4993      	ldr	r1, [pc, #588]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80032c0:	f000 fdd0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032c4:	4b91      	ldr	r3, [pc, #580]	@ (800350c <HAL_RCC_OscConfig+0x4e0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fb75 	bl	80019b8 <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e2db      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fbf8 	bl	8001acc <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032e0:	f7fe fbf4 	bl	8001acc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e2ce      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f2:	4b85      	ldr	r3, [pc, #532]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032fe:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	497e      	ldr	r1, [pc, #504]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003312:	e049      	b.n	80033a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02c      	beq.n	8003376 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800331c:	4b7a      	ldr	r3, [pc, #488]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0218 	bic.w	r2, r3, #24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4977      	ldr	r1, [pc, #476]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a75      	ldr	r2, [pc, #468]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fbc7 	bl	8001acc <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003342:	f7fe fbc3 	bl	8001acc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e29d      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b6c      	ldr	r3, [pc, #432]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003360:	4b69      	ldr	r3, [pc, #420]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	4966      	ldr	r1, [pc, #408]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	610b      	str	r3, [r1, #16]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b64      	ldr	r3, [pc, #400]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a63      	ldr	r2, [pc, #396]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fba3 	bl	8001acc <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800338a:	f7fe fb9f 	bl	8001acc <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e279      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b5a      	ldr	r3, [pc, #360]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b52      	ldr	r3, [pc, #328]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c2:	4a51      	ldr	r2, [pc, #324]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fb7e 	bl	8001acc <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033d4:	f7fe fb7a 	bl	8001acc <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e254      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033e6:	4b48      	ldr	r3, [pc, #288]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3a8>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b44      	ldr	r3, [pc, #272]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033fc:	4a42      	ldr	r2, [pc, #264]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe fb61 	bl	8001acc <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800340e:	f7fe fb5d 	bl	8001acc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e237      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80d2 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800343c:	4b34      	ldr	r3, [pc, #208]	@ (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003448:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003454:	f7fe fb3a 	bl	8001acc <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7fe fb36 	bl	8001acc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e210      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HAL_RCC_OscConfig+0x4e4>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_RCC_OscConfig+0x468>
 8003482:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003492:	e074      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_RCC_OscConfig+0x4a2>
 800349c:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800349e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a2:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ac:	4b16      	ldr	r3, [pc, #88]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b2:	4a15      	ldr	r2, [pc, #84]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c2:	4a11      	ldr	r2, [pc, #68]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034cc:	e057      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d11e      	bne.n	8003514 <HAL_RCC_OscConfig+0x4e8>
 80034d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ec:	4a06      	ldr	r2, [pc, #24]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f6:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034fc:	4a02      	ldr	r2, [pc, #8]	@ (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 8003508:	44020c00 	.word	0x44020c00
 800350c:	20000004 	.word	0x20000004
 8003510:	44020800 	.word	0x44020800
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b85      	cmp	r3, #133	@ 0x85
 800351a:	d118      	bne.n	800354e <HAL_RCC_OscConfig+0x522>
 800351c:	4ba2      	ldr	r3, [pc, #648]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800351e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003522:	4aa1      	ldr	r2, [pc, #644]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800352c:	4b9e      	ldr	r3, [pc, #632]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800352e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003532:	4a9d      	ldr	r2, [pc, #628]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003538:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800353c:	4b9a      	ldr	r3, [pc, #616]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003542:	4a99      	ldr	r2, [pc, #612]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800354c:	e017      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 800354e:	4b96      	ldr	r3, [pc, #600]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003554:	4a94      	ldr	r2, [pc, #592]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800355e:	4b92      	ldr	r3, [pc, #584]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003564:	4a90      	ldr	r2, [pc, #576]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800356e:	4b8e      	ldr	r3, [pc, #568]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003574:	4a8c      	ldr	r2, [pc, #560]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800357a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe faa1 	bl	8001acc <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fa9d 	bl	8001acc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e175      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a4:	4b80      	ldr	r3, [pc, #512]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ed      	beq.n	800358e <HAL_RCC_OscConfig+0x562>
 80035b2:	e015      	b.n	80035e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fe fa8a 	bl	8001acc <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fa86 	bl	8001acc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e15e      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d2:	4b75      	ldr	r3, [pc, #468]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ed      	bne.n	80035bc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d036      	beq.n	800365a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d019      	beq.n	8003628 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f4:	4b6c      	ldr	r3, [pc, #432]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6b      	ldr	r2, [pc, #428]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe fa64 	bl	8001acc <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003608:	f7fe fa60 	bl	8001acc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e13a      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800361a:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x5dc>
 8003626:	e018      	b.n	800365a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003628:	4b5f      	ldr	r3, [pc, #380]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5e      	ldr	r2, [pc, #376]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800362e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fa4a 	bl	8001acc <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800363c:	f7fe fa46 	bl	8001acc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e120      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800364e:	4b56      	ldr	r3, [pc, #344]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8115 	beq.w	800388e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b18      	cmp	r3, #24
 8003668:	f000 80af 	beq.w	80037ca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 8086 	bne.w	8003782 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003676:	4b4c      	ldr	r3, [pc, #304]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4b      	ldr	r2, [pc, #300]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800367c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe fa23 	bl	8001acc <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800368a:	f7fe fa1f 	bl	8001acc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0f9      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800369c:	4b42      	ldr	r3, [pc, #264]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80036a8:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036bc:	0212      	lsls	r2, r2, #8
 80036be:	430a      	orrs	r2, r1
 80036c0:	4939      	ldr	r1, [pc, #228]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	3b01      	subs	r3, #1
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	b29b      	uxth	r3, r3
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	3b01      	subs	r3, #1
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	3b01      	subs	r3, #1
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036f6:	492c      	ldr	r1, [pc, #176]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80036fc:	4b2a      	ldr	r3, [pc, #168]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	4a29      	ldr	r2, [pc, #164]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370c:	4a26      	ldr	r2, [pc, #152]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003712:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003718:	f043 0310 	orr.w	r3, r3, #16
 800371c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	f023 020c 	bic.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	491f      	ldr	r1, [pc, #124]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003730:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	f023 0220 	bic.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373c:	491a      	ldr	r1, [pc, #104]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003742:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800374e:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe f9b7 	bl	8001acc <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003762:	f7fe f9b3 	bl	8001acc <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e08d      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x736>
 8003780:	e085      	b.n	800388e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800378c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fe f99d 	bl	8001acc <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003796:	f7fe f999 	bl	8001acc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d903      	bls.n	80037ac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e073      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
 80037a8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80037b8:	4b37      	ldr	r3, [pc, #220]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	4a36      	ldr	r2, [pc, #216]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037be:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	6293      	str	r3, [r2, #40]	@ 0x28
 80037c8:	e061      	b.n	800388e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80037ca:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d031      	beq.n	8003842 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d12a      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d122      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d11a      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003818:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d111      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d108      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0e1b      	lsrs	r3, r3, #24
 8003834:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e024      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003846:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003854:	429a      	cmp	r2, r3
 8003856:	d01a      	beq.n	800388e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	4a0e      	ldr	r2, [pc, #56]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe f932 	bl	8001acc <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800386a:	bf00      	nop
 800386c:	f7fe f92e 	bl	8001acc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4293      	cmp	r3, r2
 8003876:	d0f9      	beq.n	800386c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	4a06      	ldr	r2, [pc, #24]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003882:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003888:	f043 0310 	orr.w	r3, r3, #16
 800388c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	44020c00 	.word	0x44020c00

0800389c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e19e      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b83      	ldr	r3, [pc, #524]	@ (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d910      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b80      	ldr	r3, [pc, #512]	@ (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 020f 	bic.w	r2, r3, #15
 80038c6:	497e      	ldr	r1, [pc, #504]	@ (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e186      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	4b74      	ldr	r3, [pc, #464]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d909      	bls.n	8003912 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038fe:	4b71      	ldr	r3, [pc, #452]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	496d      	ldr	r1, [pc, #436]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800390e:	4313      	orrs	r3, r2
 8003910:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	4b68      	ldr	r3, [pc, #416]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800392c:	429a      	cmp	r2, r3
 800392e:	d909      	bls.n	8003944 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003930:	4b64      	ldr	r3, [pc, #400]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4961      	ldr	r1, [pc, #388]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800395c:	429a      	cmp	r2, r3
 800395e:	d908      	bls.n	8003972 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003960:	4b58      	ldr	r3, [pc, #352]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4955      	ldr	r1, [pc, #340]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800396e:	4313      	orrs	r3, r2
 8003970:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b50      	ldr	r3, [pc, #320]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	429a      	cmp	r2, r3
 800398c:	d908      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800398e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	494a      	ldr	r1, [pc, #296]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800399c:	4313      	orrs	r3, r2
 800399e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8093 	beq.w	8003ad4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80039b6:	4b43      	ldr	r3, [pc, #268]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e113      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e107      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039e6:	4b37      	ldr	r3, [pc, #220]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0fb      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f6:	4b33      	ldr	r3, [pc, #204]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0f3      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003a06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	492c      	ldr	r1, [pc, #176]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe f858 	bl	8001acc <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d112      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fe f850 	bl	8001acc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0d7      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0318 	and.w	r3, r3, #24
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	d1ee      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18c>
 8003a4a:	e043      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d112      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a56:	f7fe f839 	bl	8001acc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0c0      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 0318 	and.w	r3, r3, #24
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d1ee      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1ba>
 8003a78:	e02c      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d122      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe f822 	bl	8001acc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0a9      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0318 	and.w	r3, r3, #24
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d1ee      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1e8>
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe f810 	bl	8001acc <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d906      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e097      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
 8003abe:	bf00      	nop
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0318 	and.w	r3, r3, #24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e9      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4b44      	ldr	r3, [pc, #272]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003af0:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 020f 	bic.w	r2, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	493e      	ldr	r1, [pc, #248]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d210      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 020f 	bic.w	r2, r3, #15
 8003b18:	4938      	ldr	r1, [pc, #224]	@ (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b20:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e05d      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d208      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4927      	ldr	r1, [pc, #156]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	4b21      	ldr	r3, [pc, #132]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d209      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	491a      	ldr	r1, [pc, #104]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d209      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003bc4:	f000 f822 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490b      	ldr	r1, [pc, #44]	@ (8003c00 <HAL_RCC_ClockConfig+0x364>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <HAL_RCC_ClockConfig+0x368>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <HAL_RCC_ClockConfig+0x36c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fee8 	bl	80019b8 <HAL_InitTick>
 8003be8:	4603      	mov	r3, r0
 8003bea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003bec:	7afb      	ldrb	r3, [r7, #11]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	44020c00 	.word	0x44020c00
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	0800a488 	.word	0x0800a488
 8003c04:	20000000 	.word	0x20000000
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	@ 0x24
 8003c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c12:	4b8c      	ldr	r3, [pc, #560]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0318 	and.w	r3, r3, #24
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e107      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c24:	4b87      	ldr	r3, [pc, #540]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 0318 	and.w	r3, r3, #24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d112      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c30:	4b84      	ldr	r3, [pc, #528]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c3c:	4b81      	ldr	r3, [pc, #516]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a81      	ldr	r2, [pc, #516]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e0f1      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003c50:	4b7e      	ldr	r3, [pc, #504]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e0ee      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c56:	4b7b      	ldr	r3, [pc, #492]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0318 	and.w	r3, r3, #24
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d102      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c62:	4b7b      	ldr	r3, [pc, #492]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x244>)
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e0e5      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	4b76      	ldr	r3, [pc, #472]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0318 	and.w	r3, r3, #24
 8003c70:	2b18      	cmp	r3, #24
 8003c72:	f040 80dd 	bne.w	8003e30 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c76:	4b73      	ldr	r3, [pc, #460]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c80:	4b70      	ldr	r3, [pc, #448]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c98:	4b6a      	ldr	r3, [pc, #424]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80b7 	beq.w	8003e2a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0xbe>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d056      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x16a>
 8003cc8:	e077      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003cca:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d00:	4b50      	ldr	r3, [pc, #320]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d14:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003d30:	e065      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003e58 <HAL_RCC_GetSysClockFreq+0x24c>
 8003d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d44:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d54:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d58:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d74:	e043      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d80:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003e5c <HAL_RCC_GetSysClockFreq+0x250>
 8003d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d88:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003db8:	e021      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e60 <HAL_RCC_GetSysClockFreq+0x254>
 8003dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003de0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003dfc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e08:	3301      	adds	r3, #1
 8003e0a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e16:	edd7 6a06 	vldr	s13, [r7, #24]
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	ee17 3a90 	vmov	r3, s15
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e004      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e001      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e32:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	44020c00 	.word	0x44020c00
 8003e48:	003d0900 	.word	0x003d0900
 8003e4c:	03d09000 	.word	0x03d09000
 8003e50:	007a1200 	.word	0x007a1200
 8003e54:	46000000 	.word	0x46000000
 8003e58:	4c742400 	.word	0x4c742400
 8003e5c:	4af42400 	.word	0x4af42400
 8003e60:	4a742400 	.word	0x4a742400

08003e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e68:	f7ff fed0 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e72:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e76:	4907      	ldr	r1, [pc, #28]	@ (8003e94 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e7a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e82:	4a05      	ldr	r2, [pc, #20]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e84:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003e86:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e88:	681b      	ldr	r3, [r3, #0]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	44020c00 	.word	0x44020c00
 8003e94:	0800a488 	.word	0x0800a488
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003ea0:	f7ff ffe0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	44020c00 	.word	0x44020c00
 8003ec4:	0800a498 	.word	0x0800a498

08003ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003ecc:	f7ff ffca 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4904      	ldr	r1, [pc, #16]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	44020c00 	.word	0x44020c00
 8003ef0:	0800a498 	.word	0x0800a498

08003ef4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ef8:	f7ff ffb4 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	0b1b      	lsrs	r3, r3, #12
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4904      	ldr	r1, [pc, #16]	@ (8003f1c <HAL_RCC_GetPCLK3Freq+0x28>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	44020c00 	.word	0x44020c00
 8003f1c:	0800a498 	.word	0x0800a498

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b0ba      	sub	sp, #232	@ 0xe8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003f44:	2500      	movs	r5, #0
 8003f46:	ea54 0305 	orrs.w	r3, r4, r5
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003f4c:	4bcd      	ldr	r3, [pc, #820]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f52:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	4ac9      	ldr	r2, [pc, #804]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f002 0801 	and.w	r8, r2, #1
 8003f70:	f04f 0900 	mov.w	r9, #0
 8003f74:	ea58 0309 	orrs.w	r3, r8, r9
 8003f78:	d042      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d823      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003f84:	a201      	add	r2, pc, #4	@ (adr r2, 8003f8c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fd5 	.word	0x08003fd5
 8003f90:	08003fa5 	.word	0x08003fa5
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fd5 	.word	0x08003fd5
 8003f9c:	08003fd5 	.word	0x08003fd5
 8003fa0:	08003fd5 	.word	0x08003fd5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa8:	3308      	adds	r3, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 f90c 	bl	80071c8 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003fb6:	e00e      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fbc:	3330      	adds	r3, #48	@ 0x30
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 f99a 	bl	80072f8 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003fde:	4ba9      	ldr	r3, [pc, #676]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fe4:	f023 0107 	bic.w	r1, r3, #7
 8003fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	4aa5      	ldr	r2, [pc, #660]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ff6:	e003      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ffc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 0a02 	and.w	sl, r2, #2
 800400c:	f04f 0b00 	mov.w	fp, #0
 8004010:	ea5a 030b 	orrs.w	r3, sl, fp
 8004014:	f000 8088 	beq.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	2b28      	cmp	r3, #40	@ 0x28
 8004020:	d868      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004022:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	080040fd 	.word	0x080040fd
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040f5 	.word	0x080040f5
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040cd 	.word	0x080040cd
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040f5 	.word	0x080040f5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040e1 	.word	0x080040e1
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040f5 	.word	0x080040f5
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040fd 	.word	0x080040fd
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080040f5 	.word	0x080040f5
 80040c8:	080040fd 	.word	0x080040fd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d0:	3308      	adds	r3, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 f878 	bl	80071c8 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80040de:	e00e      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040e4:	3330      	adds	r3, #48	@ 0x30
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 f906 	bl	80072f8 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004106:	4b5f      	ldr	r3, [pc, #380]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800410c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	4a5b      	ldr	r2, [pc, #364]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004118:	430b      	orrs	r3, r1
 800411a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004124:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0304 	and.w	r3, r2, #4
 8004134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800413e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d04e      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800414e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004152:	d02c      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004154:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004158:	d825      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800415a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800415e:	d028      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004164:	d81f      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004166:	2bc0      	cmp	r3, #192	@ 0xc0
 8004168:	d025      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800416a:	2bc0      	cmp	r3, #192	@ 0xc0
 800416c:	d81b      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	d00f      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004172:	2b80      	cmp	r3, #128	@ 0x80
 8004174:	d817      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01f      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d113      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004182:	3308      	adds	r3, #8
 8004184:	4618      	mov	r0, r3
 8004186:	f003 f81f 	bl	80071c8 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004190:	e014      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	3330      	adds	r3, #48	@ 0x30
 8004198:	4618      	mov	r0, r3
 800419a:	f003 f8ad 	bl	80072f8 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80041a4:	e00a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10c      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80041c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041ca:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f002 0308 	and.w	r3, r2, #8
 80041f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d056      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800420a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004210:	d031      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004212:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004216:	d82a      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421c:	d02d      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004222:	d824      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004224:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004228:	d029      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800422a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800422e:	d81e      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004234:	d011      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	d818      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004244:	d113      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424a:	3308      	adds	r3, #8
 800424c:	4618      	mov	r0, r3
 800424e:	f002 ffbb 	bl	80071c8 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004258:	e017      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425e:	3330      	adds	r3, #48	@ 0x30
 8004260:	4618      	mov	r0, r3
 8004262:	f003 f849 	bl	80072f8 <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800426c:	e00d      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004274:	e009      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004276:	bf00      	nop
 8004278:	e007      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800427a:	bf00      	nop
 800427c:	e005      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800427e:	bf00      	nop
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004282:	bf00      	nop
 8004284:	44020c00 	.word	0x44020c00
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004292:	4bb9      	ldr	r3, [pc, #740]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004298:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800429c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a2:	4ab5      	ldr	r2, [pc, #724]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 0310 	and.w	r3, r2, #16
 80042c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80042ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d053      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80042d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042de:	d031      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042e4:	d82a      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ea:	d02d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042f0:	d824      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042f6:	d029      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80042f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042fc:	d81e      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004302:	d011      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004308:	d818      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d020      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004312:	d113      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004318:	3308      	adds	r3, #8
 800431a:	4618      	mov	r0, r3
 800431c:	f002 ff54 	bl	80071c8 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004326:	e014      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800432c:	3330      	adds	r3, #48	@ 0x30
 800432e:	4618      	mov	r0, r3
 8004330:	f002 ffe2 	bl	80072f8 <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800433a:	e00a      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004342:	e006      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004344:	bf00      	nop
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004348:	bf00      	nop
 800434a:	e002      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800435a:	4b87      	ldr	r3, [pc, #540]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800435c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004360:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436a:	4a83      	ldr	r2, [pc, #524]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800436c:	430b      	orrs	r3, r1
 800436e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004372:	e003      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004378:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800437c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 0320 	and.w	r3, r2, #32
 8004388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004392:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d053      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800439c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80043a6:	d031      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80043a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80043ac:	d82a      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b2:	d02d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b8:	d824      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043ba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80043be:	d029      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80043c0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80043c4:	d81e      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ca:	d011      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d818      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80043d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043da:	d113      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e0:	3308      	adds	r3, #8
 80043e2:	4618      	mov	r0, r3
 80043e4:	f002 fef0 	bl	80071c8 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80043ee:	e014      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f4:	3330      	adds	r3, #48	@ 0x30
 80043f6:	4618      	mov	r0, r3
 80043f8:	f002 ff7e 	bl	80072f8 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004402:	e00a      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800440a:	e006      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800440c:	bf00      	nop
 800440e:	e004      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004422:	4b55      	ldr	r3, [pc, #340]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004428:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800442c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a51      	ldr	r2, [pc, #324]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004434:	430b      	orrs	r3, r1
 8004436:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004440:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800445a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d053      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800446e:	d031      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004470:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004474:	d82a      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800447a:	d02d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800447c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004480:	d824      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004482:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004486:	d029      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004488:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800448c:	d81e      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800448e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004492:	d011      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004498:	d818      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800449e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044a2:	d113      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044a8:	3308      	adds	r3, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 fe8c 	bl	80071c8 <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80044b6:	e014      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044bc:	3330      	adds	r3, #48	@ 0x30
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 ff1a 	bl	80072f8 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80044ca:	e00a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044d2:	e006      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044d4:	bf00      	nop
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044d8:	bf00      	nop
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80044ea:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004508:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004518:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004522:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d03d      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800452c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004532:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004536:	d01b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004538:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800453c:	d814      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800453e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004542:	d017      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004548:	d80e      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d109      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004558:	3330      	adds	r3, #48	@ 0x30
 800455a:	4618      	mov	r0, r3
 800455c:	f002 fecc 	bl	80072f8 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800456e:	e006      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004570:	bf00      	nop
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004578:	44020c00 	.word	0x44020c00
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004586:	4b99      	ldr	r3, [pc, #612]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004588:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800458c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004596:	4a95      	ldr	r2, [pc, #596]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004598:	430b      	orrs	r3, r1
 800459a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d03b      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80045c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045d2:	d01b      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80045d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045d8:	d814      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80045da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045de:	d017      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80045e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045e4:	d80e      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80045ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045ee:	d109      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f4:	3330      	adds	r3, #48	@ 0x30
 80045f6:	4618      	mov	r0, r3
 80045f8:	f002 fe7e 	bl	80072f8 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800461e:	4b73      	ldr	r3, [pc, #460]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004624:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800462c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800462e:	4a6f      	ldr	r2, [pc, #444]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004630:	430b      	orrs	r3, r1
 8004632:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800463c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800464c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004656:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d03d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004668:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800466c:	d01b      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800466e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004672:	d814      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004674:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004678:	d017      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800467a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800467e:	d80e      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d014      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004688:	d109      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800468a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468e:	3330      	adds	r3, #48	@ 0x30
 8004690:	4618      	mov	r0, r3
 8004692:	f002 fe31 	bl	80072f8 <RCCEx_PLL3_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80046b8:	4b4c      	ldr	r3, [pc, #304]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ca:	4a48      	ldr	r2, [pc, #288]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046d2:	e003      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80046dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80046e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d035      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80046fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004708:	d015      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800470a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800470e:	d80e      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004718:	d109      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800471a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800471e:	3330      	adds	r3, #48	@ 0x30
 8004720:	4618      	mov	r0, r3
 8004722:	f002 fde9 	bl	80072f8 <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800472c:	e006      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004734:	e002      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800473a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004744:	4b29      	ldr	r3, [pc, #164]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800474a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	4a25      	ldr	r2, [pc, #148]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004758:	430b      	orrs	r3, r1
 800475a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004764:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	2100      	movs	r1, #0
 8004772:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800477a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800477e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d037      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004794:	d015      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800479a:	d80e      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d012      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047a4:	d109      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	3330      	adds	r3, #48	@ 0x30
 80047ac:	4618      	mov	r0, r3
 80047ae:	f002 fda3 	bl	80072f8 <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80047b8:	e006      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80047c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	4a02      	ldr	r2, [pc, #8]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047ea:	e005      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80047ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	2100      	movs	r1, #0
 8004802:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800480a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004814:	4bb8      	ldr	r3, [pc, #736]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4ab7      	ldr	r2, [pc, #732]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800481a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800481e:	61d3      	str	r3, [r2, #28]
 8004820:	4bb5      	ldr	r3, [pc, #724]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004822:	69d9      	ldr	r1, [r3, #28]
 8004824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004828:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800482c:	4ab2      	ldr	r2, [pc, #712]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800482e:	430b      	orrs	r3, r1
 8004830:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800483e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004840:	2300      	movs	r3, #0
 8004842:	677b      	str	r3, [r7, #116]	@ 0x74
 8004844:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004848:	460b      	mov	r3, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	d055      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800484e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004856:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800485a:	d031      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800485c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004860:	d82a      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d02d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486c:	d824      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800486e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004872:	d029      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004874:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004878:	d81e      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800487a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487e:	d011      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004884:	d818      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d020      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800488a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488e:	d113      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004894:	3308      	adds	r3, #8
 8004896:	4618      	mov	r0, r3
 8004898:	f002 fc96 	bl	80071c8 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80048a2:	e014      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a8:	3330      	adds	r3, #48	@ 0x30
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 fd24 	bl	80072f8 <RCCEx_PLL3_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80048b6:	e00a      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048be:	e006      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80048c0:	bf00      	nop
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80048c4:	bf00      	nop
 80048c6:	e002      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80048d6:	4b88      	ldr	r3, [pc, #544]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80048e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048e8:	4a83      	ldr	r2, [pc, #524]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004908:	2300      	movs	r3, #0
 800490a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800490c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d055      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004922:	d031      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004924:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004928:	d82a      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800492a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492e:	d02d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004934:	d824      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004936:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800493a:	d029      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800493c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004940:	d81e      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004946:	d011      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494c:	d818      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004956:	d113      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495c:	3308      	adds	r3, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f002 fc32 	bl	80071c8 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800496a:	e014      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800496c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004970:	3330      	adds	r3, #48	@ 0x30
 8004972:	4618      	mov	r0, r3
 8004974:	f002 fcc0 	bl	80072f8 <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800497e:	e00a      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004986:	e006      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004988:	bf00      	nop
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004996:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800499e:	4b56      	ldr	r3, [pc, #344]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80049a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	4a51      	ldr	r2, [pc, #324]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80049c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80049d0:	2300      	movs	r3, #0
 80049d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d032      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80049de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d80f      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d211      	bcs.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d911      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d109      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049fa:	3308      	adds	r3, #8
 80049fc:	4618      	mov	r0, r3
 80049fe:	f002 fbe3 	bl	80071c8 <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004a20:	4b35      	ldr	r3, [pc, #212]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a26:	f023 0107 	bic.w	r1, r3, #7
 8004a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a32:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a3a:	e003      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a40:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d024      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004a86:	4b1c      	ldr	r3, [pc, #112]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a8c:	f023 0108 	bic.w	r1, r3, #8
 8004a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a98:	4a17      	ldr	r2, [pc, #92]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004aa6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab8:	2300      	movs	r3, #0
 8004aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004abc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f000 80b9 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	4a0b      	ldr	r2, [pc, #44]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fffa 	bl	8001acc <HAL_GetTick>
 8004ad8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004adc:	e010      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ade:	f7fc fff5 	bl	8001acc <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d908      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004af4:	e00a      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004af6:	bf00      	nop
 8004af8:	44020c00 	.word	0x44020c00
 8004afc:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b00:	4bba      	ldr	r3, [pc, #744]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0e8      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004b0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 808e 	bne.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b16:	4bb6      	ldr	r3, [pc, #728]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d023      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b3c:	4bac      	ldr	r3, [pc, #688]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b4a:	4ba9      	ldr	r3, [pc, #676]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b50:	4aa7      	ldr	r2, [pc, #668]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5a:	4ba5      	ldr	r3, [pc, #660]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b60:	4aa3      	ldr	r2, [pc, #652]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b6a:	4aa1      	ldr	r2, [pc, #644]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fc ffa4 	bl	8001acc <HAL_GetTick>
 8004b84:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b88:	e00d      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fc ff9f 	bl	8001acc <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b94:	1ad2      	subs	r2, r2, r3
 8004b96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d903      	bls.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004ba4:	e006      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba6:	4b92      	ldr	r3, [pc, #584]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ea      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004bb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d135      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bcc:	d110      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004bce:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004be4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004be8:	4a81      	ldr	r2, [pc, #516]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bea:	430b      	orrs	r3, r1
 8004bec:	61d3      	str	r3, [r2, #28]
 8004bee:	e005      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	4a7e      	ldr	r2, [pc, #504]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bf6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bfa:	61d3      	str	r3, [r2, #28]
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c02:	4a7b      	ldr	r2, [pc, #492]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c0c:	4b78      	ldr	r3, [pc, #480]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c0e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1e:	4a74      	ldr	r2, [pc, #464]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c26:	e008      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c2c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004c30:	e003      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c36:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c48:	2300      	movs	r3, #0
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d035      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c5e:	2b30      	cmp	r3, #48	@ 0x30
 8004c60:	d014      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004c62:	2b30      	cmp	r3, #48	@ 0x30
 8004c64:	d80e      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d012      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d80a      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c76:	4b5e      	ldr	r3, [pc, #376]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c80:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004c9e:	4b54      	ldr	r3, [pc, #336]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ca4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cbe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d033      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d007      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004cee:	e010      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cfc:	e00d      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d02:	3308      	adds	r3, #8
 8004d04:	4618      	mov	r0, r3
 8004d06:	f002 fa5f 	bl	80071c8 <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004d10:	e003      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004d22:	4b33      	ldr	r3, [pc, #204]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d28:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d34:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d42:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d04c      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d827      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d89 	.word	0x08004d89
 8004d78:	08004d97 	.word	0x08004d97
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004dc7 	.word	0x08004dc7
 8004d84:	08004dc7 	.word	0x08004dc7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d88:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004d94:	e018      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f002 fa13 	bl	80071c8 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004da8:	e00e      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dae:	3330      	adds	r3, #48	@ 0x30
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 faa1 	bl	80072f8 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d111      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004dd0:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dd6:	f023 0107 	bic.w	r1, r3, #7
 8004dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004de2:	4a03      	ldr	r2, [pc, #12]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dea:	e007      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8004dec:	44020800 	.word	0x44020800
 8004df0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004df8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e12:	460b      	mov	r3, r1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f000 8081 	beq.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d85f      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004e26:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004eb1 	.word	0x08004eb1
 8004e30:	08004ee7 	.word	0x08004ee7
 8004e34:	08004ee7 	.word	0x08004ee7
 8004e38:	08004ee7 	.word	0x08004ee7
 8004e3c:	08004ee7 	.word	0x08004ee7
 8004e40:	08004ee7 	.word	0x08004ee7
 8004e44:	08004ee7 	.word	0x08004ee7
 8004e48:	08004ee7 	.word	0x08004ee7
 8004e4c:	08004ebf 	.word	0x08004ebf
 8004e50:	08004ee7 	.word	0x08004ee7
 8004e54:	08004ee7 	.word	0x08004ee7
 8004e58:	08004ee7 	.word	0x08004ee7
 8004e5c:	08004ee7 	.word	0x08004ee7
 8004e60:	08004ee7 	.word	0x08004ee7
 8004e64:	08004ee7 	.word	0x08004ee7
 8004e68:	08004ee7 	.word	0x08004ee7
 8004e6c:	08004ed3 	.word	0x08004ed3
 8004e70:	08004ee7 	.word	0x08004ee7
 8004e74:	08004ee7 	.word	0x08004ee7
 8004e78:	08004ee7 	.word	0x08004ee7
 8004e7c:	08004ee7 	.word	0x08004ee7
 8004e80:	08004ee7 	.word	0x08004ee7
 8004e84:	08004ee7 	.word	0x08004ee7
 8004e88:	08004ee7 	.word	0x08004ee7
 8004e8c:	08004eef 	.word	0x08004eef
 8004e90:	08004ee7 	.word	0x08004ee7
 8004e94:	08004ee7 	.word	0x08004ee7
 8004e98:	08004ee7 	.word	0x08004ee7
 8004e9c:	08004ee7 	.word	0x08004ee7
 8004ea0:	08004ee7 	.word	0x08004ee7
 8004ea4:	08004ee7 	.word	0x08004ee7
 8004ea8:	08004ee7 	.word	0x08004ee7
 8004eac:	08004eef 	.word	0x08004eef
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	4ab8      	ldr	r2, [pc, #736]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e018      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 f97f 	bl	80071c8 <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	3330      	adds	r3, #48	@ 0x30
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fa0d 	bl	80072f8 <RCCEx_PLL3_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8004eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ef8:	4ba7      	ldr	r3, [pc, #668]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004efe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f0a:	4aa3      	ldr	r2, [pc, #652]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f12:	e003      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d04e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f44:	d02e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4a:	d827      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f4e:	d02b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8004f50:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f52:	d823      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f54:	2b80      	cmp	r3, #128	@ 0x80
 8004f56:	d017      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d81f      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8004f60:	2b40      	cmp	r3, #64	@ 0x40
 8004f62:	d007      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8004f64:	e01a      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f66:	4b8c      	ldr	r3, [pc, #560]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6a:	4a8b      	ldr	r2, [pc, #556]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f70:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f72:	e01a      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f78:	3308      	adds	r3, #8
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 f924 	bl	80071c8 <RCCEx_PLL2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f86:	e010      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8c:	3330      	adds	r3, #48	@ 0x30
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f002 f9b2 	bl	80072f8 <RCCEx_PLL3_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004f9a:	e006      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004faa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004fb2:	4b79      	ldr	r3, [pc, #484]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fb8:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fc4:	4974      	ldr	r1, [pc, #464]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d055      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ffa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ffe:	d031      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005000:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005004:	d82a      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500a:	d02d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005010:	d824      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005012:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005016:	d029      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005018:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800501c:	d81e      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005022:	d011      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d818      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800502e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005032:	d113      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005038:	3308      	adds	r3, #8
 800503a:	4618      	mov	r0, r3
 800503c:	f002 f8c4 	bl	80071c8 <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005046:	e014      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504c:	3330      	adds	r3, #48	@ 0x30
 800504e:	4618      	mov	r0, r3
 8005050:	f002 f952 	bl	80072f8 <RCCEx_PLL3_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800505a:	e00a      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005062:	e006      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005064:	bf00      	nop
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005068:	bf00      	nop
 800506a:	e002      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800507a:	4b47      	ldr	r3, [pc, #284]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005080:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005088:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800508c:	4942      	ldr	r1, [pc, #264]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800509a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	2100      	movs	r1, #0
 80050a8:	61b9      	str	r1, [r7, #24]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d03c      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80050ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d81b      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80050c6:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	08005107 	.word	0x08005107
 80050d0:	080050dd 	.word	0x080050dd
 80050d4:	080050eb 	.word	0x080050eb
 80050d8:	08005107 	.word	0x08005107
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80050e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80050e8:	e00e      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ee:	3308      	adds	r3, #8
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 f869 	bl	80071c8 <RCCEx_PLL2_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80050fc:	e004      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005112:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800511e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005122:	491d      	ldr	r1, [pc, #116]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005130:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	2100      	movs	r1, #0
 800513e:	6139      	str	r1, [r7, #16]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800514a:	460b      	mov	r3, r1
 800514c:	4313      	orrs	r3, r2
 800514e:	d03c      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515c:	d00e      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800515e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005162:	d815      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d019      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800516c:	d110      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005178:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800517a:	e010      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800517c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005180:	3308      	adds	r3, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f002 f820 	bl	80071c8 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800518e:	e006      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005196:	e002      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005198:	44020c00 	.word	0x44020c00
        break;
 800519c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80051a6:	4b3d      	ldr	r3, [pc, #244]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b8:	4938      	ldr	r1, [pc, #224]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	2100      	movs	r1, #0
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051e0:	460b      	mov	r3, r1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d038      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80051ee:	2b30      	cmp	r3, #48	@ 0x30
 80051f0:	d01b      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80051f2:	2b30      	cmp	r3, #48	@ 0x30
 80051f4:	d815      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d002      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d007      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80051fe:	e010      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005200:	4b26      	ldr	r3, [pc, #152]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	4a25      	ldr	r2, [pc, #148]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800520a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800520c:	e00e      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005212:	3330      	adds	r3, #48	@ 0x30
 8005214:	4618      	mov	r0, r3
 8005216:	f002 f86f 	bl	80072f8 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005220:	e004      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005228:	e000      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800522a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800522c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005234:	4b19      	ldr	r3, [pc, #100]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800523a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800523e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005242:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005246:	4915      	ldr	r1, [pc, #84]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800524e:	e003      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005254:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	2100      	movs	r1, #0
 8005262:	6039      	str	r1, [r7, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800526e:	460b      	mov	r3, r1
 8005270:	4313      	orrs	r3, r2
 8005272:	d00c      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005274:	4b09      	ldr	r3, [pc, #36]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800527a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800527e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005282:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005286:	4905      	ldr	r1, [pc, #20]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800528e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005292:	4618      	mov	r0, r3
 8005294:	37e8      	adds	r7, #232	@ 0xe8
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529c:	44020c00 	.word	0x44020c00

080052a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b08b      	sub	sp, #44	@ 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80052a8:	4bae      	ldr	r3, [pc, #696]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80052b2:	4bac      	ldr	r3, [pc, #688]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80052bc:	4ba9      	ldr	r3, [pc, #676]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80052c8:	4ba6      	ldr	r3, [pc, #664]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80052d4:	4ba3      	ldr	r3, [pc, #652]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ec:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8126 	beq.w	8005544 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d053      	beq.n	80053a6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d86f      	bhi.n	80053e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d02b      	beq.n	8005368 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005310:	e068      	b.n	80053e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005312:	4b94      	ldr	r3, [pc, #592]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	4a92      	ldr	r2, [pc, #584]	@ (8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a04 	vldr	s12, [r7, #16]
 800534a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800556c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005366:	e068      	b.n	800543a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005570 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	ed97 6a04 	vldr	s12, [r7, #16]
 8005388:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800556c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800538c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053a4:	e049      	b.n	800543a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005574 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80053b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80053c6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800556c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80053e2:	e02a      	b.n	800543a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053e4:	4b5f      	ldr	r3, [pc, #380]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
 80053f4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005418:	ed97 6a04 	vldr	s12, [r7, #16]
 800541c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800556c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005434:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005438:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800543a:	4b4a      	ldr	r3, [pc, #296]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005446:	d121      	bne.n	800548c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005448:	4b46      	ldr	r3, [pc, #280]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005454:	4b43      	ldr	r3, [pc, #268]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005458:	0a5b      	lsrs	r3, r3, #9
 800545a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800546a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800546e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800547a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e006      	b.n	8005492 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005492:	4b34      	ldr	r3, [pc, #208]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800549e:	d121      	bne.n	80054e4 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80054a0:	4b30      	ldr	r3, [pc, #192]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80054ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80054be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80054c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80054ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e006      	b.n	80054ea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	e002      	b.n	80054ea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f6:	d121      	bne.n	800553c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80054f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d017      	beq.n	8005534 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005504:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005508:	0e1b      	lsrs	r3, r3, #24
 800550a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800551a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800551e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005532:	e010      	b.n	8005556 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
}
 800553a:	e00c      	b.n	8005556 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
}
 8005556:	bf00      	nop
 8005558:	372c      	adds	r7, #44	@ 0x2c
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	44020c00 	.word	0x44020c00
 8005568:	03d09000 	.word	0x03d09000
 800556c:	46000000 	.word	0x46000000
 8005570:	4a742400 	.word	0x4a742400
 8005574:	4af42400 	.word	0x4af42400

08005578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005578:	b480      	push	{r7}
 800557a:	b08b      	sub	sp, #44	@ 0x2c
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005580:	4bae      	ldr	r3, [pc, #696]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005588:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800558a:	4bac      	ldr	r3, [pc, #688]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005594:	4ba9      	ldr	r3, [pc, #676]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800559e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80055a0:	4ba6      	ldr	r3, [pc, #664]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80055ac:	4ba3      	ldr	r3, [pc, #652]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8126 	beq.w	800581c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d053      	beq.n	800567e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d86f      	bhi.n	80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d003      	beq.n	80055ea <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d02b      	beq.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80055e8:	e068      	b.n	80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055ea:	4b94      	ldr	r3, [pc, #592]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	4a92      	ldr	r2, [pc, #584]	@ (8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005622:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800563e:	e068      	b.n	8005712 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005660:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005678:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800567c:	e049      	b.n	8005712 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005688:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800584c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800568c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569a:	ed97 6a04 	vldr	s12, [r7, #16]
 800569e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80056a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80056ba:	e02a      	b.n	8005712 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056bc:	4b5f      	ldr	r3, [pc, #380]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	08db      	lsrs	r3, r3, #3
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80056f4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80056f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005710:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005712:	4b4a      	ldr	r3, [pc, #296]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800571e:	d121      	bne.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005720:	4b46      	ldr	r3, [pc, #280]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800572c:	4b43      	ldr	r3, [pc, #268]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800573e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005742:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005746:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800574a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005752:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e006      	b.n	800576a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e002      	b.n	800576a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800576a:	4b34      	ldr	r3, [pc, #208]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005776:	d121      	bne.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005778:	4b30      	ldr	r3, [pc, #192]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d017      	beq.n	80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005784:	4b2d      	ldr	r3, [pc, #180]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800579a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800579e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057aa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057c2:	4b1e      	ldr	r3, [pc, #120]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ce:	d121      	bne.n	8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80057d0:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057dc:	4b17      	ldr	r3, [pc, #92]	@ (800583c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80057de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80057f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80057fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800580a:	e010      	b.n	800582e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
}
 8005812:	e00c      	b.n	800582e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	e008      	b.n	800582e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	609a      	str	r2, [r3, #8]
}
 800582e:	bf00      	nop
 8005830:	372c      	adds	r7, #44	@ 0x2c
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	44020c00 	.word	0x44020c00
 8005840:	03d09000 	.word	0x03d09000
 8005844:	46000000 	.word	0x46000000
 8005848:	4a742400 	.word	0x4a742400
 800584c:	4af42400 	.word	0x4af42400

08005850 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005850:	b480      	push	{r7}
 8005852:	b08b      	sub	sp, #44	@ 0x2c
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005858:	4bae      	ldr	r3, [pc, #696]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800585a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005860:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005862:	4bac      	ldr	r3, [pc, #688]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800586c:	4ba9      	ldr	r3, [pc, #676]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005876:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005878:	4ba6      	ldr	r3, [pc, #664]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005884:	4ba3      	ldr	r3, [pc, #652]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005888:	08db      	lsrs	r3, r3, #3
 800588a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8126 	beq.w	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d053      	beq.n	8005956 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d86f      	bhi.n	8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d003      	beq.n	80058c2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d02b      	beq.n	8005918 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80058c0:	e068      	b.n	8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058c2:	4b94      	ldr	r3, [pc, #592]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	08db      	lsrs	r3, r3, #3
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	4a92      	ldr	r2, [pc, #584]	@ (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80058ce:	fa22 f303 	lsr.w	r3, r2, r3
 80058d2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80058fa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005916:	e068      	b.n	80059ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005934:	ed97 6a04 	vldr	s12, [r7, #16]
 8005938:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800593c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005954:	e049      	b.n	80059ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005960:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a04 	vldr	s12, [r7, #16]
 8005976:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005992:	e02a      	b.n	80059ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005994:	4b5f      	ldr	r3, [pc, #380]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80059cc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80059d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80059e8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d121      	bne.n	8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80059f8:	4b46      	ldr	r3, [pc, #280]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a04:	4b43      	ldr	r3, [pc, #268]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a08:	0a5b      	lsrs	r3, r3, #9
 8005a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005a16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a1e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a2a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e006      	b.n	8005a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a42:	4b34      	ldr	r3, [pc, #208]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a4e:	d121      	bne.n	8005a94 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005a50:	4b30      	ldr	r3, [pc, #192]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005a6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a72:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005a76:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a82:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	e006      	b.n	8005a9a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	e002      	b.n	8005a9a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa6:	d121      	bne.n	8005aec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d017      	beq.n	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ab4:	4b17      	ldr	r3, [pc, #92]	@ (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005ace:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ada:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005ae2:	e010      	b.n	8005b06 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	609a      	str	r2, [r3, #8]
}
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
}
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
}
 8005b06:	bf00      	nop
 8005b08:	372c      	adds	r7, #44	@ 0x2c
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	44020c00 	.word	0x44020c00
 8005b18:	03d09000 	.word	0x03d09000
 8005b1c:	46000000 	.word	0x46000000
 8005b20:	4a742400 	.word	0x4a742400
 8005b24:	4af42400 	.word	0x4af42400

08005b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b08f      	sub	sp, #60	@ 0x3c
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b36:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005b3a:	4321      	orrs	r1, r4
 8005b3c:	d150      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b3e:	4b26      	ldr	r3, [pc, #152]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b48:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b4a:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d108      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5e:	d104      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b66:	f001 bb20 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b78:	d108      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b80:	d104      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005b82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b88:	f001 bb0f 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005b8c:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b98:	d119      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba0:	d115      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bae:	d30a      	bcc.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bba:	4a08      	ldr	r2, [pc, #32]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005bc2:	f001 baf2 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005bca:	f001 baee 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd2:	f001 baea 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005bd6:	bf00      	nop
 8005bd8:	44020c00 	.word	0x44020c00
 8005bdc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be4:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005be8:	ea50 0104 	orrs.w	r1, r0, r4
 8005bec:	f000 8615 	beq.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf4:	2801      	cmp	r0, #1
 8005bf6:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8005bfa:	f081 82d3 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c02:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005c06:	ea50 0104 	orrs.w	r1, r0, r4
 8005c0a:	f000 84d8 	beq.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c12:	2801      	cmp	r0, #1
 8005c14:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005c18:	f081 82c4 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c20:	f1a1 0410 	sub.w	r4, r1, #16
 8005c24:	ea50 0104 	orrs.w	r1, r0, r4
 8005c28:	f001 8288 	beq.w	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8005c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c30:	2801      	cmp	r0, #1
 8005c32:	f171 0110 	sbcs.w	r1, r1, #16
 8005c36:	f081 82b5 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3e:	f1a1 0408 	sub.w	r4, r1, #8
 8005c42:	ea50 0104 	orrs.w	r1, r0, r4
 8005c46:	f001 81fe 	beq.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8005c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	f171 0108 	sbcs.w	r1, r1, #8
 8005c54:	f081 82a6 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5c:	1f0c      	subs	r4, r1, #4
 8005c5e:	ea50 0104 	orrs.w	r1, r0, r4
 8005c62:	f000 8753 	beq.w	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8005c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6a:	2801      	cmp	r0, #1
 8005c6c:	f171 0104 	sbcs.w	r1, r1, #4
 8005c70:	f081 8298 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c78:	1e8c      	subs	r4, r1, #2
 8005c7a:	ea50 0104 	orrs.w	r1, r0, r4
 8005c7e:	f001 8173 	beq.w	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8005c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c86:	2801      	cmp	r0, #1
 8005c88:	f171 0102 	sbcs.w	r1, r1, #2
 8005c8c:	f081 828a 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c94:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005c98:	4321      	orrs	r1, r4
 8005c9a:	f001 80fe 	beq.w	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca2:	4ccb      	ldr	r4, [pc, #812]	@ (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	f171 0100 	sbcs.w	r1, r1, #0
 8005caa:	f081 827b 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb2:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005cb6:	4321      	orrs	r1, r4
 8005cb8:	f001 8076 	beq.w	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8005cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc0:	4cc4      	ldr	r4, [pc, #784]	@ (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005cc2:	42a0      	cmp	r0, r4
 8005cc4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cc8:	f081 826c 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd0:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005cd4:	4321      	orrs	r1, r4
 8005cd6:	f000 87b5 	beq.w	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8005cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cde:	4cbe      	ldr	r4, [pc, #760]	@ (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	f171 0100 	sbcs.w	r1, r1, #0
 8005ce6:	f081 825d 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cee:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005cf2:	4321      	orrs	r1, r4
 8005cf4:	f000 8738 	beq.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cfc:	4cb7      	ldr	r4, [pc, #732]	@ (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8005cfe:	42a0      	cmp	r0, r4
 8005d00:	f171 0100 	sbcs.w	r1, r1, #0
 8005d04:	f081 824e 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005d10:	4321      	orrs	r1, r4
 8005d12:	f001 81cd 	beq.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1a:	4cb1      	ldr	r4, [pc, #708]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8005d1c:	42a0      	cmp	r0, r4
 8005d1e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d22:	f081 823f 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005d2e:	4321      	orrs	r1, r4
 8005d30:	f000 80d9 	beq.w	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d38:	4caa      	ldr	r4, [pc, #680]	@ (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8005d3a:	42a0      	cmp	r0, r4
 8005d3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d40:	f081 8230 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d48:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005d4c:	4321      	orrs	r1, r4
 8005d4e:	f000 83da 	beq.w	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d56:	4ca4      	ldr	r4, [pc, #656]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d5e:	f081 8221 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d66:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005d6a:	4321      	orrs	r1, r4
 8005d6c:	f000 8627 	beq.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8005d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d74:	4c9d      	ldr	r4, [pc, #628]	@ (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	f171 0100 	sbcs.w	r1, r1, #0
 8005d7c:	f081 8212 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d84:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005d88:	4321      	orrs	r1, r4
 8005d8a:	f000 857a 	beq.w	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d92:	4c97      	ldr	r4, [pc, #604]	@ (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8005d94:	42a0      	cmp	r0, r4
 8005d96:	f171 0100 	sbcs.w	r1, r1, #0
 8005d9a:	f081 8203 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005da6:	4321      	orrs	r1, r4
 8005da8:	f000 84fb 	beq.w	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005db4:	f171 0100 	sbcs.w	r1, r1, #0
 8005db8:	f081 81f4 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005dc4:	4321      	orrs	r1, r4
 8005dc6:	f000 84a9 	beq.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dce:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005dd2:	42a0      	cmp	r0, r4
 8005dd4:	f171 0100 	sbcs.w	r1, r1, #0
 8005dd8:	f081 81e4 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005de4:	4321      	orrs	r1, r4
 8005de6:	f000 8456 	beq.w	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8005dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dee:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005df2:	42a0      	cmp	r0, r4
 8005df4:	f171 0100 	sbcs.w	r1, r1, #0
 8005df8:	f081 81d4 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e00:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005e04:	4321      	orrs	r1, r4
 8005e06:	f000 8403 	beq.w	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e0e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005e12:	42a0      	cmp	r0, r4
 8005e14:	f171 0100 	sbcs.w	r1, r1, #0
 8005e18:	f081 81c4 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e20:	2821      	cmp	r0, #33	@ 0x21
 8005e22:	f171 0100 	sbcs.w	r1, r1, #0
 8005e26:	d255      	bcs.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2c:	4301      	orrs	r1, r0
 8005e2e:	f001 81b9 	beq.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e36:	1e42      	subs	r2, r0, #1
 8005e38:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005e3c:	2a20      	cmp	r2, #32
 8005e3e:	f173 0100 	sbcs.w	r1, r3, #0
 8005e42:	f081 81af 	bcs.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e46:	2a1f      	cmp	r2, #31
 8005e48:	f201 81ac 	bhi.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005e4c:	a101      	add	r1, pc, #4	@ (adr r1, 8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8005e4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005f2b 	.word	0x08005f2b
 8005e58:	08006029 	.word	0x08006029
 8005e5c:	080071a5 	.word	0x080071a5
 8005e60:	080060e9 	.word	0x080060e9
 8005e64:	080071a5 	.word	0x080071a5
 8005e68:	080071a5 	.word	0x080071a5
 8005e6c:	080071a5 	.word	0x080071a5
 8005e70:	080061b9 	.word	0x080061b9
 8005e74:	080071a5 	.word	0x080071a5
 8005e78:	080071a5 	.word	0x080071a5
 8005e7c:	080071a5 	.word	0x080071a5
 8005e80:	080071a5 	.word	0x080071a5
 8005e84:	080071a5 	.word	0x080071a5
 8005e88:	080071a5 	.word	0x080071a5
 8005e8c:	080071a5 	.word	0x080071a5
 8005e90:	0800629d 	.word	0x0800629d
 8005e94:	080071a5 	.word	0x080071a5
 8005e98:	080071a5 	.word	0x080071a5
 8005e9c:	080071a5 	.word	0x080071a5
 8005ea0:	080071a5 	.word	0x080071a5
 8005ea4:	080071a5 	.word	0x080071a5
 8005ea8:	080071a5 	.word	0x080071a5
 8005eac:	080071a5 	.word	0x080071a5
 8005eb0:	080071a5 	.word	0x080071a5
 8005eb4:	080071a5 	.word	0x080071a5
 8005eb8:	080071a5 	.word	0x080071a5
 8005ebc:	080071a5 	.word	0x080071a5
 8005ec0:	080071a5 	.word	0x080071a5
 8005ec4:	080071a5 	.word	0x080071a5
 8005ec8:	080071a5 	.word	0x080071a5
 8005ecc:	080071a5 	.word	0x080071a5
 8005ed0:	08006373 	.word	0x08006373
 8005ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005edc:	430b      	orrs	r3, r1
 8005ede:	f000 82b3 	beq.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005ee2:	f001 b95f 	b.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005ee6:	4b43      	ldr	r3, [pc, #268]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005ee8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d108      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f9cf 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f06:	f001 b950 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d108      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fb2f 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f1e:	f001 b944 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f26:	f001 b940 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f2a:	4b32      	ldr	r3, [pc, #200]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fd ffc4 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8005f40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f42:	f001 b932 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005f46:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f52:	d10a      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5a:	f107 0314 	add.w	r3, r7, #20
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fb0a 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f68:	e05c      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005f6a:	4b22      	ldr	r3, [pc, #136]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f76:	d10a      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d107      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fc64 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f8c:	e04a      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005f8e:	4b19      	ldr	r3, [pc, #100]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fa0:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	4a13      	ldr	r2, [pc, #76]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb2:	e037      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc0:	d11e      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d11b      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fcc:	e02a      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8005fce:	bf00      	nop
 8005fd0:	40000001 	.word	0x40000001
 8005fd4:	20000001 	.word	0x20000001
 8005fd8:	10000001 	.word	0x10000001
 8005fdc:	08000001 	.word	0x08000001
 8005fe0:	04000001 	.word	0x04000001
 8005fe4:	00400001 	.word	0x00400001
 8005fe8:	00200001 	.word	0x00200001
 8005fec:	00040001 	.word	0x00040001
 8005ff0:	00020001 	.word	0x00020001
 8005ff4:	44020c00 	.word	0x44020c00
 8005ff8:	03d09000 	.word	0x03d09000
 8005ffc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006000:	4ba3      	ldr	r3, [pc, #652]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d106      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b05      	cmp	r3, #5
 8006012:	d103      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006020:	f001 b8c3 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006024:	f001 b8c1 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006028:	4b99      	ldr	r3, [pc, #612]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800602a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800602e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800603a:	f7fd ff2f 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 800603e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006040:	f001 b8b3 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006044:	4b92      	ldr	r3, [pc, #584]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006050:	d10a      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2b08      	cmp	r3, #8
 8006056:	d107      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fa8b 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
 8006066:	e03d      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b10      	cmp	r3, #16
 800606c:	d108      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fbec 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800607c:	f001 b895 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006080:	4b83      	ldr	r3, [pc, #524]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d10c      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	2b18      	cmp	r3, #24
 8006090:	d109      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006092:	4b7f      	ldr	r3, [pc, #508]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	4a7d      	ldr	r2, [pc, #500]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a4:	e01e      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80060a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d102      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80060ba:	4b77      	ldr	r3, [pc, #476]	@ (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80060be:	e011      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80060c0:	4b73      	ldr	r3, [pc, #460]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d106      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	2b28      	cmp	r3, #40	@ 0x28
 80060d2:	d103      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80060d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e0:	f001 b863 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80060e4:	f001 b861 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80060e8:	4b69      	ldr	r3, [pc, #420]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80060ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060ee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80060f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fd fecf 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80060fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006100:	f001 b853 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006104:	4b62      	ldr	r3, [pc, #392]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800610c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006110:	d10a      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2b40      	cmp	r3, #64	@ 0x40
 8006116:	d107      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fa2b 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
 8006126:	e045      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006128:	4b59      	ldr	r3, [pc, #356]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d107      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fb85 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
 800614a:	e033      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800614c:	4b50      	ldr	r3, [pc, #320]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d10c      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	d109      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800615e:	4b4c      	ldr	r3, [pc, #304]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	4a4a      	ldr	r2, [pc, #296]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006170:	e020      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006172:	4b47      	ldr	r3, [pc, #284]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617e:	d106      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	d102      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8006188:	4b43      	ldr	r3, [pc, #268]	@ (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
 800618c:	e012      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800618e:	4b40      	ldr	r3, [pc, #256]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d107      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80061a2:	d103      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80061a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061b0:	f000 bffb 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80061b4:	f000 bff9 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061b8:	4b35      	ldr	r3, [pc, #212]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061be:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80061c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061ca:	f7fd fe67 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80061ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80061d0:	f000 bfeb 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80061d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061e0:	d10b      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d107      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ea:	f107 0314 	add.w	r3, r7, #20
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff f9c2 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f8:	e047      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80061fa:	4b25      	ldr	r3, [pc, #148]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006206:	d10b      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620e:	d107      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fb1b 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
 800621e:	e034      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006220:	4b1b      	ldr	r3, [pc, #108]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d10d      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006232:	d109      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006234:	4b16      	ldr	r3, [pc, #88]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	4a15      	ldr	r2, [pc, #84]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
 8006246:	e020      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006248:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006254:	d106      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800625c:	d102      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800625e:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006260:	637b      	str	r3, [r7, #52]	@ 0x34
 8006262:	e012      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006264:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d107      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006278:	d103      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006280:	e003      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006286:	f000 bf90 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800628a:	f000 bf8e 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800628e:	bf00      	nop
 8006290:	44020c00 	.word	0x44020c00
 8006294:	03d09000 	.word	0x03d09000
 8006298:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800629c:	4ba5      	ldr	r3, [pc, #660]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800629e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80062a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ae:	f7fd fdf5 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80062b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80062b4:	f000 bf79 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80062b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062c4:	d10b      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d107      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff f950 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
 80062dc:	e047      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80062de:	4b95      	ldr	r3, [pc, #596]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ea:	d10b      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f2:	d107      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff faa9 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
 8006302:	e034      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006304:	4b8b      	ldr	r3, [pc, #556]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d10d      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006316:	d109      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006318:	4b86      	ldr	r3, [pc, #536]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	08db      	lsrs	r3, r3, #3
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	4a85      	ldr	r2, [pc, #532]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
 800632a:	e020      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800632c:	4b81      	ldr	r3, [pc, #516]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006338:	d106      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006340:	d102      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006342:	4b7e      	ldr	r3, [pc, #504]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006344:	637b      	str	r3, [r7, #52]	@ 0x34
 8006346:	e012      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006348:	4b7a      	ldr	r3, [pc, #488]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800634a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d107      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800635c:	d103      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
 8006364:	e003      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800636a:	f000 bf1e 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800636e:	f000 bf1c 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006372:	4b70      	ldr	r3, [pc, #448]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006378:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006384:	f7fd fd8a 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006388:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800638a:	f000 bf0e 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800638e:	4b69      	ldr	r3, [pc, #420]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006396:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800639a:	d10b      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a2:	d107      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a4:	f107 0314 	add.w	r3, r7, #20
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff f8e5 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b2:	e047      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80063b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c0:	d10b      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c8:	d107      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ca:	f107 0308 	add.w	r3, r7, #8
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fa3e 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d8:	e034      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80063da:	4b56      	ldr	r3, [pc, #344]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d10d      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80063ec:	d109      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063ee:	4b51      	ldr	r3, [pc, #324]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	08db      	lsrs	r3, r3, #3
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006400:	e020      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006402:	4b4c      	ldr	r3, [pc, #304]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800640a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640e:	d106      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006416:	d102      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006418:	4b48      	ldr	r3, [pc, #288]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800641a:	637b      	str	r3, [r7, #52]	@ 0x34
 800641c:	e012      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800641e:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d107      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006432:	d103      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006440:	f000 beb3 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006444:	f000 beb1 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006448:	4b3a      	ldr	r3, [pc, #232]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800644a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800644e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006452:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800645a:	f7fd fd4b 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 800645e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006460:	f000 bea3 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800646a:	d108      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff f881 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800647a:	f000 be96 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006484:	d108      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff f9e0 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006494:	f000 be89 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006498:	4b26      	ldr	r3, [pc, #152]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d10d      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064aa:	d109      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ac:	4b21      	ldr	r3, [pc, #132]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	4a20      	ldr	r2, [pc, #128]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	e020      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80064c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064cc:	d106      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d4:	d102      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 80064d6:	4b19      	ldr	r3, [pc, #100]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80064d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064da:	e012      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064dc:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80064de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80064f0:	d103      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064fe:	f000 be54 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006502:	f000 be52 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006518:	f7fd fca4 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 800651c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800651e:	f000 be44 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10b      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006528:	f7fd fb70 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 800652c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800652e:	f000 be3c 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006532:	bf00      	nop
 8006534:	44020c00 	.word	0x44020c00
 8006538:	03d09000 	.word	0x03d09000
 800653c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	2b02      	cmp	r3, #2
 8006544:	d108      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f814 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006554:	f000 be29 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006558:	4b9f      	ldr	r3, [pc, #636]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006564:	d105      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	2b03      	cmp	r3, #3
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 800656c:	4b9b      	ldr	r3, [pc, #620]	@ (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006570:	e023      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006572:	4b99      	ldr	r3, [pc, #612]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d10c      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b04      	cmp	r3, #4
 8006582:	d109      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006584:	4b94      	ldr	r3, [pc, #592]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a94      	ldr	r2, [pc, #592]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
 8006596:	e010      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006598:	4b8f      	ldr	r3, [pc, #572]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a4:	d105      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d102      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80065ac:	4b8d      	ldr	r3, [pc, #564]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065b6:	f000 bdf8 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80065ba:	f000 bdf6 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80065be:	4b86      	ldr	r3, [pc, #536]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80065c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80065ca:	4b83      	ldr	r3, [pc, #524]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80065cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d106      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e4:	e012      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80065e6:	4b7c      	ldr	r3, [pc, #496]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80065e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f4:	d106      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d103      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 80065fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
 8006602:	e003      	b.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006608:	f000 bdcf 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800660c:	f000 bdcd 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006610:	4b71      	ldr	r3, [pc, #452]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006612:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800661a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006622:	f7fd fc3b 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006626:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006628:	f000 bdbf 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006632:	d108      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f909 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006642:	f000 bdb2 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006646:	4b64      	ldr	r3, [pc, #400]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d10d      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006658:	d109      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800665a:	4b5f      	ldr	r3, [pc, #380]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	4a5e      	ldr	r2, [pc, #376]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
 800666c:	e011      	b.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800666e:	4b5a      	ldr	r3, [pc, #360]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667a:	d106      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006682:	d102      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006684:	4b57      	ldr	r3, [pc, #348]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800668e:	f000 bd8c 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006692:	f000 bd8a 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006696:	4b50      	ldr	r3, [pc, #320]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800669c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80066a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7fd fbf8 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80066ac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80066ae:	f000 bd7c 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066b8:	d108      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ba:	f107 0308 	add.w	r3, r7, #8
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff f8c6 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c8:	f000 bd6f 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80066cc:	4b42      	ldr	r3, [pc, #264]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d10d      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80066de:	d109      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066e0:	4b3d      	ldr	r3, [pc, #244]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	4a3d      	ldr	r2, [pc, #244]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f2:	e011      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80066f4:	4b38      	ldr	r3, [pc, #224]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006700:	d106      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006708:	d102      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800670a:	4b36      	ldr	r3, [pc, #216]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	e003      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006714:	f000 bd49 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006718:	f000 bd47 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800671c:	4b2e      	ldr	r3, [pc, #184]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800671e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006722:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006726:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800672e:	f7fd fbe1 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8006732:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006734:	f000 bd39 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800673e:	d108      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff f883 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800674e:	f000 bd2c 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006752:	4b21      	ldr	r3, [pc, #132]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d10d      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006764:	d109      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006766:	4b1c      	ldr	r3, [pc, #112]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	4a1b      	ldr	r2, [pc, #108]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	e011      	b.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800677a:	4b17      	ldr	r3, [pc, #92]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006786:	d106      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800678e:	d102      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006790:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006792:	637b      	str	r3, [r7, #52]	@ 0x34
 8006794:	e003      	b.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800679a:	f000 bd06 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800679e:	f000 bd04 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80067a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067a8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80067ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fd fb72 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80067b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80067ba:	f000 bcf6 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067c4:	d110      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f840 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d4:	f000 bce9 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067d8:	44020c00 	.word	0x44020c00
 80067dc:	007a1200 	.word	0x007a1200
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80067e8:	4ba4      	ldr	r3, [pc, #656]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d10e      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067fa:	d10a      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067fc:	4b9f      	ldr	r3, [pc, #636]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	4a9e      	ldr	r2, [pc, #632]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800680e:	f000 bccc 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006816:	f000 bcc8 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800681a:	4b98      	ldr	r3, [pc, #608]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800681c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006820:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800682c:	f7fd fb62 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8006830:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006832:	f000 bcba 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800683c:	d108      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683e:	f107 0308 	add.w	r3, r7, #8
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff f804 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800684c:	f000 bcad 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006850:	4b8a      	ldr	r3, [pc, #552]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d10e      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006862:	d10a      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006864:	4b85      	ldr	r3, [pc, #532]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	08db      	lsrs	r3, r3, #3
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	4a84      	ldr	r2, [pc, #528]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006876:	f000 bc98 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687e:	f000 bc94 	b.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006882:	4b7e      	ldr	r3, [pc, #504]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006884:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006888:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006894:	d056      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800689c:	f200 808b 	bhi.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a6:	d03e      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ae:	f200 8082 	bhi.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b8:	d027      	beq.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068c0:	d879      	bhi.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c8:	d017      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d0:	d871      	bhi.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068de:	d004      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 80068e0:	e069      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80068e2:	f7fd fb07 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 80068e6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80068e8:	e068      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ea:	f107 0314 	add.w	r3, r7, #20
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fe42 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068f8:	e060      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe ffa6 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006908:	e058      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800690a:	4b5c      	ldr	r3, [pc, #368]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800690c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d103      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800691e:	e04d      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006924:	e04a      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006926:	4b55      	ldr	r3, [pc, #340]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800692c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006934:	d103      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006936:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800693c:	e03e      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006942:	e03b      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006944:	4b4d      	ldr	r3, [pc, #308]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800694a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800694e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006950:	4b4a      	ldr	r3, [pc, #296]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b02      	cmp	r3, #2
 800695a:	d10c      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006962:	4b46      	ldr	r3, [pc, #280]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	08db      	lsrs	r3, r3, #3
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	4a44      	ldr	r2, [pc, #272]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
 8006974:	e01e      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006976:	4b41      	ldr	r3, [pc, #260]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800698c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006990:	e010      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006992:	4b3a      	ldr	r3, [pc, #232]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800699e:	d106      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069a6:	d102      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069a8:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80069aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ac:	e002      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80069b2:	e003      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069ba:	bf00      	nop
          }
        }
        break;
 80069bc:	e3f5      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069be:	4b2f      	ldr	r3, [pc, #188]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80069c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80069c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069d0:	d05f      	beq.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069d8:	f200 8094 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069e2:	d03f      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ea:	f200 808b 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069f4:	d028      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069fc:	f200 8082 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a06:	d017      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0e:	d879      	bhi.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a1c:	d004      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006a1e:	e071      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fd fa3c 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006a24:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006a26:	e070      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a28:	f107 0314 	add.w	r3, r7, #20
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fda3 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a36:	e068      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe ff07 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a46:	e060      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a48:	4b0c      	ldr	r3, [pc, #48]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d103      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a5c:	e055      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a62:	e052      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a72:	d10b      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006a74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a7a:	e046      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006a7c:	44020c00 	.word	0x44020c00
 8006a80:	03d09000 	.word	0x03d09000
 8006a84:	003d0900 	.word	0x003d0900
 8006a88:	007a1200 	.word	0x007a1200
              frequency = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a90:	e03b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a92:	4bae      	ldr	r3, [pc, #696]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a9e:	4bab      	ldr	r3, [pc, #684]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d10c      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d109      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	08db      	lsrs	r3, r3, #3
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	4aa5      	ldr	r2, [pc, #660]	@ (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac2:	e01e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad0:	d106      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad8:	d102      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ada:	4b9e      	ldr	r3, [pc, #632]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ade:	e010      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aec:	d106      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006af4:	d102      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006af6:	4b98      	ldr	r3, [pc, #608]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	e002      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006b00:	e003      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b08:	bf00      	nop
          }
        }
        break;
 8006b0a:	e34e      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006b0c:	4b8f      	ldr	r3, [pc, #572]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b16:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006b18:	4b8c      	ldr	r3, [pc, #560]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b24:	d105      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006b30:	e33b      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b38:	d107      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b3a:	f107 0320 	add.w	r3, r7, #32
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fbae 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b48:	e32f      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b50:	d107      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fd0e 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b60:	e323      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b66:	e320      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006b68:	4b78      	ldr	r3, [pc, #480]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d860      	bhi.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b95 	.word	0x08006b95
 8006b84:	08006ba5 	.word	0x08006ba5
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	08006bc5 	.word	0x08006bc5
 8006b90:	08006bcb 	.word	0x08006bcb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b94:	f107 0320 	add.w	r3, r7, #32
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fb81 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ba2:	e04e      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ba4:	f107 0314 	add.w	r3, r7, #20
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe fce5 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bb2:	e046      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb4:	f107 0308 	add.w	r3, r7, #8
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fe49 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bc2:	e03e      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006bc4:	4b65      	ldr	r3, [pc, #404]	@ (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bc8:	e03b      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bca:	4b60      	ldr	r3, [pc, #384]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bd0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006be8:	4b58      	ldr	r3, [pc, #352]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a57      	ldr	r2, [pc, #348]	@ (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfa:	e01e      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bfc:	4b53      	ldr	r3, [pc, #332]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8006c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c12:	4b50      	ldr	r3, [pc, #320]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c16:	e010      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c18:	4b4c      	ldr	r3, [pc, #304]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006c38:	e003      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006c3a:	e002      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c40:	bf00      	nop
          }
        }
        break;
 8006c42:	e2b2      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006c44:	4b41      	ldr	r3, [pc, #260]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	f200 80a4 	bhi.w	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006ce5 	.word	0x08006ce5
 8006c64:	08006da1 	.word	0x08006da1
 8006c68:	08006da1 	.word	0x08006da1
 8006c6c:	08006da1 	.word	0x08006da1
 8006c70:	08006da1 	.word	0x08006da1
 8006c74:	08006da1 	.word	0x08006da1
 8006c78:	08006da1 	.word	0x08006da1
 8006c7c:	08006da1 	.word	0x08006da1
 8006c80:	08006cf5 	.word	0x08006cf5
 8006c84:	08006da1 	.word	0x08006da1
 8006c88:	08006da1 	.word	0x08006da1
 8006c8c:	08006da1 	.word	0x08006da1
 8006c90:	08006da1 	.word	0x08006da1
 8006c94:	08006da1 	.word	0x08006da1
 8006c98:	08006da1 	.word	0x08006da1
 8006c9c:	08006da1 	.word	0x08006da1
 8006ca0:	08006d05 	.word	0x08006d05
 8006ca4:	08006da1 	.word	0x08006da1
 8006ca8:	08006da1 	.word	0x08006da1
 8006cac:	08006da1 	.word	0x08006da1
 8006cb0:	08006da1 	.word	0x08006da1
 8006cb4:	08006da1 	.word	0x08006da1
 8006cb8:	08006da1 	.word	0x08006da1
 8006cbc:	08006da1 	.word	0x08006da1
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006da1 	.word	0x08006da1
 8006cc8:	08006da1 	.word	0x08006da1
 8006ccc:	08006da1 	.word	0x08006da1
 8006cd0:	08006da1 	.word	0x08006da1
 8006cd4:	08006da1 	.word	0x08006da1
 8006cd8:	08006da1 	.word	0x08006da1
 8006cdc:	08006da1 	.word	0x08006da1
 8006ce0:	08006d1b 	.word	0x08006d1b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ce4:	f107 0320 	add.w	r3, r7, #32
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fad9 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cf2:	e058      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fc3d 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d02:	e050      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d04:	f107 0308 	add.w	r3, r7, #8
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe fda1 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d12:	e048      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d14:	4b11      	ldr	r3, [pc, #68]	@ (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d18:	e045      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d26:	4b09      	ldr	r3, [pc, #36]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d116      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d113      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d38:	4b04      	ldr	r3, [pc, #16]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	08db      	lsrs	r3, r3, #3
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	4a03      	ldr	r2, [pc, #12]	@ (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006d44:	fa22 f303 	lsr.w	r3, r2, r3
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4a:	e028      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006d4c:	44020c00 	.word	0x44020c00
 8006d50:	03d09000 	.word	0x03d09000
 8006d54:	003d0900 	.word	0x003d0900
 8006d58:	007a1200 	.word	0x007a1200
 8006d5c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d60:	4b95      	ldr	r3, [pc, #596]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d74:	d102      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d76:	4b91      	ldr	r3, [pc, #580]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7a:	e010      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d88:	d106      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d90:	d102      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d92:	4b8b      	ldr	r3, [pc, #556]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d96:	e002      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d9c:	e003      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006da4:	bf00      	nop
          }
        }
        break;
 8006da6:	e200      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006da8:	4b83      	ldr	r3, [pc, #524]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dba:	d031      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc2:	d866      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dc8:	d027      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dce:	d860      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	d019      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b80      	cmp	r3, #128	@ 0x80
 8006dda:	d85a      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d008      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006de8:	e053      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dea:	f107 0320 	add.w	r3, r7, #32
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fa56 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006df8:	e04e      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dfa:	f107 0314 	add.w	r3, r7, #20
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fbba 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e08:	e046      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fd1e 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e18:	e03e      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e1e:	e03b      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e20:	4b65      	ldr	r3, [pc, #404]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e26:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e2c:	4b62      	ldr	r3, [pc, #392]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d10c      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	4a5f      	ldr	r2, [pc, #380]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e50:	e01e      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e52:	4b59      	ldr	r3, [pc, #356]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5e:	d106      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e66:	d102      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e68:	4b54      	ldr	r3, [pc, #336]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6c:	e010      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e6e:	4b52      	ldr	r3, [pc, #328]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e82:	d102      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e84:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e88:	e002      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e96:	bf00      	nop
          }
        }
        break;
 8006e98:	e187      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8006e9a:	4b47      	ldr	r3, [pc, #284]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fd f80c 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006eb2:	e17a      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006eb4:	4b40      	ldr	r3, [pc, #256]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ec0:	d10b      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec8:	d107      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fb52 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed8:	e045      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8006eda:	4b37      	ldr	r3, [pc, #220]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee6:	d10b      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eee:	d107      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fcab 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	e032      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006f00:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d10d      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f12:	d109      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f14:	4b28      	ldr	r3, [pc, #160]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	e01e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006f28:	4b23      	ldr	r3, [pc, #140]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f34:	d106      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f3c:	d102      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8006f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f42:	e010      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8006f44:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f50:	d106      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f58:	d102      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8006f5a:	4b19      	ldr	r3, [pc, #100]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f5e:	e002      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f64:	e121      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006f66:	e120      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f68:	4b13      	ldr	r3, [pc, #76]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006f6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d861      	bhi.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8006f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006f99 	.word	0x08006f99
 8006f88:	08006fa9 	.word	0x08006fa9
 8006f8c:	08006fcd 	.word	0x08006fcd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006f90:	f7fc ff68 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8006f94:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f96:	e055      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f98:	f107 0320 	add.w	r3, r7, #32
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe f97f 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fa6:	e04d      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fae3 	bl	8005578 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fb6:	e045      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006fb8:	44020c00 	.word	0x44020c00
 8006fbc:	003d0900 	.word	0x003d0900
 8006fc0:	007a1200 	.word	0x007a1200
 8006fc4:	00bb8000 	.word	0x00bb8000
 8006fc8:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fcc:	4b79      	ldr	r3, [pc, #484]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fd2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fd8:	4b76      	ldr	r3, [pc, #472]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d10c      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fea:	4b72      	ldr	r3, [pc, #456]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	08db      	lsrs	r3, r3, #3
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	4a70      	ldr	r2, [pc, #448]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffc:	e01e      	b.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800700a:	d106      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007012:	d102      	bne.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007014:	4b69      	ldr	r3, [pc, #420]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
 8007018:	e010      	b.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800701a:	4b66      	ldr	r3, [pc, #408]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007026:	d106      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800702e:	d102      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007030:	4b63      	ldr	r3, [pc, #396]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
 8007034:	e002      	b.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800703a:	e003      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800703c:	e002      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007042:	bf00      	nop
          }
        }
        break;
 8007044:	e0b1      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007046:	4b5b      	ldr	r3, [pc, #364]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800704c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007050:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007052:	4b58      	ldr	r3, [pc, #352]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d106      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	e01f      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800706e:	4b51      	ldr	r3, [pc, #324]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800707c:	d106      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2b40      	cmp	r3, #64	@ 0x40
 8007082:	d103      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8007084:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007088:	637b      	str	r3, [r7, #52]	@ 0x34
 800708a:	e010      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800708c:	4b49      	ldr	r3, [pc, #292]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007098:	d106      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2b80      	cmp	r3, #128	@ 0x80
 800709e:	d103      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80070a0:	f248 0312 	movw	r3, #32786	@ 0x8012
 80070a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a6:	e002      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80070ac:	e07d      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80070ae:	e07c      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80070b0:	4b40      	ldr	r3, [pc, #256]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80070bc:	4b3d      	ldr	r3, [pc, #244]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c8:	d105      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80070d0:	4b3c      	ldr	r3, [pc, #240]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d4:	e031      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80070d6:	4b37      	ldr	r3, [pc, #220]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e2:	d10a      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d107      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ea:	f107 0320 	add.w	r3, r7, #32
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe f8d6 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	e01f      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80070fa:	4b2e      	ldr	r3, [pc, #184]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80070fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d106      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2b20      	cmp	r3, #32
 800710c:	d103      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800710e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
 8007114:	e011      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007116:	4b27      	ldr	r3, [pc, #156]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800711c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007124:	d106      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d103      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800712c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
 8007132:	e002      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007138:	e037      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800713a:	e036      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800713c:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800713e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007142:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	2b10      	cmp	r3, #16
 800714c:	d107      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800714e:	f107 0320 	add.w	r3, r7, #32
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe f8a4 	bl	80052a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800715c:	e025      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716a:	d10a      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	2b20      	cmp	r3, #32
 8007170:	d107      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fb6a 	bl	8005850 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007180:	e00f      	b.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800718a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800718e:	d105      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	2b30      	cmp	r3, #48	@ 0x30
 8007194:	d102      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
 800719a:	e002      	b.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80071a0:	e003      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80071a2:	e002      	b.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80071aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	373c      	adds	r7, #60	@ 0x3c
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}
 80071b4:	44020c00 	.word	0x44020c00
 80071b8:	03d09000 	.word	0x03d09000
 80071bc:	003d0900 	.word	0x003d0900
 80071c0:	007a1200 	.word	0x007a1200
 80071c4:	02dc6c00 	.word	0x02dc6c00

080071c8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80071d0:	4b48      	ldr	r3, [pc, #288]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a47      	ldr	r2, [pc, #284]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80071d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071dc:	f7fa fc76 	bl	8001acc <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071e2:	e008      	b.n	80071f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071e4:	f7fa fc72 	bl	8001acc <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d901      	bls.n	80071f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e07a      	b.n	80072ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071f6:	4b3f      	ldr	r3, [pc, #252]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f0      	bne.n	80071e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007202:	4b3c      	ldr	r3, [pc, #240]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007206:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6811      	ldr	r1, [r2, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6852      	ldr	r2, [r2, #4]
 8007216:	0212      	lsls	r2, r2, #8
 8007218:	430a      	orrs	r2, r1
 800721a:	4936      	ldr	r1, [pc, #216]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 800721c:	4313      	orrs	r3, r2
 800721e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	3b01      	subs	r3, #1
 8007226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	3b01      	subs	r3, #1
 8007230:	025b      	lsls	r3, r3, #9
 8007232:	b29b      	uxth	r3, r3
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	3b01      	subs	r3, #1
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	3b01      	subs	r3, #1
 800724a:	061b      	lsls	r3, r3, #24
 800724c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007250:	4928      	ldr	r1, [pc, #160]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007252:	4313      	orrs	r3, r2
 8007254:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007256:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	f023 020c 	bic.w	r2, r3, #12
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	4924      	ldr	r1, [pc, #144]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007264:	4313      	orrs	r3, r2
 8007266:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007268:	4b22      	ldr	r3, [pc, #136]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	f023 0220 	bic.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	491f      	ldr	r1, [pc, #124]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800727a:	4b1e      	ldr	r3, [pc, #120]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 800727c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007282:	491c      	ldr	r1, [pc, #112]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007284:	4313      	orrs	r3, r2
 8007286:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 800728e:	f023 0310 	bic.w	r3, r3, #16
 8007292:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 8007296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007298:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6a12      	ldr	r2, [r2, #32]
 80072a4:	00d2      	lsls	r2, r2, #3
 80072a6:	4913      	ldr	r1, [pc, #76]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80072ac:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072b2:	f043 0310 	orr.w	r3, r3, #16
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a0d      	ldr	r2, [pc, #52]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072c4:	f7fa fc02 	bl	8001acc <HAL_GetTick>
 80072c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072ca:	e008      	b.n	80072de <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072cc:	f7fa fbfe 	bl	8001acc <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e006      	b.n	80072ec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <RCCEx_PLL2_Config+0x12c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0

}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	44020c00 	.word	0x44020c00

080072f8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007300:	4b48      	ldr	r3, [pc, #288]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a47      	ldr	r2, [pc, #284]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800730c:	f7fa fbde 	bl	8001acc <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007312:	e008      	b.n	8007326 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007314:	f7fa fbda 	bl	8001acc <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e07a      	b.n	800741c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007326:	4b3f      	ldr	r3, [pc, #252]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007332:	4b3c      	ldr	r3, [pc, #240]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6811      	ldr	r1, [r2, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6852      	ldr	r2, [r2, #4]
 8007346:	0212      	lsls	r2, r2, #8
 8007348:	430a      	orrs	r2, r1
 800734a:	4936      	ldr	r1, [pc, #216]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	630b      	str	r3, [r1, #48]	@ 0x30
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	3b01      	subs	r3, #1
 8007356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	3b01      	subs	r3, #1
 8007360:	025b      	lsls	r3, r3, #9
 8007362:	b29b      	uxth	r3, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	3b01      	subs	r3, #1
 800737a:	061b      	lsls	r3, r3, #24
 800737c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007380:	4928      	ldr	r1, [pc, #160]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007382:	4313      	orrs	r3, r2
 8007384:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007386:	4b27      	ldr	r3, [pc, #156]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	f023 020c 	bic.w	r2, r3, #12
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	4924      	ldr	r1, [pc, #144]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007398:	4b22      	ldr	r3, [pc, #136]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739c:	f023 0220 	bic.w	r2, r3, #32
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	491f      	ldr	r1, [pc, #124]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80073aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	491c      	ldr	r1, [pc, #112]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80073b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	4a19      	ldr	r2, [pc, #100]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80073c4:	4b17      	ldr	r3, [pc, #92]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6a12      	ldr	r2, [r2, #32]
 80073d4:	00d2      	lsls	r2, r2, #3
 80073d6:	4913      	ldr	r1, [pc, #76]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80073dc:	4b11      	ldr	r3, [pc, #68]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	4a10      	ldr	r2, [pc, #64]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073e2:	f043 0310 	orr.w	r3, r3, #16
 80073e6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80073e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 80073ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073f4:	f7fa fb6a 	bl	8001acc <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073fa:	e008      	b.n	800740e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073fc:	f7fa fb66 	bl	8001acc <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e006      	b.n	800741c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800740e:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <RCCEx_PLL3_Config+0x12c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	44020c00 	.word	0x44020c00

08007428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e049      	b.n	80074ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fa f8e0 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f000 fd8e 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e049      	b.n	800757c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f841 	bl	8007584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f000 fd37 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_TIM_PWM_Start+0x24>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	e03c      	b.n	8007636 <HAL_TIM_PWM_Start+0x9e>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d109      	bne.n	80075d6 <HAL_TIM_PWM_Start+0x3e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	bf14      	ite	ne
 80075ce:	2301      	movne	r3, #1
 80075d0:	2300      	moveq	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	e02f      	b.n	8007636 <HAL_TIM_PWM_Start+0x9e>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d109      	bne.n	80075f0 <HAL_TIM_PWM_Start+0x58>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	e022      	b.n	8007636 <HAL_TIM_PWM_Start+0x9e>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d109      	bne.n	800760a <HAL_TIM_PWM_Start+0x72>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	bf14      	ite	ne
 8007602:	2301      	movne	r3, #1
 8007604:	2300      	moveq	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e015      	b.n	8007636 <HAL_TIM_PWM_Start+0x9e>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x8c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e008      	b.n	8007636 <HAL_TIM_PWM_Start+0x9e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	bf14      	ite	ne
 8007630:	2301      	movne	r3, #1
 8007632:	2300      	moveq	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e0ce      	b.n	80077dc <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <HAL_TIM_PWM_Start+0xb6>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800764c:	e023      	b.n	8007696 <HAL_TIM_PWM_Start+0xfe>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d104      	bne.n	800765e <HAL_TIM_PWM_Start+0xc6>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800765c:	e01b      	b.n	8007696 <HAL_TIM_PWM_Start+0xfe>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d104      	bne.n	800766e <HAL_TIM_PWM_Start+0xd6>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800766c:	e013      	b.n	8007696 <HAL_TIM_PWM_Start+0xfe>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b0c      	cmp	r3, #12
 8007672:	d104      	bne.n	800767e <HAL_TIM_PWM_Start+0xe6>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800767c:	e00b      	b.n	8007696 <HAL_TIM_PWM_Start+0xfe>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b10      	cmp	r3, #16
 8007682:	d104      	bne.n	800768e <HAL_TIM_PWM_Start+0xf6>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800768c:	e003      	b.n	8007696 <HAL_TIM_PWM_Start+0xfe>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2201      	movs	r2, #1
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 f92e 	bl	8008900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a4e      	ldr	r2, [pc, #312]	@ (80077e4 <HAL_TIM_PWM_Start+0x24c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x148>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4d      	ldr	r2, [pc, #308]	@ (80077e8 <HAL_TIM_PWM_Start+0x250>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x148>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a4b      	ldr	r2, [pc, #300]	@ (80077ec <HAL_TIM_PWM_Start+0x254>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x148>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a4a      	ldr	r2, [pc, #296]	@ (80077f0 <HAL_TIM_PWM_Start+0x258>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x148>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a48      	ldr	r2, [pc, #288]	@ (80077f4 <HAL_TIM_PWM_Start+0x25c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x148>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a47      	ldr	r2, [pc, #284]	@ (80077f8 <HAL_TIM_PWM_Start+0x260>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d101      	bne.n	80076e4 <HAL_TIM_PWM_Start+0x14c>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_TIM_PWM_Start+0x14e>
 80076e4:	2300      	movs	r3, #0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a39      	ldr	r2, [pc, #228]	@ (80077e4 <HAL_TIM_PWM_Start+0x24c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d04a      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a37      	ldr	r2, [pc, #220]	@ (80077e8 <HAL_TIM_PWM_Start+0x250>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d045      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007716:	d040      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007720:	d03b      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a35      	ldr	r2, [pc, #212]	@ (80077fc <HAL_TIM_PWM_Start+0x264>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d036      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <HAL_TIM_PWM_Start+0x268>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d031      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a32      	ldr	r2, [pc, #200]	@ (8007804 <HAL_TIM_PWM_Start+0x26c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d02c      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a30      	ldr	r2, [pc, #192]	@ (8007808 <HAL_TIM_PWM_Start+0x270>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d027      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2f      	ldr	r2, [pc, #188]	@ (800780c <HAL_TIM_PWM_Start+0x274>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d022      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2d      	ldr	r2, [pc, #180]	@ (8007810 <HAL_TIM_PWM_Start+0x278>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01d      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a22      	ldr	r2, [pc, #136]	@ (80077ec <HAL_TIM_PWM_Start+0x254>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d018      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a20      	ldr	r2, [pc, #128]	@ (80077f0 <HAL_TIM_PWM_Start+0x258>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a27      	ldr	r2, [pc, #156]	@ (8007814 <HAL_TIM_PWM_Start+0x27c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a25      	ldr	r2, [pc, #148]	@ (8007818 <HAL_TIM_PWM_Start+0x280>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1a      	ldr	r2, [pc, #104]	@ (80077f4 <HAL_TIM_PWM_Start+0x25c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_TIM_PWM_Start+0x202>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a18      	ldr	r2, [pc, #96]	@ (80077f8 <HAL_TIM_PWM_Start+0x260>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d115      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	4b1e      	ldr	r3, [pc, #120]	@ (800781c <HAL_TIM_PWM_Start+0x284>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	d015      	beq.n	80077d8 <HAL_TIM_PWM_Start+0x240>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b2:	d011      	beq.n	80077d8 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c4:	e008      	b.n	80077d8 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0201 	orr.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e000      	b.n	80077da <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	50012c00 	.word	0x50012c00
 80077ec:	40013400 	.word	0x40013400
 80077f0:	50013400 	.word	0x50013400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	50014000 	.word	0x50014000
 80077fc:	40000400 	.word	0x40000400
 8007800:	50000400 	.word	0x50000400
 8007804:	40000800 	.word	0x40000800
 8007808:	50000800 	.word	0x50000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	50000c00 	.word	0x50000c00
 8007814:	40001800 	.word	0x40001800
 8007818:	50001800 	.word	0x50001800
 800781c:	00010007 	.word	0x00010007

08007820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d020      	beq.n	8007884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01b      	beq.n	8007884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0202 	mvn.w	r2, #2
 8007854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fb6e 	bl	8007f4c <HAL_TIM_IC_CaptureCallback>
 8007870:	e005      	b.n	800787e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb60 	bl	8007f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb71 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d020      	beq.n	80078d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01b      	beq.n	80078d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0204 	mvn.w	r2, #4
 80078a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb48 	bl	8007f4c <HAL_TIM_IC_CaptureCallback>
 80078bc:	e005      	b.n	80078ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fb3a 	bl	8007f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb4b 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d020      	beq.n	800791c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01b      	beq.n	800791c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0208 	mvn.w	r2, #8
 80078ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2204      	movs	r2, #4
 80078f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb22 	bl	8007f4c <HAL_TIM_IC_CaptureCallback>
 8007908:	e005      	b.n	8007916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb14 	bl	8007f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb25 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b00      	cmp	r3, #0
 8007924:	d020      	beq.n	8007968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 0210 	mvn.w	r2, #16
 8007938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2208      	movs	r2, #8
 800793e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fafc 	bl	8007f4c <HAL_TIM_IC_CaptureCallback>
 8007954:	e005      	b.n	8007962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 faee 	bl	8007f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 faff 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0201 	mvn.w	r2, #1
 8007984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 facc 	bl	8007f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80079b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f93d 	bl	8008c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00c      	beq.n	80079de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80079d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f935 	bl	8008c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00c      	beq.n	8007a02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fab9 	bl	8007f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00c      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f06f 0220 	mvn.w	r2, #32
 8007a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f8fd 	bl	8008c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00c      	beq.n	8007a4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f909 	bl	8008c5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00c      	beq.n	8007a6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f901 	bl	8008c70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f8f9 	bl	8008c84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f8f1 	bl	8008c98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e0ff      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b14      	cmp	r3, #20
 8007aea:	f200 80f0 	bhi.w	8007cce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007aee:	a201      	add	r2, pc, #4	@ (adr r2, 8007af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007ccf 	.word	0x08007ccf
 8007afc:	08007ccf 	.word	0x08007ccf
 8007b00:	08007ccf 	.word	0x08007ccf
 8007b04:	08007b89 	.word	0x08007b89
 8007b08:	08007ccf 	.word	0x08007ccf
 8007b0c:	08007ccf 	.word	0x08007ccf
 8007b10:	08007ccf 	.word	0x08007ccf
 8007b14:	08007bcb 	.word	0x08007bcb
 8007b18:	08007ccf 	.word	0x08007ccf
 8007b1c:	08007ccf 	.word	0x08007ccf
 8007b20:	08007ccf 	.word	0x08007ccf
 8007b24:	08007c0b 	.word	0x08007c0b
 8007b28:	08007ccf 	.word	0x08007ccf
 8007b2c:	08007ccf 	.word	0x08007ccf
 8007b30:	08007ccf 	.word	0x08007ccf
 8007b34:	08007c4d 	.word	0x08007c4d
 8007b38:	08007ccf 	.word	0x08007ccf
 8007b3c:	08007ccf 	.word	0x08007ccf
 8007b40:	08007ccf 	.word	0x08007ccf
 8007b44:	08007c8d 	.word	0x08007c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb04 	bl	800815c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0208 	orr.w	r2, r2, #8
 8007b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0204 	bic.w	r2, r2, #4
 8007b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6999      	ldr	r1, [r3, #24]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	619a      	str	r2, [r3, #24]
      break;
 8007b86:	e0a5      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fb7e 	bl	8008290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699a      	ldr	r2, [r3, #24]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6999      	ldr	r1, [r3, #24]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	021a      	lsls	r2, r3, #8
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	619a      	str	r2, [r3, #24]
      break;
 8007bc8:	e084      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fbf5 	bl	80083c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0208 	orr.w	r2, r2, #8
 8007be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0204 	bic.w	r2, r2, #4
 8007bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69d9      	ldr	r1, [r3, #28]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	61da      	str	r2, [r3, #28]
      break;
 8007c08:	e064      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fc6b 	bl	80084ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69d9      	ldr	r1, [r3, #28]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	021a      	lsls	r2, r3, #8
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	61da      	str	r2, [r3, #28]
      break;
 8007c4a:	e043      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fce2 	bl	800861c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0208 	orr.w	r2, r2, #8
 8007c66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0204 	bic.w	r2, r2, #4
 8007c76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007c8a:	e023      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fd2c 	bl	80086f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ca6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	021a      	lsls	r2, r3, #8
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ccc:	e002      	b.n	8007cd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop

08007ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_TIM_ConfigClockSource+0x1c>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0fe      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x21a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007d22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d40:	f000 80c9 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d48:	f200 80ce 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d4c:	4a6f      	ldr	r2, [pc, #444]	@ (8007f0c <HAL_TIM_ConfigClockSource+0x224>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	f000 80c1 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d54:	4a6d      	ldr	r2, [pc, #436]	@ (8007f0c <HAL_TIM_ConfigClockSource+0x224>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	f200 80c6 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d5c:	4a6c      	ldr	r2, [pc, #432]	@ (8007f10 <HAL_TIM_ConfigClockSource+0x228>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	f000 80b9 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d64:	4a6a      	ldr	r2, [pc, #424]	@ (8007f10 <HAL_TIM_ConfigClockSource+0x228>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f200 80be 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d6c:	4a69      	ldr	r2, [pc, #420]	@ (8007f14 <HAL_TIM_ConfigClockSource+0x22c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	f000 80b1 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d74:	4a67      	ldr	r2, [pc, #412]	@ (8007f14 <HAL_TIM_ConfigClockSource+0x22c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	f200 80b6 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d7c:	4a66      	ldr	r2, [pc, #408]	@ (8007f18 <HAL_TIM_ConfigClockSource+0x230>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f000 80a9 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d84:	4a64      	ldr	r2, [pc, #400]	@ (8007f18 <HAL_TIM_ConfigClockSource+0x230>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	f200 80ae 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d8c:	4a63      	ldr	r2, [pc, #396]	@ (8007f1c <HAL_TIM_ConfigClockSource+0x234>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	f000 80a1 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007d94:	4a61      	ldr	r2, [pc, #388]	@ (8007f1c <HAL_TIM_ConfigClockSource+0x234>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f200 80a6 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007d9c:	4a60      	ldr	r2, [pc, #384]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x238>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	f000 8099 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007da4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f20 <HAL_TIM_ConfigClockSource+0x238>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	f200 809e 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007dac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007db0:	f000 8091 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007db4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007db8:	f200 8096 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007dbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc0:	f000 8089 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc8:	f200 808e 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dd0:	d03e      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0x168>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dd6:	f200 8087 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dde:	f000 8086 	beq.w	8007eee <HAL_TIM_ConfigClockSource+0x206>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de6:	d87f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007de8:	2b70      	cmp	r3, #112	@ 0x70
 8007dea:	d01a      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0x13a>
 8007dec:	2b70      	cmp	r3, #112	@ 0x70
 8007dee:	d87b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007df0:	2b60      	cmp	r3, #96	@ 0x60
 8007df2:	d050      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x1ae>
 8007df4:	2b60      	cmp	r3, #96	@ 0x60
 8007df6:	d877      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007df8:	2b50      	cmp	r3, #80	@ 0x50
 8007dfa:	d03c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x18e>
 8007dfc:	2b50      	cmp	r3, #80	@ 0x50
 8007dfe:	d873      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007e00:	2b40      	cmp	r3, #64	@ 0x40
 8007e02:	d058      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007e04:	2b40      	cmp	r3, #64	@ 0x40
 8007e06:	d86f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007e08:	2b30      	cmp	r3, #48	@ 0x30
 8007e0a:	d064      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007e0c:	2b30      	cmp	r3, #48	@ 0x30
 8007e0e:	d86b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d060      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d867      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d05c      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d05a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8007e20:	e062      	b.n	8007ee8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e32:	f000 fd45 	bl	80088c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	609a      	str	r2, [r3, #8]
      break;
 8007e4e:	e04f      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e60:	f000 fd2e 	bl	80088c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e72:	609a      	str	r2, [r3, #8]
      break;
 8007e74:	e03c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 fca0 	bl	80087c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2150      	movs	r1, #80	@ 0x50
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fcf9 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8007e94:	e02c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 fcbf 	bl	8008826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2160      	movs	r1, #96	@ 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fce9 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e01c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f000 fc80 	bl	80087c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2140      	movs	r1, #64	@ 0x40
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fcd9 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e00c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f000 fcd0 	bl	8008886 <TIM_ITRx_SetConfig>
      break;
 8007ee6:	e003      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
      break;
 8007eec:	e000      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8007eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	00100070 	.word	0x00100070
 8007f10:	00100060 	.word	0x00100060
 8007f14:	00100050 	.word	0x00100050
 8007f18:	00100040 	.word	0x00100040
 8007f1c:	00100030 	.word	0x00100030
 8007f20:	00100020 	.word	0x00100020

08007f24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a62      	ldr	r2, [pc, #392]	@ (8008124 <TIM_Base_SetConfig+0x19c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d02b      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a61      	ldr	r2, [pc, #388]	@ (8008128 <TIM_Base_SetConfig+0x1a0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d027      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	d023      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fb6:	d01f      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a5c      	ldr	r2, [pc, #368]	@ (800812c <TIM_Base_SetConfig+0x1a4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d01b      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8008130 <TIM_Base_SetConfig+0x1a8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d017      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a5a      	ldr	r2, [pc, #360]	@ (8008134 <TIM_Base_SetConfig+0x1ac>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a59      	ldr	r2, [pc, #356]	@ (8008138 <TIM_Base_SetConfig+0x1b0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00f      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a58      	ldr	r2, [pc, #352]	@ (800813c <TIM_Base_SetConfig+0x1b4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00b      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a57      	ldr	r2, [pc, #348]	@ (8008140 <TIM_Base_SetConfig+0x1b8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d007      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a56      	ldr	r2, [pc, #344]	@ (8008144 <TIM_Base_SetConfig+0x1bc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_Base_SetConfig+0x70>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a55      	ldr	r2, [pc, #340]	@ (8008148 <TIM_Base_SetConfig+0x1c0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d108      	bne.n	800800a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a45      	ldr	r2, [pc, #276]	@ (8008124 <TIM_Base_SetConfig+0x19c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d03b      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a44      	ldr	r2, [pc, #272]	@ (8008128 <TIM_Base_SetConfig+0x1a0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d037      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008020:	d033      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008028:	d02f      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a3f      	ldr	r2, [pc, #252]	@ (800812c <TIM_Base_SetConfig+0x1a4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d02b      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a3e      	ldr	r2, [pc, #248]	@ (8008130 <TIM_Base_SetConfig+0x1a8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d027      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a3d      	ldr	r2, [pc, #244]	@ (8008134 <TIM_Base_SetConfig+0x1ac>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d023      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a3c      	ldr	r2, [pc, #240]	@ (8008138 <TIM_Base_SetConfig+0x1b0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01f      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a3b      	ldr	r2, [pc, #236]	@ (800813c <TIM_Base_SetConfig+0x1b4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01b      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a3a      	ldr	r2, [pc, #232]	@ (8008140 <TIM_Base_SetConfig+0x1b8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d017      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a39      	ldr	r2, [pc, #228]	@ (8008144 <TIM_Base_SetConfig+0x1bc>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a38      	ldr	r2, [pc, #224]	@ (8008148 <TIM_Base_SetConfig+0x1c0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00f      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a37      	ldr	r2, [pc, #220]	@ (800814c <TIM_Base_SetConfig+0x1c4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00b      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a36      	ldr	r2, [pc, #216]	@ (8008150 <TIM_Base_SetConfig+0x1c8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d007      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a35      	ldr	r2, [pc, #212]	@ (8008154 <TIM_Base_SetConfig+0x1cc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d003      	beq.n	800808a <TIM_Base_SetConfig+0x102>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a34      	ldr	r2, [pc, #208]	@ (8008158 <TIM_Base_SetConfig+0x1d0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d108      	bne.n	800809c <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a18      	ldr	r2, [pc, #96]	@ (8008124 <TIM_Base_SetConfig+0x19c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <TIM_Base_SetConfig+0x168>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a17      	ldr	r2, [pc, #92]	@ (8008128 <TIM_Base_SetConfig+0x1a0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x168>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008144 <TIM_Base_SetConfig+0x1bc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x168>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a1b      	ldr	r2, [pc, #108]	@ (8008148 <TIM_Base_SetConfig+0x1c0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x168>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <TIM_Base_SetConfig+0x1cc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x168>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008158 <TIM_Base_SetConfig+0x1d0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d103      	bne.n	80080f8 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b01      	cmp	r3, #1
 8008108:	d105      	bne.n	8008116 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	611a      	str	r2, [r3, #16]
  }
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40012c00 	.word	0x40012c00
 8008128:	50012c00 	.word	0x50012c00
 800812c:	40000400 	.word	0x40000400
 8008130:	50000400 	.word	0x50000400
 8008134:	40000800 	.word	0x40000800
 8008138:	50000800 	.word	0x50000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	50000c00 	.word	0x50000c00
 8008144:	40013400 	.word	0x40013400
 8008148:	50013400 	.word	0x50013400
 800814c:	40001800 	.word	0x40001800
 8008150:	50001800 	.word	0x50001800
 8008154:	40014000 	.word	0x40014000
 8008158:	50014000 	.word	0x50014000

0800815c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	f023 0201 	bic.w	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800818a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f023 0302 	bic.w	r3, r3, #2
 80081a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a30      	ldr	r2, [pc, #192]	@ (8008278 <TIM_OC1_SetConfig+0x11c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <TIM_OC1_SetConfig+0x88>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a2f      	ldr	r2, [pc, #188]	@ (800827c <TIM_OC1_SetConfig+0x120>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_OC1_SetConfig+0x88>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008280 <TIM_OC1_SetConfig+0x124>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_OC1_SetConfig+0x88>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	@ (8008284 <TIM_OC1_SetConfig+0x128>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC1_SetConfig+0x88>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008288 <TIM_OC1_SetConfig+0x12c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC1_SetConfig+0x88>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a2b      	ldr	r2, [pc, #172]	@ (800828c <TIM_OC1_SetConfig+0x130>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10c      	bne.n	80081fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0308 	bic.w	r3, r3, #8
 80081ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f023 0304 	bic.w	r3, r3, #4
 80081fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <TIM_OC1_SetConfig+0x11c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <TIM_OC1_SetConfig+0xd2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <TIM_OC1_SetConfig+0x120>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00f      	beq.n	800822e <TIM_OC1_SetConfig+0xd2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <TIM_OC1_SetConfig+0x124>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00b      	beq.n	800822e <TIM_OC1_SetConfig+0xd2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <TIM_OC1_SetConfig+0x128>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d007      	beq.n	800822e <TIM_OC1_SetConfig+0xd2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a19      	ldr	r2, [pc, #100]	@ (8008288 <TIM_OC1_SetConfig+0x12c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d003      	beq.n	800822e <TIM_OC1_SetConfig+0xd2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a18      	ldr	r2, [pc, #96]	@ (800828c <TIM_OC1_SetConfig+0x130>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d111      	bne.n	8008252 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	621a      	str	r2, [r3, #32]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	40012c00 	.word	0x40012c00
 800827c:	50012c00 	.word	0x50012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	50013400 	.word	0x50013400
 8008288:	40014000 	.word	0x40014000
 800828c:	50014000 	.word	0x50014000

08008290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f023 0210 	bic.w	r2, r3, #16
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0320 	bic.w	r3, r3, #32
 80082de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a2e      	ldr	r2, [pc, #184]	@ (80083a8 <TIM_OC2_SetConfig+0x118>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00b      	beq.n	800830c <TIM_OC2_SetConfig+0x7c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a2d      	ldr	r2, [pc, #180]	@ (80083ac <TIM_OC2_SetConfig+0x11c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_OC2_SetConfig+0x7c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a2c      	ldr	r2, [pc, #176]	@ (80083b0 <TIM_OC2_SetConfig+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC2_SetConfig+0x7c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a2b      	ldr	r2, [pc, #172]	@ (80083b4 <TIM_OC2_SetConfig+0x124>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10d      	bne.n	8008328 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a1f      	ldr	r2, [pc, #124]	@ (80083a8 <TIM_OC2_SetConfig+0x118>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <TIM_OC2_SetConfig+0xc8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a1e      	ldr	r2, [pc, #120]	@ (80083ac <TIM_OC2_SetConfig+0x11c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00f      	beq.n	8008358 <TIM_OC2_SetConfig+0xc8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <TIM_OC2_SetConfig+0x120>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00b      	beq.n	8008358 <TIM_OC2_SetConfig+0xc8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <TIM_OC2_SetConfig+0x124>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_OC2_SetConfig+0xc8>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a1b      	ldr	r2, [pc, #108]	@ (80083b8 <TIM_OC2_SetConfig+0x128>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_OC2_SetConfig+0xc8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a1a      	ldr	r2, [pc, #104]	@ (80083bc <TIM_OC2_SetConfig+0x12c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d113      	bne.n	8008380 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800835e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	621a      	str	r2, [r3, #32]
}
 800839a:	bf00      	nop
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	50012c00 	.word	0x50012c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	50013400 	.word	0x50013400
 80083b8:	40014000 	.word	0x40014000
 80083bc:	50014000 	.word	0x50014000

080083c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2d      	ldr	r2, [pc, #180]	@ (80084d4 <TIM_OC3_SetConfig+0x114>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00b      	beq.n	800843a <TIM_OC3_SetConfig+0x7a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2c      	ldr	r2, [pc, #176]	@ (80084d8 <TIM_OC3_SetConfig+0x118>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d007      	beq.n	800843a <TIM_OC3_SetConfig+0x7a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2b      	ldr	r2, [pc, #172]	@ (80084dc <TIM_OC3_SetConfig+0x11c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <TIM_OC3_SetConfig+0x7a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2a      	ldr	r2, [pc, #168]	@ (80084e0 <TIM_OC3_SetConfig+0x120>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d10d      	bne.n	8008456 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1e      	ldr	r2, [pc, #120]	@ (80084d4 <TIM_OC3_SetConfig+0x114>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_OC3_SetConfig+0xc6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <TIM_OC3_SetConfig+0x118>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_OC3_SetConfig+0xc6>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1c      	ldr	r2, [pc, #112]	@ (80084dc <TIM_OC3_SetConfig+0x11c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_OC3_SetConfig+0xc6>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1b      	ldr	r2, [pc, #108]	@ (80084e0 <TIM_OC3_SetConfig+0x120>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_OC3_SetConfig+0xc6>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a1a      	ldr	r2, [pc, #104]	@ (80084e4 <TIM_OC3_SetConfig+0x124>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_OC3_SetConfig+0xc6>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a19      	ldr	r2, [pc, #100]	@ (80084e8 <TIM_OC3_SetConfig+0x128>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d113      	bne.n	80084ae <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800848c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	621a      	str	r2, [r3, #32]
}
 80084c8:	bf00      	nop
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	40012c00 	.word	0x40012c00
 80084d8:	50012c00 	.word	0x50012c00
 80084dc:	40013400 	.word	0x40013400
 80084e0:	50013400 	.word	0x50013400
 80084e4:	40014000 	.word	0x40014000
 80084e8:	50014000 	.word	0x50014000

080084ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800853a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a2e      	ldr	r2, [pc, #184]	@ (8008604 <TIM_OC4_SetConfig+0x118>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00b      	beq.n	8008568 <TIM_OC4_SetConfig+0x7c>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a2d      	ldr	r2, [pc, #180]	@ (8008608 <TIM_OC4_SetConfig+0x11c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_OC4_SetConfig+0x7c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a2c      	ldr	r2, [pc, #176]	@ (800860c <TIM_OC4_SetConfig+0x120>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_OC4_SetConfig+0x7c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2b      	ldr	r2, [pc, #172]	@ (8008610 <TIM_OC4_SetConfig+0x124>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d10d      	bne.n	8008584 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800856e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	031b      	lsls	r3, r3, #12
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008582:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1f      	ldr	r2, [pc, #124]	@ (8008604 <TIM_OC4_SetConfig+0x118>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <TIM_OC4_SetConfig+0xc8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1e      	ldr	r2, [pc, #120]	@ (8008608 <TIM_OC4_SetConfig+0x11c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00f      	beq.n	80085b4 <TIM_OC4_SetConfig+0xc8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a1d      	ldr	r2, [pc, #116]	@ (800860c <TIM_OC4_SetConfig+0x120>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00b      	beq.n	80085b4 <TIM_OC4_SetConfig+0xc8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a1c      	ldr	r2, [pc, #112]	@ (8008610 <TIM_OC4_SetConfig+0x124>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d007      	beq.n	80085b4 <TIM_OC4_SetConfig+0xc8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <TIM_OC4_SetConfig+0x128>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_OC4_SetConfig+0xc8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008618 <TIM_OC4_SetConfig+0x12c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d113      	bne.n	80085dc <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	019b      	lsls	r3, r3, #6
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	019b      	lsls	r3, r3, #6
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	4313      	orrs	r3, r2
 80085da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	40012c00 	.word	0x40012c00
 8008608:	50012c00 	.word	0x50012c00
 800860c:	40013400 	.word	0x40013400
 8008610:	50013400 	.word	0x50013400
 8008614:	40014000 	.word	0x40014000
 8008618:	50014000 	.word	0x50014000

0800861c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800864a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <TIM_OC5_SetConfig+0xbc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <TIM_OC5_SetConfig+0x82>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a18      	ldr	r2, [pc, #96]	@ (80086dc <TIM_OC5_SetConfig+0xc0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00f      	beq.n	800869e <TIM_OC5_SetConfig+0x82>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a17      	ldr	r2, [pc, #92]	@ (80086e0 <TIM_OC5_SetConfig+0xc4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00b      	beq.n	800869e <TIM_OC5_SetConfig+0x82>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a16      	ldr	r2, [pc, #88]	@ (80086e4 <TIM_OC5_SetConfig+0xc8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d007      	beq.n	800869e <TIM_OC5_SetConfig+0x82>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a15      	ldr	r2, [pc, #84]	@ (80086e8 <TIM_OC5_SetConfig+0xcc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d003      	beq.n	800869e <TIM_OC5_SetConfig+0x82>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a14      	ldr	r2, [pc, #80]	@ (80086ec <TIM_OC5_SetConfig+0xd0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d109      	bne.n	80086b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	621a      	str	r2, [r3, #32]
}
 80086cc:	bf00      	nop
 80086ce:	371c      	adds	r7, #28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	50012c00 	.word	0x50012c00
 80086e0:	40013400 	.word	0x40013400
 80086e4:	50013400 	.word	0x50013400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	50014000 	.word	0x50014000

080086f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800871e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	051b      	lsls	r3, r3, #20
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1a      	ldr	r2, [pc, #104]	@ (80087b0 <TIM_OC6_SetConfig+0xc0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <TIM_OC6_SetConfig+0x84>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a19      	ldr	r2, [pc, #100]	@ (80087b4 <TIM_OC6_SetConfig+0xc4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_OC6_SetConfig+0x84>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a18      	ldr	r2, [pc, #96]	@ (80087b8 <TIM_OC6_SetConfig+0xc8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_OC6_SetConfig+0x84>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <TIM_OC6_SetConfig+0xcc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_OC6_SetConfig+0x84>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a16      	ldr	r2, [pc, #88]	@ (80087c0 <TIM_OC6_SetConfig+0xd0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_OC6_SetConfig+0x84>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a15      	ldr	r2, [pc, #84]	@ (80087c4 <TIM_OC6_SetConfig+0xd4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d109      	bne.n	8008788 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800877a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	029b      	lsls	r3, r3, #10
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	621a      	str	r2, [r3, #32]
}
 80087a2:	bf00      	nop
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	40012c00 	.word	0x40012c00
 80087b4:	50012c00 	.word	0x50012c00
 80087b8:	40013400 	.word	0x40013400
 80087bc:	50013400 	.word	0x50013400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	50014000 	.word	0x50014000

080087c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0201 	bic.w	r2, r3, #1
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 030a 	bic.w	r3, r3, #10
 8008804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008826:	b480      	push	{r7}
 8008828:	b087      	sub	sp, #28
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f023 0210 	bic.w	r2, r3, #16
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	031b      	lsls	r3, r3, #12
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800889c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f043 0307 	orr.w	r3, r3, #7
 80088ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	609a      	str	r2, [r3, #8]
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	021a      	lsls	r2, r3, #8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	609a      	str	r2, [r3, #8]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	2201      	movs	r2, #1
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	43db      	mvns	r3, r3
 8008922:	401a      	ands	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a1a      	ldr	r2, [r3, #32]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 031f 	and.w	r3, r3, #31
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	fa01 f303 	lsl.w	r3, r1, r3
 8008938:	431a      	orrs	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008960:	2302      	movs	r3, #2
 8008962:	e0a1      	b.n	8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a4a      	ldr	r2, [pc, #296]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00e      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a49      	ldr	r2, [pc, #292]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d009      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a47      	ldr	r2, [pc, #284]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a46      	ldr	r2, [pc, #280]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d108      	bne.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80089c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a34      	ldr	r2, [pc, #208]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d04a      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a33      	ldr	r2, [pc, #204]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d045      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f8:	d040      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a02:	d03b      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a2e      	ldr	r2, [pc, #184]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d036      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d031      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d02c      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a2a      	ldr	r2, [pc, #168]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d027      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a28      	ldr	r2, [pc, #160]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d022      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a27      	ldr	r2, [pc, #156]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d01d      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1d      	ldr	r2, [pc, #116]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d018      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d013      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a20      	ldr	r2, [pc, #128]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00e      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1f      	ldr	r2, [pc, #124]	@ (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d009      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d004      	beq.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d10c      	bne.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40012c00 	.word	0x40012c00
 8008ab8:	50012c00 	.word	0x50012c00
 8008abc:	40013400 	.word	0x40013400
 8008ac0:	50013400 	.word	0x50013400
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	50000400 	.word	0x50000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	50000800 	.word	0x50000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	50000c00 	.word	0x50000c00
 8008adc:	40001800 	.word	0x40001800
 8008ae0:	50001800 	.word	0x50001800
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	50014000 	.word	0x50014000

08008aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e07d      	b.n	8008c04 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	041b      	lsls	r3, r3, #16
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1e      	ldr	r2, [pc, #120]	@ (8008c10 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00e      	beq.n	8008bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d009      	beq.n	8008bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c1c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d11c      	bne.n	8008bf2 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc2:	051b      	lsls	r3, r3, #20
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	40012c00 	.word	0x40012c00
 8008c14:	50012c00 	.word	0x50012c00
 8008c18:	40013400 	.word	0x40013400
 8008c1c:	50013400 	.word	0x50013400

08008c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e042      	b.n	8008d44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7f8 fd67 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	@ 0x24
 8008cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fdde 	bl	80098b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc2d 	bl	800955c <UART_SetConfig>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e01b      	b.n	8008d44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fe5d 	bl	80099fc <UART_CheckIdleState>
 8008d42:	4603      	mov	r3, r0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	@ 0x28
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	f040 808b 	bne.w	8008e7e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <HAL_UART_Transmit+0x28>
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e083      	b.n	8008e80 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d82:	2b80      	cmp	r3, #128	@ 0x80
 8008d84:	d107      	bne.n	8008d96 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d94:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2221      	movs	r2, #33	@ 0x21
 8008da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008da6:	f7f8 fe91 	bl	8001acc <HAL_GetTick>
 8008daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	88fa      	ldrh	r2, [r7, #6]
 8008db8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc4:	d108      	bne.n	8008dd8 <HAL_UART_Transmit+0x8c>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008de0:	e030      	b.n	8008e44 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2200      	movs	r2, #0
 8008dea:	2180      	movs	r1, #128	@ 0x80
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 feaf 	bl	8009b50 <UART_WaitOnFlagUntilTimeout>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e03d      	b.n	8008e80 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e007      	b.n	8008e32 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1c8      	bne.n	8008de2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2200      	movs	r2, #0
 8008e58:	2140      	movs	r1, #64	@ 0x40
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fe78 	bl	8009b50 <UART_WaitOnFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e006      	b.n	8008e80 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e000      	b.n	8008e80 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008e7e:	2302      	movs	r3, #2
  }
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	@ 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d13c      	bne.n	8008f1a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <HAL_UART_Receive_DMA+0x24>
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e035      	b.n	8008f1c <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1a      	ldr	r2, [pc, #104]	@ (8008f24 <HAL_UART_Receive_DMA+0x9c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d024      	beq.n	8008f0a <HAL_UART_Receive_DMA+0x82>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a18      	ldr	r2, [pc, #96]	@ (8008f28 <HAL_UART_Receive_DMA+0xa0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d01f      	beq.n	8008f0a <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d018      	beq.n	8008f0a <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	623b      	str	r3, [r7, #32]
 8008ef8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	69f9      	ldr	r1, [r7, #28]
 8008efc:	6a3a      	ldr	r2, [r7, #32]
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fe8b 	bl	8009c2c <UART_Start_Receive_DMA>
 8008f16:	4603      	mov	r3, r0
 8008f18:	e000      	b.n	8008f1c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f1a:	2302      	movs	r3, #2
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3728      	adds	r7, #40	@ 0x28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	44002400 	.word	0x44002400
 8008f28:	54002400 	.word	0x54002400

08008f2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ae      	sub	sp, #184	@ 0xb8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8008f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11b      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d105      	bne.n	8008f8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 82ac 	beq.w	80094ee <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
      }
      return;
 8008f9e:	e2a6      	b.n	80094ee <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80fd 	beq.w	80091a4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008faa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008fae:	4b7a      	ldr	r3, [pc, #488]	@ (8009198 <HAL_UART_IRQHandler+0x26c>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fba:	4b78      	ldr	r3, [pc, #480]	@ (800919c <HAL_UART_IRQHandler+0x270>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80f0 	beq.w	80091a4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d011      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xc8>
 8008fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fea:	f043 0201 	orr.w	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d011      	beq.n	8009024 <HAL_UART_IRQHandler+0xf8>
 8009000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2202      	movs	r2, #2
 8009012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_UART_IRQHandler+0x128>
 8009030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2204      	movs	r2, #4
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904a:	f043 0202 	orr.w	r2, r3, #2
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800906c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009070:	4b49      	ldr	r3, [pc, #292]	@ (8009198 <HAL_UART_IRQHandler+0x26c>)
 8009072:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009086:	f043 0208 	orr.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <HAL_UART_IRQHandler+0x196>
 800909c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00c      	beq.n	80090c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8212 	beq.w	80094f2 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d013      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009116:	2b40      	cmp	r3, #64	@ 0x40
 8009118:	d005      	beq.n	8009126 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800911a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800911e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009122:	2b00      	cmp	r3, #0
 8009124:	d02e      	beq.n	8009184 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 feb9 	bl	8009e9e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d120      	bne.n	800917c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009140:	2b00      	cmp	r3, #0
 8009142:	d017      	beq.n	8009174 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914a:	4a15      	ldr	r2, [pc, #84]	@ (80091a0 <HAL_UART_IRQHandler+0x274>)
 800914c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009154:	4618      	mov	r0, r3
 8009156:	f7f9 f881 	bl	800225c <HAL_DMA_Abort_IT>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d019      	beq.n	8009194 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800916e:	4610      	mov	r0, r2
 8009170:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009172:	e00f      	b.n	8009194 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f9db 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917a:	e00b      	b.n	8009194 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f9d7 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009182:	e007      	b.n	8009194 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9d3 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009192:	e1ae      	b.n	80094f2 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009194:	bf00      	nop
    return;
 8009196:	e1ac      	b.n	80094f2 <HAL_UART_IRQHandler+0x5c6>
 8009198:	10000001 	.word	0x10000001
 800919c:	04000120 	.word	0x04000120
 80091a0:	0800a11b 	.word	0x0800a11b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 8142 	bne.w	8009432 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 813b 	beq.w	8009432 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8134 	beq.w	8009432 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2210      	movs	r2, #16
 80091d0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b40      	cmp	r3, #64	@ 0x40
 80091de:	f040 80aa 	bne.w	8009336 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091ec:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80091f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8084 	beq.w	8009302 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009200:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009204:	429a      	cmp	r2, r3
 8009206:	d27c      	bcs.n	8009302 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800920e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800921a:	2b81      	cmp	r3, #129	@ 0x81
 800921c:	d060      	beq.n	80092e0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800922c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800922e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009244:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009248:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e2      	bne.n	800921e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800926a:	f023 0301 	bic.w	r3, r3, #1
 800926e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3308      	adds	r3, #8
 8009278:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800927c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800927e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009282:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800928a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e3      	bne.n	8009258 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ae:	f023 0310 	bic.w	r3, r3, #16
 80092b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e4      	bne.n	800929e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f8 ff42 	bl	8002164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f922 	bl	8009544 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009300:	e0f9      	b.n	80094f6 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009308:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800930c:	429a      	cmp	r2, r3
 800930e:	f040 80f2 	bne.w	80094f6 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931a:	2b81      	cmp	r3, #129	@ 0x81
 800931c:	f040 80eb 	bne.w	80094f6 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f908 	bl	8009544 <HAL_UARTEx_RxEventCallback>
      return;
 8009334:	e0df      	b.n	80094f6 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009342:	b29b      	uxth	r3, r3
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80d1 	beq.w	80094fa <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8009358:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80cc 	beq.w	80094fa <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009376:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009384:	647b      	str	r3, [r7, #68]	@ 0x44
 8009386:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800938a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e4      	bne.n	8009362 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	623b      	str	r3, [r7, #32]
   return(result);
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80093c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80093c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e1      	bne.n	8009398 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	69b9      	ldr	r1, [r7, #24]
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	617b      	str	r3, [r7, #20]
   return(result);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e4      	bne.n	80093e8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009424:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f88a 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009430:	e063      	b.n	80094fa <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00e      	beq.n	800945c <HAL_UART_IRQHandler+0x530>
 800943e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d008      	beq.n	800945c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fe9d 	bl	800a194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800945a:	e051      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800945c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009464:	2b00      	cmp	r3, #0
 8009466:	d014      	beq.n	8009492 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800946c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009484:	2b00      	cmp	r3, #0
 8009486:	d03a      	beq.n	80094fe <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
    }
    return;
 8009490:	e035      	b.n	80094fe <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <HAL_UART_IRQHandler+0x586>
 800949e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fe47 	bl	800a13e <UART_EndTransmit_IT>
    return;
 80094b0:	e026      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <HAL_UART_IRQHandler+0x5a6>
 80094be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fe76 	bl	800a1bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094d0:	e016      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <HAL_UART_IRQHandler+0x5d4>
 80094de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da0c      	bge.n	8009500 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fe5e 	bl	800a1a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094ec:	e008      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094ee:	bf00      	nop
 80094f0:	e006      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
    return;
 80094f2:	bf00      	nop
 80094f4:	e004      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094f6:	bf00      	nop
 80094f8:	e002      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
      return;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <HAL_UART_IRQHandler+0x5d4>
    return;
 80094fe:	bf00      	nop
  }
}
 8009500:	37b8      	adds	r7, #184	@ 0xb8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop

08009508 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800955c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009560:	b094      	sub	sp, #80	@ 0x50
 8009562:	af00      	add	r7, sp, #0
 8009564:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	4b83      	ldr	r3, [pc, #524]	@ (8009780 <UART_SetConfig+0x224>)
 8009572:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	431a      	orrs	r2, r3
 800957e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	431a      	orrs	r2, r3
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	4313      	orrs	r3, r2
 800958a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	497c      	ldr	r1, [pc, #496]	@ (8009784 <UART_SetConfig+0x228>)
 8009594:	4019      	ands	r1, r3
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800959c:	430b      	orrs	r3, r1
 800959e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	68d9      	ldr	r1, [r3, #12]
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	ea40 0301 	orr.w	r3, r0, r1
 80095b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009780 <UART_SetConfig+0x224>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d009      	beq.n	80095dc <UART_SetConfig+0x80>
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4b6e      	ldr	r3, [pc, #440]	@ (8009788 <UART_SetConfig+0x22c>)
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d004      	beq.n	80095dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	6a1a      	ldr	r2, [r3, #32]
 80095d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d8:	4313      	orrs	r3, r2
 80095da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80095e6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80095ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fa:	f023 000f 	bic.w	r0, r3, #15
 80095fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009600:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	ea40 0301 	orr.w	r3, r0, r1
 800960a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800960c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b5e      	ldr	r3, [pc, #376]	@ (800978c <UART_SetConfig+0x230>)
 8009612:	429a      	cmp	r2, r3
 8009614:	d102      	bne.n	800961c <UART_SetConfig+0xc0>
 8009616:	2301      	movs	r3, #1
 8009618:	64bb      	str	r3, [r7, #72]	@ 0x48
 800961a:	e032      	b.n	8009682 <UART_SetConfig+0x126>
 800961c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	4b5b      	ldr	r3, [pc, #364]	@ (8009790 <UART_SetConfig+0x234>)
 8009622:	429a      	cmp	r2, r3
 8009624:	d102      	bne.n	800962c <UART_SetConfig+0xd0>
 8009626:	2302      	movs	r3, #2
 8009628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800962a:	e02a      	b.n	8009682 <UART_SetConfig+0x126>
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b58      	ldr	r3, [pc, #352]	@ (8009794 <UART_SetConfig+0x238>)
 8009632:	429a      	cmp	r2, r3
 8009634:	d102      	bne.n	800963c <UART_SetConfig+0xe0>
 8009636:	2304      	movs	r3, #4
 8009638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800963a:	e022      	b.n	8009682 <UART_SetConfig+0x126>
 800963c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b55      	ldr	r3, [pc, #340]	@ (8009798 <UART_SetConfig+0x23c>)
 8009642:	429a      	cmp	r2, r3
 8009644:	d102      	bne.n	800964c <UART_SetConfig+0xf0>
 8009646:	2308      	movs	r3, #8
 8009648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800964a:	e01a      	b.n	8009682 <UART_SetConfig+0x126>
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b52      	ldr	r3, [pc, #328]	@ (800979c <UART_SetConfig+0x240>)
 8009652:	429a      	cmp	r2, r3
 8009654:	d102      	bne.n	800965c <UART_SetConfig+0x100>
 8009656:	2310      	movs	r3, #16
 8009658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800965a:	e012      	b.n	8009682 <UART_SetConfig+0x126>
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	4b4f      	ldr	r3, [pc, #316]	@ (80097a0 <UART_SetConfig+0x244>)
 8009662:	429a      	cmp	r2, r3
 8009664:	d102      	bne.n	800966c <UART_SetConfig+0x110>
 8009666:	2320      	movs	r3, #32
 8009668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800966a:	e00a      	b.n	8009682 <UART_SetConfig+0x126>
 800966c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b43      	ldr	r3, [pc, #268]	@ (8009780 <UART_SetConfig+0x224>)
 8009672:	429a      	cmp	r2, r3
 8009674:	d103      	bne.n	800967e <UART_SetConfig+0x122>
 8009676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800967a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800967c:	e001      	b.n	8009682 <UART_SetConfig+0x126>
 800967e:	2300      	movs	r3, #0
 8009680:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	4b3e      	ldr	r3, [pc, #248]	@ (8009780 <UART_SetConfig+0x224>)
 8009688:	429a      	cmp	r2, r3
 800968a:	d005      	beq.n	8009698 <UART_SetConfig+0x13c>
 800968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	4b3d      	ldr	r3, [pc, #244]	@ (8009788 <UART_SetConfig+0x22c>)
 8009692:	429a      	cmp	r2, r3
 8009694:	f040 8088 	bne.w	80097a8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800969a:	2200      	movs	r2, #0
 800969c:	623b      	str	r3, [r7, #32]
 800969e:	627a      	str	r2, [r7, #36]	@ 0x24
 80096a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80096a4:	f7fc fa40 	bl	8005b28 <HAL_RCCEx_GetPeriphCLKFreq>
 80096a8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80096aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80eb 	beq.w	8009888 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b6:	4a3b      	ldr	r2, [pc, #236]	@ (80097a4 <UART_SetConfig+0x248>)
 80096b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096bc:	461a      	mov	r2, r3
 80096be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	4613      	mov	r3, r2
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d305      	bcc.n	80096e2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096de:	429a      	cmp	r2, r3
 80096e0:	d903      	bls.n	80096ea <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80096e8:	e048      	b.n	800977c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ec:	2200      	movs	r2, #0
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	61fa      	str	r2, [r7, #28]
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	4a2b      	ldr	r2, [pc, #172]	@ (80097a4 <UART_SetConfig+0x248>)
 80096f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2200      	movs	r2, #0
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	617a      	str	r2, [r7, #20]
 8009704:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009708:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800970c:	f7f7 f902 	bl	8000914 <__aeabi_uldivmod>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	f04f 0200 	mov.w	r2, #0
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	020b      	lsls	r3, r1, #8
 8009722:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009726:	0202      	lsls	r2, r0, #8
 8009728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800972a:	6849      	ldr	r1, [r1, #4]
 800972c:	0849      	lsrs	r1, r1, #1
 800972e:	2000      	movs	r0, #0
 8009730:	460c      	mov	r4, r1
 8009732:	4605      	mov	r5, r0
 8009734:	eb12 0804 	adds.w	r8, r2, r4
 8009738:	eb43 0905 	adc.w	r9, r3, r5
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	60bb      	str	r3, [r7, #8]
 8009744:	60fa      	str	r2, [r7, #12]
 8009746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	f7f7 f8e1 	bl	8000914 <__aeabi_uldivmod>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4613      	mov	r3, r2
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800975a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009760:	d308      	bcc.n	8009774 <UART_SetConfig+0x218>
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009768:	d204      	bcs.n	8009774 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	e003      	b.n	800977c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800977a:	e085      	b.n	8009888 <UART_SetConfig+0x32c>
 800977c:	e084      	b.n	8009888 <UART_SetConfig+0x32c>
 800977e:	bf00      	nop
 8009780:	44002400 	.word	0x44002400
 8009784:	cfff69f3 	.word	0xcfff69f3
 8009788:	54002400 	.word	0x54002400
 800978c:	40013800 	.word	0x40013800
 8009790:	40004400 	.word	0x40004400
 8009794:	40004800 	.word	0x40004800
 8009798:	40004c00 	.word	0x40004c00
 800979c:	40005000 	.word	0x40005000
 80097a0:	40006400 	.word	0x40006400
 80097a4:	0800a4a0 	.word	0x0800a4a0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097b0:	d13c      	bne.n	800982c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80097b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097b4:	2200      	movs	r2, #0
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097be:	f7fc f9b3 	bl	8005b28 <HAL_RCCEx_GetPeriphCLKFreq>
 80097c2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d05e      	beq.n	8009888 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ce:	4a39      	ldr	r2, [pc, #228]	@ (80098b4 <UART_SetConfig+0x358>)
 80097d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097dc:	005a      	lsls	r2, r3, #1
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	441a      	add	r2, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f2:	2b0f      	cmp	r3, #15
 80097f4:	d916      	bls.n	8009824 <UART_SetConfig+0x2c8>
 80097f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097fc:	d212      	bcs.n	8009824 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009800:	b29b      	uxth	r3, r3
 8009802:	f023 030f 	bic.w	r3, r3, #15
 8009806:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980a:	085b      	lsrs	r3, r3, #1
 800980c:	b29b      	uxth	r3, r3
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	b29a      	uxth	r2, r3
 8009814:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009816:	4313      	orrs	r3, r2
 8009818:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	e031      	b.n	8009888 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800982a:	e02d      	b.n	8009888 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800982c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982e:	2200      	movs	r2, #0
 8009830:	469a      	mov	sl, r3
 8009832:	4693      	mov	fp, r2
 8009834:	4650      	mov	r0, sl
 8009836:	4659      	mov	r1, fp
 8009838:	f7fc f976 	bl	8005b28 <HAL_RCCEx_GetPeriphCLKFreq>
 800983c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800983e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d021      	beq.n	8009888 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009848:	4a1a      	ldr	r2, [pc, #104]	@ (80098b4 <UART_SetConfig+0x358>)
 800984a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800984e:	461a      	mov	r2, r3
 8009850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009852:	fbb3 f2f2 	udiv	r2, r3, r2
 8009856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	441a      	add	r2, r3
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	fbb2 f3f3 	udiv	r3, r2, r3
 8009866:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986a:	2b0f      	cmp	r3, #15
 800986c:	d909      	bls.n	8009882 <UART_SetConfig+0x326>
 800986e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009874:	d205      	bcs.n	8009882 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009878:	b29a      	uxth	r2, r3
 800987a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60da      	str	r2, [r3, #12]
 8009880:	e002      	b.n	8009888 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988a:	2201      	movs	r2, #1
 800988c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	2201      	movs	r2, #1
 8009894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	2200      	movs	r2, #0
 800989c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a0:	2200      	movs	r2, #0
 80098a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3750      	adds	r7, #80	@ 0x50
 80098ac:	46bd      	mov	sp, r7
 80098ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098b2:	bf00      	nop
 80098b4:	0800a4a0 	.word	0x0800a4a0

080098b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00a      	beq.n	80098e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00a      	beq.n	8009904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00a      	beq.n	8009926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996e:	f003 0320 	and.w	r3, r3, #32
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01a      	beq.n	80099ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099b6:	d10a      	bne.n	80099ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00a      	beq.n	80099f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	605a      	str	r2, [r3, #4]
  }
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b098      	sub	sp, #96	@ 0x60
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a0c:	f7f8 f85e 	bl	8001acc <HAL_GetTick>
 8009a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d12f      	bne.n	8009a80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f88e 	bl	8009b50 <UART_WaitOnFlagUntilTimeout>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d022      	beq.n	8009a80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e6      	bne.n	8009a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e063      	b.n	8009b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d149      	bne.n	8009b22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a96:	2200      	movs	r2, #0
 8009a98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f857 	bl	8009b50 <UART_WaitOnFlagUntilTimeout>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d03c      	beq.n	8009b22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e6      	bne.n	8009aa8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3308      	adds	r3, #8
 8009ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009afa:	61fa      	str	r2, [r7, #28]
 8009afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	69b9      	ldr	r1, [r7, #24]
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	617b      	str	r3, [r7, #20]
   return(result);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e5      	bne.n	8009ada <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e012      	b.n	8009b48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3758      	adds	r7, #88	@ 0x58
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b60:	e04f      	b.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b68:	d04b      	beq.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b6a:	f7f7 ffaf 	bl	8001acc <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d302      	bcc.n	8009b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e04e      	b.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d037      	beq.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b80      	cmp	r3, #128	@ 0x80
 8009b96:	d034      	beq.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b40      	cmp	r3, #64	@ 0x40
 8009b9c:	d031      	beq.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d110      	bne.n	8009bce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2208      	movs	r2, #8
 8009bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f972 	bl	8009e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2208      	movs	r2, #8
 8009bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e029      	b.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bdc:	d111      	bne.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f958 	bl	8009e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e00f      	b.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	bf0c      	ite	eq
 8009c12:	2301      	moveq	r3, #1
 8009c14:	2300      	movne	r3, #0
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d0a0      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b098      	sub	sp, #96	@ 0x60
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	88fa      	ldrh	r2, [r7, #6]
 8009c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2222      	movs	r2, #34	@ 0x22
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d07c      	beq.n	8009d62 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6e:	4a68      	ldr	r2, [pc, #416]	@ (8009e10 <UART_Start_Receive_DMA+0x1e4>)
 8009c70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c78:	4a66      	ldr	r2, [pc, #408]	@ (8009e14 <UART_Start_Receive_DMA+0x1e8>)
 8009c7a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c82:	4a65      	ldr	r2, [pc, #404]	@ (8009e18 <UART_Start_Receive_DMA+0x1ec>)
 8009c84:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c98:	d107      	bne.n	8009caa <UART_Start_Receive_DMA+0x7e>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d103      	bne.n	8009caa <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d034      	beq.n	8009d24 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d02a      	beq.n	8009d1c <UART_Start_Receive_DMA+0xf0>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d023      	beq.n	8009d1c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009ce2:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7f8 ff14 	bl	8002b3c <HAL_DMAEx_List_Start_IT>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d1a:	e014      	b.n	8009d46 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d22:	e010      	b.n	8009d46 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3324      	adds	r3, #36	@ 0x24
 8009d30:	4619      	mov	r1, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d36:	461a      	mov	r2, r3
 8009d38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009d3c:	f7f8 f9b2 	bl	80020a4 <HAL_DMA_Start_IT>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 8009d46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d009      	beq.n	8009d62 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2210      	movs	r2, #16
 8009d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e051      	b.n	8009e06 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d018      	beq.n	8009d9c <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d8a:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e6      	bne.n	8009d6a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3308      	adds	r3, #8
 8009dba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009dc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e5      	bne.n	8009d9c <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	e853 3f00 	ldrex	r3, [r3]
 8009dde:	617b      	str	r3, [r7, #20]
   return(result);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3308      	adds	r3, #8
 8009dee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009df0:	627a      	str	r2, [r7, #36]	@ 0x24
 8009df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6a39      	ldr	r1, [r7, #32]
 8009df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e5      	bne.n	8009dd0 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3760      	adds	r7, #96	@ 0x60
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	08009f6b 	.word	0x08009f6b
 8009e14:	0800a05d 	.word	0x0800a05d
 8009e18:	0800a09b 	.word	0x0800a09b

08009e1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b08f      	sub	sp, #60	@ 0x3c
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e6      	bne.n	8009e24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e76:	61ba      	str	r2, [r7, #24]
 8009e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6979      	ldr	r1, [r7, #20]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	613b      	str	r3, [r7, #16]
   return(result);
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e5      	bne.n	8009e56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e92:	bf00      	nop
 8009e94:	373c      	adds	r7, #60	@ 0x3c
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b095      	sub	sp, #84	@ 0x54
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ec6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e6      	bne.n	8009ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3308      	adds	r3, #8
 8009ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e3      	bne.n	8009ed8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d118      	bne.n	8009f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f023 0310 	bic.w	r3, r3, #16
 8009f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f36:	61bb      	str	r3, [r7, #24]
 8009f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6979      	ldr	r1, [r7, #20]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	613b      	str	r3, [r7, #16]
   return(result);
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e6      	bne.n	8009f18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f5e:	bf00      	nop
 8009f60:	3754      	adds	r7, #84	@ 0x54
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b096      	sub	sp, #88	@ 0x58
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f76:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f7c:	2b81      	cmp	r3, #129	@ 0x81
 8009f7e:	d057      	beq.n	800a030 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8009f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fae:	e841 2300 	strex	r3, r2, [r1]
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e6      	bne.n	8009f88 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e5      	bne.n	8009fba <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d118      	bne.n	800a030 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a01c:	61fb      	str	r3, [r7, #28]
 800a01e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	69b9      	ldr	r1, [r7, #24]
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	617b      	str	r3, [r7, #20]
   return(result);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a032:	2200      	movs	r2, #0
 800a034:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d107      	bne.n	800a04e <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a044:	4619      	mov	r1, r3
 800a046:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a048:	f7ff fa7c 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a04c:	e002      	b.n	800a054 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800a04e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a050:	f7f7 f8c4 	bl	80011dc <HAL_UART_RxCpltCallback>
}
 800a054:	bf00      	nop
 800a056:	3758      	adds	r7, #88	@ 0x58
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a068:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a074:	2b01      	cmp	r3, #1
 800a076:	d109      	bne.n	800a08c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a07e:	085b      	lsrs	r3, r3, #1
 800a080:	b29b      	uxth	r3, r3
 800a082:	4619      	mov	r1, r3
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff fa5d 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a08a:	e002      	b.n	800a092 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff fa45 	bl	800951c <HAL_UART_RxHalfCpltCallback>
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b086      	sub	sp, #24
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0c2:	2b80      	cmp	r3, #128	@ 0x80
 800a0c4:	d109      	bne.n	800a0da <UART_DMAError+0x40>
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b21      	cmp	r3, #33	@ 0x21
 800a0ca:	d106      	bne.n	800a0da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a0d4:	6978      	ldr	r0, [r7, #20]
 800a0d6:	f7ff fea1 	bl	8009e1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e4:	2b40      	cmp	r3, #64	@ 0x40
 800a0e6:	d109      	bne.n	800a0fc <UART_DMAError+0x62>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b22      	cmp	r3, #34	@ 0x22
 800a0ec:	d106      	bne.n	800a0fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a0f6:	6978      	ldr	r0, [r7, #20]
 800a0f8:	f7ff fed1 	bl	8009e9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a102:	f043 0210 	orr.w	r2, r3, #16
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a10c:	6978      	ldr	r0, [r7, #20]
 800a10e:	f7ff fa0f 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a112:	bf00      	nop
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f7ff f9fd 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a136:	bf00      	nop
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60bb      	str	r3, [r7, #8]
   return(result);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	61bb      	str	r3, [r7, #24]
 800a166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	613b      	str	r3, [r7, #16]
   return(result);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e6      	bne.n	800a146 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff f9be 	bl	8009508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a18c:	bf00      	nop
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	e027      	b.n	800a236 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2224      	movs	r2, #36	@ 0x24
 800a1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0201 	bic.w	r2, r2, #1
 800a20c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a256:	2302      	movs	r3, #2
 800a258:	e02d      	b.n	800a2b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2224      	movs	r2, #36	@ 0x24
 800a266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0201 	bic.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f850 	bl	800a33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d101      	bne.n	800a2d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	e02d      	b.n	800a332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2224      	movs	r2, #36	@ 0x24
 800a2e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f812 	bl	800a33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d108      	bne.n	800a35e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a35c:	e031      	b.n	800a3c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a35e:	2308      	movs	r3, #8
 800a360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a362:	2308      	movs	r3, #8
 800a364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	0e5b      	lsrs	r3, r3, #25
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	0f5b      	lsrs	r3, r3, #29
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f003 0307 	and.w	r3, r3, #7
 800a384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	7b3a      	ldrb	r2, [r7, #12]
 800a38a:	4911      	ldr	r1, [pc, #68]	@ (800a3d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a38c:	5c8a      	ldrb	r2, [r1, r2]
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a392:	7b3a      	ldrb	r2, [r7, #12]
 800a394:	490f      	ldr	r1, [pc, #60]	@ (800a3d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a398:	fb93 f3f2 	sdiv	r3, r3, r2
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	7b7a      	ldrb	r2, [r7, #13]
 800a3a8:	4909      	ldr	r1, [pc, #36]	@ (800a3d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a3aa:	5c8a      	ldrb	r2, [r1, r2]
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3b0:	7b7a      	ldrb	r2, [r7, #13]
 800a3b2:	4908      	ldr	r1, [pc, #32]	@ (800a3d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a3b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	0800a4b8 	.word	0x0800a4b8
 800a3d4:	0800a4c0 	.word	0x0800a4c0

0800a3d8 <memset>:
 800a3d8:	4402      	add	r2, r0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d100      	bne.n	800a3e2 <memset+0xa>
 800a3e0:	4770      	bx	lr
 800a3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e6:	e7f9      	b.n	800a3dc <memset+0x4>

0800a3e8 <__libc_init_array>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a420 <__libc_init_array+0x38>)
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	4c0d      	ldr	r4, [pc, #52]	@ (800a424 <__libc_init_array+0x3c>)
 800a3f0:	1b64      	subs	r4, r4, r5
 800a3f2:	10a4      	asrs	r4, r4, #2
 800a3f4:	42a6      	cmp	r6, r4
 800a3f6:	d109      	bne.n	800a40c <__libc_init_array+0x24>
 800a3f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a428 <__libc_init_array+0x40>)
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	4c0b      	ldr	r4, [pc, #44]	@ (800a42c <__libc_init_array+0x44>)
 800a3fe:	f000 f817 	bl	800a430 <_init>
 800a402:	1b64      	subs	r4, r4, r5
 800a404:	10a4      	asrs	r4, r4, #2
 800a406:	42a6      	cmp	r6, r4
 800a408:	d105      	bne.n	800a416 <__libc_init_array+0x2e>
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a410:	3601      	adds	r6, #1
 800a412:	4798      	blx	r3
 800a414:	e7ee      	b.n	800a3f4 <__libc_init_array+0xc>
 800a416:	f855 3b04 	ldr.w	r3, [r5], #4
 800a41a:	3601      	adds	r6, #1
 800a41c:	4798      	blx	r3
 800a41e:	e7f2      	b.n	800a406 <__libc_init_array+0x1e>
 800a420:	0800a4d0 	.word	0x0800a4d0
 800a424:	0800a4d0 	.word	0x0800a4d0
 800a428:	0800a4d0 	.word	0x0800a4d0
 800a42c:	0800a4d4 	.word	0x0800a4d4

0800a430 <_init>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr

0800a43c <_fini>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr
