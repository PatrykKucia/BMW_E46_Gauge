
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc5c  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800deb4  0800deb4  0000eeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e15c  0800e15c  000100ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e15c  0800e15c  0000f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e164  0800e164  000100ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e164  0800e164  0000f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e168  0800e168  0000f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800e16c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200000ec  0800e258  000100ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800e258  000106f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b29  00000000  00000000  00010122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af8  00000000  00000000  00030c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a0  00000000  00000000  000361a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6c4  00000000  00000000  00037640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024378  00000000  00000000  00065d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120c7a  00000000  00000000  0008a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aacf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e0  00000000  00000000  001aad3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800de9c 	.word	0x0800de9c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800de9c 	.word	0x0800de9c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f003 f8ee 	bl	8004090 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f001 f97b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f003 fa32 	bl	8004344 <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00c f962 	bl	800d1b0 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f003 fa83 	bl	80043f8 <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f001 f95c 	bl	80021b4 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800deb4 	.word	0x0800deb4

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00c fa1d 	bl	800d370 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 fc24 	bl	80067a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f001 f927 	bl	80021b4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fcf9 	bl	80049c0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f002 f848 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f002 f85f 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f002 f840 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f002 f857 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00c f80f 	bl	800d0e0 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f003 f9b0 	bl	8004448 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800ded0 	.word	0x0800ded0
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00b ffe3 	bl	800d0e0 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00b ffdc 	bl	800d0e0 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800ded0 	.word	0x0800ded0
 800114c:	0800dee8 	.word	0x0800dee8
 8001150:	20000000 	.word	0x20000000

08001154 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800115c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	201b      	movs	r0, #27
 800117e:	f001 ff73 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001182:	201b      	movs	r0, #27
 8001184:	f001 ff8a 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	44020c00 	.word	0x44020c00

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b48      	ldr	r3, [pc, #288]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a46      	ldr	r2, [pc, #280]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	4b40      	ldr	r3, [pc, #256]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	4a3f      	ldr	r2, [pc, #252]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d8:	4b3c      	ldr	r3, [pc, #240]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	4a37      	ldr	r2, [pc, #220]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f6:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <MX_GPIO_Init+0x138>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	4a30      	ldr	r2, [pc, #192]	@ (80012cc <MX_GPIO_Init+0x138>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001228:	4829      	ldr	r0, [pc, #164]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 800122a:	f003 fd1b 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001234:	4827      	ldr	r0, [pc, #156]	@ (80012d4 <MX_GPIO_Init+0x140>)
 8001236:	f003 fd15 	bl	8004c64 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f243 411e 	movw	r1, #13342	@ 0x341e
 8001240:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0x144>)
 8001242:	f003 fd0f 	bl	8004c64 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fuel_HVC_GPIO_Port, Fuel_HVC_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2120      	movs	r1, #32
 800124a:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <MX_GPIO_Init+0x144>)
 800124c:	f003 fd0a 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	481a      	ldr	r0, [pc, #104]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001266:	f003 fbab 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 800126a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001284:	f003 fb9c 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 8001288:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 800128c:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_GPIO_Init+0x140>)
 80012a2:	f003 fb8d 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 80012a6:	f243 433e 	movw	r3, #13374	@ 0x343e
 80012aa:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_GPIO_Init+0x144>)
 80012c0:	f003 fb7e 	bl	80049c0 <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	44020c00 	.word	0x44020c00
 80012d0:	42020800 	.word	0x42020800
 80012d4:	42020000 	.word	0x42020000
 80012d8:	42020400 	.word	0x42020400

080012dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <MX_I2C1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <MX_I2C1_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <MX_I2C1_Init+0x74>)
 8001318:	f003 fcd6 	bl	8004cc8 <HAL_I2C_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001322:	f000 ff47 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <MX_I2C1_Init+0x74>)
 800132a:	f004 f9f9 	bl	8005720 <HAL_I2CEx_ConfigAnalogFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 ff3e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_I2C1_Init+0x74>)
 800133c:	f004 fa3b 	bl	80057b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 ff35 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000016c 	.word	0x2000016c
 8001354:	40005400 	.word	0x40005400
 8001358:	60808cd3 	.word	0x60808cd3

0800135c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0be      	sub	sp, #248	@ 0xf8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22d0      	movs	r2, #208	@ 0xd0
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00b fff7 	bl	800d370 <memset>
  if(i2cHandle->Instance==I2C1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <HAL_I2C_MspInit+0xc4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d145      	bne.n	8001418 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800138c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 f9fe 	bl	80067a4 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013ae:	f000 ff01 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23c0      	movs	r3, #192	@ 0xc0
 80013d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d6:	2312      	movs	r3, #18
 80013d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e8:	2304      	movs	r3, #4
 80013ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_I2C_MspInit+0xcc>)
 80013f6:	f003 fae3 	bl	80049c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 80013fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001400:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 8001402:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001406:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_I2C_MspInit+0xc8>)
 800140c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	37f8      	adds	r7, #248	@ 0xf8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40005400 	.word	0x40005400
 8001424:	44020c00 	.word	0x44020c00
 8001428:	42020400 	.word	0x42020400

0800142c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001430:	2000      	movs	r0, #0
 8001432:	f004 fa0d 	bl	8005850 <HAL_ICACHE_ConfigAssociativityMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800143c:	f000 feba 	bl	80021b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001440:	f004 fa26 	bl	8005890 <HAL_ICACHE_Enable>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800144a:	f000 feb3 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <SetTCON>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTCON(I2C_HandleTypeDef *hi2c, uint16_t value) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
    uint8_t data[3];

    // Rejestr TCON (0x04), Write = 00
    data[0] = (0x04 << 4) | 0x00;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	733b      	strb	r3, [r7, #12]

    // 9-bitowa wartość TCON
    value &= 0x01FF;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800146a:	807b      	strh	r3, [r7, #2]
    data[2] = (value >> 8) & 0x01; // MSB (1 bit)
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	73bb      	strb	r3, [r7, #14]
    data[1] = value & 0xFF;        // LSB (8 bitów)
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	737b      	strb	r3, [r7, #13]

    // Wysłanie komendy + 2 bajtów wartości
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8001482:	f107 020c 	add.w	r2, r7, #12
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2303      	movs	r3, #3
 800148e:	2158      	movs	r1, #88	@ 0x58
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f003 fcb5 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <SetTCON+0x4e>
        printf("⚠️ Błąd zapisu do TCON!\n");
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <SetTCON+0x58>)
 800149e:	f00b fe87 	bl	800d1b0 <puts>
    }
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0800df0c 	.word	0x0800df0c

080014b0 <MCP4662_ReadTCON>:



uint16_t MCP4662_ReadTCON(I2C_HandleTypeDef *hi2c) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
    uint8_t command_byte = (0x04 << 4) | 0x0C; // Rejestr TCON, CC = 11 (Read)
 80014b8:	234c      	movs	r3, #76	@ 0x4c
 80014ba:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 80014bc:	2300      	movs	r3, #0
 80014be:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 80014c0:	f107 020d 	add.w	r2, r7, #13
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	2158      	movs	r1, #88	@ 0x58
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f003 fc96 	bl	8004e00 <HAL_I2C_Master_Transmit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <MCP4662_ReadTCON+0x30>
        return 0xFFFF; // Kod błędu
 80014da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014de:	e01b      	b.n	8001518 <MCP4662_ReadTCON+0x68>
    }

    // Odczyt danych (9-bitowa wartość, ale zwracamy 16-bitową zmienną)
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2302      	movs	r3, #2
 80014ec:	2159      	movs	r1, #89	@ 0x59
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f003 fd7a 	bl	8004fe8 <HAL_I2C_Master_Receive>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <MCP4662_ReadTCON+0x50>
        return 0xFFFF; // Kod błędu
 80014fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014fe:	e00b      	b.n	8001518 <MCP4662_ReadTCON+0x68>
    }

    // Połączenie danych (TCON ma 9 bitów, więc maskujemy)
    uint16_t tcon_value = ((data[0] << 8) | data[1]) & 0x01FF;
 8001500:	7a3b      	ldrb	r3, [r7, #8]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	7a7b      	ldrb	r3, [r7, #9]
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001514:	81fb      	strh	r3, [r7, #14]

    return tcon_value;
 8001516:	89fb      	ldrh	r3, [r7, #14]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <__io_putchar>:
    data[2] = tcon_value & 0xFF;         // Pozostałe 8 bitów

    HAL_I2C_Master_Transmit(hi2c, MCP4662_ADDR_WRITE, data, 3, HAL_MAX_DELAY);
}
int __io_putchar(int ch) //function used to print() in usart
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d102      	bne.n	8001534 <__io_putchar+0x14>
    __io_putchar('\r');
 800152e:	200d      	movs	r0, #13
 8001530:	f7ff fff6 	bl	8001520 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001534:	1d39      	adds	r1, r7, #4
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	2201      	movs	r2, #1
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <__io_putchar+0x2c>)
 800153e:	f00a f9c7 	bl	800b8d0 <HAL_UART_Transmit>

  return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000400 	.word	0x20000400

08001550 <ReadWiper>:
uint16_t ReadWiper(I2C_HandleTypeDef *hi2c, uint8_t wiper_reg) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
    uint8_t command_byte = (wiper_reg << 4) | 0x0C; // CC = 11 (Read)
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	b25b      	sxtb	r3, r3
 8001562:	f043 030c 	orr.w	r3, r3, #12
 8001566:	b25b      	sxtb	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 800156c:	2300      	movs	r3, #0
 800156e:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001570:	f107 020d 	add.w	r2, r7, #13
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	2158      	movs	r1, #88	@ 0x58
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f003 fc3e 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <ReadWiper+0x40>
        return 0xFFFF; // Kod błędu
 800158a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158e:	e01b      	b.n	80015c8 <ReadWiper+0x78>
    }

    // Odczyt 10-bitowego wiper value
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001590:	f107 0208 	add.w	r2, r7, #8
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	2159      	movs	r1, #89	@ 0x59
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f003 fd22 	bl	8004fe8 <HAL_I2C_Master_Receive>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <ReadWiper+0x60>
        return 0xFFFF; // Kod błędu
 80015aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ae:	e00b      	b.n	80015c8 <ReadWiper+0x78>
    }

    uint16_t wiper_value = ((data[0] << 8) | data[1]) & 0x03FF; // 10-bitowy wynik
 80015b0:	7a3b      	ldrb	r3, [r7, #8]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c4:	81fb      	strh	r3, [r7, #14]
    return wiper_value;
 80015c6:	89fb      	ldrh	r3, [r7, #14]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <wiper_command>:

void wiper_command(I2C_HandleTypeDef *hi2c, uint8_t wiper, uint8_t command) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
 80015dc:	4613      	mov	r3, r2
 80015de:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd;

    if (wiper == 0) {
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <wiper_command+0x1c>
        cmd = command;  // Dla Wiper 0 (komendy 0x04 lub 0x08)
 80015e6:	78bb      	ldrb	r3, [r7, #2]
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e007      	b.n	80015fc <wiper_command+0x2c>
    } else if (wiper == 1) {
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10f      	bne.n	8001612 <wiper_command+0x42>
        cmd = command | 0x10; // Dodajemy bit 4, aby przełączyć na Wiper 1
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	73fb      	strb	r3, [r7, #15]
    } else {
        return; // Nieprawidłowy wybór wipera
    }

    HAL_I2C_Master_Transmit(hi2c, MCP4662_ADDR_WRITE, &cmd, 1, HAL_MAX_DELAY);
 80015fc:	f107 020f 	add.w	r2, r7, #15
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	2158      	movs	r1, #88	@ 0x58
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f003 fbf8 	bl	8004e00 <HAL_I2C_Master_Transmit>
 8001610:	e000      	b.n	8001614 <wiper_command+0x44>
        return; // Nieprawidłowy wybór wipera
 8001612:	bf00      	nop
}
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <ESP32_SendCommand>:
     else
     {
         printf("Błąd ustawiania rezystancji\r\n");
     }
}
void ESP32_SendCommand(const char* command) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7fe fe37 	bl	8000298 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4808      	ldr	r0, [pc, #32]	@ (8001658 <ESP32_SendCommand+0x3c>)
 8001636:	f00a f94b 	bl	800b8d0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	2202      	movs	r2, #2
 8001640:	4906      	ldr	r1, [pc, #24]	@ (800165c <ESP32_SendCommand+0x40>)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <ESP32_SendCommand+0x3c>)
 8001644:	f00a f944 	bl	800b8d0 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001648:	2064      	movs	r0, #100	@ 0x64
 800164a:	f001 fc31 	bl	8002eb0 <HAL_Delay>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000400 	.word	0x20000400
 800165c:	0800dfc4 	.word	0x0800dfc4

08001660 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166a:	481d      	ldr	r0, [pc, #116]	@ (80016e0 <InitAnalogIndicators+0x80>)
 800166c:	f003 fafa 	bl	8004c64 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <InitAnalogIndicators+0x84>)
 8001678:	f003 faf4 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <InitAnalogIndicators+0x84>)
 8001684:	f003 faee 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800168e:	4815      	ldr	r0, [pc, #84]	@ (80016e4 <InitAnalogIndicators+0x84>)
 8001690:	f003 fae8 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001694:	2200      	movs	r2, #0
 8001696:	2104      	movs	r1, #4
 8001698:	4812      	ldr	r0, [pc, #72]	@ (80016e4 <InitAnalogIndicators+0x84>)
 800169a:	f003 fae3 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 800169e:	2201      	movs	r2, #1
 80016a0:	2102      	movs	r1, #2
 80016a2:	4810      	ldr	r0, [pc, #64]	@ (80016e4 <InitAnalogIndicators+0x84>)
 80016a4:	f003 fade 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 80016a8:	2201      	movs	r2, #1
 80016aa:	2180      	movs	r1, #128	@ 0x80
 80016ac:	480e      	ldr	r0, [pc, #56]	@ (80016e8 <InitAnalogIndicators+0x88>)
 80016ae:	f003 fad9 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 80016b2:	2200      	movs	r2, #0
 80016b4:	2140      	movs	r1, #64	@ 0x40
 80016b6:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <InitAnalogIndicators+0x88>)
 80016b8:	f003 fad4 	bl	8004c64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <InitAnalogIndicators+0x88>)
 80016c2:	f003 facf 	bl	8004c64 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x0D);
 80016c6:	220d      	movs	r2, #13
 80016c8:	2100      	movs	r1, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fd16 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0xff);
 80016d0:	22ff      	movs	r2, #255	@ 0xff
 80016d2:	2101      	movs	r1, #1
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fd11 	bl	80010fc <modify_can_frame_byte>


}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	42020800 	.word	0x42020800
 80016e4:	42020400 	.word	0x42020400
 80016e8:	42020000 	.word	0x42020000

080016ec <parse_frame>:
    uint16_t fuel_scaled = (uint16_t)((fuel_consumption / max_consumption) * 0xFFFF);
    return fuel_scaled;
}


void parse_frame(uint8_t *buffer) {
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]


    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4baf      	ldr	r3, [pc, #700]	@ (80019c0 <parse_frame+0x2d4>)
 8001704:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3304      	adds	r3, #4
 800170a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4baa      	ldr	r3, [pc, #680]	@ (80019c0 <parse_frame+0x2d4>)
 8001718:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	3304      	adds	r3, #4
 800171e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	4ba5      	ldr	r3, [pc, #660]	@ (80019c0 <parse_frame+0x2d4>)
 800172c:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3302      	adds	r3, #2
 8001732:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4ba0      	ldr	r3, [pc, #640]	@ (80019c0 <parse_frame+0x2d4>)
 800173e:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	3301      	adds	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	4b9c      	ldr	r3, [pc, #624]	@ (80019c0 <parse_frame+0x2d4>)
 8001750:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b97      	ldr	r3, [pc, #604]	@ (80019c0 <parse_frame+0x2d4>)
 8001764:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3304      	adds	r3, #4
 800176a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b92      	ldr	r3, [pc, #584]	@ (80019c0 <parse_frame+0x2d4>)
 8001778:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	3304      	adds	r3, #4
 800177e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b8d      	ldr	r3, [pc, #564]	@ (80019c0 <parse_frame+0x2d4>)
 800178c:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3304      	adds	r3, #4
 8001792:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b88      	ldr	r3, [pc, #544]	@ (80019c0 <parse_frame+0x2d4>)
 80017a0:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3304      	adds	r3, #4
 80017a6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b83      	ldr	r3, [pc, #524]	@ (80019c0 <parse_frame+0x2d4>)
 80017b4:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3304      	adds	r3, #4
 80017ba:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b7e      	ldr	r3, [pc, #504]	@ (80019c0 <parse_frame+0x2d4>)
 80017c8:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3304      	adds	r3, #4
 80017ce:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b79      	ldr	r3, [pc, #484]	@ (80019c0 <parse_frame+0x2d4>)
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	3304      	adds	r3, #4
 80017e2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b74      	ldr	r3, [pc, #464]	@ (80019c0 <parse_frame+0x2d4>)
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	3304      	adds	r3, #4
 80017f6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <parse_frame+0x2d4>)
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	3304      	adds	r3, #4
 800180a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <parse_frame+0x2d4>)
 8001818:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	3304      	adds	r3, #4
 800181e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b65      	ldr	r3, [pc, #404]	@ (80019c0 <parse_frame+0x2d4>)
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3304      	adds	r3, #4
 8001832:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b60      	ldr	r3, [pc, #384]	@ (80019c0 <parse_frame+0x2d4>)
 8001840:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	3304      	adds	r3, #4
 8001846:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	441a      	add	r2, r3
 800184e:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <parse_frame+0x2d4>)
 8001850:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8001854:	4613      	mov	r3, r2
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3310      	adds	r3, #16
 8001864:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	441a      	add	r2, r3
 800186c:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <parse_frame+0x2d4>)
 800186e:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8001872:	4613      	mov	r3, r2
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3310      	adds	r3, #16
 8001882:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b4c      	ldr	r3, [pc, #304]	@ (80019c0 <parse_frame+0x2d4>)
 8001890:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <parse_frame+0x2d4>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe6a 	bl	8000570 <__aeabi_f2d>
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b48      	ldr	r3, [pc, #288]	@ (80019c4 <parse_frame+0x2d8>)
 80018a2:	f7fe ffe7 	bl	8000874 <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f8c9 	bl	8000a44 <__aeabi_d2uiz>
 80018b2:	4603      	mov	r3, r0
 80018b4:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 80018ba:	89bb      	ldrh	r3, [r7, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	72bb      	strb	r3, [r7, #10]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 80018c2:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <parse_frame+0x2d4>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe52 	bl	8000570 <__aeabi_f2d>
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <parse_frame+0x2dc>)
 80018d2:	f7fe fcef 	bl	80002b4 <__adddf3>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <parse_frame+0x2e0>)
 80018e4:	f7fe ffc6 	bl	8000874 <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f8a8 	bl	8000a44 <__aeabi_d2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <parse_frame+0x2d4>)
 80018fa:	891b      	ldrh	r3, [r3, #8]
 80018fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <parse_frame+0x2e4>)
 800190c:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 800190e:	4b2c      	ldr	r3, [pc, #176]	@ (80019c0 <parse_frame+0x2d4>)
 8001910:	891b      	ldrh	r3, [r3, #8]
 8001912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <parse_frame+0x2e8>)
 8001922:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <parse_frame+0x2d4>)
 8001926:	891b      	ldrh	r3, [r3, #8]
 8001928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <parse_frame+0x2ec>)
 8001938:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <parse_frame+0x2d4>)
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <parse_frame+0x2f0>)
 800194e:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <parse_frame+0x2d4>)
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <parse_frame+0x2f4>)
 8001964:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <parse_frame+0x2d4>)
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <parse_frame+0x2f8>)
 800197a:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <parse_frame+0x2d4>)
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <parse_frame+0x2fc>)
 8001990:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <parse_frame+0x2d4>)
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <parse_frame+0x300>)
 80019a6:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <parse_frame+0x2d4>)
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <parse_frame+0x304>)
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e019      	b.n	80019f4 <parse_frame+0x308>
 80019c0:	200002a4 	.word	0x200002a4
 80019c4:	3fc40000 	.word	0x3fc40000
 80019c8:	40480000 	.word	0x40480000
 80019cc:	3fe80000 	.word	0x3fe80000
 80019d0:	20000308 	.word	0x20000308
 80019d4:	20000309 	.word	0x20000309
 80019d8:	2000030a 	.word	0x2000030a
 80019dc:	2000030b 	.word	0x2000030b
 80019e0:	2000030c 	.word	0x2000030c
 80019e4:	2000030d 	.word	0x2000030d
 80019e8:	2000030e 	.word	0x2000030e
 80019ec:	2000030f 	.word	0x2000030f
 80019f0:	20000310 	.word	0x20000310
    isBatteryWarning = frame.showLights & DL_BATTERY;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <parse_frame+0x380>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <parse_frame+0x384>)
 8001a08:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <parse_frame+0x380>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <parse_frame+0x388>)
 8001a1e:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <parse_frame+0x380>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <parse_frame+0x38c>)
 8001a34:	701a      	strb	r2, [r3, #0]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fb5d 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 8001a42:	7abb      	ldrb	r3, [r7, #10]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2103      	movs	r1, #3
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fb57 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001a4e:	7a7b      	ldrb	r3, [r7, #9]
 8001a50:	461a      	mov	r2, r3
 8001a52:	2101      	movs	r1, #1
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fb51 	bl	80010fc <modify_can_frame_byte>

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a5e:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <parse_frame+0x390>)
 8001a60:	f003 f918 	bl	8004c94 <HAL_GPIO_TogglePin>
//    uint8_t fuel_lsb = fuel_value & 0xFF;
//    uint8_t fuel_msb = (fuel_value >> 8) & 0xFF;
//
//    modify_can_frame_byte(FRAME_545, 1, fuel_lsb);
//    modify_can_frame_byte(FRAME_545, 2, fuel_msb);
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	200002a4 	.word	0x200002a4
 8001a70:	20000311 	.word	0x20000311
 8001a74:	20000312 	.word	0x20000312
 8001a78:	20000313 	.word	0x20000313
 8001a7c:	42020000 	.word	0x42020000

08001a80 <calculate_checksum>:


uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	73bb      	strb	r3, [r7, #14]
 8001a94:	e009      	b.n	8001aaa <calculate_checksum+0x2a>
        checksum ^= data[i];
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	4053      	eors	r3, r2
 8001aa2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73bb      	strb	r3, [r7, #14]
 8001aaa:	7bba      	ldrb	r2, [r7, #14]
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3f1      	bcc.n	8001a96 <calculate_checksum+0x16>
    }
    return checksum;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71bb      	strb	r3, [r7, #6]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	717b      	strb	r3, [r7, #5]
 8001ada:	4613      	mov	r3, r2
 8001adc:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001aea:	793b      	ldrb	r3, [r7, #4]
 8001aec:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001af2:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 8001af4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001af8:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001afa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001afe:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 8001b04:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b08:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 8001b0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffb1 	bl	8001a80 <calculate_checksum>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001b22:	230a      	movs	r3, #10
 8001b24:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001b26:	f107 010c 	add.w	r1, r7, #12
 8001b2a:	2364      	movs	r3, #100	@ 0x64
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <Send_KBUS_frame+0x7c>)
 8001b30:	f009 fece 	bl	800b8d0 <HAL_UART_Transmit>
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	20000494 	.word	0x20000494

08001b40 <process_frame>:


void process_frame(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <process_frame+0x1c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <process_frame+0x20>)
 8001b4e:	f7ff fdcd 	bl	80016ec <parse_frame>
        frameReady = false;
 8001b52:	4b02      	ldr	r3, [pc, #8]	@ (8001b5c <process_frame+0x1c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
    }
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002a2 	.word	0x200002a2
 8001b60:	20000240 	.word	0x20000240

08001b64 <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a22      	ldr	r2, [pc, #136]	@ (8001c04 <Set_PWM_Frequency+0xa0>)
 8001b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7e:	441a      	add	r2, r3
 8001b80:	1212      	asrs	r2, r2, #8
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	3319      	adds	r3, #25
 8001b88:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d817      	bhi.n	8001bc4 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <Set_PWM_Frequency+0xa4>)
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba6:	d302      	bcc.n	8001bae <Set_PWM_Frequency+0x4a>
 8001ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bac:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	4a13      	ldr	r2, [pc, #76]	@ (8001c08 <Set_PWM_Frequency+0xa4>)
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e007      	b.n	8001bd4 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <Set_PWM_Frequency+0xa4>)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bda:	d302      	bcc.n	8001be2 <Set_PWM_Frequency+0x7e>
 8001bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001be0:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <Set_PWM_Frequency+0xa8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <Set_PWM_Frequency+0xa8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bf2:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <Set_PWM_Frequency+0xa8>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	f2b9d649 	.word	0xf2b9d649
 8001c08:	0ee6b280 	.word	0x0ee6b280
 8001c0c:	2000031c 	.word	0x2000031c

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c16:	f001 f88d 	bl	8002d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1a:	f000 f935 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1e:	f7ff fab9 	bl	8001194 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001c22:	f7ff fa97 	bl	8001154 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001c26:	f000 feb9 	bl	800299c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c2a:	f000 fc89 	bl	8002540 <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001c2e:	f7ff fbfd 	bl	800142c <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001c32:	f7ff f903 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001c36:	f000 fd35 	bl	80026a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001c3a:	f000 fefb 	bl	8002a34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c3e:	f000 fda5 	bl	800278c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001c42:	f7ff fb4b 	bl	80012dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c46:	2104      	movs	r1, #4
 8001c48:	487f      	ldr	r0, [pc, #508]	@ (8001e48 <main+0x238>)
 8001c4a:	f008 f9f7 	bl	800a03c <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001c4e:	487f      	ldr	r0, [pc, #508]	@ (8001e4c <main+0x23c>)
 8001c50:	f7ff fce4 	bl	800161c <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 8001c54:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c58:	f001 f92a 	bl	8002eb0 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001c5c:	487c      	ldr	r0, [pc, #496]	@ (8001e50 <main+0x240>)
 8001c5e:	f7ff fcdd 	bl	800161c <ESP32_SendCommand>
  HAL_Delay(1000);
 8001c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c66:	f001 f923 	bl	8002eb0 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4979      	ldr	r1, [pc, #484]	@ (8001e54 <main+0x244>)
 8001c6e:	487a      	ldr	r0, [pc, #488]	@ (8001e58 <main+0x248>)
 8001c70:	f009 fecc 	bl	800ba0c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c74:	4879      	ldr	r0, [pc, #484]	@ (8001e5c <main+0x24c>)
 8001c76:	f008 f871 	bl	8009d5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c7a:	4879      	ldr	r0, [pc, #484]	@ (8001e60 <main+0x250>)
 8001c7c:	f008 f86e 	bl	8009d5c <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 8001c80:	f7ff f9c0 	bl	8001004 <InitCANFrames>
  InitAnalogIndicators();
 8001c84:	f7ff fcec 	bl	8001660 <InitAnalogIndicators>


  uint8_t increasing0 = 1, increasing1 = 1; // Flagi dla obu wiperów
 8001c88:	2301      	movs	r3, #1
 8001c8a:	75fb      	strb	r3, [r7, #23]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	75bb      	strb	r3, [r7, #22]
  uint8_t reset_cmd = 0x06; // Komenda General Call Reset
 8001c90:	2306      	movs	r3, #6
 8001c92:	757b      	strb	r3, [r7, #21]
//HAL_I2C_Master_Transmit(&hi2c1, 0x00, &reset_cmd, 1, HAL_MAX_DELAY);
HAL_Delay(10);
 8001c94:	200a      	movs	r0, #10
 8001c96:	f001 f90b 	bl	8002eb0 <HAL_Delay>
SetTCON(&hi2c1, 0x33 );  // Podłącza piny A, W, B dla obu wiperów  //0x34 //0xBB //33
 8001c9a:	2133      	movs	r1, #51	@ 0x33
 8001c9c:	4871      	ldr	r0, [pc, #452]	@ (8001e64 <main+0x254>)
 8001c9e:	f7ff fbd9 	bl	8001454 <SetTCON>
HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f001 f904 	bl	8002eb0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 process_frame();
 8001ca8:	f7ff ff4a 	bl	8001b40 <process_frame>
	 speed = frame.speed * 3.6;
 8001cac:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <main+0x258>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc5d 	bl	8000570 <__aeabi_f2d>
 8001cb6:	a362      	add	r3, pc, #392	@ (adr r3, 8001e40 <main+0x230>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fcb0 	bl	8000620 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fedc 	bl	8000a84 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a67      	ldr	r2, [pc, #412]	@ (8001e6c <main+0x25c>)
 8001cd0:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001cd2:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <main+0x25c>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff3e 	bl	8001b64 <Set_PWM_Frequency>
////////////////////////
     uint16_t wiper0 = ReadWiper(&hi2c1, VOLATILE_WIPER_0); // Wiper 0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	485e      	ldr	r0, [pc, #376]	@ (8001e64 <main+0x254>)
 8001cec:	f7ff fc30 	bl	8001550 <ReadWiper>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	827b      	strh	r3, [r7, #18]
     uint16_t wiper1 = ReadWiper(&hi2c1, VOLATILE_WIPER_1); // Wiper 1
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	485b      	ldr	r0, [pc, #364]	@ (8001e64 <main+0x254>)
 8001cf8:	f7ff fc2a 	bl	8001550 <ReadWiper>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	823b      	strh	r3, [r7, #16]
     uint16_t tcon = MCP4662_ReadTCON(&hi2c1);  // TCON
 8001d00:	4858      	ldr	r0, [pc, #352]	@ (8001e64 <main+0x254>)
 8001d02:	f7ff fbd5 	bl	80014b0 <MCP4662_ReadTCON>
 8001d06:	4603      	mov	r3, r0
 8001d08:	81fb      	strh	r3, [r7, #14]

     printf("Wiper 0 value: %d\n", wiper0);
 8001d0a:	8a7b      	ldrh	r3, [r7, #18]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4858      	ldr	r0, [pc, #352]	@ (8001e70 <main+0x260>)
 8001d10:	f00b f9e6 	bl	800d0e0 <iprintf>
     printf("Wiper 1 value: %d\n", wiper1);
 8001d14:	8a3b      	ldrh	r3, [r7, #16]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4856      	ldr	r0, [pc, #344]	@ (8001e74 <main+0x264>)
 8001d1a:	f00b f9e1 	bl	800d0e0 <iprintf>
     printf("TCON: 0x%03X\n", tcon);
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4855      	ldr	r0, [pc, #340]	@ (8001e78 <main+0x268>)
 8001d24:	f00b f9dc 	bl	800d0e0 <iprintf>

     //WriteWiper(&hi2c1, VOLATILE_WIPER_0, 0x80);
     //WriteWiper(&hi2c1, VOLATILE_WIPER_1, 0x80);
//
//      Interpretacja bitów:
         uint8_t GCEN = (tcon >> 8) & 0x01;  // Bit 8 (GCEN)
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	737b      	strb	r3, [r7, #13]
         uint8_t R1HW = (tcon >> 7) & 0x01;  // Bit 7
 8001d36:	89fb      	ldrh	r3, [r7, #14]
 8001d38:	09db      	lsrs	r3, r3, #7
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	733b      	strb	r3, [r7, #12]
         uint8_t R1A  = (tcon >> 6) & 0x01;  // Bit 6
 8001d44:	89fb      	ldrh	r3, [r7, #14]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	72fb      	strb	r3, [r7, #11]
         uint8_t R1W  = (tcon >> 5) & 0x01;  // Bit 5
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	72bb      	strb	r3, [r7, #10]
         uint8_t R1B  = (tcon >> 4) & 0x01;  // Bit 4
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	727b      	strb	r3, [r7, #9]
         uint8_t R0HW = (tcon >> 3) & 0x01;  // Bit 3
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	723b      	strb	r3, [r7, #8]
         uint8_t R0A  = (tcon >> 2) & 0x01;  // Bit 2
 8001d7c:	89fb      	ldrh	r3, [r7, #14]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]
         uint8_t R0W  = (tcon >> 1) & 0x01;  // Bit 1
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	71bb      	strb	r3, [r7, #6]
         uint8_t R0B  = (tcon >> 0) & 0x01;  // Bit 0
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	717b      	strb	r3, [r7, #5]
//
//         printf("TCON: 0x%04X\n", tcon);
         printf("GCEN: %d\n", GCEN);
 8001da2:	7b7b      	ldrb	r3, [r7, #13]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4835      	ldr	r0, [pc, #212]	@ (8001e7c <main+0x26c>)
 8001da8:	f00b f99a 	bl	800d0e0 <iprintf>
         printf("R1HW: %d, R1A: %d, R1W: %d, R1B: %d\n", R1HW, R1A, R1W, R1B);
 8001dac:	7b39      	ldrb	r1, [r7, #12]
 8001dae:	7afa      	ldrb	r2, [r7, #11]
 8001db0:	7ab8      	ldrb	r0, [r7, #10]
 8001db2:	7a7b      	ldrb	r3, [r7, #9]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	4831      	ldr	r0, [pc, #196]	@ (8001e80 <main+0x270>)
 8001dba:	f00b f991 	bl	800d0e0 <iprintf>
         printf("R0HW: %d, R0A: %d, R0W: %d, R0B: %d\n", R0HW, R0A, R0W, R0B);
 8001dbe:	7a39      	ldrb	r1, [r7, #8]
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	79b8      	ldrb	r0, [r7, #6]
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4603      	mov	r3, r0
 8001dca:	482e      	ldr	r0, [pc, #184]	@ (8001e84 <main+0x274>)
 8001dcc:	f00b f988 	bl	800d0e0 <iprintf>
//         //HAL_Delay(50); // Czekaj dla stabilności
//     }
//     HAL_Delay(250); // Opóźnienie dla stabilnego działania
/////////////////////////////////////

         uint16_t target0 = (uint16_t)(0.2 * 255);
 8001dd0:	2333      	movs	r3, #51	@ 0x33
 8001dd2:	807b      	strh	r3, [r7, #2]
         uint16_t target1 = (uint16_t)(0.2 * 255);
 8001dd4:	2333      	movs	r3, #51	@ 0x33
 8001dd6:	803b      	strh	r3, [r7, #0]

             if (wiper0 < target0) {
 8001dd8:	8a7a      	ldrh	r2, [r7, #18]
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d208      	bcs.n	8001df2 <main+0x1e2>
                 wiper_command(&hi2c1, 0, 0x04); // Inkrementacja
 8001de0:	2204      	movs	r2, #4
 8001de2:	2100      	movs	r1, #0
 8001de4:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <main+0x254>)
 8001de6:	f7ff fbf3 	bl	80015d0 <wiper_command>
                 wiper0++;
 8001dea:	8a7b      	ldrh	r3, [r7, #18]
 8001dec:	3301      	adds	r3, #1
 8001dee:	827b      	strh	r3, [r7, #18]
 8001df0:	e00b      	b.n	8001e0a <main+0x1fa>
             } else if (wiper0 > target0) {
 8001df2:	8a7a      	ldrh	r2, [r7, #18]
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d907      	bls.n	8001e0a <main+0x1fa>
                 wiper_command(&hi2c1, 0, 0x08); // Dekrementacja
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4819      	ldr	r0, [pc, #100]	@ (8001e64 <main+0x254>)
 8001e00:	f7ff fbe6 	bl	80015d0 <wiper_command>
                 wiper0--;
 8001e04:	8a7b      	ldrh	r3, [r7, #18]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	827b      	strh	r3, [r7, #18]
             }

             if (wiper1 < target1) {
 8001e0a:	8a3a      	ldrh	r2, [r7, #16]
 8001e0c:	883b      	ldrh	r3, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d208      	bcs.n	8001e24 <main+0x214>
                 wiper_command(&hi2c1, 1, 0x04); // Inkrementacja
 8001e12:	2204      	movs	r2, #4
 8001e14:	2101      	movs	r1, #1
 8001e16:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <main+0x254>)
 8001e18:	f7ff fbda 	bl	80015d0 <wiper_command>
                 wiper1++;
 8001e1c:	8a3b      	ldrh	r3, [r7, #16]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	823b      	strh	r3, [r7, #16]
 8001e22:	e741      	b.n	8001ca8 <main+0x98>
             } else if (wiper1 > target1) {
 8001e24:	8a3a      	ldrh	r2, [r7, #16]
 8001e26:	883b      	ldrh	r3, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f67f af3d 	bls.w	8001ca8 <main+0x98>
                 wiper_command(&hi2c1, 1, 0x08); // Dekrementacja
 8001e2e:	2208      	movs	r2, #8
 8001e30:	2101      	movs	r1, #1
 8001e32:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <main+0x254>)
 8001e34:	f7ff fbcc 	bl	80015d0 <wiper_command>
                 wiper1--;
 8001e38:	8a3b      	ldrh	r3, [r7, #16]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	823b      	strh	r3, [r7, #16]
  {
 8001e3e:	e733      	b.n	8001ca8 <main+0x98>
 8001e40:	cccccccd 	.word	0xcccccccd
 8001e44:	400ccccc 	.word	0x400ccccc
 8001e48:	2000031c 	.word	0x2000031c
 8001e4c:	0800e008 	.word	0x0800e008
 8001e50:	0800e010 	.word	0x0800e010
 8001e54:	200001c0 	.word	0x200001c0
 8001e58:	20000400 	.word	0x20000400
 8001e5c:	20000368 	.word	0x20000368
 8001e60:	200003b4 	.word	0x200003b4
 8001e64:	2000016c 	.word	0x2000016c
 8001e68:	200002a4 	.word	0x200002a4
 8001e6c:	20000304 	.word	0x20000304
 8001e70:	0800e03c 	.word	0x0800e03c
 8001e74:	0800e050 	.word	0x0800e050
 8001e78:	0800e064 	.word	0x0800e064
 8001e7c:	0800e074 	.word	0x0800e074
 8001e80:	0800e080 	.word	0x0800e080
 8001e84:	0800e0a8 	.word	0x0800e0a8

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b09c      	sub	sp, #112	@ 0x70
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0320 	add.w	r3, r7, #32
 8001e92:	2250      	movs	r2, #80	@ 0x50
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00b fa6a 	bl	800d370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001eae:	4b2d      	ldr	r3, [pc, #180]	@ (8001f64 <SystemClock_Config+0xdc>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <SystemClock_Config+0xdc>)
 8001eb4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001eb8:	6113      	str	r3, [r2, #16]
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <SystemClock_Config+0xdc>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ec6:	bf00      	nop
 8001ec8:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <SystemClock_Config+0xdc>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d1f9      	bne.n	8001ec8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001eea:	233e      	movs	r3, #62	@ 0x3e
 8001eec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001efa:	230c      	movs	r3, #12
 8001efc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fccf 	bl	80058b0 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f18:	f000 f94c 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	231f      	movs	r3, #31
 8001f1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f20:	2303      	movs	r3, #3
 8001f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	2105      	movs	r1, #5
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 f8f0 	bl	8006120 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f46:	f000 f935 	bl	80021b4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <SystemClock_Config+0xe0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <SystemClock_Config+0xe0>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3770      	adds	r7, #112	@ 0x70
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	44020800 	.word	0x44020800
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001f74:	2108      	movs	r1, #8
 8001f76:	482e      	ldr	r0, [pc, #184]	@ (8002030 <HAL_UART_RxCpltCallback+0xc4>)
 8001f78:	f002 fe8c 	bl	8004c94 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	@ (8002034 <HAL_UART_RxCpltCallback+0xc8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d150      	bne.n	8002028 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_UART_RxCpltCallback+0xcc>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <HAL_UART_RxCpltCallback+0xd0>)
 8001f8c:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d813      	bhi.n	8001fbe <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001f96:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <HAL_UART_RxCpltCallback+0xd8>)
 8001f9e:	5c9a      	ldrb	r2, [r3, r2]
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <HAL_UART_RxCpltCallback+0xd0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e033      	b.n	800201e <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e02f      	b.n	800201e <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_UART_RxCpltCallback+0xd0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fcc:	d127      	bne.n	800201e <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8001fd8:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e01d      	b.n	800201e <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b5f      	cmp	r3, #95	@ 0x5f
 8001fe8:	d80a      	bhi.n	8002000 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8001fea:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	b2d1      	uxtb	r1, r2
 8001ff2:	4a15      	ldr	r2, [pc, #84]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 8001ff4:	7011      	strb	r1, [r2, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_UART_RxCpltCallback+0xd0>)
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_UART_RxCpltCallback+0xe0>)
 8001ffe:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b5f      	cmp	r3, #95	@ 0x5f
 8002006:	d90a      	bls.n	800201e <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_UART_RxCpltCallback+0xe4>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
                process_frame();
 800200e:	f7ff fd97 	bl	8001b40 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_UART_RxCpltCallback+0xd4>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_UART_RxCpltCallback+0xdc>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 800201e:	2201      	movs	r2, #1
 8002020:	4905      	ldr	r1, [pc, #20]	@ (8002038 <HAL_UART_RxCpltCallback+0xcc>)
 8002022:	480c      	ldr	r0, [pc, #48]	@ (8002054 <HAL_UART_RxCpltCallback+0xe8>)
 8002024:	f009 fcf2 	bl	800ba0c <HAL_UART_Receive_DMA>
    }
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	42020400 	.word	0x42020400
 8002034:	40013800 	.word	0x40013800
 8002038:	200001c0 	.word	0x200001c0
 800203c:	20000314 	.word	0x20000314
 8002040:	200002a0 	.word	0x200002a0
 8002044:	0800e0d0 	.word	0x0800e0d0
 8002048:	200002a1 	.word	0x200002a1
 800204c:	20000240 	.word	0x20000240
 8002050:	200002a2 	.word	0x200002a2
 8002054:	20000400 	.word	0x20000400

08002058 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af04      	add	r7, sp, #16
 800205e:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a49      	ldr	r2, [pc, #292]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff f81f 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff f81c 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 8002074:	2002      	movs	r0, #2
 8002076:	f7ff f819 	bl	80010ac <SendCANFrame>

	 }
	 if (htim == &htim3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a43      	ldr	r2, [pc, #268]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d17d      	bne.n	800217e <HAL_TIM_PeriodElapsedCallback+0x126>
	 {
		bool anyConditionMet = false;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 8002086:	2300      	movs	r3, #0
 8002088:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 800208a:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_PeriodElapsedCallback+0x42>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8002092:	2307      	movs	r3, #7
 8002094:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 800209a:	4b3e      	ldr	r3, [pc, #248]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x56>
			command = command | TURN_LEFT;
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	f043 0320 	orr.w	r3, r3, #32
 80020a8:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 80020ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x6a>
			command = command | TURN_RIGHT;
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020bc:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x92>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 80020ce:	2307      	movs	r3, #7
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2300      	movs	r3, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	225b      	movs	r2, #91	@ 0x5b
 80020e2:	21bf      	movs	r1, #191	@ 0xbf
 80020e4:	20d0      	movs	r0, #208	@ 0xd0
 80020e6:	f7ff fceb 	bl	8001ac0 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2207      	movs	r2, #7
 80020ee:	9203      	str	r2, [sp, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	9200      	str	r2, [sp, #0]
 80020fc:	225b      	movs	r2, #91	@ 0x5b
 80020fe:	21bf      	movs	r1, #191	@ 0xbf
 8002100:	20d0      	movs	r0, #208	@ 0xd0
 8002102:	f7ff fcdd 	bl	8001ac0 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 8002106:	4b25      	ldr	r3, [pc, #148]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 800210e:	2201      	movs	r2, #1
 8002110:	2104      	movs	r1, #4
 8002112:	4823      	ldr	r0, [pc, #140]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002114:	f002 fda6 	bl	8004c64 <HAL_GPIO_WritePin>
 8002118:	e004      	b.n	8002124 <HAL_TIM_PeriodElapsedCallback+0xcc>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4820      	ldr	r0, [pc, #128]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002120:	f002 fda0 	bl	8004c64 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_TIM_PeriodElapsedCallback+0xe0>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 800212c:	2201      	movs	r2, #1
 800212e:	2140      	movs	r1, #64	@ 0x40
 8002130:	481d      	ldr	r0, [pc, #116]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002132:	f002 fd97 	bl	8004c64 <HAL_GPIO_WritePin>
 8002136:	e004      	b.n	8002142 <HAL_TIM_PeriodElapsedCallback+0xea>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	481a      	ldr	r0, [pc, #104]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800213e:	f002 fd91 	bl	8004c64 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 800214a:	2201      	movs	r2, #1
 800214c:	2120      	movs	r1, #32
 800214e:	4816      	ldr	r0, [pc, #88]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002150:	f002 fd88 	bl	8004c64 <HAL_GPIO_WritePin>
 8002154:	e004      	b.n	8002160 <HAL_TIM_PeriodElapsedCallback+0x108>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2120      	movs	r1, #32
 800215a:	4813      	ldr	r0, [pc, #76]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800215c:	f002 fd82 	bl	8004c64 <HAL_GPIO_WritePin>
		if (isABSActive) {
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	2102      	movs	r1, #2
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800216e:	f002 fd79 	bl	8004c64 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 8002172:	e004      	b.n	800217e <HAL_TIM_PeriodElapsedCallback+0x126>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2102      	movs	r1, #2
 8002178:	4809      	ldr	r0, [pc, #36]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800217a:	f002 fd73 	bl	8004c64 <HAL_GPIO_WritePin>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000368 	.word	0x20000368
 800218c:	200003b4 	.word	0x200003b4
 8002190:	2000030c 	.word	0x2000030c
 8002194:	20000312 	.word	0x20000312
 8002198:	20000313 	.word	0x20000313
 800219c:	2000030d 	.word	0x2000030d
 80021a0:	42020400 	.word	0x42020400
 80021a4:	20000310 	.word	0x20000310
 80021a8:	42020000 	.word	0x42020000
 80021ac:	20000311 	.word	0x20000311
 80021b0:	2000030f 	.word	0x2000030f

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 80021bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021c0:	4801      	ldr	r0, [pc, #4]	@ (80021c8 <Error_Handler+0x14>)
 80021c2:	f002 fd67 	bl	8004c94 <HAL_GPIO_TogglePin>
 80021c6:	e7f9      	b.n	80021bc <Error_Handler+0x8>
 80021c8:	42020000 	.word	0x42020000

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <NMI_Handler+0x4>

080021e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e6:	bf00      	nop
 80021e8:	e7fd      	b.n	80021e6 <HardFault_Handler+0x4>

080021ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ee:	bf00      	nop
 80021f0:	e7fd      	b.n	80021ee <MemManage_Handler+0x4>

080021f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f6:	bf00      	nop
 80021f8:	e7fd      	b.n	80021f6 <BusFault_Handler+0x4>

080021fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fe:	bf00      	nop
 8002200:	e7fd      	b.n	80021fe <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 fe1e 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <GPDMA1_Channel0_IRQHandler+0x10>)
 800223e:	f001 fa1c 	bl	800367a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000528 	.word	0x20000528

0800224c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <FDCAN1_IT0_IRQHandler+0x10>)
 8002252:	f002 f93d 	bl	80044d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000108 	.word	0x20000108

08002260 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <FDCAN1_IT1_IRQHandler+0x10>)
 8002266:	f002 f933 	bl	80044d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000108 	.word	0x20000108

08002274 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM1_BRK_IRQHandler+0x10>)
 800227a:	f008 f823 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000031c 	.word	0x2000031c

08002288 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800228c:	4802      	ldr	r0, [pc, #8]	@ (8002298 <TIM1_UP_IRQHandler+0x10>)
 800228e:	f008 f819 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000031c 	.word	0x2000031c

0800229c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <TIM1_TRG_COM_IRQHandler+0x10>)
 80022a2:	f008 f80f 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000031c 	.word	0x2000031c

080022b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <TIM1_CC_IRQHandler+0x10>)
 80022b6:	f008 f805 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000031c 	.word	0x2000031c

080022c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <TIM2_IRQHandler+0x10>)
 80022ca:	f007 fffb 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000368 	.word	0x20000368

080022d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM3_IRQHandler+0x10>)
 80022de:	f007 fff1 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200003b4 	.word	0x200003b4

080022ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <USART1_IRQHandler+0x10>)
 80022f2:	f009 fbdd 	bl	800bab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000400 	.word	0x20000400

08002300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
  }

  return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f8e3 	bl	8001520 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
  }
  return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800239a:	605a      	str	r2, [r3, #4]
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f00a fffe 	bl	800d40c <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20044000 	.word	0x20044000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000318 	.word	0x20000318
 8002444:	200006f0 	.word	0x200006f0

08002448 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800244e:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <SystemInit+0xdc>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <SystemInit+0xdc>)
 8002456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800245a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800245e:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <SystemInit+0xe0>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002464:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <SystemInit+0xe0>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <SystemInit+0xe0>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <SystemInit+0xe0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	492c      	ldr	r1, [pc, #176]	@ (8002528 <SystemInit+0xe0>)
 8002476:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <SystemInit+0xe4>)
 8002478:	4013      	ands	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800247c:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <SystemInit+0xe0>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002482:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <SystemInit+0xe0>)
 8002484:	2200      	movs	r2, #0
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002488:	4b27      	ldr	r3, [pc, #156]	@ (8002528 <SystemInit+0xe0>)
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800248e:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <SystemInit+0xe0>)
 8002490:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <SystemInit+0xe8>)
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002494:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <SystemInit+0xe0>)
 8002496:	2200      	movs	r2, #0
 8002498:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <SystemInit+0xe0>)
 800249c:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <SystemInit+0xe8>)
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80024a0:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <SystemInit+0xe0>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <SystemInit+0xe0>)
 80024a8:	4a21      	ldr	r2, [pc, #132]	@ (8002530 <SystemInit+0xe8>)
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80024ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <SystemInit+0xe0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <SystemInit+0xe0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <SystemInit+0xe0>)
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <SystemInit+0xe0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <SystemInit+0xdc>)
 80024c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024ca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <SystemInit+0xec>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80024d4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80024dc:	d003      	beq.n	80024e6 <SystemInit+0x9e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80024e4:	d117      	bne.n	8002516 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <SystemInit+0xec>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <SystemInit+0xec>)
 80024f4:	4a10      	ldr	r2, [pc, #64]	@ (8002538 <SystemInit+0xf0>)
 80024f6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <SystemInit+0xec>)
 80024fa:	4a10      	ldr	r2, [pc, #64]	@ (800253c <SystemInit+0xf4>)
 80024fc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80024fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <SystemInit+0xec>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a0c      	ldr	r2, [pc, #48]	@ (8002534 <SystemInit+0xec>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <SystemInit+0xec>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <SystemInit+0xec>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	61d3      	str	r3, [r2, #28]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	44020c00 	.word	0x44020c00
 800252c:	eae2eae3 	.word	0xeae2eae3
 8002530:	01010280 	.word	0x01010280
 8002534:	40022000 	.word	0x40022000
 8002538:	08192a3b 	.word	0x08192a3b
 800253c:	4c5d6e7f 	.word	0x4c5d6e7f

08002540 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b09c      	sub	sp, #112	@ 0x70
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002560:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
 8002570:	615a      	str	r2, [r3, #20]
 8002572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	2234      	movs	r2, #52	@ 0x34
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f00a fef8 	bl	800d370 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002580:	4b46      	ldr	r3, [pc, #280]	@ (800269c <MX_TIM1_Init+0x15c>)
 8002582:	4a47      	ldr	r2, [pc, #284]	@ (80026a0 <MX_TIM1_Init+0x160>)
 8002584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8002586:	4b45      	ldr	r3, [pc, #276]	@ (800269c <MX_TIM1_Init+0x15c>)
 8002588:	2231      	movs	r2, #49	@ 0x31
 800258a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b43      	ldr	r3, [pc, #268]	@ (800269c <MX_TIM1_Init+0x15c>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002592:	4b42      	ldr	r3, [pc, #264]	@ (800269c <MX_TIM1_Init+0x15c>)
 8002594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <MX_TIM1_Init+0x15c>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a0:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025a8:	2280      	movs	r2, #128	@ 0x80
 80025aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ac:	483b      	ldr	r0, [pc, #236]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025ae:	f007 fb7d 	bl	8009cac <HAL_TIM_Base_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025b8:	f7ff fdfc 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80025c6:	4619      	mov	r1, r3
 80025c8:	4834      	ldr	r0, [pc, #208]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025ca:	f008 f959 	bl	800a880 <HAL_TIM_ConfigClockSource>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025d4:	f7ff fdee 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025d8:	4830      	ldr	r0, [pc, #192]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025da:	f007 fcce 	bl	8009f7a <HAL_TIM_PWM_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80025e4:	f7ff fde6 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025f8:	4619      	mov	r1, r3
 80025fa:	4828      	ldr	r0, [pc, #160]	@ (800269c <MX_TIM1_Init+0x15c>)
 80025fc:	f008 ff68 	bl	800b4d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260a:	2360      	movs	r3, #96	@ 0x60
 800260c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800260e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002628:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800262c:	2204      	movs	r2, #4
 800262e:	4619      	mov	r1, r3
 8002630:	481a      	ldr	r0, [pc, #104]	@ (800269c <MX_TIM1_Init+0x15c>)
 8002632:	f008 f811 	bl	800a658 <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800263c:	f7ff fdba 	bl	80021b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002658:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	@ (800269c <MX_TIM1_Init+0x15c>)
 800267e:	f008 fff7 	bl	800b670 <HAL_TIMEx_ConfigBreakDeadTime>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002688:	f7ff fd94 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800268c:	4803      	ldr	r0, [pc, #12]	@ (800269c <MX_TIM1_Init+0x15c>)
 800268e:	f000 f949 	bl	8002924 <HAL_TIM_MspPostInit>

}
 8002692:	bf00      	nop
 8002694:	3770      	adds	r7, #112	@ 0x70
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000031c 	.word	0x2000031c
 80026a0:	40012c00 	.word	0x40012c00

080026a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	@ 0x38
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c4:	463b      	mov	r3, r7
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026e0:	2231      	movs	r2, #49	@ 0x31
 80026e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80026ea:	4b27      	ldr	r3, [pc, #156]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026ec:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80026f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f2:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <MX_TIM2_Init+0xe4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026fe:	4822      	ldr	r0, [pc, #136]	@ (8002788 <MX_TIM2_Init+0xe4>)
 8002700:	f007 fad4 	bl	8009cac <HAL_TIM_Base_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800270a:	f7ff fd53 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002718:	4619      	mov	r1, r3
 800271a:	481b      	ldr	r0, [pc, #108]	@ (8002788 <MX_TIM2_Init+0xe4>)
 800271c:	f008 f8b0 	bl	800a880 <HAL_TIM_ConfigClockSource>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002726:	f7ff fd45 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800272a:	4817      	ldr	r0, [pc, #92]	@ (8002788 <MX_TIM2_Init+0xe4>)
 800272c:	f007 fbc4 	bl	8009eb8 <HAL_TIM_OC_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002736:	f7ff fd3d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002742:	f107 031c 	add.w	r3, r7, #28
 8002746:	4619      	mov	r1, r3
 8002748:	480f      	ldr	r0, [pc, #60]	@ (8002788 <MX_TIM2_Init+0xe4>)
 800274a:	f008 fec1 	bl	800b4d0 <HAL_TIMEx_MasterConfigSynchronization>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002754:	f7ff fd2e 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002758:	2300      	movs	r3, #0
 800275a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002768:	463b      	mov	r3, r7
 800276a:	2204      	movs	r2, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4806      	ldr	r0, [pc, #24]	@ (8002788 <MX_TIM2_Init+0xe4>)
 8002770:	f007 fef8 	bl	800a564 <HAL_TIM_OC_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800277a:	f7ff fd1b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	3738      	adds	r7, #56	@ 0x38
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000368 	.word	0x20000368

0800278c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002828 <MX_TIM3_Init+0x9c>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027c0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80027c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027cc:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027d2:	4814      	ldr	r0, [pc, #80]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027d4:	f007 fa6a 	bl	8009cac <HAL_TIM_Base_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80027de:	f7ff fce9 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4619      	mov	r1, r3
 80027ee:	480d      	ldr	r0, [pc, #52]	@ (8002824 <MX_TIM3_Init+0x98>)
 80027f0:	f008 f846 	bl	800a880 <HAL_TIM_ConfigClockSource>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80027fa:	f7ff fcdb 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	@ (8002824 <MX_TIM3_Init+0x98>)
 800280c:	f008 fe60 	bl	800b4d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002816:	f7ff fccd 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200003b4 	.word	0x200003b4
 8002828:	40000400 	.word	0x40000400

0800282c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a37      	ldr	r2, [pc, #220]	@ (8002918 <HAL_TIM_Base_MspInit+0xec>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12f      	bne.n	800289e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283e:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 8002840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002844:	4a35      	ldr	r2, [pc, #212]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 8002846:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800284a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 8002850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2029      	movs	r0, #41	@ 0x29
 8002862:	f000 fc01 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002866:	2029      	movs	r0, #41	@ 0x29
 8002868:	f000 fc18 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2102      	movs	r1, #2
 8002870:	202a      	movs	r0, #42	@ 0x2a
 8002872:	f000 fbf9 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002876:	202a      	movs	r0, #42	@ 0x2a
 8002878:	f000 fc10 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2102      	movs	r1, #2
 8002880:	202b      	movs	r0, #43	@ 0x2b
 8002882:	f000 fbf1 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002886:	202b      	movs	r0, #43	@ 0x2b
 8002888:	f000 fc08 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2102      	movs	r1, #2
 8002890:	202c      	movs	r0, #44	@ 0x2c
 8002892:	f000 fbe9 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002896:	202c      	movs	r0, #44	@ 0x2c
 8002898:	f000 fc00 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800289c:	e038      	b.n	8002910 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d117      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028ae:	4a1b      	ldr	r2, [pc, #108]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2103      	movs	r1, #3
 80028ca:	202d      	movs	r0, #45	@ 0x2d
 80028cc:	f000 fbcc 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028d0:	202d      	movs	r0, #45	@ 0x2d
 80028d2:	f000 fbe3 	bl	800309c <HAL_NVIC_EnableIRQ>
}
 80028d6:	e01b      	b.n	8002910 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a10      	ldr	r2, [pc, #64]	@ (8002920 <HAL_TIM_Base_MspInit+0xf4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d116      	bne.n	8002910 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_TIM_Base_MspInit+0xf0>)
 80028f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2106      	movs	r1, #6
 8002904:	202e      	movs	r0, #46	@ 0x2e
 8002906:	f000 fbaf 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800290a:	202e      	movs	r0, #46	@ 0x2e
 800290c:	f000 fbc6 	bl	800309c <HAL_NVIC_EnableIRQ>
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40012c00 	.word	0x40012c00
 800291c:	44020c00 	.word	0x44020c00
 8002920:	40000400 	.word	0x40000400

08002924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	@ (8002990 <HAL_TIM_MspPostInit+0x6c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d11f      	bne.n	8002986 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_TIM_MspPostInit+0x70>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294c:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_TIM_MspPostInit+0x70>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002956:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_TIM_MspPostInit+0x70>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002968:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002976:	2301      	movs	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	@ (8002998 <HAL_TIM_MspPostInit+0x74>)
 8002982:	f002 f81d 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002986:	bf00      	nop
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40012c00 	.word	0x40012c00
 8002994:	44020c00 	.word	0x44020c00
 8002998:	42020000 	.word	0x42020000

0800299c <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029a0:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029a2:	4a23      	ldr	r2, [pc, #140]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029c2:	220c      	movs	r2, #12
 80029c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029e4:	4811      	ldr	r0, [pc, #68]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029e6:	f008 ff23 	bl	800b830 <HAL_UART_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029f0:	f7ff fbe0 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f4:	2100      	movs	r1, #0
 80029f6:	480d      	ldr	r0, [pc, #52]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 80029f8:	f00a f9e5 	bl	800cdc6 <HAL_UARTEx_SetTxFifoThreshold>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a02:	f7ff fbd7 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	4808      	ldr	r0, [pc, #32]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 8002a0a:	f00a fa1a 	bl	800ce42 <HAL_UARTEx_SetRxFifoThreshold>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff fbce 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	@ (8002a2c <MX_USART1_UART_Init+0x90>)
 8002a1a:	f00a f99b 	bl	800cd54 <HAL_UARTEx_DisableFifoMode>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a24:	f7ff fbc6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000400 	.word	0x20000400
 8002a30:	40013800 	.word	0x40013800

08002a34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a3a:	4a24      	ldr	r2, [pc, #144]	@ (8002acc <MX_USART2_UART_Init+0x98>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002a46:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a4c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002a54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a80:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a82:	f008 fed5 	bl	800b830 <HAL_UART_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002a8c:	f7ff fb92 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a90:	2100      	movs	r1, #0
 8002a92:	480d      	ldr	r0, [pc, #52]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002a94:	f00a f997 	bl	800cdc6 <HAL_UARTEx_SetTxFifoThreshold>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002a9e:	f7ff fb89 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4808      	ldr	r0, [pc, #32]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002aa6:	f00a f9cc 	bl	800ce42 <HAL_UARTEx_SetRxFifoThreshold>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002ab0:	f7ff fb80 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <MX_USART2_UART_Init+0x94>)
 8002ab6:	f00a f94d 	bl	800cd54 <HAL_UARTEx_DisableFifoMode>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002ac0:	f7ff fb78 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000494 	.word	0x20000494
 8002acc:	40004400 	.word	0x40004400

08002ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0c0      	sub	sp, #256	@ 0x100
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	22d0      	movs	r2, #208	@ 0xd0
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00a fc3d 	bl	800d370 <memset>
  if(uartHandle->Instance==USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a72      	ldr	r2, [pc, #456]	@ (8002cc4 <HAL_UART_MspInit+0x1f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f040 8091 	bne.w	8002c24 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b02:	f04f 0201 	mov.w	r2, #1
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fe44 	bl	80067a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b22:	f7ff fb47 	bl	80021b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b26:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b2c:	4a66      	ldr	r2, [pc, #408]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b32:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b36:	4b64      	ldr	r3, [pc, #400]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b44:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b54:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002b86:	4619      	mov	r1, r3
 8002b88:	4850      	ldr	r0, [pc, #320]	@ (8002ccc <HAL_UART_MspInit+0x1fc>)
 8002b8a:	f001 ff19 	bl	80049c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002b8e:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b90:	4a50      	ldr	r2, [pc, #320]	@ (8002cd4 <HAL_UART_MspInit+0x204>)
 8002b92:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8002b94:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b96:	2215      	movs	r2, #21
 8002b98:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002bac:	4b48      	ldr	r3, [pc, #288]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002bbe:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002bc4:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002bca:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002be2:	483b      	ldr	r0, [pc, #236]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002be4:	f000 fb18 	bl	8003218 <HAL_DMA_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8002bee:	f7ff fae1 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a36      	ldr	r2, [pc, #216]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002bfa:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002c00:	2110      	movs	r1, #16
 8002c02:	4833      	ldr	r0, [pc, #204]	@ (8002cd0 <HAL_UART_MspInit+0x200>)
 8002c04:	f000 fe9a 	bl	800393c <HAL_DMA_ConfigChannelAttributes>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002c0e:	f7ff fad1 	bl	80021b4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2101      	movs	r1, #1
 8002c16:	203a      	movs	r0, #58	@ 0x3a
 8002c18:	f000 fa26 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c1c:	203a      	movs	r0, #58	@ 0x3a
 8002c1e:	f000 fa3d 	bl	800309c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c22:	e049      	b.n	8002cb8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <HAL_UART_MspInit+0x208>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d144      	bne.n	8002cb8 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c2e:	f04f 0202 	mov.w	r2, #2
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3e:	f107 0318 	add.w	r3, r7, #24
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fdae 	bl	80067a4 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002c4e:	f7ff fab1 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c52:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c58:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c62:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c76:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_UART_MspInit+0x1f8>)
 8002c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480a      	ldr	r0, [pc, #40]	@ (8002cdc <HAL_UART_MspInit+0x20c>)
 8002cb4:	f001 fe84 	bl	80049c0 <HAL_GPIO_Init>
}
 8002cb8:	bf00      	nop
 8002cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	44020c00 	.word	0x44020c00
 8002ccc:	42020400 	.word	0x42020400
 8002cd0:	20000528 	.word	0x20000528
 8002cd4:	40020050 	.word	0x40020050
 8002cd8:	40004400 	.word	0x40004400
 8002cdc:	42020000 	.word	0x42020000

08002ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce0:	480d      	ldr	r0, [pc, #52]	@ (8002d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ce2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ce4:	f7ff fbb0 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002cea:	490d      	ldr	r1, [pc, #52]	@ (8002d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <LoopForever+0xe>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d00:	4c0a      	ldr	r4, [pc, #40]	@ (8002d2c <LoopForever+0x16>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d0e:	f00a fb83 	bl	800d418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d12:	f7fe ff7d 	bl	8001c10 <main>

08002d16 <LoopForever>:

LoopForever:
    b LoopForever
 8002d16:	e7fe      	b.n	8002d16 <LoopForever>
  ldr   r0, =_estack
 8002d18:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002d24:	0800e16c 	.word	0x0800e16c
  ldr r2, =_sbss
 8002d28:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002d2c:	200006f0 	.word	0x200006f0

08002d30 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <ADC1_IRQHandler>
	...

08002d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 f98a 	bl	8003052 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d3e:	f003 fba7 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_Init+0x44>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	490b      	ldr	r1, [pc, #44]	@ (8002d7c <HAL_Init+0x48>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <HAL_Init+0x4c>)
 8002d56:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d58:	2004      	movs	r0, #4
 8002d5a:	f000 f9cf 	bl	80030fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 f810 	bl	8002d84 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e002      	b.n	8002d74 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d6e:	f7ff fa2d 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	44020c00 	.word	0x44020c00
 8002d7c:	0800e0d8 	.word	0x0800e0d8
 8002d80:	20000084 	.word	0x20000084

08002d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <HAL_InitTick+0xdc>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e05c      	b.n	8002e56 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002d9c:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <HAL_InitTick+0xe0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d10c      	bne.n	8002dc2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002da8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <HAL_InitTick+0xe4>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <HAL_InitTick+0xdc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e037      	b.n	8002e32 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002dc2:	f000 f9f3 	bl	80031ac <HAL_SYSTICK_GetCLKSourceConfig>
 8002dc6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d023      	beq.n	8002e16 <HAL_InitTick+0x92>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d82d      	bhi.n	8002e30 <HAL_InitTick+0xac>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_InitTick+0x5e>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00d      	beq.n	8002dfc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002de0:	e026      	b.n	8002e30 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <HAL_InitTick+0xe4>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <HAL_InitTick+0xdc>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002df0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	60fb      	str	r3, [r7, #12]
        break;
 8002dfa:	e01a      	b.n	8002e32 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002dfc:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <HAL_InitTick+0xdc>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e0a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	60fb      	str	r3, [r7, #12]
        break;
 8002e14:	e00d      	b.n	8002e32 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_InitTick+0xdc>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
        break;
 8002e2e:	e000      	b.n	8002e32 <HAL_InitTick+0xae>
        break;
 8002e30:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f940 	bl	80030b8 <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e009      	b.n	8002e56 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e42:	2200      	movs	r2, #0
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4a:	f000 f90d 	bl	8003068 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002e4e:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_InitTick+0xe8>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000008c 	.word	0x2000008c
 8002e64:	e000e010 	.word	0xe000e010
 8002e68:	20000084 	.word	0x20000084
 8002e6c:	20000088 	.word	0x20000088

08002e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000008c 	.word	0x2000008c
 8002e94:	200005a0 	.word	0x200005a0

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	200005a0 	.word	0x200005a0

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff ffee 	bl	8002e98 <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffde 	bl	8002e98 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000008c 	.word	0x2000008c

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2a:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	60d3      	str	r3, [r2, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ff4c 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003076:	f7ff ff63 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 800307a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ffb3 	bl	8002fec <NVIC_EncodePriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff82 	bl	8002f98 <__NVIC_SetPriority>
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff56 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030c8:	d301      	bcc.n	80030ce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00d      	b.n	80030ea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_SYSTICK_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_SYSTICK_Config+0x40>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_SYSTICK_Config+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <HAL_SYSTICK_Config+0x40>)
 80030e2:	f043 0303 	orr.w	r3, r3, #3
 80030e6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d844      	bhi.n	8003194 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003133 	.word	0x08003133
 8003114:	08003151 	.word	0x08003151
 8003118:	08003173 	.word	0x08003173
 800311c:	08003195 	.word	0x08003195
 8003120:	08003125 	.word	0x08003125
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003124:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1e      	ldr	r2, [pc, #120]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6013      	str	r3, [r2, #0]
      break;
 8003130:	e031      	b.n	8003196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003132:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003144:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003146:	f023 030c 	bic.w	r3, r3, #12
 800314a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800314e:	e022      	b.n	8003196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003150:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800315e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003162:	f023 030c 	bic.w	r3, r3, #12
 8003166:	4a10      	ldr	r2, [pc, #64]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003170:	e011      	b.n	8003196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0b      	ldr	r2, [pc, #44]	@ (80031a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800317e:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003184:	f023 030c 	bic.w	r3, r3, #12
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800318a:	f043 0308 	orr.w	r3, r3, #8
 800318e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003192:	e000      	b.n	8003196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003194:	bf00      	nop
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e010 	.word	0xe000e010
 80031a8:	44020c00 	.word	0x44020c00

080031ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031b2:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031be:	2304      	movs	r3, #4
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	e01e      	b.n	8003202 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80031c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d00f      	beq.n	80031f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d80f      	bhi.n	80031fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d003      	beq.n	80031f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031e8:	e008      	b.n	80031fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
        break;
 80031ee:	e008      	b.n	8003202 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031f0:	2301      	movs	r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
        break;
 80031f4:	e005      	b.n	8003202 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031f6:	2302      	movs	r3, #2
 80031f8:	607b      	str	r3, [r7, #4]
        break;
 80031fa:	e002      	b.n	8003202 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031fc:	2300      	movs	r3, #0
 80031fe:	607b      	str	r3, [r7, #4]
        break;
 8003200:	bf00      	nop
    }
  }
  return systick_source;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000e010 	.word	0xe000e010
 8003214:	44020c00 	.word	0x44020c00

08003218 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff fe3a 	bl	8002e98 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0db      	b.n	80033e8 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_DMA_Init+0x1d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f000 809f 	beq.w	800337a <HAL_DMA_Init+0x162>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6c      	ldr	r2, [pc, #432]	@ (80033f4 <HAL_DMA_Init+0x1dc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f000 8099 	beq.w	800337a <HAL_DMA_Init+0x162>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_DMA_Init+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f000 8093 	beq.w	800337a <HAL_DMA_Init+0x162>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	@ (80033fc <HAL_DMA_Init+0x1e4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f000 808d 	beq.w	800337a <HAL_DMA_Init+0x162>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a66      	ldr	r2, [pc, #408]	@ (8003400 <HAL_DMA_Init+0x1e8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f000 8087 	beq.w	800337a <HAL_DMA_Init+0x162>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	@ (8003404 <HAL_DMA_Init+0x1ec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	f000 8081 	beq.w	800337a <HAL_DMA_Init+0x162>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a62      	ldr	r2, [pc, #392]	@ (8003408 <HAL_DMA_Init+0x1f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d07b      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a61      	ldr	r2, [pc, #388]	@ (800340c <HAL_DMA_Init+0x1f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d076      	beq.n	800337a <HAL_DMA_Init+0x162>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_DMA_Init+0x1f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d071      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <HAL_DMA_Init+0x1fc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d06c      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003418 <HAL_DMA_Init+0x200>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d067      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5b      	ldr	r2, [pc, #364]	@ (800341c <HAL_DMA_Init+0x204>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d062      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a59      	ldr	r2, [pc, #356]	@ (8003420 <HAL_DMA_Init+0x208>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d05d      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_DMA_Init+0x20c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d058      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a56      	ldr	r2, [pc, #344]	@ (8003428 <HAL_DMA_Init+0x210>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d053      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a55      	ldr	r2, [pc, #340]	@ (800342c <HAL_DMA_Init+0x214>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d04e      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a53      	ldr	r2, [pc, #332]	@ (8003430 <HAL_DMA_Init+0x218>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d049      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <HAL_DMA_Init+0x21c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d044      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_DMA_Init+0x220>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d03f      	beq.n	800337a <HAL_DMA_Init+0x162>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4f      	ldr	r2, [pc, #316]	@ (800343c <HAL_DMA_Init+0x224>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03a      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4d      	ldr	r2, [pc, #308]	@ (8003440 <HAL_DMA_Init+0x228>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d035      	beq.n	800337a <HAL_DMA_Init+0x162>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_DMA_Init+0x22c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d030      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4a      	ldr	r2, [pc, #296]	@ (8003448 <HAL_DMA_Init+0x230>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02b      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a49      	ldr	r2, [pc, #292]	@ (800344c <HAL_DMA_Init+0x234>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d026      	beq.n	800337a <HAL_DMA_Init+0x162>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a47      	ldr	r2, [pc, #284]	@ (8003450 <HAL_DMA_Init+0x238>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d021      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a46      	ldr	r2, [pc, #280]	@ (8003454 <HAL_DMA_Init+0x23c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01c      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a44      	ldr	r2, [pc, #272]	@ (8003458 <HAL_DMA_Init+0x240>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d017      	beq.n	800337a <HAL_DMA_Init+0x162>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a43      	ldr	r2, [pc, #268]	@ (800345c <HAL_DMA_Init+0x244>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d012      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a41      	ldr	r2, [pc, #260]	@ (8003460 <HAL_DMA_Init+0x248>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_DMA_Init+0x162>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a40      	ldr	r2, [pc, #256]	@ (8003464 <HAL_DMA_Init+0x24c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d008      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3e      	ldr	r2, [pc, #248]	@ (8003468 <HAL_DMA_Init+0x250>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <HAL_DMA_Init+0x162>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3d      	ldr	r2, [pc, #244]	@ (800346c <HAL_DMA_Init+0x254>)
 8003378:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0206 	orr.w	r2, r2, #6
 8003398:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800339a:	e00f      	b.n	80033bc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800339c:	f7ff fd7c 	bl	8002e98 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d908      	bls.n	80033bc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2210      	movs	r2, #16
 80033ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2203      	movs	r2, #3
 80033b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e015      	b.n	80033e8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e8      	bne.n	800339c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fb18 	bl	8003a00 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40020050 	.word	0x40020050
 80033f4:	50020050 	.word	0x50020050
 80033f8:	400200d0 	.word	0x400200d0
 80033fc:	500200d0 	.word	0x500200d0
 8003400:	40020150 	.word	0x40020150
 8003404:	50020150 	.word	0x50020150
 8003408:	400201d0 	.word	0x400201d0
 800340c:	500201d0 	.word	0x500201d0
 8003410:	40020250 	.word	0x40020250
 8003414:	50020250 	.word	0x50020250
 8003418:	400202d0 	.word	0x400202d0
 800341c:	500202d0 	.word	0x500202d0
 8003420:	40020350 	.word	0x40020350
 8003424:	50020350 	.word	0x50020350
 8003428:	400203d0 	.word	0x400203d0
 800342c:	500203d0 	.word	0x500203d0
 8003430:	40021050 	.word	0x40021050
 8003434:	50021050 	.word	0x50021050
 8003438:	400210d0 	.word	0x400210d0
 800343c:	500210d0 	.word	0x500210d0
 8003440:	40021150 	.word	0x40021150
 8003444:	50021150 	.word	0x50021150
 8003448:	400211d0 	.word	0x400211d0
 800344c:	500211d0 	.word	0x500211d0
 8003450:	40021250 	.word	0x40021250
 8003454:	50021250 	.word	0x50021250
 8003458:	400212d0 	.word	0x400212d0
 800345c:	500212d0 	.word	0x500212d0
 8003460:	40021350 	.word	0x40021350
 8003464:	50021350 	.word	0x50021350
 8003468:	400213d0 	.word	0x400213d0
 800346c:	500213d0 	.word	0x500213d0

08003470 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04f      	b.n	8003528 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Start_IT+0x26>
 8003492:	2302      	movs	r3, #2
 8003494:	e048      	b.n	8003528 <HAL_DMA_Start_IT+0xb8>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d136      	bne.n	8003518 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa78 	bl	80039b4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80034d2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003502:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e007      	b.n	8003528 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2240      	movs	r2, #64	@ 0x40
 800351c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003538:	f7ff fcae 	bl	8002e98 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06b      	b.n	8003620 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d008      	beq.n	8003566 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e05c      	b.n	8003620 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0204 	orr.w	r2, r2, #4
 8003574:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2205      	movs	r2, #5
 800357a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800357e:	e020      	b.n	80035c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003580:	f7ff fc8a 	bl	8002e98 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b05      	cmp	r3, #5
 800358c:	d919      	bls.n	80035c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2203      	movs	r2, #3
 800359e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b2:	2201      	movs	r2, #1
 80035b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02e      	b.n	8003620 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0d7      	beq.n	8003580 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0202 	orr.w	r2, r2, #2
 80035de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80035f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	2201      	movs	r2, #1
 800360c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e019      	b.n	800366e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d004      	beq.n	8003650 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e00e      	b.n	800366e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800368a:	f023 030f 	bic.w	r3, r3, #15
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	3b50      	subs	r3, #80	@ 0x50
 800369a:	09db      	lsrs	r3, r3, #7
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2201      	movs	r2, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 813b 	beq.w	8003930 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d011      	beq.n	80036ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d011      	beq.n	800371e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003710:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	f043 0202 	orr.w	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003742:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d011      	beq.n	8003782 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003774:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04c      	beq.n	8003860 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d045      	beq.n	8003860 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d12e      	bne.n	8003848 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037f8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0202 	orr.w	r2, r2, #2
 8003808:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003822:	2201      	movs	r2, #1
 8003824:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d07a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
        }

        return;
 8003846:	e075      	b.n	8003934 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2205      	movs	r2, #5
 800384c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d039      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d032      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a8:	2201      	movs	r2, #1
 80038aa:	731a      	strb	r2, [r3, #12]
 80038ac:	e008      	b.n	80038c0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80038c8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d025      	beq.n	8003936 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0202 	orr.w	r2, r2, #2
 80038f8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	2201      	movs	r2, #1
 8003914:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e002      	b.n	8003936 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e02b      	b.n	80039a8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	3b50      	subs	r3, #80	@ 0x50
 8003968:	09db      	lsrs	r3, r3, #7
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f003 0311 	and.w	r3, r3, #17
 8003986:	2b11      	cmp	r3, #17
 8003988:	d106      	bne.n	8003998 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e006      	b.n	80039a6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b291      	uxth	r1, r2
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80039e0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	@ (8003b8c <DMA_Init+0x18c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	f000 80a0 	beq.w	8003b86 <DMA_Init+0x186>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a51      	ldr	r2, [pc, #324]	@ (8003b90 <DMA_Init+0x190>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	f000 809a 	beq.w	8003b86 <DMA_Init+0x186>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4f      	ldr	r2, [pc, #316]	@ (8003b94 <DMA_Init+0x194>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f000 8094 	beq.w	8003b86 <DMA_Init+0x186>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4d      	ldr	r2, [pc, #308]	@ (8003b98 <DMA_Init+0x198>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f000 808e 	beq.w	8003b86 <DMA_Init+0x186>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8003b9c <DMA_Init+0x19c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f000 8088 	beq.w	8003b86 <DMA_Init+0x186>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a49      	ldr	r2, [pc, #292]	@ (8003ba0 <DMA_Init+0x1a0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	f000 8082 	beq.w	8003b86 <DMA_Init+0x186>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a47      	ldr	r2, [pc, #284]	@ (8003ba4 <DMA_Init+0x1a4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d07c      	beq.n	8003b86 <DMA_Init+0x186>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a45      	ldr	r2, [pc, #276]	@ (8003ba8 <DMA_Init+0x1a8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d077      	beq.n	8003b86 <DMA_Init+0x186>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a44      	ldr	r2, [pc, #272]	@ (8003bac <DMA_Init+0x1ac>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d072      	beq.n	8003b86 <DMA_Init+0x186>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <DMA_Init+0x1b0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d06d      	beq.n	8003b86 <DMA_Init+0x186>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <DMA_Init+0x1b4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d068      	beq.n	8003b86 <DMA_Init+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bb8 <DMA_Init+0x1b8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d063      	beq.n	8003b86 <DMA_Init+0x186>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <DMA_Init+0x1bc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d05e      	beq.n	8003b86 <DMA_Init+0x186>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <DMA_Init+0x1c0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d059      	beq.n	8003b86 <DMA_Init+0x186>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc4 <DMA_Init+0x1c4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d054      	beq.n	8003b86 <DMA_Init+0x186>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a39      	ldr	r2, [pc, #228]	@ (8003bc8 <DMA_Init+0x1c8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d04f      	beq.n	8003b86 <DMA_Init+0x186>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a38      	ldr	r2, [pc, #224]	@ (8003bcc <DMA_Init+0x1cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <DMA_Init+0x186>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a36      	ldr	r2, [pc, #216]	@ (8003bd0 <DMA_Init+0x1d0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <DMA_Init+0x186>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a35      	ldr	r2, [pc, #212]	@ (8003bd4 <DMA_Init+0x1d4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <DMA_Init+0x186>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a33      	ldr	r2, [pc, #204]	@ (8003bd8 <DMA_Init+0x1d8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <DMA_Init+0x186>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a32      	ldr	r2, [pc, #200]	@ (8003bdc <DMA_Init+0x1dc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <DMA_Init+0x186>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	@ (8003be0 <DMA_Init+0x1e0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <DMA_Init+0x186>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <DMA_Init+0x1e4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <DMA_Init+0x186>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	@ (8003be8 <DMA_Init+0x1e8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <DMA_Init+0x186>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <DMA_Init+0x1ec>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <DMA_Init+0x186>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <DMA_Init+0x1f0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <DMA_Init+0x186>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <DMA_Init+0x1f4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <DMA_Init+0x186>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <DMA_Init+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <DMA_Init+0x186>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <DMA_Init+0x1fc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <DMA_Init+0x186>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a24      	ldr	r2, [pc, #144]	@ (8003c00 <DMA_Init+0x200>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <DMA_Init+0x186>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <DMA_Init+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <DMA_Init+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <DMA_Init+0x208>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d142      	bne.n	8003c0c <DMA_Init+0x20c>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e041      	b.n	8003c0e <DMA_Init+0x20e>
 8003b8a:	bf00      	nop
 8003b8c:	40020050 	.word	0x40020050
 8003b90:	50020050 	.word	0x50020050
 8003b94:	400200d0 	.word	0x400200d0
 8003b98:	500200d0 	.word	0x500200d0
 8003b9c:	40020150 	.word	0x40020150
 8003ba0:	50020150 	.word	0x50020150
 8003ba4:	400201d0 	.word	0x400201d0
 8003ba8:	500201d0 	.word	0x500201d0
 8003bac:	40020250 	.word	0x40020250
 8003bb0:	50020250 	.word	0x50020250
 8003bb4:	400202d0 	.word	0x400202d0
 8003bb8:	500202d0 	.word	0x500202d0
 8003bbc:	40020350 	.word	0x40020350
 8003bc0:	50020350 	.word	0x50020350
 8003bc4:	400203d0 	.word	0x400203d0
 8003bc8:	500203d0 	.word	0x500203d0
 8003bcc:	40021050 	.word	0x40021050
 8003bd0:	50021050 	.word	0x50021050
 8003bd4:	400210d0 	.word	0x400210d0
 8003bd8:	500210d0 	.word	0x500210d0
 8003bdc:	40021150 	.word	0x40021150
 8003be0:	50021150 	.word	0x50021150
 8003be4:	400211d0 	.word	0x400211d0
 8003be8:	500211d0 	.word	0x500211d0
 8003bec:	40021250 	.word	0x40021250
 8003bf0:	50021250 	.word	0x50021250
 8003bf4:	400212d0 	.word	0x400212d0
 8003bf8:	500212d0 	.word	0x500212d0
 8003bfc:	40021350 	.word	0x40021350
 8003c00:	50021350 	.word	0x50021350
 8003c04:	400213d0 	.word	0x400213d0
 8003c08:	500213d0 	.word	0x500213d0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d012      	beq.n	8003c38 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	051b      	lsls	r3, r3, #20
 8003c1e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003c22:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003c30:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c68:	f040 80b0 	bne.w	8003dcc <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a84      	ldr	r2, [pc, #528]	@ (8003e84 <DMA_Init+0x484>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f000 80a0 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a82      	ldr	r2, [pc, #520]	@ (8003e88 <DMA_Init+0x488>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f000 809a 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a80      	ldr	r2, [pc, #512]	@ (8003e8c <DMA_Init+0x48c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	f000 8094 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7e      	ldr	r2, [pc, #504]	@ (8003e90 <DMA_Init+0x490>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	f000 808e 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8003e94 <DMA_Init+0x494>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	f000 8088 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7a      	ldr	r2, [pc, #488]	@ (8003e98 <DMA_Init+0x498>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f000 8082 	beq.w	8003db8 <DMA_Init+0x3b8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	@ (8003e9c <DMA_Init+0x49c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d07c      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a77      	ldr	r2, [pc, #476]	@ (8003ea0 <DMA_Init+0x4a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d077      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a75      	ldr	r2, [pc, #468]	@ (8003ea4 <DMA_Init+0x4a4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d072      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a74      	ldr	r2, [pc, #464]	@ (8003ea8 <DMA_Init+0x4a8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d06d      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a72      	ldr	r2, [pc, #456]	@ (8003eac <DMA_Init+0x4ac>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d068      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a71      	ldr	r2, [pc, #452]	@ (8003eb0 <DMA_Init+0x4b0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d063      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb4 <DMA_Init+0x4b4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d05e      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb8 <DMA_Init+0x4b8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d059      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a6c      	ldr	r2, [pc, #432]	@ (8003ebc <DMA_Init+0x4bc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d054      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6b      	ldr	r2, [pc, #428]	@ (8003ec0 <DMA_Init+0x4c0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04f      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a69      	ldr	r2, [pc, #420]	@ (8003ec4 <DMA_Init+0x4c4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d04a      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a68      	ldr	r2, [pc, #416]	@ (8003ec8 <DMA_Init+0x4c8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d045      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a66      	ldr	r2, [pc, #408]	@ (8003ecc <DMA_Init+0x4cc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d040      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a65      	ldr	r2, [pc, #404]	@ (8003ed0 <DMA_Init+0x4d0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d03b      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a63      	ldr	r2, [pc, #396]	@ (8003ed4 <DMA_Init+0x4d4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d036      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a62      	ldr	r2, [pc, #392]	@ (8003ed8 <DMA_Init+0x4d8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d031      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a60      	ldr	r2, [pc, #384]	@ (8003edc <DMA_Init+0x4dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02c      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee0 <DMA_Init+0x4e0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d027      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ee4 <DMA_Init+0x4e4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d022      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5c      	ldr	r2, [pc, #368]	@ (8003ee8 <DMA_Init+0x4e8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01d      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5a      	ldr	r2, [pc, #360]	@ (8003eec <DMA_Init+0x4ec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d018      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a59      	ldr	r2, [pc, #356]	@ (8003ef0 <DMA_Init+0x4f0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a57      	ldr	r2, [pc, #348]	@ (8003ef4 <DMA_Init+0x4f4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a56      	ldr	r2, [pc, #344]	@ (8003ef8 <DMA_Init+0x4f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d009      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a54      	ldr	r2, [pc, #336]	@ (8003efc <DMA_Init+0x4fc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <DMA_Init+0x3b8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a53      	ldr	r2, [pc, #332]	@ (8003f00 <DMA_Init+0x500>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <DMA_Init+0x3bc>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <DMA_Init+0x3be>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e008      	b.n	8003dde <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd4:	d103      	bne.n	8003dde <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ddc:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dee:	4b45      	ldr	r3, [pc, #276]	@ (8003f04 <DMA_Init+0x504>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	68f9      	ldr	r1, [r7, #12]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb4 <DMA_Init+0x4b4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <DMA_Init+0x454>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <DMA_Init+0x4b8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <DMA_Init+0x454>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <DMA_Init+0x4bc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <DMA_Init+0x454>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <DMA_Init+0x4c0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <DMA_Init+0x454>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <DMA_Init+0x4f4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <DMA_Init+0x454>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef8 <DMA_Init+0x4f8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <DMA_Init+0x454>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <DMA_Init+0x4fc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <DMA_Init+0x454>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <DMA_Init+0x500>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <DMA_Init+0x458>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <DMA_Init+0x45a>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40020050 	.word	0x40020050
 8003e88:	50020050 	.word	0x50020050
 8003e8c:	400200d0 	.word	0x400200d0
 8003e90:	500200d0 	.word	0x500200d0
 8003e94:	40020150 	.word	0x40020150
 8003e98:	50020150 	.word	0x50020150
 8003e9c:	400201d0 	.word	0x400201d0
 8003ea0:	500201d0 	.word	0x500201d0
 8003ea4:	40020250 	.word	0x40020250
 8003ea8:	50020250 	.word	0x50020250
 8003eac:	400202d0 	.word	0x400202d0
 8003eb0:	500202d0 	.word	0x500202d0
 8003eb4:	40020350 	.word	0x40020350
 8003eb8:	50020350 	.word	0x50020350
 8003ebc:	400203d0 	.word	0x400203d0
 8003ec0:	500203d0 	.word	0x500203d0
 8003ec4:	40021050 	.word	0x40021050
 8003ec8:	50021050 	.word	0x50021050
 8003ecc:	400210d0 	.word	0x400210d0
 8003ed0:	500210d0 	.word	0x500210d0
 8003ed4:	40021150 	.word	0x40021150
 8003ed8:	50021150 	.word	0x50021150
 8003edc:	400211d0 	.word	0x400211d0
 8003ee0:	500211d0 	.word	0x500211d0
 8003ee4:	40021250 	.word	0x40021250
 8003ee8:	50021250 	.word	0x50021250
 8003eec:	400212d0 	.word	0x400212d0
 8003ef0:	500212d0 	.word	0x500212d0
 8003ef4:	40021350 	.word	0x40021350
 8003ef8:	50021350 	.word	0x50021350
 8003efc:	400213d0 	.word	0x400213d0
 8003f00:	500213d0 	.word	0x500213d0
 8003f04:	3cc02100 	.word	0x3cc02100

08003f08 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_DMAEx_List_Start_IT+0x16>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e082      	b.n	8004028 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f28:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <HAL_DMAEx_List_Start_IT+0x40>
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d16a      	bne.n	8004018 <HAL_DMAEx_List_Start_IT+0x110>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d067      	beq.n	8004018 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d157      	bne.n	8004004 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_DMAEx_List_Start_IT+0x5a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e062      	b.n	8004028 <HAL_DMAEx_List_Start_IT+0x120>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	2202      	movs	r2, #2
 8003f78:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003f96:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fae:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f107 010c 	add.w	r1, r7, #12
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f82b 	bl	8004030 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	0c0b      	lsrs	r3, r1, #16
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e007      	b.n	8004028 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2240      	movs	r2, #64	@ 0x40
 800401c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00c      	beq.n	8004062 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a0d      	ldr	r2, [pc, #52]	@ (8004088 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004052:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2207      	movs	r2, #7
 800405e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004060:	e00b      	b.n	800407a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4a08      	ldr	r2, [pc, #32]	@ (800408c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800406c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2205      	movs	r2, #5
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	fe010000 	.word	0xfe010000
 800408c:	f8010000 	.word	0xf8010000

08004090 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e147      	b.n	8004332 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc ff2a 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0210 	bic.w	r2, r2, #16
 80040ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040cc:	f7fe fee4 	bl	8002e98 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040d2:	e012      	b.n	80040fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040d4:	f7fe fee0 	bl	8002e98 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b0a      	cmp	r3, #10
 80040e0:	d90b      	bls.n	80040fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e11b      	b.n	8004332 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d0e5      	beq.n	80040d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004118:	f7fe febe 	bl	8002e98 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800411e:	e012      	b.n	8004146 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004120:	f7fe feba 	bl	8002e98 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b0a      	cmp	r3, #10
 800412c:	d90b      	bls.n	8004146 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0f5      	b.n	8004332 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0e5      	beq.n	8004120 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0202 	orr.w	r2, r2, #2
 8004162:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_FDCAN_Init+0x2ac>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d103      	bne.n	8004176 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800416e:	4a74      	ldr	r2, [pc, #464]	@ (8004340 <HAL_FDCAN_Init+0x2b0>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	7c1b      	ldrb	r3, [r3, #16]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d108      	bne.n	8004190 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418c:	619a      	str	r2, [r3, #24]
 800418e:	e007      	b.n	80041a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800419e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7c5b      	ldrb	r3, [r3, #17]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041b6:	619a      	str	r2, [r3, #24]
 80041b8:	e007      	b.n	80041ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7c9b      	ldrb	r3, [r3, #18]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041e0:	619a      	str	r2, [r3, #24]
 80041e2:	e007      	b.n	80041f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004218:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0210 	bic.w	r2, r2, #16
 8004228:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d108      	bne.n	8004244 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0204 	orr.w	r2, r2, #4
 8004240:	619a      	str	r2, [r3, #24]
 8004242:	e02c      	b.n	800429e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d028      	beq.n	800429e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d01c      	beq.n	800428e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004262:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0210 	orr.w	r2, r2, #16
 8004272:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d110      	bne.n	800429e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	619a      	str	r2, [r3, #24]
 800428c:	e007      	b.n	800429e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042d2:	d115      	bne.n	8004300 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	3b01      	subs	r3, #1
 80042e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	3b01      	subs	r3, #1
 80042ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	3b01      	subs	r3, #1
 80042f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa74 	bl	8004804 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	4000a400 	.word	0x4000a400
 8004340:	4000a500 	.word	0x4000a500

08004344 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004354:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <HAL_FDCAN_ConfigFilter+0x1e>
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d13d      	bne.n	80043de <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004376:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800437e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e01d      	b.n	80043da <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	075a      	lsls	r2, r3, #29
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	079a      	lsls	r2, r3, #30
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3304      	adds	r3, #4
 80043d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e006      	b.n	80043ec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e2:	f043 0202 	orr.w	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d110      	bne.n	800442e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e006      	b.n	800443c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	f043 0204 	orr.w	r2, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d12c      	bne.n	80044ba <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e023      	b.n	80044c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa16 	bl	80048c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	fa01 f202 	lsl.w	r2, r1, r2
 80044a8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80044ac:	2201      	movs	r2, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e006      	b.n	80044c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	f043 0208 	orr.w	r2, r3, #8
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	@ 0x30
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044de:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ec:	4013      	ands	r3, r2
 80044ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004504:	4013      	ands	r3, r2
 8004506:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451c:	4013      	ands	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004526:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800452a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	4013      	ands	r3, r2
 8004536:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004542:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	4013      	ands	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2240      	movs	r2, #64	@ 0x40
 800457a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f921 	bl	80047c4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d019      	beq.n	80045c0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d014      	beq.n	80045c0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800459e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8e3 	bl	8004786 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80045ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8a2 	bl	800471a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80045e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8a2 	bl	8004730 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80045fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8a2 	bl	8004746 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800461e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f89b 	bl	800475c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d013      	beq.n	8004662 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004642:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2280      	movs	r2, #128	@ 0x80
 8004658:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f887 	bl	8004770 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800467e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f88b 	bl	800479c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80046a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f883 	bl	80047b0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80046e2:	69f9      	ldr	r1, [r7, #28]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f881 	bl	80047ec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f863 	bl	80047d8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004712:	bf00      	nop
 8004714:	3730      	adds	r7, #48	@ 0x30
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800480c:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800480e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2b      	ldr	r2, [pc, #172]	@ (80048c4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d103      	bne.n	8004822 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004820:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004830:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004838:	041a      	lsls	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004856:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	061a      	lsls	r2, r3, #24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e005      	b.n	80048a4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3f3      	bcc.n	8004898 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	4000ac00 	.word	0x4000ac00
 80048c4:	4000a800 	.word	0x4000a800

080048c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80048e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e00a      	b.n	800490a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80048fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004902:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004908:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004914:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800491a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004920:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3304      	adds	r3, #4
 8004948:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	3304      	adds	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e020      	b.n	800499e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3303      	adds	r3, #3
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	4413      	add	r3, r2
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3302      	adds	r3, #2
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	440b      	add	r3, r1
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004974:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	440b      	add	r3, r1
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004982:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	440a      	add	r2, r1
 800498a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800498c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3304      	adds	r3, #4
 8004996:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3304      	adds	r3, #4
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a06      	ldr	r2, [pc, #24]	@ (80049bc <FDCAN_CopyMessageToRAM+0xf4>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	461a      	mov	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d3d6      	bcc.n	800495c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3724      	adds	r7, #36	@ 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	0800e0f0 	.word	0x0800e0f0

080049c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049ce:	e136      	b.n	8004c3e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	4013      	ands	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8128 	beq.w	8004c38 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x38>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b12      	cmp	r3, #18
 80049f6:	d125      	bne.n	8004a44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	08da      	lsrs	r2, r3, #3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3208      	adds	r2, #8
 8004a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	220f      	movs	r2, #15
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	6979      	ldr	r1, [r7, #20]
 8004a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00b      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a8c:	2b11      	cmp	r3, #17
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b12      	cmp	r3, #18
 8004a96:	d130      	bne.n	8004afa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4013      	ands	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ace:	2201      	movs	r2, #1
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4013      	ands	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0201 	and.w	r2, r3, #1
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d017      	beq.n	8004b32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4013      	ands	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d07c      	beq.n	8004c38 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b3e:	4a47      	ldr	r2, [pc, #284]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3318      	adds	r3, #24
 8004b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0a9a      	lsrs	r2, r3, #10
 8004b66:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <HAL_GPIO_Init+0x2a0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	f002 0203 	and.w	r2, r2, #3
 8004b70:	00d2      	lsls	r2, r2, #3
 8004b72:	4093      	lsls	r3, r2
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004b7a:	4938      	ldr	r1, [pc, #224]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	3318      	adds	r3, #24
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004b88:	4b34      	ldr	r3, [pc, #208]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4013      	ands	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004bac:	4a2b      	ldr	r2, [pc, #172]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004bd6:	4a21      	ldr	r2, [pc, #132]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4013      	ands	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004c02:	4a16      	ldr	r2, [pc, #88]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004c30:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_GPIO_Init+0x29c>)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f47f aec1 	bne.w	80049d0 <HAL_GPIO_Init+0x10>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	44022000 	.word	0x44022000
 8004c60:	002f7f7f 	.word	0x002f7f7f

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c80:	e002      	b.n	8004c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	041a      	lsls	r2, r3, #16
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	43d9      	mvns	r1, r3
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	400b      	ands	r3, r1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e08d      	b.n	8004df6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fb34 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	@ 0x24
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d107      	bne.n	8004d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	e006      	b.n	8004d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d108      	bne.n	8004d6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	e007      	b.n	8004d7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
 8004e10:	4613      	mov	r3, r2
 8004e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	f040 80da 	bne.w	8004fd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_I2C_Master_Transmit+0x30>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e0d3      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e38:	f7fe f82e 	bl	8002e98 <HAL_GetTick>
 8004e3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2319      	movs	r3, #25
 8004e44:	2201      	movs	r2, #1
 8004e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f9e6 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0be      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2bff      	cmp	r3, #255	@ 0xff
 8004e8a:	d90e      	bls.n	8004eaa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	22ff      	movs	r2, #255	@ 0xff
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	8979      	ldrh	r1, [r7, #10]
 8004e9a:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fc0a 	bl	80056bc <I2C_TransferConfig>
 8004ea8:	e06c      	b.n	8004f84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	8979      	ldrh	r1, [r7, #10]
 8004ebc:	4b48      	ldr	r3, [pc, #288]	@ (8004fe0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fbf9 	bl	80056bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004eca:	e05b      	b.n	8004f84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	6a39      	ldr	r1, [r7, #32]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f9fc 	bl	80052ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e07b      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d034      	beq.n	8004f84 <HAL_I2C_Master_Transmit+0x184>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d130      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	@ 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f975 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04d      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2bff      	cmp	r3, #255	@ 0xff
 8004f44:	d90e      	bls.n	8004f64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fbad 	bl	80056bc <I2C_TransferConfig>
 8004f62:	e00f      	b.n	8004f84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	8979      	ldrh	r1, [r7, #10]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fb9c 	bl	80056bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d19e      	bne.n	8004ecc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f9e2 	bl	800535c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01a      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	80002000 	.word	0x80002000
 8004fe4:	fe00e800 	.word	0xfe00e800

08004fe8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	817b      	strh	r3, [r7, #10]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b20      	cmp	r3, #32
 8005006:	f040 80db 	bne.w	80051c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_I2C_Master_Receive+0x30>
 8005014:	2302      	movs	r3, #2
 8005016:	e0d4      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005020:	f7fd ff3a 	bl	8002e98 <HAL_GetTick>
 8005024:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2319      	movs	r3, #25
 800502c:	2201      	movs	r2, #1
 800502e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f8f2 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0bf      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2222      	movs	r2, #34	@ 0x22
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2210      	movs	r2, #16
 800504e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	893a      	ldrh	r2, [r7, #8]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2bff      	cmp	r3, #255	@ 0xff
 8005072:	d90e      	bls.n	8005092 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	22ff      	movs	r2, #255	@ 0xff
 8005078:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507e:	b2da      	uxtb	r2, r3
 8005080:	8979      	ldrh	r1, [r7, #10]
 8005082:	4b52      	ldr	r3, [pc, #328]	@ (80051cc <HAL_I2C_Master_Receive+0x1e4>)
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fb16 	bl	80056bc <I2C_TransferConfig>
 8005090:	e06d      	b.n	800516e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	8979      	ldrh	r1, [r7, #10]
 80050a4:	4b49      	ldr	r3, [pc, #292]	@ (80051cc <HAL_I2C_Master_Receive+0x1e4>)
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fb05 	bl	80056bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80050b2:	e05c      	b.n	800516e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	6a39      	ldr	r1, [r7, #32]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f993 	bl	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e07c      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d034      	beq.n	800516e <HAL_I2C_Master_Receive+0x186>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d130      	bne.n	800516e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	@ 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f880 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e04d      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	2bff      	cmp	r3, #255	@ 0xff
 800512e:	d90e      	bls.n	800514e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	22ff      	movs	r2, #255	@ 0xff
 8005134:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513a:	b2da      	uxtb	r2, r3
 800513c:	8979      	ldrh	r1, [r7, #10]
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fab8 	bl	80056bc <I2C_TransferConfig>
 800514c:	e00f      	b.n	800516e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515c:	b2da      	uxtb	r2, r3
 800515e:	8979      	ldrh	r1, [r7, #10]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 faa7 	bl	80056bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d19d      	bne.n	80050b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	6a39      	ldr	r1, [r7, #32]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f8ed 	bl	800535c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e01a      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2220      	movs	r2, #32
 8005192:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <HAL_I2C_Master_Receive+0x1e8>)
 80051a0:	400b      	ands	r3, r1
 80051a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	80002400 	.word	0x80002400
 80051d0:	fe00e800 	.word	0xfe00e800

080051d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d103      	bne.n	80051f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d007      	beq.n	8005210 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	619a      	str	r2, [r3, #24]
  }
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	e03b      	b.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f962 	bl	80054fc <I2C_IsErrorOccurred>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e041      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d02d      	beq.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fd fe25 	bl	8002e98 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnFlagUntilTimeout+0x44>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d122      	bne.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	429a      	cmp	r2, r3
 800527c:	d113      	bne.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e00f      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0b4      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052da:	e033      	b.n	8005344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f90b 	bl	80054fc <I2C_IsErrorOccurred>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e031      	b.n	8005354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d025      	beq.n	8005344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fd fdce 	bl	8002e98 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11a      	bne.n	8005344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d013      	beq.n	8005344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005320:	f043 0220 	orr.w	r2, r3, #32
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d1c4      	bne.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005368:	e02f      	b.n	80053ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f8c4 	bl	80054fc <I2C_IsErrorOccurred>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e02d      	b.n	80053da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fd fd8b 	bl	8002e98 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11a      	bne.n	80053ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d013      	beq.n	80053ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e007      	b.n	80053da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d1c8      	bne.n	800536a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80053f4:	e071      	b.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f87e 	bl	80054fc <I2C_IsErrorOccurred>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d13b      	bne.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d138      	bne.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d105      	bne.n	8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d121      	bne.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2204      	movs	r2, #4
 8005452:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2220      	movs	r2, #32
 800545a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b24      	ldr	r3, [pc, #144]	@ (80054f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005468:	400b      	ands	r3, r1
 800546a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
 8005488:	e002      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005490:	f7fd fd02 	bl	8002e98 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d302      	bcc.n	80054a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d119      	bne.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d00f      	beq.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d002      	beq.n	80054ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d083      	beq.n	80053f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	fe00e800 	.word	0xfe00e800

080054fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d068      	beq.n	80055fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2210      	movs	r2, #16
 800552e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005530:	e049      	b.n	80055c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d045      	beq.n	80055c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fd fcad 	bl	8002e98 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <I2C_IsErrorOccurred+0x54>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d13a      	bne.n	80055c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800555a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005562:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800556e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005572:	d121      	bne.n	80055b8 <I2C_IsErrorOccurred+0xbc>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800557a:	d01d      	beq.n	80055b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	2b20      	cmp	r3, #32
 8005580:	d01a      	beq.n	80055b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005590:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005592:	f7fd fc81 	bl	8002e98 <HAL_GetTick>
 8005596:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005598:	e00e      	b.n	80055b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800559a:	f7fd fc7d 	bl	8002e98 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b19      	cmp	r3, #25
 80055a6:	d907      	bls.n	80055b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	f043 0320 	orr.w	r3, r3, #32
 80055ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055b6:	e006      	b.n	80055c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d1e9      	bne.n	800559a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d003      	beq.n	80055dc <I2C_IsErrorOccurred+0xe0>
 80055d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0aa      	beq.n	8005532 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2220      	movs	r2, #32
 80055ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800561c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f043 0308 	orr.w	r3, r3, #8
 8005634:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800563e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01c      	beq.n	80056aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fdaf 	bl	80051d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <I2C_IsErrorOccurred+0x1bc>)
 8005682:	400b      	ands	r3, r1
 8005684:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80056aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3728      	adds	r7, #40	@ 0x28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	fe00e800 	.word	0xfe00e800

080056bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	817b      	strh	r3, [r7, #10]
 80056ca:	4613      	mov	r3, r2
 80056cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ce:	897b      	ldrh	r3, [r7, #10]
 80056d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056d4:	7a7b      	ldrb	r3, [r7, #9]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056dc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056ea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	0d5b      	lsrs	r3, r3, #21
 80056f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80056fa:	4b08      	ldr	r3, [pc, #32]	@ (800571c <I2C_TransferConfig+0x60>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	43db      	mvns	r3, r3
 8005700:	ea02 0103 	and.w	r1, r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	03ff63ff 	.word	0x03ff63ff

08005720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b20      	cmp	r3, #32
 8005734:	d138      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005740:	2302      	movs	r3, #2
 8005742:	e032      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	@ 0x24
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d139      	bne.n	8005840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e033      	b.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2224      	movs	r2, #36	@ 0x24
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
 800586c:	e007      	b.n	800587e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 0204 	bic.w	r2, r3, #4
 8005876:	4905      	ldr	r1, [pc, #20]	@ (800588c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4313      	orrs	r3, r2
 800587c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40030400 	.word	0x40030400

08005890 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_ICACHE_Enable+0x1c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_ICACHE_Enable+0x1c>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	40030400 	.word	0x40030400

080058b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f000 bc28 	b.w	8006114 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c4:	4b94      	ldr	r3, [pc, #592]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0318 	and.w	r3, r3, #24
 80058cc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80058ce:	4b92      	ldr	r3, [pc, #584]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05b      	beq.n	800599c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d005      	beq.n	80058f6 <HAL_RCC_OscConfig+0x46>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b18      	cmp	r3, #24
 80058ee:	d114      	bne.n	800591a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d111      	bne.n	800591a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f000 bc08 	b.w	8006114 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005904:	4b84      	ldr	r3, [pc, #528]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	4981      	ldr	r1, [pc, #516]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005914:	4313      	orrs	r3, r2
 8005916:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005918:	e040      	b.n	800599c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d023      	beq.n	800596a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005922:	4b7d      	ldr	r3, [pc, #500]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7c      	ldr	r2, [pc, #496]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800592c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592e:	f7fd fab3 	bl	8002e98 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005936:	f7fd faaf 	bl	8002e98 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e3e5      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005948:	4b73      	ldr	r3, [pc, #460]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005954:	4b70      	ldr	r3, [pc, #448]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	496d      	ldr	r1, [pc, #436]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005964:	4313      	orrs	r3, r2
 8005966:	618b      	str	r3, [r1, #24]
 8005968:	e018      	b.n	800599c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800596a:	4b6b      	ldr	r3, [pc, #428]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6a      	ldr	r2, [pc, #424]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fd fa8f 	bl	8002e98 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800597e:	f7fd fa8b 	bl	8002e98 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e3c1      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005990:	4b61      	ldr	r3, [pc, #388]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f0      	bne.n	800597e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a0 	beq.w	8005aea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_OscConfig+0x10c>
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b18      	cmp	r3, #24
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 8092 	bne.w	8005aea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e3a4      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d2:	d106      	bne.n	80059e2 <HAL_RCC_OscConfig+0x132>
 80059d4:	4b50      	ldr	r3, [pc, #320]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4f      	ldr	r2, [pc, #316]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e058      	b.n	8005a94 <HAL_RCC_OscConfig+0x1e4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d112      	bne.n	8005a10 <HAL_RCC_OscConfig+0x160>
 80059ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4b48      	ldr	r3, [pc, #288]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a47      	ldr	r2, [pc, #284]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 80059fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a44      	ldr	r2, [pc, #272]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e041      	b.n	8005a94 <HAL_RCC_OscConfig+0x1e4>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a18:	d112      	bne.n	8005a40 <HAL_RCC_OscConfig+0x190>
 8005a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b3c      	ldr	r3, [pc, #240]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a38      	ldr	r2, [pc, #224]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e029      	b.n	8005a94 <HAL_RCC_OscConfig+0x1e4>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005a48:	d112      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1c0>
 8005a4a:	4b33      	ldr	r3, [pc, #204]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4b30      	ldr	r3, [pc, #192]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e011      	b.n	8005a94 <HAL_RCC_OscConfig+0x1e4>
 8005a70:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a28      	ldr	r2, [pc, #160]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a25      	ldr	r2, [pc, #148]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b23      	ldr	r3, [pc, #140]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005a8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fd f9fc 	bl	8002e98 <HAL_GetTick>
 8005aa0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005aa4:	f7fd f9f8 	bl	8002e98 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	@ 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e32e      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab6:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x1f4>
 8005ac2:	e012      	b.n	8005aea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd f9e8 	bl	8002e98 <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005acc:	f7fd f9e4 	bl	8002e98 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	@ 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e31a      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ade:	4b0e      	ldr	r3, [pc, #56]	@ (8005b18 <HAL_RCC_OscConfig+0x268>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 809a 	beq.w	8005c2c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_RCC_OscConfig+0x25a>
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b18      	cmp	r3, #24
 8005b02:	d149      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d146      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e2fe      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
 8005b16:	bf00      	nop
 8005b18:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d11c      	bne.n	8005b5c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005b22:	4b9a      	ldr	r3, [pc, #616]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0218 	and.w	r2, r3, #24
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d014      	beq.n	8005b5c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005b32:	4b96      	ldr	r3, [pc, #600]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 0218 	bic.w	r2, r3, #24
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	4993      	ldr	r1, [pc, #588]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005b44:	f000 fdd0 	bl	80066e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b48:	4b91      	ldr	r3, [pc, #580]	@ (8005d90 <HAL_RCC_OscConfig+0x4e0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd f919 	bl	8002d84 <HAL_InitTick>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e2db      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fd f99c 	bl	8002e98 <HAL_GetTick>
 8005b60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005b64:	f7fd f998 	bl	8002e98 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e2ce      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b76:	4b85      	ldr	r3, [pc, #532]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005b82:	4b82      	ldr	r3, [pc, #520]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	497e      	ldr	r1, [pc, #504]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005b96:	e049      	b.n	8005c2c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d02c      	beq.n	8005bfa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 0218 	bic.w	r2, r3, #24
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	4977      	ldr	r1, [pc, #476]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005bb2:	4b76      	ldr	r3, [pc, #472]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a75      	ldr	r2, [pc, #468]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd f96b 	bl	8002e98 <HAL_GetTick>
 8005bc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005bc6:	f7fd f967 	bl	8002e98 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e29d      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005be4:	4b69      	ldr	r3, [pc, #420]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	4966      	ldr	r1, [pc, #408]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	610b      	str	r3, [r1, #16]
 8005bf8:	e018      	b.n	8005c2c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfa:	4b64      	ldr	r3, [pc, #400]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a63      	ldr	r2, [pc, #396]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fd f947 	bl	8002e98 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005c0e:	f7fd f943 	bl	8002e98 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e279      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c20:	4b5a      	ldr	r3, [pc, #360]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d03c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c40:	4b52      	ldr	r3, [pc, #328]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c46:	4a51      	ldr	r2, [pc, #324]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c50:	f7fd f922 	bl	8002e98 <HAL_GetTick>
 8005c54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005c58:	f7fd f91e 	bl	8002e98 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e254      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005c6a:	4b48      	ldr	r3, [pc, #288]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ef      	beq.n	8005c58 <HAL_RCC_OscConfig+0x3a8>
 8005c78:	e01b      	b.n	8005cb2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c7a:	4b44      	ldr	r3, [pc, #272]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c80:	4a42      	ldr	r2, [pc, #264]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8a:	f7fd f905 	bl	8002e98 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005c92:	f7fd f901 	bl	8002e98 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e237      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ca4:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ef      	bne.n	8005c92 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80d2 	beq.w	8005e64 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005cc0:	4b34      	ldr	r3, [pc, #208]	@ (8005d94 <HAL_RCC_OscConfig+0x4e4>)
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d118      	bne.n	8005cfe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005ccc:	4b31      	ldr	r3, [pc, #196]	@ (8005d94 <HAL_RCC_OscConfig+0x4e4>)
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	4a30      	ldr	r2, [pc, #192]	@ (8005d94 <HAL_RCC_OscConfig+0x4e4>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd8:	f7fd f8de 	bl	8002e98 <HAL_GetTick>
 8005cdc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce0:	f7fd f8da 	bl	8002e98 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e210      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005cf2:	4b28      	ldr	r3, [pc, #160]	@ (8005d94 <HAL_RCC_OscConfig+0x4e4>)
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d108      	bne.n	8005d18 <HAL_RCC_OscConfig+0x468>
 8005d06:	4b21      	ldr	r3, [pc, #132]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d16:	e074      	b.n	8005e02 <HAL_RCC_OscConfig+0x552>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d118      	bne.n	8005d52 <HAL_RCC_OscConfig+0x4a2>
 8005d20:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d26:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d30:	4b16      	ldr	r3, [pc, #88]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d36:	4a15      	ldr	r2, [pc, #84]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d40:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d46:	4a11      	ldr	r2, [pc, #68]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d50:	e057      	b.n	8005e02 <HAL_RCC_OscConfig+0x552>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d11e      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4e8>
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d60:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d62:	f043 0304 	orr.w	r3, r3, #4
 8005d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d6a:	4b08      	ldr	r3, [pc, #32]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d70:	4a06      	ldr	r2, [pc, #24]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d7a:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d80:	4a02      	ldr	r2, [pc, #8]	@ (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005d8a:	e03a      	b.n	8005e02 <HAL_RCC_OscConfig+0x552>
 8005d8c:	44020c00 	.word	0x44020c00
 8005d90:	20000088 	.word	0x20000088
 8005d94:	44020800 	.word	0x44020800
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b85      	cmp	r3, #133	@ 0x85
 8005d9e:	d118      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x522>
 8005da0:	4ba2      	ldr	r3, [pc, #648]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005da6:	4aa1      	ldr	r2, [pc, #644]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005db0:	4b9e      	ldr	r3, [pc, #632]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005db6:	4a9d      	ldr	r2, [pc, #628]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc6:	4a99      	ldr	r2, [pc, #612]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005dd0:	e017      	b.n	8005e02 <HAL_RCC_OscConfig+0x552>
 8005dd2:	4b96      	ldr	r3, [pc, #600]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dd8:	4a94      	ldr	r2, [pc, #592]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005de2:	4b92      	ldr	r3, [pc, #584]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de8:	4a90      	ldr	r2, [pc, #576]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005df2:	4b8e      	ldr	r3, [pc, #568]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005df8:	4a8c      	ldr	r2, [pc, #560]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fd f845 	bl	8002e98 <HAL_GetTick>
 8005e0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fd f841 	bl	8002e98 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e175      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e28:	4b80      	ldr	r3, [pc, #512]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ed      	beq.n	8005e12 <HAL_RCC_OscConfig+0x562>
 8005e36:	e015      	b.n	8005e64 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fd f82e 	bl	8002e98 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fd f82a 	bl	8002e98 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e15e      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e56:	4b75      	ldr	r3, [pc, #468]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ed      	bne.n	8005e40 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d036      	beq.n	8005ede <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d019      	beq.n	8005eac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e78:	4b6c      	ldr	r3, [pc, #432]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6b      	ldr	r2, [pc, #428]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005e7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fd f808 	bl	8002e98 <HAL_GetTick>
 8005e88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005e8c:	f7fd f804 	bl	8002e98 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e13a      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e9e:	4b63      	ldr	r3, [pc, #396]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x5dc>
 8005eaa:	e018      	b.n	8005ede <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eac:	4b5f      	ldr	r3, [pc, #380]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005eb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fc ffee 	bl	8002e98 <HAL_GetTick>
 8005ebc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005ec0:	f7fc ffea 	bl	8002e98 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e120      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ed2:	4b56      	ldr	r3, [pc, #344]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8115 	beq.w	8006112 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	f000 80af 	beq.w	800604e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f040 8086 	bne.w	8006006 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005efa:	4b4c      	ldr	r3, [pc, #304]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4b      	ldr	r2, [pc, #300]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc ffc7 	bl	8002e98 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc ffc3 	bl	8002e98 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0f9      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005f20:	4b42      	ldr	r3, [pc, #264]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f40:	0212      	lsls	r2, r2, #8
 8005f42:	430a      	orrs	r2, r1
 8005f44:	4939      	ldr	r1, [pc, #228]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	025b      	lsls	r3, r3, #9
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f64:	3b01      	subs	r3, #1
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	3b01      	subs	r3, #1
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f7a:	492c      	ldr	r1, [pc, #176]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005f80:	4b2a      	ldr	r3, [pc, #168]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	4a29      	ldr	r2, [pc, #164]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f90:	4a26      	ldr	r2, [pc, #152]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005f96:	4b25      	ldr	r3, [pc, #148]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9a:	4a24      	ldr	r2, [pc, #144]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005f9c:	f043 0310 	orr.w	r3, r3, #16
 8005fa0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005fa2:	4b22      	ldr	r3, [pc, #136]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	f023 020c 	bic.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fae:	491f      	ldr	r1, [pc, #124]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	f023 0220 	bic.w	r2, r3, #32
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc0:	491a      	ldr	r1, [pc, #104]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fc6:	4b19      	ldr	r3, [pc, #100]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	4a18      	ldr	r2, [pc, #96]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005fd2:	4b16      	ldr	r3, [pc, #88]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fc ff5b 	bl	8002e98 <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005fe6:	f7fc ff57 	bl	8002e98 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e08d      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x736>
 8006004:	e085      	b.n	8006112 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006006:	4b09      	ldr	r3, [pc, #36]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a08      	ldr	r2, [pc, #32]	@ (800602c <HAL_RCC_OscConfig+0x77c>)
 800600c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fc ff41 	bl	8002e98 <HAL_GetTick>
 8006016:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800601a:	f7fc ff3d 	bl	8002e98 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d903      	bls.n	8006030 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e073      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
 800602c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006030:	4b3a      	ldr	r3, [pc, #232]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ee      	bne.n	800601a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800603c:	4b37      	ldr	r3, [pc, #220]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	4a36      	ldr	r2, [pc, #216]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006042:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	6293      	str	r3, [r2, #40]	@ 0x28
 800604c:	e061      	b.n	8006112 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800604e:	4b33      	ldr	r3, [pc, #204]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006052:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006054:	4b31      	ldr	r3, [pc, #196]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006058:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	2b01      	cmp	r3, #1
 8006060:	d031      	beq.n	80060c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f003 0203 	and.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d12a      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800607c:	429a      	cmp	r2, r3
 800607e:	d122      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800608c:	429a      	cmp	r2, r3
 800608e:	d11a      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	0a5b      	lsrs	r3, r3, #9
 8006094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800609e:	429a      	cmp	r2, r3
 80060a0:	d111      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d108      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0e1b      	lsrs	r3, r3, #24
 80060b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d001      	beq.n	80060ca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e024      	b.n	8006114 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80060ca:	4b14      	ldr	r3, [pc, #80]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80060d8:	429a      	cmp	r2, r3
 80060da:	d01a      	beq.n	8006112 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80060dc:	4b0f      	ldr	r3, [pc, #60]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e0:	4a0e      	ldr	r2, [pc, #56]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fc fed6 	bl	8002e98 <HAL_GetTick>
 80060ec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80060ee:	bf00      	nop
 80060f0:	f7fc fed2 	bl	8002e98 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d0f9      	beq.n	80060f0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006100:	4a06      	ldr	r2, [pc, #24]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006106:	4b05      	ldr	r3, [pc, #20]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	4a04      	ldr	r2, [pc, #16]	@ (800611c <HAL_RCC_OscConfig+0x86c>)
 800610c:	f043 0310 	orr.w	r3, r3, #16
 8006110:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	44020c00 	.word	0x44020c00

08006120 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e19e      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006134:	4b83      	ldr	r3, [pc, #524]	@ (8006344 <HAL_RCC_ClockConfig+0x224>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d910      	bls.n	8006164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006142:	4b80      	ldr	r3, [pc, #512]	@ (8006344 <HAL_RCC_ClockConfig+0x224>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f023 020f 	bic.w	r2, r3, #15
 800614a:	497e      	ldr	r1, [pc, #504]	@ (8006344 <HAL_RCC_ClockConfig+0x224>)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006152:	4b7c      	ldr	r3, [pc, #496]	@ (8006344 <HAL_RCC_ClockConfig+0x224>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e186      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d012      	beq.n	8006196 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	4b74      	ldr	r3, [pc, #464]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800617e:	429a      	cmp	r2, r3
 8006180:	d909      	bls.n	8006196 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006182:	4b71      	ldr	r3, [pc, #452]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	496d      	ldr	r1, [pc, #436]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006192:	4313      	orrs	r3, r2
 8006194:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	4b68      	ldr	r3, [pc, #416]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d909      	bls.n	80061c8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80061b4:	4b64      	ldr	r3, [pc, #400]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	4961      	ldr	r1, [pc, #388]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d010      	beq.n	80061f6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d908      	bls.n	80061f6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80061e4:	4b58      	ldr	r3, [pc, #352]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4955      	ldr	r1, [pc, #340]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b50      	ldr	r3, [pc, #320]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	429a      	cmp	r2, r3
 8006210:	d908      	bls.n	8006224 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006212:	4b4d      	ldr	r3, [pc, #308]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 020f 	bic.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	494a      	ldr	r1, [pc, #296]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006220:	4313      	orrs	r3, r2
 8006222:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8093 	beq.w	8006358 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d107      	bne.n	800624a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800623a:	4b43      	ldr	r3, [pc, #268]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d121      	bne.n	800628a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e113      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d107      	bne.n	8006262 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006252:	4b3d      	ldr	r3, [pc, #244]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d115      	bne.n	800628a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e107      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d107      	bne.n	800627a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800626a:	4b37      	ldr	r3, [pc, #220]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e0fb      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627a:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e0f3      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800628a:	4b2f      	ldr	r3, [pc, #188]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f023 0203 	bic.w	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	492c      	ldr	r1, [pc, #176]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006298:	4313      	orrs	r3, r2
 800629a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fc fdfc 	bl	8002e98 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d112      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062aa:	e00a      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80062ac:	f7fc fdf4 	bl	8002e98 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0d7      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c2:	4b21      	ldr	r3, [pc, #132]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f003 0318 	and.w	r3, r3, #24
 80062ca:	2b18      	cmp	r3, #24
 80062cc:	d1ee      	bne.n	80062ac <HAL_RCC_ClockConfig+0x18c>
 80062ce:	e043      	b.n	8006358 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d112      	bne.n	80062fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80062da:	f7fc fddd 	bl	8002e98 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0c0      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062f0:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f003 0318 	and.w	r3, r3, #24
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d1ee      	bne.n	80062da <HAL_RCC_ClockConfig+0x1ba>
 80062fc:	e02c      	b.n	8006358 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d122      	bne.n	800634c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006306:	e00a      	b.n	800631e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006308:	f7fc fdc6 	bl	8002e98 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0a9      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800631e:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <HAL_RCC_ClockConfig+0x228>)
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f003 0318 	and.w	r3, r3, #24
 8006326:	2b08      	cmp	r3, #8
 8006328:	d1ee      	bne.n	8006308 <HAL_RCC_ClockConfig+0x1e8>
 800632a:	e015      	b.n	8006358 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fc fdb4 	bl	8002e98 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d906      	bls.n	800634c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e097      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
 8006342:	bf00      	nop
 8006344:	40022000 	.word	0x40022000
 8006348:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800634c:	4b4b      	ldr	r3, [pc, #300]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f003 0318 	and.w	r3, r3, #24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e9      	bne.n	800632c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	4b44      	ldr	r3, [pc, #272]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	429a      	cmp	r2, r3
 8006372:	d208      	bcs.n	8006386 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006374:	4b41      	ldr	r3, [pc, #260]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f023 020f 	bic.w	r2, r3, #15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	493e      	ldr	r1, [pc, #248]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006386:	4b3e      	ldr	r3, [pc, #248]	@ (8006480 <HAL_RCC_ClockConfig+0x360>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d210      	bcs.n	80063b6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006394:	4b3a      	ldr	r3, [pc, #232]	@ (8006480 <HAL_RCC_ClockConfig+0x360>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 020f 	bic.w	r2, r3, #15
 800639c:	4938      	ldr	r1, [pc, #224]	@ (8006480 <HAL_RCC_ClockConfig+0x360>)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a4:	4b36      	ldr	r3, [pc, #216]	@ (8006480 <HAL_RCC_ClockConfig+0x360>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e05d      	b.n	8006472 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d010      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	4b2d      	ldr	r3, [pc, #180]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d208      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80063d2:	4b2a      	ldr	r3, [pc, #168]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	4927      	ldr	r1, [pc, #156]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	4b21      	ldr	r3, [pc, #132]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063fe:	429a      	cmp	r2, r3
 8006400:	d209      	bcs.n	8006416 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006402:	4b1e      	ldr	r3, [pc, #120]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	491a      	ldr	r1, [pc, #104]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	d012      	beq.n	8006448 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	4b15      	ldr	r3, [pc, #84]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006430:	429a      	cmp	r2, r3
 8006432:	d209      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006434:	4b11      	ldr	r3, [pc, #68]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	490e      	ldr	r1, [pc, #56]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006444:	4313      	orrs	r3, r2
 8006446:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006448:	f000 f822 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <HAL_RCC_ClockConfig+0x35c>)
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490b      	ldr	r1, [pc, #44]	@ (8006484 <HAL_RCC_ClockConfig+0x364>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	4a0a      	ldr	r2, [pc, #40]	@ (8006488 <HAL_RCC_ClockConfig+0x368>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006462:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <HAL_RCC_ClockConfig+0x36c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fc fc8c 	bl	8002d84 <HAL_InitTick>
 800646c:	4603      	mov	r3, r0
 800646e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006470:	7afb      	ldrb	r3, [r7, #11]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	44020c00 	.word	0x44020c00
 8006480:	40022000 	.word	0x40022000
 8006484:	0800e0d8 	.word	0x0800e0d8
 8006488:	20000084 	.word	0x20000084
 800648c:	20000088 	.word	0x20000088

08006490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	@ 0x24
 8006494:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006496:	4b8c      	ldr	r3, [pc, #560]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0318 	and.w	r3, r3, #24
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d102      	bne.n	80064a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80064a2:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x23c>)
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e107      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064a8:	4b87      	ldr	r3, [pc, #540]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f003 0318 	and.w	r3, r3, #24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d112      	bne.n	80064da <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80064b4:	4b84      	ldr	r3, [pc, #528]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064c0:	4b81      	ldr	r3, [pc, #516]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	4a81      	ldr	r2, [pc, #516]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e0f1      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80064d4:	4b7e      	ldr	r3, [pc, #504]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	e0ee      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064da:	4b7b      	ldr	r3, [pc, #492]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 0318 	and.w	r3, r3, #24
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d102      	bne.n	80064ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064e6:	4b7b      	ldr	r3, [pc, #492]	@ (80066d4 <HAL_RCC_GetSysClockFreq+0x244>)
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e0e5      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064ec:	4b76      	ldr	r3, [pc, #472]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f003 0318 	and.w	r3, r3, #24
 80064f4:	2b18      	cmp	r3, #24
 80064f6:	f040 80dd 	bne.w	80066b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80064fa:	4b73      	ldr	r3, [pc, #460]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006504:	4b70      	ldr	r3, [pc, #448]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800650e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006510:	4b6d      	ldr	r3, [pc, #436]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800651c:	4b6a      	ldr	r3, [pc, #424]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800651e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	ee07 3a90 	vmov	s15, r3
 8006530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006534:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80b7 	beq.w	80066ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d003      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0xbe>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d056      	beq.n	80065fa <HAL_RCC_GetSysClockFreq+0x16a>
 800654c:	e077      	b.n	800663e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800654e:	4b5e      	ldr	r3, [pc, #376]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d02d      	beq.n	80065b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800655a:	4b5b      	ldr	r3, [pc, #364]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	4a5a      	ldr	r2, [pc, #360]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006584:	4b50      	ldr	r3, [pc, #320]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006594:	ed97 6a02 	vldr	s12, [r7, #8]
 8006598:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80066d8 <HAL_RCC_GetSysClockFreq+0x248>
 800659c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80065a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80065b4:	e065      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80066dc <HAL_RCC_GetSysClockFreq+0x24c>
 80065c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c8:	4b3f      	ldr	r3, [pc, #252]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80065ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80065dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80066d8 <HAL_RCC_GetSysClockFreq+0x248>
 80065e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80065f8:	e043      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006604:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80066e0 <HAL_RCC_GetSysClockFreq+0x250>
 8006608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660c:	4b2e      	ldr	r3, [pc, #184]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800660e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800661c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006620:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80066d8 <HAL_RCC_GetSysClockFreq+0x248>
 8006624:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006628:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800662c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006630:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006638:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800663c:	e021      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006648:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80066e4 <HAL_RCC_GetSysClockFreq+0x254>
 800664c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006650:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006660:	ed97 6a02 	vldr	s12, [r7, #8]
 8006664:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80066d8 <HAL_RCC_GetSysClockFreq+0x248>
 8006668:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800666c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006674:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006680:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006682:	4b11      	ldr	r3, [pc, #68]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006686:	0a5b      	lsrs	r3, r3, #9
 8006688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800668c:	3301      	adds	r3, #1
 800668e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800669a:	edd7 6a06 	vldr	s13, [r7, #24]
 800669e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a6:	ee17 3a90 	vmov	r3, s15
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	e004      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	e001      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80066b4:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80066b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80066b8:	69fb      	ldr	r3, [r7, #28]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3724      	adds	r7, #36	@ 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	44020c00 	.word	0x44020c00
 80066cc:	003d0900 	.word	0x003d0900
 80066d0:	03d09000 	.word	0x03d09000
 80066d4:	007a1200 	.word	0x007a1200
 80066d8:	46000000 	.word	0x46000000
 80066dc:	4c742400 	.word	0x4c742400
 80066e0:	4af42400 	.word	0x4af42400
 80066e4:	4a742400 	.word	0x4a742400

080066e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80066ec:	f7ff fed0 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <HAL_RCC_GetHCLKFreq+0x2c>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80066f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80066fa:	4907      	ldr	r1, [pc, #28]	@ (8006718 <HAL_RCC_GetHCLKFreq+0x30>)
 80066fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80066fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	4a05      	ldr	r2, [pc, #20]	@ (800671c <HAL_RCC_GetHCLKFreq+0x34>)
 8006708:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800670a:	4b04      	ldr	r3, [pc, #16]	@ (800671c <HAL_RCC_GetHCLKFreq+0x34>)
 800670c:	681b      	ldr	r3, [r3, #0]
}
 800670e:	4618      	mov	r0, r3
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	44020c00 	.word	0x44020c00
 8006718:	0800e0d8 	.word	0x0800e0d8
 800671c:	20000084 	.word	0x20000084

08006720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006724:	f7ff ffe0 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4904      	ldr	r1, [pc, #16]	@ (8006748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	44020c00 	.word	0x44020c00
 8006748:	0800e0e8 	.word	0x0800e0e8

0800674c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006750:	f7ff ffca 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006754:	4602      	mov	r2, r0
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4904      	ldr	r1, [pc, #16]	@ (8006774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006762:	5ccb      	ldrb	r3, [r1, r3]
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	44020c00 	.word	0x44020c00
 8006774:	0800e0e8 	.word	0x0800e0e8

08006778 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800677c:	f7ff ffb4 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8006780:	4602      	mov	r2, r0
 8006782:	4b06      	ldr	r3, [pc, #24]	@ (800679c <HAL_RCC_GetPCLK3Freq+0x24>)
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	0b1b      	lsrs	r3, r3, #12
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	4904      	ldr	r1, [pc, #16]	@ (80067a0 <HAL_RCC_GetPCLK3Freq+0x28>)
 800678e:	5ccb      	ldrb	r3, [r1, r3]
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006798:	4618      	mov	r0, r3
 800679a:	bd80      	pop	{r7, pc}
 800679c:	44020c00 	.word	0x44020c00
 80067a0:	0800e0e8 	.word	0x0800e0e8

080067a4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b0ba      	sub	sp, #232	@ 0xe8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067b0:	2300      	movs	r3, #0
 80067b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80067c8:	2500      	movs	r5, #0
 80067ca:	ea54 0305 	orrs.w	r3, r4, r5
 80067ce:	d00b      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80067d0:	4bcd      	ldr	r3, [pc, #820]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80067d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067d6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80067da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e0:	4ac9      	ldr	r2, [pc, #804]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f002 0801 	and.w	r8, r2, #1
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	ea58 0309 	orrs.w	r3, r8, r9
 80067fc:	d042      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80067fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006804:	2b05      	cmp	r3, #5
 8006806:	d823      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006859 	.word	0x08006859
 8006814:	08006829 	.word	0x08006829
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006859 	.word	0x08006859
 8006820:	08006859 	.word	0x08006859
 8006824:	08006859 	.word	0x08006859
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800682c:	3308      	adds	r3, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f003 f90c 	bl	8009a4c <RCCEx_PLL2_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800683a:	e00e      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800683c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006840:	3330      	adds	r3, #48	@ 0x30
 8006842:	4618      	mov	r0, r3
 8006844:	f003 f99a 	bl	8009b7c <RCCEx_PLL3_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10c      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006862:	4ba9      	ldr	r3, [pc, #676]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006868:	f023 0107 	bic.w	r1, r3, #7
 800686c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006872:	4aa5      	ldr	r2, [pc, #660]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006874:	430b      	orrs	r3, r1
 8006876:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006880:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f002 0a02 	and.w	sl, r2, #2
 8006890:	f04f 0b00 	mov.w	fp, #0
 8006894:	ea5a 030b 	orrs.w	r3, sl, fp
 8006898:	f000 8088 	beq.w	80069ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800689c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a2:	2b28      	cmp	r3, #40	@ 0x28
 80068a4:	d868      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80068a6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	08006981 	.word	0x08006981
 80068b0:	08006979 	.word	0x08006979
 80068b4:	08006979 	.word	0x08006979
 80068b8:	08006979 	.word	0x08006979
 80068bc:	08006979 	.word	0x08006979
 80068c0:	08006979 	.word	0x08006979
 80068c4:	08006979 	.word	0x08006979
 80068c8:	08006979 	.word	0x08006979
 80068cc:	08006951 	.word	0x08006951
 80068d0:	08006979 	.word	0x08006979
 80068d4:	08006979 	.word	0x08006979
 80068d8:	08006979 	.word	0x08006979
 80068dc:	08006979 	.word	0x08006979
 80068e0:	08006979 	.word	0x08006979
 80068e4:	08006979 	.word	0x08006979
 80068e8:	08006979 	.word	0x08006979
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006979 	.word	0x08006979
 80068f4:	08006979 	.word	0x08006979
 80068f8:	08006979 	.word	0x08006979
 80068fc:	08006979 	.word	0x08006979
 8006900:	08006979 	.word	0x08006979
 8006904:	08006979 	.word	0x08006979
 8006908:	08006979 	.word	0x08006979
 800690c:	08006981 	.word	0x08006981
 8006910:	08006979 	.word	0x08006979
 8006914:	08006979 	.word	0x08006979
 8006918:	08006979 	.word	0x08006979
 800691c:	08006979 	.word	0x08006979
 8006920:	08006979 	.word	0x08006979
 8006924:	08006979 	.word	0x08006979
 8006928:	08006979 	.word	0x08006979
 800692c:	08006981 	.word	0x08006981
 8006930:	08006979 	.word	0x08006979
 8006934:	08006979 	.word	0x08006979
 8006938:	08006979 	.word	0x08006979
 800693c:	08006979 	.word	0x08006979
 8006940:	08006979 	.word	0x08006979
 8006944:	08006979 	.word	0x08006979
 8006948:	08006979 	.word	0x08006979
 800694c:	08006981 	.word	0x08006981
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006954:	3308      	adds	r3, #8
 8006956:	4618      	mov	r0, r3
 8006958:	f003 f878 	bl	8009a4c <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006962:	e00e      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006968:	3330      	adds	r3, #48	@ 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f003 f906 	bl	8009b7c <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006976:	e004      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800697e:	e000      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006982:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800698a:	4b5f      	ldr	r3, [pc, #380]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800698c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006990:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800699a:	4a5b      	ldr	r2, [pc, #364]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800699c:	430b      	orrs	r3, r1
 800699e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80069a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f002 0304 	and.w	r3, r2, #4
 80069b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80069c6:	460b      	mov	r3, r1
 80069c8:	4313      	orrs	r3, r2
 80069ca:	d04e      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80069cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80069d6:	d02c      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80069d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80069dc:	d825      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80069de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e2:	d028      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e8:	d81f      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80069ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80069ec:	d025      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80069ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80069f0:	d81b      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80069f2:	2b80      	cmp	r3, #128	@ 0x80
 80069f4:	d00f      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80069f6:	2b80      	cmp	r3, #128	@ 0x80
 80069f8:	d817      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01f      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80069fe:	2b40      	cmp	r3, #64	@ 0x40
 8006a00:	d113      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a06:	3308      	adds	r3, #8
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f003 f81f 	bl	8009a4c <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006a14:	e014      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a1a:	3330      	adds	r3, #48	@ 0x30
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f003 f8ad 	bl	8009b7c <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006a28:	e00a      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a30:	e006      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006a48:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a4e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a58:	4a2b      	ldr	r2, [pc, #172]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a60:	e003      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a66:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f002 0308 	and.w	r3, r2, #8
 8006a76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d056      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a90:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006a94:	d031      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006a96:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006a9a:	d82a      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa0:	d02d      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa6:	d824      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006aa8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006aac:	d029      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006aae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ab2:	d81e      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab8:	d011      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abe:	d818      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d023      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac8:	d113      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ace:	3308      	adds	r3, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f002 ffbb 	bl	8009a4c <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006adc:	e017      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ae2:	3330      	adds	r3, #48	@ 0x30
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f003 f849 	bl	8009b7c <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006af0:	e00d      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006af8:	e009      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006afa:	bf00      	nop
 8006afc:	e007      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006afe:	bf00      	nop
 8006b00:	e005      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006b02:	bf00      	nop
 8006b04:	e003      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006b06:	bf00      	nop
 8006b08:	44020c00 	.word	0x44020c00
        break;
 8006b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006b16:	4bb9      	ldr	r3, [pc, #740]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b1c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b26:	4ab5      	ldr	r2, [pc, #724]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f002 0310 	and.w	r3, r2, #16
 8006b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b52:	460b      	mov	r3, r1
 8006b54:	4313      	orrs	r3, r2
 8006b56:	d053      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b5e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b62:	d031      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006b64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b68:	d82a      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b6e:	d02d      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b74:	d824      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006b76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b7a:	d029      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006b7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b80:	d81e      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b86:	d011      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8c:	d818      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d020      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b96:	d113      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f002 ff54 	bl	8009a4c <RCCEx_PLL2_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006baa:	e014      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bb0:	3330      	adds	r3, #48	@ 0x30
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 ffe2 	bl	8009b7c <RCCEx_PLL3_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006bc6:	e006      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006bc8:	bf00      	nop
 8006bca:	e004      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e002      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006bde:	4b87      	ldr	r3, [pc, #540]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006be4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bee:	4a83      	ldr	r2, [pc, #524]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bfc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f002 0320 	and.w	r3, r2, #32
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c10:	2300      	movs	r3, #0
 8006c12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	d053      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c26:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c2a:	d031      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006c2c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c30:	d82a      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006c32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c36:	d02d      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3c:	d824      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006c3e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006c42:	d029      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006c44:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006c48:	d81e      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4e:	d011      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d818      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d020      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c5e:	d113      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c64:	3308      	adds	r3, #8
 8006c66:	4618      	mov	r0, r3
 8006c68:	f002 fef0 	bl	8009a4c <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006c72:	e014      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c78:	3330      	adds	r3, #48	@ 0x30
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 ff7e 	bl	8009b7c <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006c86:	e00a      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c8e:	e006      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006c90:	bf00      	nop
 8006c92:	e004      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006c94:	bf00      	nop
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006c98:	bf00      	nop
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006ca6:	4b55      	ldr	r3, [pc, #340]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cac:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb6:	4a51      	ldr	r2, [pc, #324]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cbe:	e003      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cde:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d053      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cf2:	d031      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006cf4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cf8:	d82a      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cfe:	d02d      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d04:	d824      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d0a:	d029      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006d0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d10:	d81e      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d16:	d011      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d1c:	d818      	bhi.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d020      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d26:	d113      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f002 fe8c 	bl	8009a4c <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006d3a:	e014      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d40:	3330      	adds	r3, #48	@ 0x30
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 ff1a 	bl	8009b7c <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d56:	e006      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e004      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006d5c:	bf00      	nop
 8006d5e:	e002      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10c      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006d6e:	4b23      	ldr	r3, [pc, #140]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d86:	e003      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006da6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d03d      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dba:	d01b      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006dbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dc0:	d814      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc6:	d017      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dcc:	d80e      	bhi.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d016      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd6:	d109      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ddc:	3330      	adds	r3, #48	@ 0x30
 8006dde:	4618      	mov	r0, r3
 8006de0:	f002 fecc 	bl	8009b7c <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006dea:	e00a      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006df2:	e006      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006dfc:	44020c00 	.word	0x44020c00
        break;
 8006e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006e0a:	4b99      	ldr	r3, [pc, #612]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e10:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e1a:	4a95      	ldr	r2, [pc, #596]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006e22:	e003      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d03b      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e56:	d01b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006e58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e5c:	d814      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006e5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e62:	d017      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006e64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e68:	d80e      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d014      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8006e6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e78:	3330      	adds	r3, #48	@ 0x30
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fe7e 	bl	8009b7c <RCCEx_PLL3_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006e86:	e008      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e8e:	e004      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006e90:	bf00      	nop
 8006e92:	e002      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006e94:	bf00      	nop
 8006e96:	e000      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006ea2:	4b73      	ldr	r3, [pc, #460]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ea4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ea8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ec0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d03d      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ef0:	d01b      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8006ef2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ef6:	d814      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006efc:	d017      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8006efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f02:	d80e      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d014      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8006f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f12:	3330      	adds	r3, #48	@ 0x30
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 fe31 	bl	8009b7c <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006f20:	e008      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f28:	e004      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e002      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10d      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f4e:	4a48      	ldr	r2, [pc, #288]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d035      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f8c:	d015      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f92:	d80e      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f9c:	d109      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa2:	3330      	adds	r3, #48	@ 0x30
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f002 fde9 	bl	8009b7c <RCCEx_PLL3_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006fb0:	e006      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006fb8:	e002      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10d      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006fc8:	4b29      	ldr	r3, [pc, #164]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fce:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fda:	4a25      	ldr	r2, [pc, #148]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006fe2:	e003      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fe8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8006fec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8006ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ffe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007002:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007006:	460b      	mov	r3, r1
 8007008:	4313      	orrs	r3, r2
 800700a:	d037      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800700c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007018:	d015      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800701a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800701e:	d80e      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007024:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800702a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800702e:	3330      	adds	r3, #48	@ 0x30
 8007030:	4618      	mov	r0, r3
 8007032:	f002 fda3 	bl	8009b7c <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800704a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800704c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10f      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007054:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800705a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800705e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007066:	4a02      	ldr	r2, [pc, #8]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007068:	430b      	orrs	r3, r1
 800706a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800706e:	e005      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8007070:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007078:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800707c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	2100      	movs	r1, #0
 8007086:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800708c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800708e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d00e      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007098:	4bb8      	ldr	r3, [pc, #736]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	4ab7      	ldr	r2, [pc, #732]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800709e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070a2:	61d3      	str	r3, [r2, #28]
 80070a4:	4bb5      	ldr	r3, [pc, #724]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80070a6:	69d9      	ldr	r1, [r3, #28]
 80070a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80070b0:	4ab2      	ldr	r2, [pc, #712]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80070b2:	430b      	orrs	r3, r1
 80070b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80070c4:	2300      	movs	r3, #0
 80070c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80070c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070cc:	460b      	mov	r3, r1
 80070ce:	4313      	orrs	r3, r2
 80070d0:	d055      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80070de:	d031      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80070e0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80070e4:	d82a      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ea:	d02d      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f0:	d824      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80070f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070f6:	d029      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070fc:	d81e      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80070fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007102:	d011      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	d818      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d020      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800710e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007112:	d113      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007118:	3308      	adds	r3, #8
 800711a:	4618      	mov	r0, r3
 800711c:	f002 fc96 	bl	8009a4c <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007126:	e014      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800712c:	3330      	adds	r3, #48	@ 0x30
 800712e:	4618      	mov	r0, r3
 8007130:	f002 fd24 	bl	8009b7c <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800713a:	e00a      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007142:	e006      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007144:	bf00      	nop
 8007146:	e004      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007152:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10d      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800715a:	4b88      	ldr	r3, [pc, #544]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800715c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007160:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800716c:	4a83      	ldr	r2, [pc, #524]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800716e:	430b      	orrs	r3, r1
 8007170:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800717a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800717e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800718a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800718c:	2300      	movs	r3, #0
 800718e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007190:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d055      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800719a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071a6:	d031      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80071a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071ac:	d82a      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80071ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b2:	d02d      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80071b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b8:	d824      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80071ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071be:	d029      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80071c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071c4:	d81e      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ca:	d011      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d0:	d818      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d020      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80071d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071da:	d113      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071e0:	3308      	adds	r3, #8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 fc32 	bl	8009a4c <RCCEx_PLL2_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80071ee:	e014      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f4:	3330      	adds	r3, #48	@ 0x30
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 fcc0 	bl	8009b7c <RCCEx_PLL3_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007202:	e00a      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800720a:	e006      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800720c:	bf00      	nop
 800720e:	e004      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007210:	bf00      	nop
 8007212:	e002      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10d      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007222:	4b56      	ldr	r3, [pc, #344]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007224:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007228:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800722c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007234:	4a51      	ldr	r2, [pc, #324]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007236:	430b      	orrs	r3, r1
 8007238:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800723c:	e003      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007242:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007252:	663b      	str	r3, [r7, #96]	@ 0x60
 8007254:	2300      	movs	r3, #0
 8007256:	667b      	str	r3, [r7, #100]	@ 0x64
 8007258:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800725c:	460b      	mov	r3, r1
 800725e:	4313      	orrs	r3, r2
 8007260:	d032      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800726a:	2b05      	cmp	r3, #5
 800726c:	d80f      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800726e:	2b03      	cmp	r3, #3
 8007270:	d211      	bcs.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d911      	bls.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8007276:	2b02      	cmp	r3, #2
 8007278:	d109      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800727a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800727e:	3308      	adds	r3, #8
 8007280:	4618      	mov	r0, r3
 8007282:	f002 fbe3 	bl	8009a4c <RCCEx_PLL2_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800728c:	e006      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800729a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80072a4:	4b35      	ldr	r3, [pc, #212]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80072a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072aa:	f023 0107 	bic.w	r1, r3, #7
 80072ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072b6:	4a31      	ldr	r2, [pc, #196]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80072c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	2100      	movs	r1, #0
 80072d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d024      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80072e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d005      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80072fa:	e002      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80072fc:	bf00      	nop
 80072fe:	e000      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007302:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800730a:	4b1c      	ldr	r3, [pc, #112]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800730c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007310:	f023 0108 	bic.w	r1, r3, #8
 8007314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800731c:	4a17      	ldr	r2, [pc, #92]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800731e:	430b      	orrs	r3, r1
 8007320:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007324:	e003      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007326:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800732a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800733a:	653b      	str	r3, [r7, #80]	@ 0x50
 800733c:	2300      	movs	r3, #0
 800733e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007340:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	f000 80b9 	beq.w	80074be <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800734c:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800734e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007350:	4a0b      	ldr	r2, [pc, #44]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007358:	f7fb fd9e 	bl	8002e98 <HAL_GetTick>
 800735c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007360:	e010      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fb fd99 	bl	8002e98 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d908      	bls.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007378:	e00a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800737a:	bf00      	nop
 800737c:	44020c00 	.word	0x44020c00
 8007380:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007384:	4bba      	ldr	r3, [pc, #744]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0e8      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8007390:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 808e 	bne.w	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800739a:	4bb6      	ldr	r3, [pc, #728]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800739c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80073a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d023      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80073b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073bc:	4293      	cmp	r3, r2
 80073be:	d01b      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073c0:	4bac      	ldr	r3, [pc, #688]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073ce:	4ba9      	ldr	r3, [pc, #676]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d4:	4aa7      	ldr	r2, [pc, #668]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073de:	4ba5      	ldr	r3, [pc, #660]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073e4:	4aa3      	ldr	r2, [pc, #652]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073ee:	4aa1      	ldr	r2, [pc, #644]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d019      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fb fd48 	bl	8002e98 <HAL_GetTick>
 8007408:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800740c:	e00d      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740e:	f7fb fd43 	bl	8002e98 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800741e:	429a      	cmp	r2, r3
 8007420:	d903      	bls.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800742a:	4b92      	ldr	r3, [pc, #584]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800742c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0ea      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007438:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d135      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007444:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800744c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007450:	d110      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8007452:	4b88      	ldr	r3, [pc, #544]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800745a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800745e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007468:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800746c:	4a81      	ldr	r2, [pc, #516]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800746e:	430b      	orrs	r3, r1
 8007470:	61d3      	str	r3, [r2, #28]
 8007472:	e005      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007474:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	4a7e      	ldr	r2, [pc, #504]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800747a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800747e:	61d3      	str	r3, [r2, #28]
 8007480:	4b7c      	ldr	r3, [pc, #496]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007486:	4a7b      	ldr	r2, [pc, #492]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007490:	4b78      	ldr	r3, [pc, #480]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007492:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800749a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800749e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a2:	4a74      	ldr	r2, [pc, #464]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074aa:	e008      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80074b4:	e003      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80074ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074cc:	2300      	movs	r3, #0
 80074ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d035      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80074da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074e2:	2b30      	cmp	r3, #48	@ 0x30
 80074e4:	d014      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80074e6:	2b30      	cmp	r3, #48	@ 0x30
 80074e8:	d80e      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d012      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d80a      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d106      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4b5e      	ldr	r3, [pc, #376]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	4a5d      	ldr	r2, [pc, #372]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007504:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007506:	e008      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800750e:	e004      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007510:	bf00      	nop
 8007512:	e002      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007522:	4b54      	ldr	r3, [pc, #336]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007528:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800752c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007534:	4a4f      	ldr	r2, [pc, #316]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007536:	430b      	orrs	r3, r1
 8007538:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800753c:	e003      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007542:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007552:	643b      	str	r3, [r7, #64]	@ 0x40
 8007554:	2300      	movs	r3, #0
 8007556:	647b      	str	r3, [r7, #68]	@ 0x44
 8007558:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800755c:	460b      	mov	r3, r1
 800755e:	4313      	orrs	r3, r2
 8007560:	d033      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d007      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007572:	e010      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007574:	4b3f      	ldr	r3, [pc, #252]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	4a3e      	ldr	r2, [pc, #248]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007580:	e00d      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007586:	3308      	adds	r3, #8
 8007588:	4618      	mov	r0, r3
 800758a:	f002 fa5f 	bl	8009a4c <RCCEx_PLL2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80075a6:	4b33      	ldr	r3, [pc, #204]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80075a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075ac:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80075b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80075ba:	430b      	orrs	r3, r1
 80075bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80075ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80075d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075d8:	2300      	movs	r3, #0
 80075da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80075e0:	460b      	mov	r3, r1
 80075e2:	4313      	orrs	r3, r2
 80075e4:	d04c      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80075e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d827      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80075f2:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	0800761b 	.word	0x0800761b
 8007600:	0800762f 	.word	0x0800762f
 8007604:	0800764b 	.word	0x0800764b
 8007608:	0800764b 	.word	0x0800764b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760c:	4b19      	ldr	r3, [pc, #100]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007610:	4a18      	ldr	r2, [pc, #96]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007616:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007618:	e018      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800761a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800761e:	3308      	adds	r3, #8
 8007620:	4618      	mov	r0, r3
 8007622:	f002 fa13 	bl	8009a4c <RCCEx_PLL2_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800762c:	e00e      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800762e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007632:	3330      	adds	r3, #48	@ 0x30
 8007634:	4618      	mov	r0, r3
 8007636:	f002 faa1 	bl	8009b7c <RCCEx_PLL3_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007640:	e004      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800764a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d111      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007654:	4b07      	ldr	r3, [pc, #28]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800765a:	f023 0107 	bic.w	r1, r3, #7
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007666:	4a03      	ldr	r2, [pc, #12]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007668:	430b      	orrs	r3, r1
 800766a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800766e:	e007      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007670:	44020800 	.word	0x44020800
 8007674:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800767c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
 8007692:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	f000 8081 	beq.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800769e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d85f      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	08007735 	.word	0x08007735
 80076b4:	0800776b 	.word	0x0800776b
 80076b8:	0800776b 	.word	0x0800776b
 80076bc:	0800776b 	.word	0x0800776b
 80076c0:	0800776b 	.word	0x0800776b
 80076c4:	0800776b 	.word	0x0800776b
 80076c8:	0800776b 	.word	0x0800776b
 80076cc:	0800776b 	.word	0x0800776b
 80076d0:	08007743 	.word	0x08007743
 80076d4:	0800776b 	.word	0x0800776b
 80076d8:	0800776b 	.word	0x0800776b
 80076dc:	0800776b 	.word	0x0800776b
 80076e0:	0800776b 	.word	0x0800776b
 80076e4:	0800776b 	.word	0x0800776b
 80076e8:	0800776b 	.word	0x0800776b
 80076ec:	0800776b 	.word	0x0800776b
 80076f0:	08007757 	.word	0x08007757
 80076f4:	0800776b 	.word	0x0800776b
 80076f8:	0800776b 	.word	0x0800776b
 80076fc:	0800776b 	.word	0x0800776b
 8007700:	0800776b 	.word	0x0800776b
 8007704:	0800776b 	.word	0x0800776b
 8007708:	0800776b 	.word	0x0800776b
 800770c:	0800776b 	.word	0x0800776b
 8007710:	08007773 	.word	0x08007773
 8007714:	0800776b 	.word	0x0800776b
 8007718:	0800776b 	.word	0x0800776b
 800771c:	0800776b 	.word	0x0800776b
 8007720:	0800776b 	.word	0x0800776b
 8007724:	0800776b 	.word	0x0800776b
 8007728:	0800776b 	.word	0x0800776b
 800772c:	0800776b 	.word	0x0800776b
 8007730:	08007773 	.word	0x08007773
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007734:	4bb9      	ldr	r3, [pc, #740]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	4ab8      	ldr	r2, [pc, #736]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800773a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800773e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007740:	e018      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007746:	3308      	adds	r3, #8
 8007748:	4618      	mov	r0, r3
 800774a:	f002 f97f 	bl	8009a4c <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007754:	e00e      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800775a:	3330      	adds	r3, #48	@ 0x30
 800775c:	4618      	mov	r0, r3
 800775e:	f002 fa0d 	bl	8009b7c <RCCEx_PLL3_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007768:	e004      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007774:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10d      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800777c:	4ba7      	ldr	r3, [pc, #668]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800777e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007782:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800778a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800778e:	4aa3      	ldr	r2, [pc, #652]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007790:	430b      	orrs	r3, r1
 8007792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800779c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80077a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d04e      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80077bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c8:	d02e      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ce:	d827      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80077d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80077d2:	d02b      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80077d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80077d6:	d823      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80077d8:	2b80      	cmp	r3, #128	@ 0x80
 80077da:	d017      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80077dc:	2b80      	cmp	r3, #128	@ 0x80
 80077de:	d81f      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d007      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80077e8:	e01a      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ea:	4b8c      	ldr	r3, [pc, #560]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	4a8b      	ldr	r2, [pc, #556]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80077f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80077f6:	e01a      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077fc:	3308      	adds	r3, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	f002 f924 	bl	8009a4c <RCCEx_PLL2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800780a:	e010      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800780c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007810:	3330      	adds	r3, #48	@ 0x30
 8007812:	4618      	mov	r0, r3
 8007814:	f002 f9b2 	bl	8009b7c <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800781e:	e006      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007826:	e002      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800782c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10d      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007836:	4b79      	ldr	r3, [pc, #484]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800783c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007848:	4974      	ldr	r1, [pc, #464]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007850:	e003      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007856:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800785a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007866:	623b      	str	r3, [r7, #32]
 8007868:	2300      	movs	r3, #0
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
 800786c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007870:	460b      	mov	r3, r1
 8007872:	4313      	orrs	r3, r2
 8007874:	d055      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800787a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800787e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007882:	d031      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007884:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007888:	d82a      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800788a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800788e:	d02d      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007894:	d824      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007896:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800789a:	d029      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800789c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80078a0:	d81e      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80078a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a6:	d011      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ac:	d818      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d020      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80078b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b6:	d113      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078bc:	3308      	adds	r3, #8
 80078be:	4618      	mov	r0, r3
 80078c0:	f002 f8c4 	bl	8009a4c <RCCEx_PLL2_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80078ca:	e014      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078d0:	3330      	adds	r3, #48	@ 0x30
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 f952 	bl	8009b7c <RCCEx_PLL3_Config>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80078de:	e00a      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80078e6:	e006      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80078e8:	bf00      	nop
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80078ec:	bf00      	nop
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80078fe:	4b47      	ldr	r3, [pc, #284]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007904:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800790c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007910:	4942      	ldr	r1, [pc, #264]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007918:	e003      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800791e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	2100      	movs	r1, #0
 800792c:	61b9      	str	r1, [r7, #24]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d03c      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800793e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007946:	2b03      	cmp	r3, #3
 8007948:	d81b      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	0800798b 	.word	0x0800798b
 8007954:	08007961 	.word	0x08007961
 8007958:	0800796f 	.word	0x0800796f
 800795c:	0800798b 	.word	0x0800798b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007960:	4b2e      	ldr	r3, [pc, #184]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800796a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800796c:	e00e      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800796e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007972:	3308      	adds	r3, #8
 8007974:	4618      	mov	r0, r3
 8007976:	f002 f869 	bl	8009a4c <RCCEx_PLL2_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007980:	e004      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800798a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10d      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007994:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800799a:	f023 0203 	bic.w	r2, r3, #3
 800799e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079a6:	491d      	ldr	r1, [pc, #116]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	2100      	movs	r1, #0
 80079c2:	6139      	str	r1, [r7, #16]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d03c      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80079d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e0:	d00e      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e6:	d815      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d019      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f0:	d110      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	4a09      	ldr	r2, [pc, #36]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80079f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80079fe:	e010      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a04:	3308      	adds	r3, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f002 f820 	bl	8009a4c <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8007a1c:	44020c00 	.word	0x44020c00
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10d      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a3c:	4938      	ldr	r1, [pc, #224]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a4a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	2100      	movs	r1, #0
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a64:	460b      	mov	r3, r1
 8007a66:	4313      	orrs	r3, r2
 8007a68:	d038      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007a72:	2b30      	cmp	r3, #48	@ 0x30
 8007a74:	d01b      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007a76:	2b30      	cmp	r3, #48	@ 0x30
 8007a78:	d815      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d002      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d007      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007a82:	e010      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a84:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	4a25      	ldr	r2, [pc, #148]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a90:	e00e      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a96:	3330      	adds	r3, #48	@ 0x30
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f002 f86f 	bl	8009b7c <RCCEx_PLL3_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007aa4:	e004      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10d      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007ab8:	4b19      	ldr	r3, [pc, #100]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007abe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007aca:	4915      	ldr	r1, [pc, #84]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ad2:	e003      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ad8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6039      	str	r1, [r7, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d00c      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007af8:	4b09      	ldr	r3, [pc, #36]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007afe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b0a:	4905      	ldr	r1, [pc, #20]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007b12:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	37e8      	adds	r7, #232	@ 0xe8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b20:	44020c00 	.word	0x44020c00

08007b24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b08b      	sub	sp, #44	@ 0x2c
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007b2c:	4bae      	ldr	r3, [pc, #696]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b34:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007b36:	4bac      	ldr	r3, [pc, #688]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007b40:	4ba9      	ldr	r3, [pc, #676]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b4a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007b4c:	4ba6      	ldr	r3, [pc, #664]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	091b      	lsrs	r3, r3, #4
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007b58:	4ba3      	ldr	r3, [pc, #652]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b70:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8126 	beq.w	8007dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d053      	beq.n	8007c2a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d86f      	bhi.n	8007c68 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d02b      	beq.n	8007bec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007b94:	e068      	b.n	8007c68 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b96:	4b94      	ldr	r3, [pc, #592]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	08db      	lsrs	r3, r3, #3
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	4a92      	ldr	r2, [pc, #584]	@ (8007dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a04 	vldr	s12, [r7, #16]
 8007bce:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007bea:	e068      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007df4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c08:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c0c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c28:	e049      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c34:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007df8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c4a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c66:	e02a      	b.n	8007cbe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c68:	4b5f      	ldr	r3, [pc, #380]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	4a5e      	ldr	r2, [pc, #376]	@ (8007dec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
 8007c78:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ca0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007df0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007cbc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cca:	d121      	bne.n	8007d10 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007ccc:	4b46      	ldr	r3, [pc, #280]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007cd8:	4b43      	ldr	r3, [pc, #268]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cdc:	0a5b      	lsrs	r3, r3, #9
 8007cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007cf2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cfe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e006      	b.n	8007d16 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e002      	b.n	8007d16 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d16:	4b34      	ldr	r3, [pc, #208]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d22:	d121      	bne.n	8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007d24:	4b30      	ldr	r3, [pc, #192]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d017      	beq.n	8007d60 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d30:	4b2d      	ldr	r3, [pc, #180]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007d4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d56:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	e006      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	e002      	b.n	8007d6e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d7a:	d121      	bne.n	8007dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d017      	beq.n	8007db8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d88:	4b17      	ldr	r3, [pc, #92]	@ (8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8c:	0e1b      	lsrs	r3, r3, #24
 8007d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007da2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dae:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007db6:	e010      	b.n	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	609a      	str	r2, [r3, #8]
}
 8007dbe:	e00c      	b.n	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	609a      	str	r2, [r3, #8]
}
 8007dc6:	e008      	b.n	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
}
 8007dda:	bf00      	nop
 8007ddc:	372c      	adds	r7, #44	@ 0x2c
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	44020c00 	.word	0x44020c00
 8007dec:	03d09000 	.word	0x03d09000
 8007df0:	46000000 	.word	0x46000000
 8007df4:	4a742400 	.word	0x4a742400
 8007df8:	4af42400 	.word	0x4af42400

08007dfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b08b      	sub	sp, #44	@ 0x2c
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007e04:	4bae      	ldr	r3, [pc, #696]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007e0e:	4bac      	ldr	r3, [pc, #688]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007e18:	4ba9      	ldr	r3, [pc, #676]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	0a1b      	lsrs	r3, r3, #8
 8007e1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e22:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007e24:	4ba6      	ldr	r3, [pc, #664]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007e30:	4ba3      	ldr	r3, [pc, #652]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	fb02 f303 	mul.w	r3, r2, r3
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e48:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 8126 	beq.w	80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d053      	beq.n	8007f02 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d86f      	bhi.n	8007f40 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d003      	beq.n	8007e6e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d02b      	beq.n	8007ec4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007e6c:	e068      	b.n	8007f40 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e6e:	4b94      	ldr	r3, [pc, #592]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	08db      	lsrs	r3, r3, #3
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	4a92      	ldr	r2, [pc, #584]	@ (80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ea6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ebe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007ec2:	e068      	b.n	8007f96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ee4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f00:	e049      	b.n	8007f96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	ee07 3a90 	vmov	s15, r3
 8007f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f22:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f3e:	e02a      	b.n	8007f96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f40:	4b5f      	ldr	r3, [pc, #380]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	08db      	lsrs	r3, r3, #3
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f50:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f74:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f78:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007f94:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f96:	4b4a      	ldr	r3, [pc, #296]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa2:	d121      	bne.n	8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007fa4:	4b46      	ldr	r3, [pc, #280]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d017      	beq.n	8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007fb0:	4b43      	ldr	r3, [pc, #268]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb4:	0a5b      	lsrs	r3, r3, #9
 8007fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007fca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e006      	b.n	8007fee <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fee:	4b34      	ldr	r3, [pc, #208]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ffa:	d121      	bne.n	8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007ffc:	4b30      	ldr	r3, [pc, #192]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008008:	4b2d      	ldr	r3, [pc, #180]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800801a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800801e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008022:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	e006      	b.n	8008046 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	e002      	b.n	8008046 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008046:	4b1e      	ldr	r3, [pc, #120]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800804e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008052:	d121      	bne.n	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008054:	4b1a      	ldr	r3, [pc, #104]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d017      	beq.n	8008090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008060:	4b17      	ldr	r3, [pc, #92]	@ (80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008064:	0e1b      	lsrs	r3, r3, #24
 8008066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008076:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800807a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800807e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008086:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800808e:	e010      	b.n	80080b2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	609a      	str	r2, [r3, #8]
}
 8008096:	e00c      	b.n	80080b2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
}
 800809e:	e008      	b.n	80080b2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
}
 80080b2:	bf00      	nop
 80080b4:	372c      	adds	r7, #44	@ 0x2c
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	44020c00 	.word	0x44020c00
 80080c4:	03d09000 	.word	0x03d09000
 80080c8:	46000000 	.word	0x46000000
 80080cc:	4a742400 	.word	0x4a742400
 80080d0:	4af42400 	.word	0x4af42400

080080d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b08b      	sub	sp, #44	@ 0x2c
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80080dc:	4bae      	ldr	r3, [pc, #696]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80080de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80080e6:	4bac      	ldr	r3, [pc, #688]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80080e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80080f0:	4ba9      	ldr	r3, [pc, #676]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080fa:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80080fc:	4ba6      	ldr	r3, [pc, #664]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	091b      	lsrs	r3, r3, #4
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008108:	4ba3      	ldr	r3, [pc, #652]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800810a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	fb02 f303 	mul.w	r3, r2, r3
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008120:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 8126 	beq.w	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d053      	beq.n	80081da <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d86f      	bhi.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d003      	beq.n	8008146 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d02b      	beq.n	800819c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008144:	e068      	b.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008146:	4b94      	ldr	r3, [pc, #592]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	4a92      	ldr	r2, [pc, #584]	@ (800839c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	ee07 3a90 	vmov	s15, r3
 8008168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817a:	ed97 6a04 	vldr	s12, [r7, #16]
 800817e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800819a:	e068      	b.n	800826e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80081aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80081bc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80081c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80081d8:	e049      	b.n	800826e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80081e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80081fa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008216:	e02a      	b.n	800826e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008218:	4b5f      	ldr	r3, [pc, #380]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	08db      	lsrs	r3, r3, #3
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	4a5e      	ldr	r2, [pc, #376]	@ (800839c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008224:	fa22 f303 	lsr.w	r3, r2, r3
 8008228:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	ee07 3a90 	vmov	s15, r3
 8008230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008250:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008268:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800826c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800826e:	4b4a      	ldr	r3, [pc, #296]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827a:	d121      	bne.n	80082c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800827c:	4b46      	ldr	r3, [pc, #280]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d017      	beq.n	80082b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008288:	4b43      	ldr	r3, [pc, #268]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800828a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828c:	0a5b      	lsrs	r3, r3, #9
 800828e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800829a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800829e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80082a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ae:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	e006      	b.n	80082c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e002      	b.n	80082c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082c6:	4b34      	ldr	r3, [pc, #208]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d2:	d121      	bne.n	8008318 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80082d4:	4b30      	ldr	r3, [pc, #192]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d017      	beq.n	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80082e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80082e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80082f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80082fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008306:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	e006      	b.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	e002      	b.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800831e:	4b1e      	ldr	r3, [pc, #120]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800832a:	d121      	bne.n	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800832c:	4b1a      	ldr	r3, [pc, #104]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d017      	beq.n	8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008338:	4b17      	ldr	r3, [pc, #92]	@ (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800833a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800833c:	0e1b      	lsrs	r3, r3, #24
 800833e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800834a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800834e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008352:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800835e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008366:	e010      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	609a      	str	r2, [r3, #8]
}
 800836e:	e00c      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	609a      	str	r2, [r3, #8]
}
 8008376:	e008      	b.n	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	609a      	str	r2, [r3, #8]
}
 800838a:	bf00      	nop
 800838c:	372c      	adds	r7, #44	@ 0x2c
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	44020c00 	.word	0x44020c00
 800839c:	03d09000 	.word	0x03d09000
 80083a0:	46000000 	.word	0x46000000
 80083a4:	4a742400 	.word	0x4a742400
 80083a8:	4af42400 	.word	0x4af42400

080083ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b08f      	sub	sp, #60	@ 0x3c
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80083b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ba:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80083be:	4321      	orrs	r1, r4
 80083c0:	d150      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80083c2:	4b26      	ldr	r3, [pc, #152]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083cc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80083ce:	4b23      	ldr	r3, [pc, #140]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d108      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083e2:	d104      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80083e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ea:	f001 bb20 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80083ee:	4b1b      	ldr	r3, [pc, #108]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083fc:	d108      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008404:	d104      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008406:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	f001 bb0f 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008410:	4b12      	ldr	r3, [pc, #72]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841c:	d119      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008424:	d115      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800842e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008432:	d30a      	bcc.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008434:	4b09      	ldr	r3, [pc, #36]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	0a1b      	lsrs	r3, r3, #8
 800843a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800843e:	4a08      	ldr	r2, [pc, #32]	@ (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008446:	f001 baf2 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800844e:	f001 baee 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
 8008456:	f001 baea 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800845a:	bf00      	nop
 800845c:	44020c00 	.word	0x44020c00
 8008460:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008468:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 800846c:	ea50 0104 	orrs.w	r1, r0, r4
 8008470:	f000 8615 	beq.w	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8008474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008478:	2801      	cmp	r0, #1
 800847a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800847e:	f081 82d3 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008486:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800848a:	ea50 0104 	orrs.w	r1, r0, r4
 800848e:	f000 84d8 	beq.w	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008496:	2801      	cmp	r0, #1
 8008498:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800849c:	f081 82c4 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80084a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a4:	f1a1 0410 	sub.w	r4, r1, #16
 80084a8:	ea50 0104 	orrs.w	r1, r0, r4
 80084ac:	f001 8288 	beq.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80084b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b4:	2801      	cmp	r0, #1
 80084b6:	f171 0110 	sbcs.w	r1, r1, #16
 80084ba:	f081 82b5 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80084be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c2:	f1a1 0408 	sub.w	r4, r1, #8
 80084c6:	ea50 0104 	orrs.w	r1, r0, r4
 80084ca:	f001 81fe 	beq.w	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80084ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084d2:	2801      	cmp	r0, #1
 80084d4:	f171 0108 	sbcs.w	r1, r1, #8
 80084d8:	f081 82a6 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80084dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084e0:	1f0c      	subs	r4, r1, #4
 80084e2:	ea50 0104 	orrs.w	r1, r0, r4
 80084e6:	f000 8753 	beq.w	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80084ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ee:	2801      	cmp	r0, #1
 80084f0:	f171 0104 	sbcs.w	r1, r1, #4
 80084f4:	f081 8298 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80084f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084fc:	1e8c      	subs	r4, r1, #2
 80084fe:	ea50 0104 	orrs.w	r1, r0, r4
 8008502:	f001 8173 	beq.w	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8008506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850a:	2801      	cmp	r0, #1
 800850c:	f171 0102 	sbcs.w	r1, r1, #2
 8008510:	f081 828a 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008518:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800851c:	4321      	orrs	r1, r4
 800851e:	f001 80fe 	beq.w	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008526:	4ccb      	ldr	r4, [pc, #812]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008528:	42a0      	cmp	r0, r4
 800852a:	f171 0100 	sbcs.w	r1, r1, #0
 800852e:	f081 827b 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008536:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800853a:	4321      	orrs	r1, r4
 800853c:	f001 8076 	beq.w	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008544:	4cc4      	ldr	r4, [pc, #784]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008546:	42a0      	cmp	r0, r4
 8008548:	f171 0100 	sbcs.w	r1, r1, #0
 800854c:	f081 826c 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008554:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008558:	4321      	orrs	r1, r4
 800855a:	f000 87b5 	beq.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800855e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008562:	4cbe      	ldr	r4, [pc, #760]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008564:	42a0      	cmp	r0, r4
 8008566:	f171 0100 	sbcs.w	r1, r1, #0
 800856a:	f081 825d 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800856e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008572:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008576:	4321      	orrs	r1, r4
 8008578:	f000 8738 	beq.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800857c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008580:	4cb7      	ldr	r4, [pc, #732]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008582:	42a0      	cmp	r0, r4
 8008584:	f171 0100 	sbcs.w	r1, r1, #0
 8008588:	f081 824e 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800858c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008590:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008594:	4321      	orrs	r1, r4
 8008596:	f001 81cd 	beq.w	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800859a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800859e:	4cb1      	ldr	r4, [pc, #708]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	f171 0100 	sbcs.w	r1, r1, #0
 80085a6:	f081 823f 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ae:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80085b2:	4321      	orrs	r1, r4
 80085b4:	f000 80d9 	beq.w	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085bc:	4caa      	ldr	r4, [pc, #680]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80085be:	42a0      	cmp	r0, r4
 80085c0:	f171 0100 	sbcs.w	r1, r1, #0
 80085c4:	f081 8230 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085cc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80085d0:	4321      	orrs	r1, r4
 80085d2:	f000 83da 	beq.w	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80085d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085da:	4ca4      	ldr	r4, [pc, #656]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80085dc:	42a0      	cmp	r0, r4
 80085de:	f171 0100 	sbcs.w	r1, r1, #0
 80085e2:	f081 8221 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ea:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80085ee:	4321      	orrs	r1, r4
 80085f0:	f000 8627 	beq.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80085f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085f8:	4c9d      	ldr	r4, [pc, #628]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80085fa:	42a0      	cmp	r0, r4
 80085fc:	f171 0100 	sbcs.w	r1, r1, #0
 8008600:	f081 8212 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008608:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800860c:	4321      	orrs	r1, r4
 800860e:	f000 857a 	beq.w	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008616:	4c97      	ldr	r4, [pc, #604]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008618:	42a0      	cmp	r0, r4
 800861a:	f171 0100 	sbcs.w	r1, r1, #0
 800861e:	f081 8203 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008626:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800862a:	4321      	orrs	r1, r4
 800862c:	f000 84fb 	beq.w	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008634:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008638:	f171 0100 	sbcs.w	r1, r1, #0
 800863c:	f081 81f4 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008644:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008648:	4321      	orrs	r1, r4
 800864a:	f000 84a9 	beq.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800864e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008652:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008656:	42a0      	cmp	r0, r4
 8008658:	f171 0100 	sbcs.w	r1, r1, #0
 800865c:	f081 81e4 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008664:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008668:	4321      	orrs	r1, r4
 800866a:	f000 8456 	beq.w	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800866e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008672:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008676:	42a0      	cmp	r0, r4
 8008678:	f171 0100 	sbcs.w	r1, r1, #0
 800867c:	f081 81d4 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008684:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008688:	4321      	orrs	r1, r4
 800868a:	f000 8403 	beq.w	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800868e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008692:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008696:	42a0      	cmp	r0, r4
 8008698:	f171 0100 	sbcs.w	r1, r1, #0
 800869c:	f081 81c4 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086a4:	2821      	cmp	r0, #33	@ 0x21
 80086a6:	f171 0100 	sbcs.w	r1, r1, #0
 80086aa:	d255      	bcs.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80086ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086b0:	4301      	orrs	r1, r0
 80086b2:	f001 81b9 	beq.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086ba:	1e42      	subs	r2, r0, #1
 80086bc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80086c0:	2a20      	cmp	r2, #32
 80086c2:	f173 0100 	sbcs.w	r1, r3, #0
 80086c6:	f081 81af 	bcs.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086ca:	2a1f      	cmp	r2, #31
 80086cc:	f201 81ac 	bhi.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086d0:	a101      	add	r1, pc, #4	@ (adr r1, 80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80086d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080087af 	.word	0x080087af
 80086dc:	080088ad 	.word	0x080088ad
 80086e0:	08009a29 	.word	0x08009a29
 80086e4:	0800896d 	.word	0x0800896d
 80086e8:	08009a29 	.word	0x08009a29
 80086ec:	08009a29 	.word	0x08009a29
 80086f0:	08009a29 	.word	0x08009a29
 80086f4:	08008a3d 	.word	0x08008a3d
 80086f8:	08009a29 	.word	0x08009a29
 80086fc:	08009a29 	.word	0x08009a29
 8008700:	08009a29 	.word	0x08009a29
 8008704:	08009a29 	.word	0x08009a29
 8008708:	08009a29 	.word	0x08009a29
 800870c:	08009a29 	.word	0x08009a29
 8008710:	08009a29 	.word	0x08009a29
 8008714:	08008b21 	.word	0x08008b21
 8008718:	08009a29 	.word	0x08009a29
 800871c:	08009a29 	.word	0x08009a29
 8008720:	08009a29 	.word	0x08009a29
 8008724:	08009a29 	.word	0x08009a29
 8008728:	08009a29 	.word	0x08009a29
 800872c:	08009a29 	.word	0x08009a29
 8008730:	08009a29 	.word	0x08009a29
 8008734:	08009a29 	.word	0x08009a29
 8008738:	08009a29 	.word	0x08009a29
 800873c:	08009a29 	.word	0x08009a29
 8008740:	08009a29 	.word	0x08009a29
 8008744:	08009a29 	.word	0x08009a29
 8008748:	08009a29 	.word	0x08009a29
 800874c:	08009a29 	.word	0x08009a29
 8008750:	08009a29 	.word	0x08009a29
 8008754:	08008bf7 	.word	0x08008bf7
 8008758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008760:	430b      	orrs	r3, r1
 8008762:	f000 82b3 	beq.w	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008766:	f001 b95f 	b.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800876a:	4b43      	ldr	r3, [pc, #268]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800876c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008774:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d108      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800877c:	f107 0320 	add.w	r3, r7, #32
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff f9cf 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800878a:	f001 b950 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	2b40      	cmp	r3, #64	@ 0x40
 8008792:	d108      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fb2f 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a2:	f001 b944 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087aa:	f001 b940 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80087ae:	4b32      	ldr	r3, [pc, #200]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80087b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80087c0:	f7fd ffc4 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 80087c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80087c6:	f001 b932 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80087ca:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d6:	d10a      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d107      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0314 	add.w	r3, r7, #20
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fb0a 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ec:	e05c      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80087ee:	4b22      	ldr	r3, [pc, #136]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fa:	d10a      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d107      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fc64 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008810:	e04a      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008812:	4b19      	ldr	r3, [pc, #100]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b02      	cmp	r3, #2
 800881c:	d10c      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	2b03      	cmp	r3, #3
 8008822:	d109      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008824:	4b14      	ldr	r3, [pc, #80]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	4a13      	ldr	r2, [pc, #76]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
 8008836:	e037      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008838:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008844:	d11e      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	2b04      	cmp	r3, #4
 800884a:	d11b      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800884c:	4b0c      	ldr	r3, [pc, #48]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800884e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008850:	e02a      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008852:	bf00      	nop
 8008854:	40000001 	.word	0x40000001
 8008858:	20000001 	.word	0x20000001
 800885c:	10000001 	.word	0x10000001
 8008860:	08000001 	.word	0x08000001
 8008864:	04000001 	.word	0x04000001
 8008868:	00400001 	.word	0x00400001
 800886c:	00200001 	.word	0x00200001
 8008870:	00040001 	.word	0x00040001
 8008874:	00020001 	.word	0x00020001
 8008878:	44020c00 	.word	0x44020c00
 800887c:	03d09000 	.word	0x03d09000
 8008880:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008884:	4ba3      	ldr	r3, [pc, #652]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b02      	cmp	r3, #2
 8008890:	d106      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2b05      	cmp	r3, #5
 8008896:	d103      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a4:	f001 b8c3 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80088a8:	f001 b8c1 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80088ac:	4b99      	ldr	r3, [pc, #612]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80088ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088be:	f7fd ff2f 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 80088c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80088c4:	f001 b8b3 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80088c8:	4b92      	ldr	r3, [pc, #584]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d4:	d10a      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d107      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff fa8b 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ea:	e03d      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	d108      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fbec 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008900:	f001 b895 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008904:	4b83      	ldr	r3, [pc, #524]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	d10c      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	2b18      	cmp	r3, #24
 8008914:	d109      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008916:	4b7f      	ldr	r3, [pc, #508]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a7d      	ldr	r2, [pc, #500]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
 8008928:	e01e      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800892a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008936:	d105      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2b20      	cmp	r3, #32
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800893e:	4b77      	ldr	r3, [pc, #476]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
 8008942:	e011      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008944:	4b73      	ldr	r3, [pc, #460]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2b28      	cmp	r3, #40	@ 0x28
 8008956:	d103      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e003      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008964:	f001 b863 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008968:	f001 b861 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800896c:	4b69      	ldr	r3, [pc, #420]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800896e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008972:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008976:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800897e:	f7fd fecf 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008982:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008984:	f001 b853 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008988:	4b62      	ldr	r3, [pc, #392]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008994:	d10a      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fa2b 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089aa:	e045      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80089ac:	4b59      	ldr	r3, [pc, #356]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b8:	d10a      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	2b80      	cmp	r3, #128	@ 0x80
 80089be:	d107      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c0:	f107 0308 	add.w	r3, r7, #8
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff fb85 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ce:	e033      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80089d0:	4b50      	ldr	r3, [pc, #320]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d10c      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2bc0      	cmp	r3, #192	@ 0xc0
 80089e0:	d109      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e2:	4b4c      	ldr	r3, [pc, #304]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	08db      	lsrs	r3, r3, #3
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	4a4a      	ldr	r2, [pc, #296]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f4:	e020      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80089f6:	4b47      	ldr	r3, [pc, #284]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a02:	d106      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8008a0c:	4b43      	ldr	r3, [pc, #268]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a10:	e012      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008a12:	4b40      	ldr	r3, [pc, #256]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008a26:	d103      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a34:	f000 bffb 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a38:	f000 bff9 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008a3c:	4b35      	ldr	r3, [pc, #212]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a42:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008a46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a4e:	f7fd fe67 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008a52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a54:	f000 bfeb 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008a58:	4b2e      	ldr	r3, [pc, #184]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a64:	d10b      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a6c:	d107      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6e:	f107 0314 	add.w	r3, r7, #20
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff f9c2 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7c:	e047      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008a7e:	4b25      	ldr	r3, [pc, #148]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8a:	d10b      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a94:	f107 0308 	add.w	r3, r7, #8
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff fb1b 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa2:	e034      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d10d      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ab6:	d109      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ab8:	4b16      	ldr	r3, [pc, #88]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	08db      	lsrs	r3, r3, #3
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aca:	e020      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad8:	d106      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ae0:	d102      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae6:	e012      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d107      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008afc:	d103      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8008afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b04:	e003      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b0a:	f000 bf90 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008b0e:	f000 bf8e 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008b12:	bf00      	nop
 8008b14:	44020c00 	.word	0x44020c00
 8008b18:	03d09000 	.word	0x03d09000
 8008b1c:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008b20:	4ba5      	ldr	r3, [pc, #660]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b32:	f7fd fdf5 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008b36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b38:	f000 bf79 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b48:	d10b      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b50:	d107      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff f950 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b60:	e047      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008b62:	4b95      	ldr	r3, [pc, #596]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6e:	d10b      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b76:	d107      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff faa9 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b86:	e034      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008b88:	4b8b      	ldr	r3, [pc, #556]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d10d      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b9a:	d109      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b9c:	4b86      	ldr	r3, [pc, #536]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a85      	ldr	r2, [pc, #532]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bae:	e020      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008bb0:	4b81      	ldr	r3, [pc, #516]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbc:	d106      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bc4:	d102      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8008bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bca:	e012      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d107      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008be0:	d103      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8008be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be8:	e003      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bee:	f000 bf1e 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008bf2:	f000 bf1c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008bf6:	4b70      	ldr	r3, [pc, #448]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008bfc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008c00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c08:	f7fd fd8a 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008c0c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c0e:	f000 bf0e 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008c12:	4b69      	ldr	r3, [pc, #420]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1e:	d10b      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c26:	d107      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff f8e5 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c36:	e047      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008c38:	4b5f      	ldr	r3, [pc, #380]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c44:	d10b      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4c:	d107      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fa3e 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5c:	e034      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008c5e:	4b56      	ldr	r3, [pc, #344]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d10d      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008c70:	d109      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c72:	4b51      	ldr	r3, [pc, #324]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	08db      	lsrs	r3, r3, #3
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c84:	e020      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008c86:	4b4c      	ldr	r3, [pc, #304]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c92:	d106      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8008c9c:	4b48      	ldr	r3, [pc, #288]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca0:	e012      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008ca2:	4b45      	ldr	r3, [pc, #276]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d107      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008cb6:	d103      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbe:	e003      	b.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc4:	f000 beb3 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008cc8:	f000 beb1 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cd2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008cd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008cde:	f7fd fd4b 	bl	8006778 <HAL_RCC_GetPCLK3Freq>
 8008ce2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ce4:	f000 bea3 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cee:	d108      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf0:	f107 0314 	add.w	r3, r7, #20
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff f881 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cfe:	f000 be96 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d08:	d108      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff f9e0 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d18:	f000 be89 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008d1c:	4b26      	ldr	r3, [pc, #152]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d10d      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d2e:	d109      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d30:	4b21      	ldr	r3, [pc, #132]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	08db      	lsrs	r3, r3, #3
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	4a20      	ldr	r2, [pc, #128]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d42:	e020      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008d44:	4b1c      	ldr	r3, [pc, #112]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d50:	d106      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d58:	d102      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8008d5a:	4b19      	ldr	r3, [pc, #100]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	e012      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008d60:	4b15      	ldr	r3, [pc, #84]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008d74:	d103      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7c:	e003      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d82:	f000 be54 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008d86:	f000 be52 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008d9c:	f7fd fca4 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8008da0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008da2:	f000 be44 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d10b      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dac:	f7fd fb70 	bl	8006490 <HAL_RCC_GetSysClockFreq>
 8008db0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008db2:	f000 be3c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008db6:	bf00      	nop
 8008db8:	44020c00 	.word	0x44020c00
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d108      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff f814 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dd8:	f000 be29 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de8:	d105      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d102      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8008df0:	4b9b      	ldr	r3, [pc, #620]	@ (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df4:	e023      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008df6:	4b99      	ldr	r3, [pc, #612]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d10c      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d109      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e08:	4b94      	ldr	r3, [pc, #592]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	08db      	lsrs	r3, r3, #3
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	4a94      	ldr	r2, [pc, #592]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1a:	e010      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e28:	d105      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	d102      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8008e30:	4b8d      	ldr	r3, [pc, #564]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e34:	e003      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e3a:	f000 bdf8 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e3e:	f000 bdf6 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008e42:	4b86      	ldr	r3, [pc, #536]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008e4e:	4b83      	ldr	r3, [pc, #524]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d106      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d103      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8008e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e68:	e012      	b.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e78:	d106      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d103      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8008e80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e86:	e003      	b.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008e8c:	f000 bdcf 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e90:	f000 bdcd 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008e94:	4b71      	ldr	r3, [pc, #452]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008e96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ea6:	f7fd fc3b 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008eaa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008eac:	f000 bdbf 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb6:	d108      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb8:	f107 0308 	add.w	r3, r7, #8
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f909 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ec6:	f000 bdb2 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008eca:	4b64      	ldr	r3, [pc, #400]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d10d      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008edc:	d109      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ede:	4b5f      	ldr	r3, [pc, #380]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	08db      	lsrs	r3, r3, #3
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	4a5e      	ldr	r2, [pc, #376]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008eea:	fa22 f303 	lsr.w	r3, r2, r3
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef0:	e011      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008efe:	d106      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8008f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f06:	d102      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8008f08:	4b57      	ldr	r3, [pc, #348]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f0c:	e003      	b.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f12:	f000 bd8c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f16:	f000 bd8a 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008f1a:	4b50      	ldr	r3, [pc, #320]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f20:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008f24:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f2c:	f7fd fbf8 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008f30:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f32:	f000 bd7c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f3c:	d108      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3e:	f107 0308 	add.w	r3, r7, #8
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f8c6 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f4c:	f000 bd6f 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008f50:	4b42      	ldr	r3, [pc, #264]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d10d      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f64:	4b3d      	ldr	r3, [pc, #244]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f76:	e011      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008f78:	4b38      	ldr	r3, [pc, #224]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8008f8e:	4b36      	ldr	r3, [pc, #216]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f92:	e003      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f98:	f000 bd49 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f9c:	f000 bd47 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fa6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008faa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008fb2:	f7fd fbe1 	bl	8006778 <HAL_RCC_GetPCLK3Freq>
 8008fb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fb8:	f000 bd39 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fc2:	d108      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc4:	f107 0308 	add.w	r3, r7, #8
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff f883 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fd2:	f000 bd2c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008fd6:	4b21      	ldr	r3, [pc, #132]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d10d      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fe8:	d109      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fea:	4b1c      	ldr	r3, [pc, #112]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	e011      	b.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008ffe:	4b17      	ldr	r3, [pc, #92]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800900a:	d106      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 800900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009012:	d102      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8009014:	4b14      	ldr	r3, [pc, #80]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
 8009018:	e003      	b.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800901e:	f000 bd06 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009022:	f000 bd04 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009026:	4b0d      	ldr	r3, [pc, #52]	@ (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800902c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009030:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009038:	f7fd fb72 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 800903c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800903e:	f000 bcf6 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009048:	d110      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800904a:	f107 0308 	add.w	r3, r7, #8
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff f840 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009058:	f000 bce9 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800905c:	44020c00 	.word	0x44020c00
 8009060:	007a1200 	.word	0x007a1200
 8009064:	03d09000 	.word	0x03d09000
 8009068:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800906c:	4ba4      	ldr	r3, [pc, #656]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b02      	cmp	r3, #2
 8009076:	d10e      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800907e:	d10a      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009080:	4b9f      	ldr	r3, [pc, #636]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	08db      	lsrs	r3, r3, #3
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	4a9e      	ldr	r2, [pc, #632]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009092:	f000 bccc 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800909a:	f000 bcc8 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800909e:	4b98      	ldr	r3, [pc, #608]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80090a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090a4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80090a8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80090b0:	f7fd fb62 	bl	8006778 <HAL_RCC_GetPCLK3Freq>
 80090b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80090b6:	f000 bcba 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090c0:	d108      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff f804 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090d0:	f000 bcad 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80090d4:	4b8a      	ldr	r3, [pc, #552]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d10e      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090e6:	d10a      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090e8:	4b85      	ldr	r3, [pc, #532]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	08db      	lsrs	r3, r3, #3
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	4a84      	ldr	r2, [pc, #528]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
 80090f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090fa:	f000 bc98 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009102:	f000 bc94 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009106:	4b7e      	ldr	r3, [pc, #504]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009108:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800910c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009118:	d056      	beq.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009120:	f200 808b 	bhi.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912a:	d03e      	beq.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009132:	f200 8082 	bhi.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800913c:	d027      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009144:	d879      	bhi.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914c:	d017      	beq.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009154:	d871      	bhi.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009162:	d004      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8009164:	e069      	b.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009166:	f7fd fb07 	bl	8006778 <HAL_RCC_GetPCLK3Freq>
 800916a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800916c:	e068      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fe42 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800917c:	e060      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800917e:	f107 0308 	add.w	r3, r7, #8
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe ffa6 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800918c:	e058      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800918e:	4b5c      	ldr	r3, [pc, #368]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d103      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 800919c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091a2:	e04d      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091a8:	e04a      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80091aa:	4b55      	ldr	r3, [pc, #340]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091b8:	d103      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80091ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091c0:	e03e      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091c6:	e03b      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d10c      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091e6:	4b46      	ldr	r3, [pc, #280]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	08db      	lsrs	r3, r3, #3
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	4a44      	ldr	r2, [pc, #272]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80091f2:	fa22 f303 	lsr.w	r3, r2, r3
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f8:	e01e      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091fa:	4b41      	ldr	r3, [pc, #260]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009206:	d106      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800920e:	d102      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009210:	4b3d      	ldr	r3, [pc, #244]	@ (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
 8009214:	e010      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009216:	4b3a      	ldr	r3, [pc, #232]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009222:	d106      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8009224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800922a:	d102      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800922c:	4b37      	ldr	r3, [pc, #220]	@ (800930c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009230:	e002      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009236:	e003      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009238:	e002      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800923e:	bf00      	nop
          }
        }
        break;
 8009240:	e3f5      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009242:	4b2f      	ldr	r3, [pc, #188]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009244:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009248:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800924c:	633b      	str	r3, [r7, #48]	@ 0x30
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009254:	d05f      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800925c:	f200 8094 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009266:	d03f      	beq.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800926e:	f200 808b 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009278:	d028      	beq.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009280:	f200 8082 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800928a:	d017      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 800928c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009292:	d879      	bhi.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a0:	d004      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80092a2:	e071      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80092a4:	f7fd fa3c 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 80092a8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80092aa:	e070      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ac:	f107 0314 	add.w	r3, r7, #20
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fda3 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ba:	e068      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092bc:	f107 0308 	add.w	r3, r7, #8
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe ff07 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ca:	e060      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d103      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80092da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092e0:	e055      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e6:	e052      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80092e8:	4b05      	ldr	r3, [pc, #20]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092f6:	d10b      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80092f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092fe:	e046      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009300:	44020c00 	.word	0x44020c00
 8009304:	03d09000 	.word	0x03d09000
 8009308:	003d0900 	.word	0x003d0900
 800930c:	007a1200 	.word	0x007a1200
              frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009314:	e03b      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009316:	4bae      	ldr	r3, [pc, #696]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800931c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009320:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009322:	4bab      	ldr	r3, [pc, #684]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d10c      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d109      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009334:	4ba6      	ldr	r3, [pc, #664]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	08db      	lsrs	r3, r3, #3
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	4aa5      	ldr	r2, [pc, #660]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009340:	fa22 f303 	lsr.w	r3, r2, r3
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
 8009346:	e01e      	b.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009348:	4ba1      	ldr	r3, [pc, #644]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009354:	d106      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935c:	d102      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800935e:	4b9e      	ldr	r3, [pc, #632]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
 8009362:	e010      	b.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009364:	4b9a      	ldr	r3, [pc, #616]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800936c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009370:	d106      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009378:	d102      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800937a:	4b98      	ldr	r3, [pc, #608]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
 800937e:	e002      	b.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009384:	e003      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009386:	e002      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800938c:	bf00      	nop
          }
        }
        break;
 800938e:	e34e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009390:	4b8f      	ldr	r3, [pc, #572]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800939a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800939c:	4b8c      	ldr	r3, [pc, #560]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a8:	d105      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80093b0:	4b8a      	ldr	r3, [pc, #552]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80093b4:	e33b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093bc:	d107      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093be:	f107 0320 	add.w	r3, r7, #32
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fbae 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093cc:	e32f      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d4:	d107      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fd0e 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093e4:	e323      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ea:	e320      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80093ec:	4b78      	ldr	r3, [pc, #480]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80093ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d860      	bhi.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80093fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8009400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009404:	08009419 	.word	0x08009419
 8009408:	08009429 	.word	0x08009429
 800940c:	08009439 	.word	0x08009439
 8009410:	08009449 	.word	0x08009449
 8009414:	0800944f 	.word	0x0800944f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009418:	f107 0320 	add.w	r3, r7, #32
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fb81 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009426:	e04e      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	4618      	mov	r0, r3
 800942e:	f7fe fce5 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009436:	e046      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fe49 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009446:	e03e      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009448:	4b65      	ldr	r3, [pc, #404]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800944c:	e03b      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800944e:	4b60      	ldr	r3, [pc, #384]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009454:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009458:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800945a:	4b5d      	ldr	r3, [pc, #372]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d10c      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800946c:	4b58      	ldr	r3, [pc, #352]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	4a57      	ldr	r2, [pc, #348]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
 800947e:	e01e      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009480:	4b53      	ldr	r3, [pc, #332]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009494:	d102      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009496:	4b50      	ldr	r3, [pc, #320]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009498:	637b      	str	r3, [r7, #52]	@ 0x34
 800949a:	e010      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800949c:	4b4c      	ldr	r3, [pc, #304]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a8:	d106      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094b0:	d102      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094b2:	4b4a      	ldr	r3, [pc, #296]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b6:	e002      	b.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094bc:	e003      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80094be:	e002      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094c4:	bf00      	nop
          }
        }
        break;
 80094c6:	e2b2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80094c8:	4b41      	ldr	r3, [pc, #260]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80094ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	f200 80a4 	bhi.w	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80094dc:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009569 	.word	0x08009569
 80094e8:	08009625 	.word	0x08009625
 80094ec:	08009625 	.word	0x08009625
 80094f0:	08009625 	.word	0x08009625
 80094f4:	08009625 	.word	0x08009625
 80094f8:	08009625 	.word	0x08009625
 80094fc:	08009625 	.word	0x08009625
 8009500:	08009625 	.word	0x08009625
 8009504:	08009579 	.word	0x08009579
 8009508:	08009625 	.word	0x08009625
 800950c:	08009625 	.word	0x08009625
 8009510:	08009625 	.word	0x08009625
 8009514:	08009625 	.word	0x08009625
 8009518:	08009625 	.word	0x08009625
 800951c:	08009625 	.word	0x08009625
 8009520:	08009625 	.word	0x08009625
 8009524:	08009589 	.word	0x08009589
 8009528:	08009625 	.word	0x08009625
 800952c:	08009625 	.word	0x08009625
 8009530:	08009625 	.word	0x08009625
 8009534:	08009625 	.word	0x08009625
 8009538:	08009625 	.word	0x08009625
 800953c:	08009625 	.word	0x08009625
 8009540:	08009625 	.word	0x08009625
 8009544:	08009599 	.word	0x08009599
 8009548:	08009625 	.word	0x08009625
 800954c:	08009625 	.word	0x08009625
 8009550:	08009625 	.word	0x08009625
 8009554:	08009625 	.word	0x08009625
 8009558:	08009625 	.word	0x08009625
 800955c:	08009625 	.word	0x08009625
 8009560:	08009625 	.word	0x08009625
 8009564:	0800959f 	.word	0x0800959f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009568:	f107 0320 	add.w	r3, r7, #32
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fad9 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009576:	e058      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fc3d 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009586:	e050      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009588:	f107 0308 	add.w	r3, r7, #8
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fda1 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009596:	e048      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009598:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800959c:	e045      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800959e:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80095a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80095a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095aa:	4b09      	ldr	r3, [pc, #36]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d116      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d113      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	08db      	lsrs	r3, r3, #3
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	4a03      	ldr	r2, [pc, #12]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80095c8:	fa22 f303 	lsr.w	r3, r2, r3
 80095cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ce:	e028      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80095d0:	44020c00 	.word	0x44020c00
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	007a1200 	.word	0x007a1200
 80095e0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095e4:	4b95      	ldr	r3, [pc, #596]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f0:	d106      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80095f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f8:	d102      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80095fa:	4b91      	ldr	r3, [pc, #580]	@ (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80095fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095fe:	e010      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009600:	4b8e      	ldr	r3, [pc, #568]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960c:	d106      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009614:	d102      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009616:	4b8b      	ldr	r3, [pc, #556]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
 800961a:	e002      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009620:	e003      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009622:	e002      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009628:	bf00      	nop
          }
        }
        break;
 800962a:	e200      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800962c:	4b83      	ldr	r3, [pc, #524]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800962e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009632:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800963e:	d031      	beq.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009646:	d866      	bhi.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	2bc0      	cmp	r3, #192	@ 0xc0
 800964c:	d027      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	2bc0      	cmp	r3, #192	@ 0xc0
 8009652:	d860      	bhi.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009656:	2b80      	cmp	r3, #128	@ 0x80
 8009658:	d019      	beq.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	2b80      	cmp	r3, #128	@ 0x80
 800965e:	d85a      	bhi.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	2b40      	cmp	r3, #64	@ 0x40
 800966a:	d008      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 800966c:	e053      	b.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800966e:	f107 0320 	add.w	r3, r7, #32
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fa56 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800967c:	e04e      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fbba 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800968c:	e046      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fd1e 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800969c:	e03e      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800969e:	4b6a      	ldr	r3, [pc, #424]	@ (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a2:	e03b      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096a4:	4b65      	ldr	r3, [pc, #404]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096b0:	4b62      	ldr	r3, [pc, #392]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d10c      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096c2:	4b5e      	ldr	r3, [pc, #376]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	08db      	lsrs	r3, r3, #3
 80096c8:	f003 0303 	and.w	r3, r3, #3
 80096cc:	4a5f      	ldr	r2, [pc, #380]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d4:	e01e      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096d6:	4b59      	ldr	r3, [pc, #356]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e2:	d106      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ea:	d102      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80096ec:	4b54      	ldr	r3, [pc, #336]	@ (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80096ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f0:	e010      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096f2:	4b52      	ldr	r3, [pc, #328]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fe:	d106      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009706:	d102      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009708:	4b4e      	ldr	r3, [pc, #312]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
 800970c:	e002      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009712:	e003      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8009714:	e002      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800971a:	bf00      	nop
          }
        }
        break;
 800971c:	e187      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800971e:	4b47      	ldr	r3, [pc, #284]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009724:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009728:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009730:	f7fd f80c 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 8009734:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009736:	e17a      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009738:	4b40      	ldr	r3, [pc, #256]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009740:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009744:	d10b      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800974c:	d107      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974e:	f107 0314 	add.w	r3, r7, #20
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fb52 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
 800975c:	e045      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800975e:	4b37      	ldr	r3, [pc, #220]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976a:	d10b      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fcab 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	e032      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009784:	4b2d      	ldr	r3, [pc, #180]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b02      	cmp	r3, #2
 800978e:	d10d      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009796:	d109      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009798:	4b28      	ldr	r3, [pc, #160]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	08db      	lsrs	r3, r3, #3
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	4a2a      	ldr	r2, [pc, #168]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80097a4:	fa22 f303 	lsr.w	r3, r2, r3
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097aa:	e01e      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80097ac:	4b23      	ldr	r3, [pc, #140]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b8:	d106      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097c0:	d102      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80097c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c6:	e010      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80097c8:	4b1c      	ldr	r3, [pc, #112]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d4:	d106      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80097dc:	d102      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80097de:	4b19      	ldr	r3, [pc, #100]	@ (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097e8:	e121      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80097ea:	e120      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80097ec:	4b13      	ldr	r3, [pc, #76]	@ (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d861      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80097fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009815 	.word	0x08009815
 8009808:	0800981d 	.word	0x0800981d
 800980c:	0800982d 	.word	0x0800982d
 8009810:	08009851 	.word	0x08009851

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009814:	f7fc ff68 	bl	80066e8 <HAL_RCC_GetHCLKFreq>
 8009818:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800981a:	e055      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800981c:	f107 0320 	add.w	r3, r7, #32
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe f97f 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009828:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800982a:	e04d      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fae3 	bl	8007dfc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800983a:	e045      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800983c:	44020c00 	.word	0x44020c00
 8009840:	003d0900 	.word	0x003d0900
 8009844:	007a1200 	.word	0x007a1200
 8009848:	00bb8000 	.word	0x00bb8000
 800984c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009850:	4b79      	ldr	r3, [pc, #484]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009856:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800985c:	4b76      	ldr	r3, [pc, #472]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b02      	cmp	r3, #2
 8009866:	d10c      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800986e:	4b72      	ldr	r3, [pc, #456]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	4a70      	ldr	r2, [pc, #448]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009880:	e01e      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009882:	4b6d      	ldr	r3, [pc, #436]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800988a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800988e:	d106      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009896:	d102      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009898:	4b69      	ldr	r3, [pc, #420]	@ (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
 800989c:	e010      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800989e:	4b66      	ldr	r3, [pc, #408]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098aa:	d106      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098b4:	4b63      	ldr	r3, [pc, #396]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80098b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b8:	e002      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098be:	e003      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80098c0:	e002      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098c6:	bf00      	nop
          }
        }
        break;
 80098c8:	e0b1      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80098ca:	4b5b      	ldr	r3, [pc, #364]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80098cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80098d6:	4b58      	ldr	r3, [pc, #352]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80098d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d106      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80098ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f0:	e01f      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80098f2:	4b51      	ldr	r3, [pc, #324]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80098f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009900:	d106      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	2b40      	cmp	r3, #64	@ 0x40
 8009906:	d103      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8009908:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34
 800990e:	e010      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009910:	4b49      	ldr	r3, [pc, #292]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800991c:	d106      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	2b80      	cmp	r3, #128	@ 0x80
 8009922:	d103      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009924:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009928:	637b      	str	r3, [r7, #52]	@ 0x34
 800992a:	e002      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009930:	e07d      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009932:	e07c      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009934:	4b40      	ldr	r3, [pc, #256]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800993a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800993e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009940:	4b3d      	ldr	r3, [pc, #244]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800994c:	d105      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009954:	4b3c      	ldr	r3, [pc, #240]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
 8009958:	e031      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800995a:	4b37      	ldr	r3, [pc, #220]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009962:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009966:	d10a      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996a:	2b10      	cmp	r3, #16
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800996e:	f107 0320 	add.w	r3, r7, #32
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe f8d6 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
 800997c:	e01f      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800997e:	4b2e      	ldr	r3, [pc, #184]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b02      	cmp	r3, #2
 800998a:	d106      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	2b20      	cmp	r3, #32
 8009990:	d103      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009996:	637b      	str	r3, [r7, #52]	@ 0x34
 8009998:	e011      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800999a:	4b27      	ldr	r3, [pc, #156]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800999c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a8:	d106      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	2b30      	cmp	r3, #48	@ 0x30
 80099ae:	d103      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 80099b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b6:	e002      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80099bc:	e037      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80099be:	e036      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80099c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80099cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ce:	2b10      	cmp	r3, #16
 80099d0:	d107      	bne.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099d2:	f107 0320 	add.w	r3, r7, #32
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe f8a4 	bl	8007b24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80099e0:	e025      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80099e2:	4b15      	ldr	r3, [pc, #84]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ee:	d10a      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d107      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fb6a 	bl	80080d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a04:	e00f      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a12:	d105      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	2b30      	cmp	r3, #48	@ 0x30
 8009a18:	d102      	bne.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a1e:	e002      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009a24:	e003      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009a26:	e002      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a2c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	373c      	adds	r7, #60	@ 0x3c
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd90      	pop	{r4, r7, pc}
 8009a38:	44020c00 	.word	0x44020c00
 8009a3c:	03d09000 	.word	0x03d09000
 8009a40:	003d0900 	.word	0x003d0900
 8009a44:	007a1200 	.word	0x007a1200
 8009a48:	02dc6c00 	.word	0x02dc6c00

08009a4c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009a54:	4b48      	ldr	r3, [pc, #288]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a47      	ldr	r2, [pc, #284]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a60:	f7f9 fa1a 	bl	8002e98 <HAL_GetTick>
 8009a64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a66:	e008      	b.n	8009a7a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a68:	f7f9 fa16 	bl	8002e98 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d901      	bls.n	8009a7a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e07a      	b.n	8009b70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f0      	bne.n	8009a68 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009a86:	4b3c      	ldr	r3, [pc, #240]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009a8e:	f023 0303 	bic.w	r3, r3, #3
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6811      	ldr	r1, [r2, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6852      	ldr	r2, [r2, #4]
 8009a9a:	0212      	lsls	r2, r2, #8
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	4936      	ldr	r1, [pc, #216]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	025b      	lsls	r3, r3, #9
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	041b      	lsls	r3, r3, #16
 8009ac2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	061b      	lsls	r3, r3, #24
 8009ad0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ad4:	4928      	ldr	r1, [pc, #160]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009ada:	4b27      	ldr	r3, [pc, #156]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ade:	f023 020c 	bic.w	r2, r3, #12
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	4924      	ldr	r1, [pc, #144]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009aec:	4b22      	ldr	r3, [pc, #136]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af0:	f023 0220 	bic.w	r2, r3, #32
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	491f      	ldr	r1, [pc, #124]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009afe:	4b1e      	ldr	r3, [pc, #120]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b06:	491c      	ldr	r1, [pc, #112]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	4a19      	ldr	r2, [pc, #100]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b12:	f023 0310 	bic.w	r3, r3, #16
 8009b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009b18:	4b17      	ldr	r3, [pc, #92]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6a12      	ldr	r2, [r2, #32]
 8009b28:	00d2      	lsls	r2, r2, #3
 8009b2a:	4913      	ldr	r1, [pc, #76]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009b30:	4b11      	ldr	r3, [pc, #68]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	4a10      	ldr	r2, [pc, #64]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b36:	f043 0310 	orr.w	r3, r3, #16
 8009b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a0d      	ldr	r2, [pc, #52]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b48:	f7f9 f9a6 	bl	8002e98 <HAL_GetTick>
 8009b4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b4e:	e008      	b.n	8009b62 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b50:	f7f9 f9a2 	bl	8002e98 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d901      	bls.n	8009b62 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e006      	b.n	8009b70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b62:	4b05      	ldr	r3, [pc, #20]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0f0      	beq.n	8009b50 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0

}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	44020c00 	.word	0x44020c00

08009b7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009b84:	4b48      	ldr	r3, [pc, #288]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a47      	ldr	r2, [pc, #284]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b90:	f7f9 f982 	bl	8002e98 <HAL_GetTick>
 8009b94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b96:	e008      	b.n	8009baa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b98:	f7f9 f97e 	bl	8002e98 <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e07a      	b.n	8009ca0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009baa:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f0      	bne.n	8009b98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6852      	ldr	r2, [r2, #4]
 8009bca:	0212      	lsls	r2, r2, #8
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	4936      	ldr	r1, [pc, #216]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	630b      	str	r3, [r1, #48]	@ 0x30
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	025b      	lsls	r3, r3, #9
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	041b      	lsls	r3, r3, #16
 8009bf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	061b      	lsls	r3, r3, #24
 8009c00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c04:	4928      	ldr	r1, [pc, #160]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c0a:	4b27      	ldr	r3, [pc, #156]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	f023 020c 	bic.w	r2, r3, #12
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	4924      	ldr	r1, [pc, #144]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009c1c:	4b22      	ldr	r3, [pc, #136]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c20:	f023 0220 	bic.w	r2, r3, #32
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	491f      	ldr	r1, [pc, #124]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c36:	491c      	ldr	r1, [pc, #112]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c42:	f023 0310 	bic.w	r3, r3, #16
 8009c46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009c48:	4b17      	ldr	r3, [pc, #92]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6a12      	ldr	r2, [r2, #32]
 8009c58:	00d2      	lsls	r2, r2, #3
 8009c5a:	4913      	ldr	r1, [pc, #76]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009c60:	4b11      	ldr	r3, [pc, #68]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c64:	4a10      	ldr	r2, [pc, #64]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c66:	f043 0310 	orr.w	r3, r3, #16
 8009c6a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0d      	ldr	r2, [pc, #52]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c78:	f7f9 f90e 	bl	8002e98 <HAL_GetTick>
 8009c7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c7e:	e008      	b.n	8009c92 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c80:	f7f9 f90a 	bl	8002e98 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e006      	b.n	8009ca0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c92:	4b05      	ldr	r3, [pc, #20]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0f0      	beq.n	8009c80 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	44020c00 	.word	0x44020c00

08009cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e049      	b.n	8009d52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7f8 fdaa 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f000 ff0e 	bl	800ab0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d001      	beq.n	8009d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e07c      	b.n	8009e6e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0201 	orr.w	r2, r2, #1
 8009d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a3a      	ldr	r2, [pc, #232]	@ (8009e7c <HAL_TIM_Base_Start_IT+0x120>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d04a      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a39      	ldr	r2, [pc, #228]	@ (8009e80 <HAL_TIM_Base_Start_IT+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d045      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da8:	d040      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009db2:	d03b      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a32      	ldr	r2, [pc, #200]	@ (8009e84 <HAL_TIM_Base_Start_IT+0x128>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d036      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a31      	ldr	r2, [pc, #196]	@ (8009e88 <HAL_TIM_Base_Start_IT+0x12c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d031      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8009e8c <HAL_TIM_Base_Start_IT+0x130>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d02c      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8009e90 <HAL_TIM_Base_Start_IT+0x134>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d027      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a2c      	ldr	r2, [pc, #176]	@ (8009e94 <HAL_TIM_Base_Start_IT+0x138>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d022      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a2b      	ldr	r2, [pc, #172]	@ (8009e98 <HAL_TIM_Base_Start_IT+0x13c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d01d      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a29      	ldr	r2, [pc, #164]	@ (8009e9c <HAL_TIM_Base_Start_IT+0x140>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d018      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a28      	ldr	r2, [pc, #160]	@ (8009ea0 <HAL_TIM_Base_Start_IT+0x144>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d013      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a26      	ldr	r2, [pc, #152]	@ (8009ea4 <HAL_TIM_Base_Start_IT+0x148>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00e      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a25      	ldr	r2, [pc, #148]	@ (8009ea8 <HAL_TIM_Base_Start_IT+0x14c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d009      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a23      	ldr	r2, [pc, #140]	@ (8009eac <HAL_TIM_Base_Start_IT+0x150>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d004      	beq.n	8009e2c <HAL_TIM_Base_Start_IT+0xd0>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a22      	ldr	r2, [pc, #136]	@ (8009eb0 <HAL_TIM_Base_Start_IT+0x154>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d115      	bne.n	8009e58 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	4b20      	ldr	r3, [pc, #128]	@ (8009eb4 <HAL_TIM_Base_Start_IT+0x158>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b06      	cmp	r3, #6
 8009e3c:	d015      	beq.n	8009e6a <HAL_TIM_Base_Start_IT+0x10e>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e44:	d011      	beq.n	8009e6a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0201 	orr.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e56:	e008      	b.n	8009e6a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e000      	b.n	8009e6c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	40012c00 	.word	0x40012c00
 8009e80:	50012c00 	.word	0x50012c00
 8009e84:	40000400 	.word	0x40000400
 8009e88:	50000400 	.word	0x50000400
 8009e8c:	40000800 	.word	0x40000800
 8009e90:	50000800 	.word	0x50000800
 8009e94:	40000c00 	.word	0x40000c00
 8009e98:	50000c00 	.word	0x50000c00
 8009e9c:	40013400 	.word	0x40013400
 8009ea0:	50013400 	.word	0x50013400
 8009ea4:	40001800 	.word	0x40001800
 8009ea8:	50001800 	.word	0x50001800
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	50014000 	.word	0x50014000
 8009eb4:	00010007 	.word	0x00010007

08009eb8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e049      	b.n	8009f5e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d106      	bne.n	8009ee4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f841 	bl	8009f66 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	f000 fe08 	bl	800ab0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e049      	b.n	800a020 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f841 	bl	800a028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f000 fda7 	bl	800ab0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d109      	bne.n	800a060 <HAL_TIM_PWM_Start+0x24>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b01      	cmp	r3, #1
 800a056:	bf14      	ite	ne
 800a058:	2301      	movne	r3, #1
 800a05a:	2300      	moveq	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	e03c      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b04      	cmp	r3, #4
 800a064:	d109      	bne.n	800a07a <HAL_TIM_PWM_Start+0x3e>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	bf14      	ite	ne
 800a072:	2301      	movne	r3, #1
 800a074:	2300      	moveq	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	e02f      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d109      	bne.n	800a094 <HAL_TIM_PWM_Start+0x58>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b01      	cmp	r3, #1
 800a08a:	bf14      	ite	ne
 800a08c:	2301      	movne	r3, #1
 800a08e:	2300      	moveq	r3, #0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	e022      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b0c      	cmp	r3, #12
 800a098:	d109      	bne.n	800a0ae <HAL_TIM_PWM_Start+0x72>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	bf14      	ite	ne
 800a0a6:	2301      	movne	r3, #1
 800a0a8:	2300      	moveq	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	e015      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d109      	bne.n	800a0c8 <HAL_TIM_PWM_Start+0x8c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	bf14      	ite	ne
 800a0c0:	2301      	movne	r3, #1
 800a0c2:	2300      	moveq	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	e008      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	bf14      	ite	ne
 800a0d4:	2301      	movne	r3, #1
 800a0d6:	2300      	moveq	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e0ce      	b.n	800a280 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIM_PWM_Start+0xb6>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0f0:	e023      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d104      	bne.n	800a102 <HAL_TIM_PWM_Start+0xc6>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a100:	e01b      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b08      	cmp	r3, #8
 800a106:	d104      	bne.n	800a112 <HAL_TIM_PWM_Start+0xd6>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a110:	e013      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b0c      	cmp	r3, #12
 800a116:	d104      	bne.n	800a122 <HAL_TIM_PWM_Start+0xe6>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a120:	e00b      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b10      	cmp	r3, #16
 800a126:	d104      	bne.n	800a132 <HAL_TIM_PWM_Start+0xf6>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a130:	e003      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2201      	movs	r2, #1
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f001 f99e 	bl	800b484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a4e      	ldr	r2, [pc, #312]	@ (800a288 <HAL_TIM_PWM_Start+0x24c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d018      	beq.n	800a184 <HAL_TIM_PWM_Start+0x148>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a4d      	ldr	r2, [pc, #308]	@ (800a28c <HAL_TIM_PWM_Start+0x250>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <HAL_TIM_PWM_Start+0x148>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a4b      	ldr	r2, [pc, #300]	@ (800a290 <HAL_TIM_PWM_Start+0x254>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00e      	beq.n	800a184 <HAL_TIM_PWM_Start+0x148>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4a      	ldr	r2, [pc, #296]	@ (800a294 <HAL_TIM_PWM_Start+0x258>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d009      	beq.n	800a184 <HAL_TIM_PWM_Start+0x148>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a48      	ldr	r2, [pc, #288]	@ (800a298 <HAL_TIM_PWM_Start+0x25c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d004      	beq.n	800a184 <HAL_TIM_PWM_Start+0x148>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a47      	ldr	r2, [pc, #284]	@ (800a29c <HAL_TIM_PWM_Start+0x260>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d101      	bne.n	800a188 <HAL_TIM_PWM_Start+0x14c>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <HAL_TIM_PWM_Start+0x14e>
 800a188:	2300      	movs	r3, #0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a19c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a39      	ldr	r2, [pc, #228]	@ (800a288 <HAL_TIM_PWM_Start+0x24c>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d04a      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a37      	ldr	r2, [pc, #220]	@ (800a28c <HAL_TIM_PWM_Start+0x250>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d045      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ba:	d040      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1c4:	d03b      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a35      	ldr	r2, [pc, #212]	@ (800a2a0 <HAL_TIM_PWM_Start+0x264>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d036      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a33      	ldr	r2, [pc, #204]	@ (800a2a4 <HAL_TIM_PWM_Start+0x268>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d031      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a32      	ldr	r2, [pc, #200]	@ (800a2a8 <HAL_TIM_PWM_Start+0x26c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d02c      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a30      	ldr	r2, [pc, #192]	@ (800a2ac <HAL_TIM_PWM_Start+0x270>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d027      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a2f      	ldr	r2, [pc, #188]	@ (800a2b0 <HAL_TIM_PWM_Start+0x274>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d022      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a2d      	ldr	r2, [pc, #180]	@ (800a2b4 <HAL_TIM_PWM_Start+0x278>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d01d      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a22      	ldr	r2, [pc, #136]	@ (800a290 <HAL_TIM_PWM_Start+0x254>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d018      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a20      	ldr	r2, [pc, #128]	@ (800a294 <HAL_TIM_PWM_Start+0x258>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d013      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a27      	ldr	r2, [pc, #156]	@ (800a2b8 <HAL_TIM_PWM_Start+0x27c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00e      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a25      	ldr	r2, [pc, #148]	@ (800a2bc <HAL_TIM_PWM_Start+0x280>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d009      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1a      	ldr	r2, [pc, #104]	@ (800a298 <HAL_TIM_PWM_Start+0x25c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d004      	beq.n	800a23e <HAL_TIM_PWM_Start+0x202>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a18      	ldr	r2, [pc, #96]	@ (800a29c <HAL_TIM_PWM_Start+0x260>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d115      	bne.n	800a26a <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c0 <HAL_TIM_PWM_Start+0x284>)
 800a246:	4013      	ands	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b06      	cmp	r3, #6
 800a24e:	d015      	beq.n	800a27c <HAL_TIM_PWM_Start+0x240>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a256:	d011      	beq.n	800a27c <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a268:	e008      	b.n	800a27c <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f042 0201 	orr.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	e000      	b.n	800a27e <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a27c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	40012c00 	.word	0x40012c00
 800a28c:	50012c00 	.word	0x50012c00
 800a290:	40013400 	.word	0x40013400
 800a294:	50013400 	.word	0x50013400
 800a298:	40014000 	.word	0x40014000
 800a29c:	50014000 	.word	0x50014000
 800a2a0:	40000400 	.word	0x40000400
 800a2a4:	50000400 	.word	0x50000400
 800a2a8:	40000800 	.word	0x40000800
 800a2ac:	50000800 	.word	0x50000800
 800a2b0:	40000c00 	.word	0x40000c00
 800a2b4:	50000c00 	.word	0x50000c00
 800a2b8:	40001800 	.word	0x40001800
 800a2bc:	50001800 	.word	0x50001800
 800a2c0:	00010007 	.word	0x00010007

0800a2c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d020      	beq.n	800a328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01b      	beq.n	800a328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f06f 0202 	mvn.w	r2, #2
 800a2f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fbde 	bl	800aad0 <HAL_TIM_IC_CaptureCallback>
 800a314:	e005      	b.n	800a322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fbd0 	bl	800aabc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fbe1 	bl	800aae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d020      	beq.n	800a374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01b      	beq.n	800a374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f06f 0204 	mvn.w	r2, #4
 800a344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2202      	movs	r2, #2
 800a34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fbb8 	bl	800aad0 <HAL_TIM_IC_CaptureCallback>
 800a360:	e005      	b.n	800a36e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fbaa 	bl	800aabc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fbbb 	bl	800aae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d020      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f003 0308 	and.w	r3, r3, #8
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01b      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f06f 0208 	mvn.w	r2, #8
 800a390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2204      	movs	r2, #4
 800a396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fb92 	bl	800aad0 <HAL_TIM_IC_CaptureCallback>
 800a3ac:	e005      	b.n	800a3ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fb84 	bl	800aabc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fb95 	bl	800aae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d020      	beq.n	800a40c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f003 0310 	and.w	r3, r3, #16
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01b      	beq.n	800a40c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f06f 0210 	mvn.w	r2, #16
 800a3dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb6c 	bl	800aad0 <HAL_TIM_IC_CaptureCallback>
 800a3f8:	e005      	b.n	800a406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fb5e 	bl	800aabc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fb6f 	bl	800aae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0201 	mvn.w	r2, #1
 800a428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7f7 fe14 	bl	8002058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a436:	2b00      	cmp	r3, #0
 800a438:	d104      	bne.n	800a444 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00c      	beq.n	800a45e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d007      	beq.n	800a45e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f9ad 	bl	800b7b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00c      	beq.n	800a482 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 f9a5 	bl	800b7cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a492:	2b00      	cmp	r3, #0
 800a494:	d007      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fb29 	bl	800aaf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00c      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f06f 0220 	mvn.w	r2, #32
 800a4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 f96d 	bl	800b7a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00c      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d007      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f979 	bl	800b7e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00c      	beq.n	800a512 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f971 	bl	800b7f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00c      	beq.n	800a536 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 f969 	bl	800b808 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00c      	beq.n	800a55a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f961 	bl	800b81c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a57e:	2302      	movs	r3, #2
 800a580:	e066      	b.n	800a650 <HAL_TIM_OC_ConfigChannel+0xec>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b14      	cmp	r3, #20
 800a58e:	d857      	bhi.n	800a640 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a590:	a201      	add	r2, pc, #4	@ (adr r2, 800a598 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5ed 	.word	0x0800a5ed
 800a59c:	0800a641 	.word	0x0800a641
 800a5a0:	0800a641 	.word	0x0800a641
 800a5a4:	0800a641 	.word	0x0800a641
 800a5a8:	0800a5fb 	.word	0x0800a5fb
 800a5ac:	0800a641 	.word	0x0800a641
 800a5b0:	0800a641 	.word	0x0800a641
 800a5b4:	0800a641 	.word	0x0800a641
 800a5b8:	0800a609 	.word	0x0800a609
 800a5bc:	0800a641 	.word	0x0800a641
 800a5c0:	0800a641 	.word	0x0800a641
 800a5c4:	0800a641 	.word	0x0800a641
 800a5c8:	0800a617 	.word	0x0800a617
 800a5cc:	0800a641 	.word	0x0800a641
 800a5d0:	0800a641 	.word	0x0800a641
 800a5d4:	0800a641 	.word	0x0800a641
 800a5d8:	0800a625 	.word	0x0800a625
 800a5dc:	0800a641 	.word	0x0800a641
 800a5e0:	0800a641 	.word	0x0800a641
 800a5e4:	0800a641 	.word	0x0800a641
 800a5e8:	0800a633 	.word	0x0800a633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fb74 	bl	800ace0 <TIM_OC1_SetConfig>
      break;
 800a5f8:	e025      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fc07 	bl	800ae14 <TIM_OC2_SetConfig>
      break;
 800a606:	e01e      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68b9      	ldr	r1, [r7, #8]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fc98 	bl	800af44 <TIM_OC3_SetConfig>
      break;
 800a614:	e017      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fd27 	bl	800b070 <TIM_OC4_SetConfig>
      break;
 800a622:	e010      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fdb8 	bl	800b1a0 <TIM_OC5_SetConfig>
      break;
 800a630:	e009      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fe1b 	bl	800b274 <TIM_OC6_SetConfig>
      break;
 800a63e:	e002      	b.n	800a646 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	75fb      	strb	r3, [r7, #23]
      break;
 800a644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a672:	2302      	movs	r3, #2
 800a674:	e0ff      	b.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b14      	cmp	r3, #20
 800a682:	f200 80f0 	bhi.w	800a866 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a686:	a201      	add	r2, pc, #4	@ (adr r2, 800a68c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a6e1 	.word	0x0800a6e1
 800a690:	0800a867 	.word	0x0800a867
 800a694:	0800a867 	.word	0x0800a867
 800a698:	0800a867 	.word	0x0800a867
 800a69c:	0800a721 	.word	0x0800a721
 800a6a0:	0800a867 	.word	0x0800a867
 800a6a4:	0800a867 	.word	0x0800a867
 800a6a8:	0800a867 	.word	0x0800a867
 800a6ac:	0800a763 	.word	0x0800a763
 800a6b0:	0800a867 	.word	0x0800a867
 800a6b4:	0800a867 	.word	0x0800a867
 800a6b8:	0800a867 	.word	0x0800a867
 800a6bc:	0800a7a3 	.word	0x0800a7a3
 800a6c0:	0800a867 	.word	0x0800a867
 800a6c4:	0800a867 	.word	0x0800a867
 800a6c8:	0800a867 	.word	0x0800a867
 800a6cc:	0800a7e5 	.word	0x0800a7e5
 800a6d0:	0800a867 	.word	0x0800a867
 800a6d4:	0800a867 	.word	0x0800a867
 800a6d8:	0800a867 	.word	0x0800a867
 800a6dc:	0800a825 	.word	0x0800a825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fafa 	bl	800ace0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0208 	orr.w	r2, r2, #8
 800a6fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0204 	bic.w	r2, r2, #4
 800a70a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6999      	ldr	r1, [r3, #24]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	691a      	ldr	r2, [r3, #16]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	619a      	str	r2, [r3, #24]
      break;
 800a71e:	e0a5      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fb74 	bl	800ae14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a73a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a74a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6999      	ldr	r1, [r3, #24]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	619a      	str	r2, [r3, #24]
      break;
 800a760:	e084      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fbeb 	bl	800af44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0208 	orr.w	r2, r2, #8
 800a77c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69da      	ldr	r2, [r3, #28]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0204 	bic.w	r2, r2, #4
 800a78c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69d9      	ldr	r1, [r3, #28]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	61da      	str	r2, [r3, #28]
      break;
 800a7a0:	e064      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fc61 	bl	800b070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69da      	ldr	r2, [r3, #28]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69d9      	ldr	r1, [r3, #28]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	021a      	lsls	r2, r3, #8
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	61da      	str	r2, [r3, #28]
      break;
 800a7e2:	e043      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fcd8 	bl	800b1a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0208 	orr.w	r2, r2, #8
 800a7fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0204 	bic.w	r2, r2, #4
 800a80e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a822:	e023      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68b9      	ldr	r1, [r7, #8]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fd22 	bl	800b274 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a83e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a84e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	021a      	lsls	r2, r3, #8
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a864:	e002      	b.n	800a86c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
      break;
 800a86a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop

0800a880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_TIM_ConfigClockSource+0x1c>
 800a898:	2302      	movs	r3, #2
 800a89a:	e0fe      	b.n	800aa9a <HAL_TIM_ConfigClockSource+0x21a>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a8ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8d8:	f000 80c9 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a8dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8e0:	f200 80ce 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a8e4:	4a6f      	ldr	r2, [pc, #444]	@ (800aaa4 <HAL_TIM_ConfigClockSource+0x224>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f000 80c1 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a8ec:	4a6d      	ldr	r2, [pc, #436]	@ (800aaa4 <HAL_TIM_ConfigClockSource+0x224>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f200 80c6 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a8f4:	4a6c      	ldr	r2, [pc, #432]	@ (800aaa8 <HAL_TIM_ConfigClockSource+0x228>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f000 80b9 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a8fc:	4a6a      	ldr	r2, [pc, #424]	@ (800aaa8 <HAL_TIM_ConfigClockSource+0x228>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f200 80be 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a904:	4a69      	ldr	r2, [pc, #420]	@ (800aaac <HAL_TIM_ConfigClockSource+0x22c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	f000 80b1 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a90c:	4a67      	ldr	r2, [pc, #412]	@ (800aaac <HAL_TIM_ConfigClockSource+0x22c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f200 80b6 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a914:	4a66      	ldr	r2, [pc, #408]	@ (800aab0 <HAL_TIM_ConfigClockSource+0x230>)
 800a916:	4293      	cmp	r3, r2
 800a918:	f000 80a9 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a91c:	4a64      	ldr	r2, [pc, #400]	@ (800aab0 <HAL_TIM_ConfigClockSource+0x230>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	f200 80ae 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a924:	4a63      	ldr	r2, [pc, #396]	@ (800aab4 <HAL_TIM_ConfigClockSource+0x234>)
 800a926:	4293      	cmp	r3, r2
 800a928:	f000 80a1 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a92c:	4a61      	ldr	r2, [pc, #388]	@ (800aab4 <HAL_TIM_ConfigClockSource+0x234>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	f200 80a6 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a934:	4a60      	ldr	r2, [pc, #384]	@ (800aab8 <HAL_TIM_ConfigClockSource+0x238>)
 800a936:	4293      	cmp	r3, r2
 800a938:	f000 8099 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a93c:	4a5e      	ldr	r2, [pc, #376]	@ (800aab8 <HAL_TIM_ConfigClockSource+0x238>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	f200 809e 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a948:	f000 8091 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a94c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a950:	f200 8096 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a958:	f000 8089 	beq.w	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a95c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a960:	f200 808e 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a968:	d03e      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0x168>
 800a96a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a96e:	f200 8087 	bhi.w	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a976:	f000 8086 	beq.w	800aa86 <HAL_TIM_ConfigClockSource+0x206>
 800a97a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97e:	d87f      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a980:	2b70      	cmp	r3, #112	@ 0x70
 800a982:	d01a      	beq.n	800a9ba <HAL_TIM_ConfigClockSource+0x13a>
 800a984:	2b70      	cmp	r3, #112	@ 0x70
 800a986:	d87b      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a988:	2b60      	cmp	r3, #96	@ 0x60
 800a98a:	d050      	beq.n	800aa2e <HAL_TIM_ConfigClockSource+0x1ae>
 800a98c:	2b60      	cmp	r3, #96	@ 0x60
 800a98e:	d877      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a990:	2b50      	cmp	r3, #80	@ 0x50
 800a992:	d03c      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x18e>
 800a994:	2b50      	cmp	r3, #80	@ 0x50
 800a996:	d873      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a998:	2b40      	cmp	r3, #64	@ 0x40
 800a99a:	d058      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x1ce>
 800a99c:	2b40      	cmp	r3, #64	@ 0x40
 800a99e:	d86f      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a9a0:	2b30      	cmp	r3, #48	@ 0x30
 800a9a2:	d064      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a9a4:	2b30      	cmp	r3, #48	@ 0x30
 800a9a6:	d86b      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d060      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d867      	bhi.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d05c      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a9b4:	2b10      	cmp	r3, #16
 800a9b6:	d05a      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x1ee>
 800a9b8:	e062      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9ca:	f000 fd3b 	bl	800b444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a9dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	609a      	str	r2, [r3, #8]
      break;
 800a9e6:	e04f      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9f8:	f000 fd24 	bl	800b444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa0a:	609a      	str	r2, [r3, #8]
      break;
 800aa0c:	e03c      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f000 fc96 	bl	800b34c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2150      	movs	r1, #80	@ 0x50
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fcef 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800aa2c:	e02c      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f000 fcb5 	bl	800b3aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2160      	movs	r1, #96	@ 0x60
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fcdf 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800aa4c:	e01c      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f000 fc76 	bl	800b34c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2140      	movs	r1, #64	@ 0x40
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fccf 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800aa6c:	e00c      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4619      	mov	r1, r3
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f000 fcc6 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800aa7e:	e003      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
      break;
 800aa84:	e000      	b.n	800aa88 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800aa86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	00100070 	.word	0x00100070
 800aaa8:	00100060 	.word	0x00100060
 800aaac:	00100050 	.word	0x00100050
 800aab0:	00100040 	.word	0x00100040
 800aab4:	00100030 	.word	0x00100030
 800aab8:	00100020 	.word	0x00100020

0800aabc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a62      	ldr	r2, [pc, #392]	@ (800aca8 <TIM_Base_SetConfig+0x19c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d02b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a61      	ldr	r2, [pc, #388]	@ (800acac <TIM_Base_SetConfig+0x1a0>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d027      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	d023      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab3a:	d01f      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a5c      	ldr	r2, [pc, #368]	@ (800acb0 <TIM_Base_SetConfig+0x1a4>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d01b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a5b      	ldr	r2, [pc, #364]	@ (800acb4 <TIM_Base_SetConfig+0x1a8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d017      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a5a      	ldr	r2, [pc, #360]	@ (800acb8 <TIM_Base_SetConfig+0x1ac>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d013      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a59      	ldr	r2, [pc, #356]	@ (800acbc <TIM_Base_SetConfig+0x1b0>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d00f      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a58      	ldr	r2, [pc, #352]	@ (800acc0 <TIM_Base_SetConfig+0x1b4>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d00b      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a57      	ldr	r2, [pc, #348]	@ (800acc4 <TIM_Base_SetConfig+0x1b8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d007      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a56      	ldr	r2, [pc, #344]	@ (800acc8 <TIM_Base_SetConfig+0x1bc>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d003      	beq.n	800ab7c <TIM_Base_SetConfig+0x70>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a55      	ldr	r2, [pc, #340]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d108      	bne.n	800ab8e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a45      	ldr	r2, [pc, #276]	@ (800aca8 <TIM_Base_SetConfig+0x19c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d03b      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a44      	ldr	r2, [pc, #272]	@ (800acac <TIM_Base_SetConfig+0x1a0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d037      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba4:	d033      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abac:	d02f      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a3f      	ldr	r2, [pc, #252]	@ (800acb0 <TIM_Base_SetConfig+0x1a4>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d02b      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a3e      	ldr	r2, [pc, #248]	@ (800acb4 <TIM_Base_SetConfig+0x1a8>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d027      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a3d      	ldr	r2, [pc, #244]	@ (800acb8 <TIM_Base_SetConfig+0x1ac>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d023      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a3c      	ldr	r2, [pc, #240]	@ (800acbc <TIM_Base_SetConfig+0x1b0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d01f      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a3b      	ldr	r2, [pc, #236]	@ (800acc0 <TIM_Base_SetConfig+0x1b4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d01b      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a3a      	ldr	r2, [pc, #232]	@ (800acc4 <TIM_Base_SetConfig+0x1b8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d017      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a39      	ldr	r2, [pc, #228]	@ (800acc8 <TIM_Base_SetConfig+0x1bc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d013      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a38      	ldr	r2, [pc, #224]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00f      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a37      	ldr	r2, [pc, #220]	@ (800acd0 <TIM_Base_SetConfig+0x1c4>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d00b      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a36      	ldr	r2, [pc, #216]	@ (800acd4 <TIM_Base_SetConfig+0x1c8>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d007      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a35      	ldr	r2, [pc, #212]	@ (800acd8 <TIM_Base_SetConfig+0x1cc>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d003      	beq.n	800ac0e <TIM_Base_SetConfig+0x102>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a34      	ldr	r2, [pc, #208]	@ (800acdc <TIM_Base_SetConfig+0x1d0>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d108      	bne.n	800ac20 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a18      	ldr	r2, [pc, #96]	@ (800aca8 <TIM_Base_SetConfig+0x19c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d013      	beq.n	800ac74 <TIM_Base_SetConfig+0x168>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a17      	ldr	r2, [pc, #92]	@ (800acac <TIM_Base_SetConfig+0x1a0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d00f      	beq.n	800ac74 <TIM_Base_SetConfig+0x168>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a1c      	ldr	r2, [pc, #112]	@ (800acc8 <TIM_Base_SetConfig+0x1bc>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00b      	beq.n	800ac74 <TIM_Base_SetConfig+0x168>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a1b      	ldr	r2, [pc, #108]	@ (800accc <TIM_Base_SetConfig+0x1c0>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d007      	beq.n	800ac74 <TIM_Base_SetConfig+0x168>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1c      	ldr	r2, [pc, #112]	@ (800acd8 <TIM_Base_SetConfig+0x1cc>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d003      	beq.n	800ac74 <TIM_Base_SetConfig+0x168>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1b      	ldr	r2, [pc, #108]	@ (800acdc <TIM_Base_SetConfig+0x1d0>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d103      	bne.n	800ac7c <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d105      	bne.n	800ac9a <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f023 0201 	bic.w	r2, r3, #1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	611a      	str	r2, [r3, #16]
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	40012c00 	.word	0x40012c00
 800acac:	50012c00 	.word	0x50012c00
 800acb0:	40000400 	.word	0x40000400
 800acb4:	50000400 	.word	0x50000400
 800acb8:	40000800 	.word	0x40000800
 800acbc:	50000800 	.word	0x50000800
 800acc0:	40000c00 	.word	0x40000c00
 800acc4:	50000c00 	.word	0x50000c00
 800acc8:	40013400 	.word	0x40013400
 800accc:	50013400 	.word	0x50013400
 800acd0:	40001800 	.word	0x40001800
 800acd4:	50001800 	.word	0x50001800
 800acd8:	40014000 	.word	0x40014000
 800acdc:	50014000 	.word	0x50014000

0800ace0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	f023 0201 	bic.w	r2, r3, #1
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f023 0302 	bic.w	r3, r3, #2
 800ad2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a30      	ldr	r2, [pc, #192]	@ (800adfc <TIM_OC1_SetConfig+0x11c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d013      	beq.n	800ad68 <TIM_OC1_SetConfig+0x88>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a2f      	ldr	r2, [pc, #188]	@ (800ae00 <TIM_OC1_SetConfig+0x120>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d00f      	beq.n	800ad68 <TIM_OC1_SetConfig+0x88>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a2e      	ldr	r2, [pc, #184]	@ (800ae04 <TIM_OC1_SetConfig+0x124>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d00b      	beq.n	800ad68 <TIM_OC1_SetConfig+0x88>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a2d      	ldr	r2, [pc, #180]	@ (800ae08 <TIM_OC1_SetConfig+0x128>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d007      	beq.n	800ad68 <TIM_OC1_SetConfig+0x88>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae0c <TIM_OC1_SetConfig+0x12c>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_OC1_SetConfig+0x88>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a2b      	ldr	r2, [pc, #172]	@ (800ae10 <TIM_OC1_SetConfig+0x130>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d10c      	bne.n	800ad82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f023 0308 	bic.w	r3, r3, #8
 800ad6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f023 0304 	bic.w	r3, r3, #4
 800ad80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a1d      	ldr	r2, [pc, #116]	@ (800adfc <TIM_OC1_SetConfig+0x11c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d013      	beq.n	800adb2 <TIM_OC1_SetConfig+0xd2>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a1c      	ldr	r2, [pc, #112]	@ (800ae00 <TIM_OC1_SetConfig+0x120>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00f      	beq.n	800adb2 <TIM_OC1_SetConfig+0xd2>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a1b      	ldr	r2, [pc, #108]	@ (800ae04 <TIM_OC1_SetConfig+0x124>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00b      	beq.n	800adb2 <TIM_OC1_SetConfig+0xd2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a1a      	ldr	r2, [pc, #104]	@ (800ae08 <TIM_OC1_SetConfig+0x128>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d007      	beq.n	800adb2 <TIM_OC1_SetConfig+0xd2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a19      	ldr	r2, [pc, #100]	@ (800ae0c <TIM_OC1_SetConfig+0x12c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d003      	beq.n	800adb2 <TIM_OC1_SetConfig+0xd2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a18      	ldr	r2, [pc, #96]	@ (800ae10 <TIM_OC1_SetConfig+0x130>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d111      	bne.n	800add6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4313      	orrs	r3, r2
 800add4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	621a      	str	r2, [r3, #32]
}
 800adf0:	bf00      	nop
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	40012c00 	.word	0x40012c00
 800ae00:	50012c00 	.word	0x50012c00
 800ae04:	40013400 	.word	0x40013400
 800ae08:	50013400 	.word	0x50013400
 800ae0c:	40014000 	.word	0x40014000
 800ae10:	50014000 	.word	0x50014000

0800ae14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	f023 0210 	bic.w	r2, r3, #16
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f023 0320 	bic.w	r3, r3, #32
 800ae62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a2e      	ldr	r2, [pc, #184]	@ (800af2c <TIM_OC2_SetConfig+0x118>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00b      	beq.n	800ae90 <TIM_OC2_SetConfig+0x7c>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a2d      	ldr	r2, [pc, #180]	@ (800af30 <TIM_OC2_SetConfig+0x11c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d007      	beq.n	800ae90 <TIM_OC2_SetConfig+0x7c>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a2c      	ldr	r2, [pc, #176]	@ (800af34 <TIM_OC2_SetConfig+0x120>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d003      	beq.n	800ae90 <TIM_OC2_SetConfig+0x7c>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a2b      	ldr	r2, [pc, #172]	@ (800af38 <TIM_OC2_SetConfig+0x124>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d10d      	bne.n	800aeac <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a1f      	ldr	r2, [pc, #124]	@ (800af2c <TIM_OC2_SetConfig+0x118>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d013      	beq.n	800aedc <TIM_OC2_SetConfig+0xc8>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a1e      	ldr	r2, [pc, #120]	@ (800af30 <TIM_OC2_SetConfig+0x11c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00f      	beq.n	800aedc <TIM_OC2_SetConfig+0xc8>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a1d      	ldr	r2, [pc, #116]	@ (800af34 <TIM_OC2_SetConfig+0x120>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_OC2_SetConfig+0xc8>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a1c      	ldr	r2, [pc, #112]	@ (800af38 <TIM_OC2_SetConfig+0x124>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_OC2_SetConfig+0xc8>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a1b      	ldr	r2, [pc, #108]	@ (800af3c <TIM_OC2_SetConfig+0x128>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_OC2_SetConfig+0xc8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a1a      	ldr	r2, [pc, #104]	@ (800af40 <TIM_OC2_SetConfig+0x12c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d113      	bne.n	800af04 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aeea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4313      	orrs	r3, r2
 800af02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	bf00      	nop
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	40012c00 	.word	0x40012c00
 800af30:	50012c00 	.word	0x50012c00
 800af34:	40013400 	.word	0x40013400
 800af38:	50013400 	.word	0x50013400
 800af3c:	40014000 	.word	0x40014000
 800af40:	50014000 	.word	0x50014000

0800af44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	4313      	orrs	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a2d      	ldr	r2, [pc, #180]	@ (800b058 <TIM_OC3_SetConfig+0x114>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d00b      	beq.n	800afbe <TIM_OC3_SetConfig+0x7a>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a2c      	ldr	r2, [pc, #176]	@ (800b05c <TIM_OC3_SetConfig+0x118>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d007      	beq.n	800afbe <TIM_OC3_SetConfig+0x7a>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a2b      	ldr	r2, [pc, #172]	@ (800b060 <TIM_OC3_SetConfig+0x11c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d003      	beq.n	800afbe <TIM_OC3_SetConfig+0x7a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a2a      	ldr	r2, [pc, #168]	@ (800b064 <TIM_OC3_SetConfig+0x120>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d10d      	bne.n	800afda <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4313      	orrs	r3, r2
 800afd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a1e      	ldr	r2, [pc, #120]	@ (800b058 <TIM_OC3_SetConfig+0x114>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d013      	beq.n	800b00a <TIM_OC3_SetConfig+0xc6>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a1d      	ldr	r2, [pc, #116]	@ (800b05c <TIM_OC3_SetConfig+0x118>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00f      	beq.n	800b00a <TIM_OC3_SetConfig+0xc6>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a1c      	ldr	r2, [pc, #112]	@ (800b060 <TIM_OC3_SetConfig+0x11c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d00b      	beq.n	800b00a <TIM_OC3_SetConfig+0xc6>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a1b      	ldr	r2, [pc, #108]	@ (800b064 <TIM_OC3_SetConfig+0x120>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d007      	beq.n	800b00a <TIM_OC3_SetConfig+0xc6>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a1a      	ldr	r2, [pc, #104]	@ (800b068 <TIM_OC3_SetConfig+0x124>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d003      	beq.n	800b00a <TIM_OC3_SetConfig+0xc6>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a19      	ldr	r2, [pc, #100]	@ (800b06c <TIM_OC3_SetConfig+0x128>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d113      	bne.n	800b032 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	621a      	str	r2, [r3, #32]
}
 800b04c:	bf00      	nop
 800b04e:	371c      	adds	r7, #28
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	40012c00 	.word	0x40012c00
 800b05c:	50012c00 	.word	0x50012c00
 800b060:	40013400 	.word	0x40013400
 800b064:	50013400 	.word	0x50013400
 800b068:	40014000 	.word	0x40014000
 800b06c:	50014000 	.word	0x50014000

0800b070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b070:	b480      	push	{r7}
 800b072:	b087      	sub	sp, #28
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b09e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	021b      	lsls	r3, r3, #8
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	031b      	lsls	r3, r3, #12
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b188 <TIM_OC4_SetConfig+0x118>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d00b      	beq.n	800b0ec <TIM_OC4_SetConfig+0x7c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a2d      	ldr	r2, [pc, #180]	@ (800b18c <TIM_OC4_SetConfig+0x11c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d007      	beq.n	800b0ec <TIM_OC4_SetConfig+0x7c>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a2c      	ldr	r2, [pc, #176]	@ (800b190 <TIM_OC4_SetConfig+0x120>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d003      	beq.n	800b0ec <TIM_OC4_SetConfig+0x7c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a2b      	ldr	r2, [pc, #172]	@ (800b194 <TIM_OC4_SetConfig+0x124>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d10d      	bne.n	800b108 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	031b      	lsls	r3, r3, #12
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a1f      	ldr	r2, [pc, #124]	@ (800b188 <TIM_OC4_SetConfig+0x118>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d013      	beq.n	800b138 <TIM_OC4_SetConfig+0xc8>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a1e      	ldr	r2, [pc, #120]	@ (800b18c <TIM_OC4_SetConfig+0x11c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00f      	beq.n	800b138 <TIM_OC4_SetConfig+0xc8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a1d      	ldr	r2, [pc, #116]	@ (800b190 <TIM_OC4_SetConfig+0x120>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00b      	beq.n	800b138 <TIM_OC4_SetConfig+0xc8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a1c      	ldr	r2, [pc, #112]	@ (800b194 <TIM_OC4_SetConfig+0x124>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d007      	beq.n	800b138 <TIM_OC4_SetConfig+0xc8>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a1b      	ldr	r2, [pc, #108]	@ (800b198 <TIM_OC4_SetConfig+0x128>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_OC4_SetConfig+0xc8>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a1a      	ldr	r2, [pc, #104]	@ (800b19c <TIM_OC4_SetConfig+0x12c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d113      	bne.n	800b160 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b13e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b146:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	019b      	lsls	r3, r3, #6
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	019b      	lsls	r3, r3, #6
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	621a      	str	r2, [r3, #32]
}
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	40012c00 	.word	0x40012c00
 800b18c:	50012c00 	.word	0x50012c00
 800b190:	40013400 	.word	0x40013400
 800b194:	50013400 	.word	0x50013400
 800b198:	40014000 	.word	0x40014000
 800b19c:	50014000 	.word	0x50014000

0800b1a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b1e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	041b      	lsls	r3, r3, #16
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a19      	ldr	r2, [pc, #100]	@ (800b25c <TIM_OC5_SetConfig+0xbc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d013      	beq.n	800b222 <TIM_OC5_SetConfig+0x82>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a18      	ldr	r2, [pc, #96]	@ (800b260 <TIM_OC5_SetConfig+0xc0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00f      	beq.n	800b222 <TIM_OC5_SetConfig+0x82>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a17      	ldr	r2, [pc, #92]	@ (800b264 <TIM_OC5_SetConfig+0xc4>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00b      	beq.n	800b222 <TIM_OC5_SetConfig+0x82>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a16      	ldr	r2, [pc, #88]	@ (800b268 <TIM_OC5_SetConfig+0xc8>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d007      	beq.n	800b222 <TIM_OC5_SetConfig+0x82>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a15      	ldr	r2, [pc, #84]	@ (800b26c <TIM_OC5_SetConfig+0xcc>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d003      	beq.n	800b222 <TIM_OC5_SetConfig+0x82>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a14      	ldr	r2, [pc, #80]	@ (800b270 <TIM_OC5_SetConfig+0xd0>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d109      	bne.n	800b236 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	621a      	str	r2, [r3, #32]
}
 800b250:	bf00      	nop
 800b252:	371c      	adds	r7, #28
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	40012c00 	.word	0x40012c00
 800b260:	50012c00 	.word	0x50012c00
 800b264:	40013400 	.word	0x40013400
 800b268:	50013400 	.word	0x50013400
 800b26c:	40014000 	.word	0x40014000
 800b270:	50014000 	.word	0x50014000

0800b274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	051b      	lsls	r3, r3, #20
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a1a      	ldr	r2, [pc, #104]	@ (800b334 <TIM_OC6_SetConfig+0xc0>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d013      	beq.n	800b2f8 <TIM_OC6_SetConfig+0x84>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a19      	ldr	r2, [pc, #100]	@ (800b338 <TIM_OC6_SetConfig+0xc4>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d00f      	beq.n	800b2f8 <TIM_OC6_SetConfig+0x84>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a18      	ldr	r2, [pc, #96]	@ (800b33c <TIM_OC6_SetConfig+0xc8>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <TIM_OC6_SetConfig+0x84>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a17      	ldr	r2, [pc, #92]	@ (800b340 <TIM_OC6_SetConfig+0xcc>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_OC6_SetConfig+0x84>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a16      	ldr	r2, [pc, #88]	@ (800b344 <TIM_OC6_SetConfig+0xd0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_OC6_SetConfig+0x84>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a15      	ldr	r2, [pc, #84]	@ (800b348 <TIM_OC6_SetConfig+0xd4>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d109      	bne.n	800b30c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	029b      	lsls	r3, r3, #10
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	621a      	str	r2, [r3, #32]
}
 800b326:	bf00      	nop
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	40012c00 	.word	0x40012c00
 800b338:	50012c00 	.word	0x50012c00
 800b33c:	40013400 	.word	0x40013400
 800b340:	50013400 	.word	0x50013400
 800b344:	40014000 	.word	0x40014000
 800b348:	50014000 	.word	0x50014000

0800b34c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f023 0201 	bic.w	r2, r3, #1
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f023 030a 	bic.w	r3, r3, #10
 800b388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	621a      	str	r2, [r3, #32]
}
 800b39e:	bf00      	nop
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b087      	sub	sp, #28
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a1b      	ldr	r3, [r3, #32]
 800b3c0:	f023 0210 	bic.w	r2, r3, #16
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	031b      	lsls	r3, r3, #12
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	621a      	str	r2, [r3, #32]
}
 800b3fe:	bf00      	nop
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	f043 0307 	orr.w	r3, r3, #7
 800b430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	609a      	str	r2, [r3, #8]
}
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b45e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	021a      	lsls	r2, r3, #8
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	431a      	orrs	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	609a      	str	r2, [r3, #8]
}
 800b478:	bf00      	nop
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	f003 031f 	and.w	r3, r3, #31
 800b496:	2201      	movs	r2, #1
 800b498:	fa02 f303 	lsl.w	r3, r2, r3
 800b49c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6a1a      	ldr	r2, [r3, #32]
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	43db      	mvns	r3, r3
 800b4a6:	401a      	ands	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6a1a      	ldr	r2, [r3, #32]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f003 031f 	and.w	r3, r3, #31
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e0a1      	b.n	800b62c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a4a      	ldr	r2, [pc, #296]	@ (800b638 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00e      	beq.n	800b530 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a49      	ldr	r2, [pc, #292]	@ (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d009      	beq.n	800b530 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a47      	ldr	r2, [pc, #284]	@ (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d004      	beq.n	800b530 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a46      	ldr	r2, [pc, #280]	@ (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d108      	bne.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b54c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a34      	ldr	r2, [pc, #208]	@ (800b638 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d04a      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a33      	ldr	r2, [pc, #204]	@ (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d045      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b57c:	d040      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b586:	d03b      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a2e      	ldr	r2, [pc, #184]	@ (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d036      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a2d      	ldr	r2, [pc, #180]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d031      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d02c      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b654 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d027      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a28      	ldr	r2, [pc, #160]	@ (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d022      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a27      	ldr	r2, [pc, #156]	@ (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d01d      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d018      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a1c      	ldr	r2, [pc, #112]	@ (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d013      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a20      	ldr	r2, [pc, #128]	@ (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00e      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d009      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b668 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d004      	beq.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a1c      	ldr	r2, [pc, #112]	@ (800b66c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d10c      	bne.n	800b61a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	4313      	orrs	r3, r2
 800b610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	40012c00 	.word	0x40012c00
 800b63c:	50012c00 	.word	0x50012c00
 800b640:	40013400 	.word	0x40013400
 800b644:	50013400 	.word	0x50013400
 800b648:	40000400 	.word	0x40000400
 800b64c:	50000400 	.word	0x50000400
 800b650:	40000800 	.word	0x40000800
 800b654:	50000800 	.word	0x50000800
 800b658:	40000c00 	.word	0x40000c00
 800b65c:	50000c00 	.word	0x50000c00
 800b660:	40001800 	.word	0x40001800
 800b664:	50001800 	.word	0x50001800
 800b668:	40014000 	.word	0x40014000
 800b66c:	50014000 	.word	0x50014000

0800b670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b688:	2302      	movs	r3, #2
 800b68a:	e07d      	b.n	800b788 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	041b      	lsls	r3, r3, #16
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	4313      	orrs	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a1e      	ldr	r2, [pc, #120]	@ (800b794 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00e      	beq.n	800b73c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a1d      	ldr	r2, [pc, #116]	@ (800b798 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d009      	beq.n	800b73c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a1b      	ldr	r2, [pc, #108]	@ (800b79c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d004      	beq.n	800b73c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d11c      	bne.n	800b776 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b746:	051b      	lsls	r3, r3, #20
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	40012c00 	.word	0x40012c00
 800b798:	50012c00 	.word	0x50012c00
 800b79c:	40013400 	.word	0x40013400
 800b7a0:	50013400 	.word	0x50013400

0800b7a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e042      	b.n	800b8c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7f7 f93b 	bl	8002ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2224      	movs	r2, #36	@ 0x24
 800b85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f022 0201 	bic.w	r2, r2, #1
 800b870:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fdde 	bl	800c43c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fc2d 	bl	800c0e0 <UART_SetConfig>
 800b886:	4603      	mov	r3, r0
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e01b      	b.n	800b8c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b89e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f042 0201 	orr.w	r2, r2, #1
 800b8be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fe5d 	bl	800c580 <UART_CheckIdleState>
 800b8c6:	4603      	mov	r3, r0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08a      	sub	sp, #40	@ 0x28
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	f040 808b 	bne.w	800ba02 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <HAL_UART_Transmit+0x28>
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e083      	b.n	800ba04 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b906:	2b80      	cmp	r3, #128	@ 0x80
 800b908:	d107      	bne.n	800b91a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b918:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2221      	movs	r2, #33	@ 0x21
 800b926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b92a:	f7f7 fab5 	bl	8002e98 <HAL_GetTick>
 800b92e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	88fa      	ldrh	r2, [r7, #6]
 800b934:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	88fa      	ldrh	r2, [r7, #6]
 800b93c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b948:	d108      	bne.n	800b95c <HAL_UART_Transmit+0x8c>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d104      	bne.n	800b95c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	e003      	b.n	800b964 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b960:	2300      	movs	r3, #0
 800b962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b964:	e030      	b.n	800b9c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2200      	movs	r2, #0
 800b96e:	2180      	movs	r1, #128	@ 0x80
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 feaf 	bl	800c6d4 <UART_WaitOnFlagUntilTimeout>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e03d      	b.n	800ba04 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b99c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	e007      	b.n	800b9b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	781a      	ldrb	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1c8      	bne.n	800b966 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2140      	movs	r1, #64	@ 0x40
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fe78 	bl	800c6d4 <UART_WaitOnFlagUntilTimeout>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e006      	b.n	800ba04 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e000      	b.n	800ba04 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ba02:	2302      	movs	r3, #2
  }
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3720      	adds	r7, #32
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08a      	sub	sp, #40	@ 0x28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	4613      	mov	r3, r2
 800ba18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	d13c      	bne.n	800ba9e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <HAL_UART_Receive_DMA+0x24>
 800ba2a:	88fb      	ldrh	r3, [r7, #6]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	e035      	b.n	800baa0 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1a      	ldr	r2, [pc, #104]	@ (800baa8 <HAL_UART_Receive_DMA+0x9c>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d024      	beq.n	800ba8e <HAL_UART_Receive_DMA+0x82>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a18      	ldr	r2, [pc, #96]	@ (800baac <HAL_UART_Receive_DMA+0xa0>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d01f      	beq.n	800ba8e <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d018      	beq.n	800ba8e <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	e853 3f00 	ldrex	r3, [r3]
 800ba68:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	623b      	str	r3, [r7, #32]
 800ba7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	69f9      	ldr	r1, [r7, #28]
 800ba80:	6a3a      	ldr	r2, [r7, #32]
 800ba82:	e841 2300 	strex	r3, r2, [r1]
 800ba86:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1e6      	bne.n	800ba5c <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ba8e:	88fb      	ldrh	r3, [r7, #6]
 800ba90:	461a      	mov	r2, r3
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fe8b 	bl	800c7b0 <UART_Start_Receive_DMA>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	e000      	b.n	800baa0 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba9e:	2302      	movs	r3, #2
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3728      	adds	r7, #40	@ 0x28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	44002400 	.word	0x44002400
 800baac:	54002400 	.word	0x54002400

0800bab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b0ae      	sub	sp, #184	@ 0xb8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bada:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bade:	4013      	ands	r3, r2
 800bae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800bae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d11b      	bne.n	800bb24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d015      	beq.n	800bb24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800baf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bafc:	f003 0320 	and.w	r3, r3, #32
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 82ac 	beq.w	800c072 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
      }
      return;
 800bb22:	e2a6      	b.n	800c072 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 80fd 	beq.w	800bd28 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bb32:	4b7a      	ldr	r3, [pc, #488]	@ (800bd1c <HAL_UART_IRQHandler+0x26c>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bb3e:	4b78      	ldr	r3, [pc, #480]	@ (800bd20 <HAL_UART_IRQHandler+0x270>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 80f0 	beq.w	800bd28 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d011      	beq.n	800bb78 <HAL_UART_IRQHandler+0xc8>
 800bb54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00b      	beq.n	800bb78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2201      	movs	r2, #1
 800bb66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb6e:	f043 0201 	orr.w	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d011      	beq.n	800bba8 <HAL_UART_IRQHandler+0xf8>
 800bb84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00b      	beq.n	800bba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2202      	movs	r2, #2
 800bb96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb9e:	f043 0204 	orr.w	r2, r3, #4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d011      	beq.n	800bbd8 <HAL_UART_IRQHandler+0x128>
 800bbb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00b      	beq.n	800bbd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2204      	movs	r2, #4
 800bbc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbce:	f043 0202 	orr.w	r2, r3, #2
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bbd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbdc:	f003 0308 	and.w	r3, r3, #8
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d017      	beq.n	800bc14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d105      	bne.n	800bbfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bbf4:	4b49      	ldr	r3, [pc, #292]	@ (800bd1c <HAL_UART_IRQHandler+0x26c>)
 800bbf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2208      	movs	r2, #8
 800bc02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc0a:	f043 0208 	orr.w	r2, r3, #8
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d012      	beq.n	800bc46 <HAL_UART_IRQHandler+0x196>
 800bc20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00c      	beq.n	800bc46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc3c:	f043 0220 	orr.w	r2, r3, #32
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8212 	beq.w	800c076 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d013      	beq.n	800bc86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc62:	f003 0320 	and.w	r3, r3, #32
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d105      	bne.n	800bc76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc9a:	2b40      	cmp	r3, #64	@ 0x40
 800bc9c:	d005      	beq.n	800bcaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bca2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d02e      	beq.n	800bd08 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 feb9 	bl	800ca22 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcba:	2b40      	cmp	r3, #64	@ 0x40
 800bcbc:	d120      	bne.n	800bd00 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d017      	beq.n	800bcf8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcce:	4a15      	ldr	r2, [pc, #84]	@ (800bd24 <HAL_UART_IRQHandler+0x274>)
 800bcd0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f7 fca5 	bl	8003628 <HAL_DMA_Abort_IT>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d019      	beq.n	800bd18 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf6:	e00f      	b.n	800bd18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f9db 	bl	800c0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcfe:	e00b      	b.n	800bd18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f9d7 	bl	800c0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd06:	e007      	b.n	800bd18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9d3 	bl	800c0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bd16:	e1ae      	b.n	800c076 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd18:	bf00      	nop
    return;
 800bd1a:	e1ac      	b.n	800c076 <HAL_UART_IRQHandler+0x5c6>
 800bd1c:	10000001 	.word	0x10000001
 800bd20:	04000120 	.word	0x04000120
 800bd24:	0800cc9f 	.word	0x0800cc9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	f040 8142 	bne.w	800bfb6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd36:	f003 0310 	and.w	r3, r3, #16
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 813b 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd44:	f003 0310 	and.w	r3, r3, #16
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8134 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2210      	movs	r2, #16
 800bd54:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd60:	2b40      	cmp	r3, #64	@ 0x40
 800bd62:	f040 80aa 	bne.w	800beba <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd70:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800bd74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 8084 	beq.w	800be86 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d27c      	bcs.n	800be86 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bd92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd9e:	2b81      	cmp	r3, #129	@ 0x81
 800bda0:	d060      	beq.n	800be64 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bdb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bdc8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bdcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bdd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e2      	bne.n	800bda2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3308      	adds	r3, #8
 800bde2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bde6:	e853 3f00 	ldrex	r3, [r3]
 800bdea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bdec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdee:	f023 0301 	bic.w	r3, r3, #1
 800bdf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800be00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800be02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800be06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800be08:	e841 2300 	strex	r3, r2, [r1]
 800be0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800be0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e3      	bne.n	800bddc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800be30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be32:	f023 0310 	bic.w	r3, r3, #16
 800be36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800be52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e4      	bne.n	800be22 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f7 fb66 	bl	8003530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be76:	b29b      	uxth	r3, r3
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f922 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800be84:	e0f9      	b.n	800c07a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be8c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800be90:	429a      	cmp	r2, r3
 800be92:	f040 80f2 	bne.w	800c07a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be9e:	2b81      	cmp	r3, #129	@ 0x81
 800bea0:	f040 80eb 	bne.w	800c07a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f908 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
      return;
 800beb8:	e0df      	b.n	800c07a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80d1 	beq.w	800c07e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800bedc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 80cc 	beq.w	800c07e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beee:	e853 3f00 	ldrex	r3, [r3]
 800bef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800befa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf08:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e4      	bne.n	800bee6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3308      	adds	r3, #8
 800bf22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	623b      	str	r3, [r7, #32]
   return(result);
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf32:	f023 0301 	bic.w	r3, r3, #1
 800bf36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bf44:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e1      	bne.n	800bf1c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	e853 3f00 	ldrex	r3, [r3]
 800bf78:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f023 0310 	bic.w	r3, r3, #16
 800bf80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	69b9      	ldr	r1, [r7, #24]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e4      	bne.n	800bf6c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfa8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f88a 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfb4:	e063      	b.n	800c07e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <HAL_UART_IRQHandler+0x530>
 800bfc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d008      	beq.n	800bfe0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bfd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fe9d 	bl	800cd18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfde:	e051      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bfe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d014      	beq.n	800c016 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bfec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d105      	bne.n	800c004 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d008      	beq.n	800c016 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d03a      	beq.n	800c082 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	4798      	blx	r3
    }
    return;
 800c014:	e035      	b.n	800c082 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <HAL_UART_IRQHandler+0x586>
 800c022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d003      	beq.n	800c036 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fe47 	bl	800ccc2 <UART_EndTransmit_IT>
    return;
 800c034:	e026      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c03a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <HAL_UART_IRQHandler+0x5a6>
 800c042:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c046:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fe76 	bl	800cd40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c054:	e016      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c05a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d010      	beq.n	800c084 <HAL_UART_IRQHandler+0x5d4>
 800c062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c066:	2b00      	cmp	r3, #0
 800c068:	da0c      	bge.n	800c084 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fe5e 	bl	800cd2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c070:	e008      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c072:	bf00      	nop
 800c074:	e006      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
    return;
 800c076:	bf00      	nop
 800c078:	e004      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c07a:	bf00      	nop
 800c07c:	e002      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c07e:	bf00      	nop
 800c080:	e000      	b.n	800c084 <HAL_UART_IRQHandler+0x5d4>
    return;
 800c082:	bf00      	nop
  }
}
 800c084:	37b8      	adds	r7, #184	@ 0xb8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop

0800c08c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e4:	b094      	sub	sp, #80	@ 0x50
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	4b83      	ldr	r3, [pc, #524]	@ (800c304 <UART_SetConfig+0x224>)
 800c0f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	431a      	orrs	r2, r3
 800c102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	431a      	orrs	r2, r3
 800c108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	497c      	ldr	r1, [pc, #496]	@ (800c308 <UART_SetConfig+0x228>)
 800c118:	4019      	ands	r1, r3
 800c11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c120:	430b      	orrs	r3, r1
 800c122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	68d9      	ldr	r1, [r3, #12]
 800c132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	ea40 0301 	orr.w	r3, r0, r1
 800c13a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	4b6f      	ldr	r3, [pc, #444]	@ (800c304 <UART_SetConfig+0x224>)
 800c148:	429a      	cmp	r2, r3
 800c14a:	d009      	beq.n	800c160 <UART_SetConfig+0x80>
 800c14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	4b6e      	ldr	r3, [pc, #440]	@ (800c30c <UART_SetConfig+0x22c>)
 800c152:	429a      	cmp	r2, r3
 800c154:	d004      	beq.n	800c160 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c158:	6a1a      	ldr	r2, [r3, #32]
 800c15a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c15c:	4313      	orrs	r3, r2
 800c15e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c16a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c174:	430b      	orrs	r3, r1
 800c176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17e:	f023 000f 	bic.w	r0, r3, #15
 800c182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c184:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	ea40 0301 	orr.w	r3, r0, r1
 800c18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	4b5e      	ldr	r3, [pc, #376]	@ (800c310 <UART_SetConfig+0x230>)
 800c196:	429a      	cmp	r2, r3
 800c198:	d102      	bne.n	800c1a0 <UART_SetConfig+0xc0>
 800c19a:	2301      	movs	r3, #1
 800c19c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c19e:	e032      	b.n	800c206 <UART_SetConfig+0x126>
 800c1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c314 <UART_SetConfig+0x234>)
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d102      	bne.n	800c1b0 <UART_SetConfig+0xd0>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ae:	e02a      	b.n	800c206 <UART_SetConfig+0x126>
 800c1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	4b58      	ldr	r3, [pc, #352]	@ (800c318 <UART_SetConfig+0x238>)
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d102      	bne.n	800c1c0 <UART_SetConfig+0xe0>
 800c1ba:	2304      	movs	r3, #4
 800c1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1be:	e022      	b.n	800c206 <UART_SetConfig+0x126>
 800c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	4b55      	ldr	r3, [pc, #340]	@ (800c31c <UART_SetConfig+0x23c>)
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d102      	bne.n	800c1d0 <UART_SetConfig+0xf0>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ce:	e01a      	b.n	800c206 <UART_SetConfig+0x126>
 800c1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4b52      	ldr	r3, [pc, #328]	@ (800c320 <UART_SetConfig+0x240>)
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d102      	bne.n	800c1e0 <UART_SetConfig+0x100>
 800c1da:	2310      	movs	r3, #16
 800c1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1de:	e012      	b.n	800c206 <UART_SetConfig+0x126>
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	4b4f      	ldr	r3, [pc, #316]	@ (800c324 <UART_SetConfig+0x244>)
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d102      	bne.n	800c1f0 <UART_SetConfig+0x110>
 800c1ea:	2320      	movs	r3, #32
 800c1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ee:	e00a      	b.n	800c206 <UART_SetConfig+0x126>
 800c1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	4b43      	ldr	r3, [pc, #268]	@ (800c304 <UART_SetConfig+0x224>)
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d103      	bne.n	800c202 <UART_SetConfig+0x122>
 800c1fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c200:	e001      	b.n	800c206 <UART_SetConfig+0x126>
 800c202:	2300      	movs	r3, #0
 800c204:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b3e      	ldr	r3, [pc, #248]	@ (800c304 <UART_SetConfig+0x224>)
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d005      	beq.n	800c21c <UART_SetConfig+0x13c>
 800c210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	4b3d      	ldr	r3, [pc, #244]	@ (800c30c <UART_SetConfig+0x22c>)
 800c216:	429a      	cmp	r2, r3
 800c218:	f040 8088 	bne.w	800c32c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c21e:	2200      	movs	r2, #0
 800c220:	623b      	str	r3, [r7, #32]
 800c222:	627a      	str	r2, [r7, #36]	@ 0x24
 800c224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c228:	f7fc f8c0 	bl	80083ac <HAL_RCCEx_GetPeriphCLKFreq>
 800c22c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80eb 	beq.w	800c40c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23a:	4a3b      	ldr	r2, [pc, #236]	@ (800c328 <UART_SetConfig+0x248>)
 800c23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c240:	461a      	mov	r2, r3
 800c242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c244:	fbb3 f3f2 	udiv	r3, r3, r2
 800c248:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4413      	add	r3, r2
 800c254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c256:	429a      	cmp	r2, r3
 800c258:	d305      	bcc.n	800c266 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c262:	429a      	cmp	r2, r3
 800c264:	d903      	bls.n	800c26e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c26c:	e048      	b.n	800c300 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c270:	2200      	movs	r2, #0
 800c272:	61bb      	str	r3, [r7, #24]
 800c274:	61fa      	str	r2, [r7, #28]
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27a:	4a2b      	ldr	r2, [pc, #172]	@ (800c328 <UART_SetConfig+0x248>)
 800c27c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c280:	b29b      	uxth	r3, r3
 800c282:	2200      	movs	r2, #0
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	617a      	str	r2, [r7, #20]
 800c288:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c28c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c290:	f7f4 fc48 	bl	8000b24 <__aeabi_uldivmod>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4610      	mov	r0, r2
 800c29a:	4619      	mov	r1, r3
 800c29c:	f04f 0200 	mov.w	r2, #0
 800c2a0:	f04f 0300 	mov.w	r3, #0
 800c2a4:	020b      	lsls	r3, r1, #8
 800c2a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2aa:	0202      	lsls	r2, r0, #8
 800c2ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2ae:	6849      	ldr	r1, [r1, #4]
 800c2b0:	0849      	lsrs	r1, r1, #1
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	eb12 0804 	adds.w	r8, r2, r4
 800c2bc:	eb43 0905 	adc.w	r9, r3, r5
 800c2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	60bb      	str	r3, [r7, #8]
 800c2c8:	60fa      	str	r2, [r7, #12]
 800c2ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	f7f4 fc27 	bl	8000b24 <__aeabi_uldivmod>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4613      	mov	r3, r2
 800c2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2e4:	d308      	bcc.n	800c2f8 <UART_SetConfig+0x218>
 800c2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2ec:	d204      	bcs.n	800c2f8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c2f4:	60da      	str	r2, [r3, #12]
 800c2f6:	e003      	b.n	800c300 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c2fe:	e085      	b.n	800c40c <UART_SetConfig+0x32c>
 800c300:	e084      	b.n	800c40c <UART_SetConfig+0x32c>
 800c302:	bf00      	nop
 800c304:	44002400 	.word	0x44002400
 800c308:	cfff69f3 	.word	0xcfff69f3
 800c30c:	54002400 	.word	0x54002400
 800c310:	40013800 	.word	0x40013800
 800c314:	40004400 	.word	0x40004400
 800c318:	40004800 	.word	0x40004800
 800c31c:	40004c00 	.word	0x40004c00
 800c320:	40005000 	.word	0x40005000
 800c324:	40006400 	.word	0x40006400
 800c328:	0800e100 	.word	0x0800e100
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c334:	d13c      	bne.n	800c3b0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c338:	2200      	movs	r2, #0
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	607a      	str	r2, [r7, #4]
 800c33e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c342:	f7fc f833 	bl	80083ac <HAL_RCCEx_GetPeriphCLKFreq>
 800c346:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d05e      	beq.n	800c40c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c352:	4a39      	ldr	r2, [pc, #228]	@ (800c438 <UART_SetConfig+0x358>)
 800c354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c358:	461a      	mov	r2, r3
 800c35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c360:	005a      	lsls	r2, r3, #1
 800c362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	085b      	lsrs	r3, r3, #1
 800c368:	441a      	add	r2, r3
 800c36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c372:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c376:	2b0f      	cmp	r3, #15
 800c378:	d916      	bls.n	800c3a8 <UART_SetConfig+0x2c8>
 800c37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c380:	d212      	bcs.n	800c3a8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c384:	b29b      	uxth	r3, r3
 800c386:	f023 030f 	bic.w	r3, r3, #15
 800c38a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c38e:	085b      	lsrs	r3, r3, #1
 800c390:	b29b      	uxth	r3, r3
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	b29a      	uxth	r2, r3
 800c398:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c39a:	4313      	orrs	r3, r2
 800c39c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3a4:	60da      	str	r2, [r3, #12]
 800c3a6:	e031      	b.n	800c40c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c3ae:	e02d      	b.n	800c40c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c3b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	469a      	mov	sl, r3
 800c3b6:	4693      	mov	fp, r2
 800c3b8:	4650      	mov	r0, sl
 800c3ba:	4659      	mov	r1, fp
 800c3bc:	f7fb fff6 	bl	80083ac <HAL_RCCEx_GetPeriphCLKFreq>
 800c3c0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d021      	beq.n	800c40c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c438 <UART_SetConfig+0x358>)
 800c3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	441a      	add	r2, r3
 800c3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ee:	2b0f      	cmp	r3, #15
 800c3f0:	d909      	bls.n	800c406 <UART_SetConfig+0x326>
 800c3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3f8:	d205      	bcs.n	800c406 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60da      	str	r2, [r3, #12]
 800c404:	e002      	b.n	800c40c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	2201      	movs	r2, #1
 800c410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c416:	2201      	movs	r2, #1
 800c418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41e:	2200      	movs	r2, #0
 800c420:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c424:	2200      	movs	r2, #0
 800c426:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c428:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3750      	adds	r7, #80	@ 0x50
 800c430:	46bd      	mov	sp, r7
 800c432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c436:	bf00      	nop
 800c438:	0800e100 	.word	0x0800e100

0800c43c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00a      	beq.n	800c466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00a      	beq.n	800c4aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ae:	f003 0304 	and.w	r3, r3, #4
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00a      	beq.n	800c4cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4d0:	f003 0310 	and.w	r3, r3, #16
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00a      	beq.n	800c4ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d01a      	beq.n	800c552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c53a:	d10a      	bne.n	800c552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	430a      	orrs	r2, r1
 800c550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	605a      	str	r2, [r3, #4]
  }
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b098      	sub	sp, #96	@ 0x60
 800c584:	af02      	add	r7, sp, #8
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c590:	f7f6 fc82 	bl	8002e98 <HAL_GetTick>
 800c594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0308 	and.w	r3, r3, #8
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d12f      	bne.n	800c604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f88e 	bl	800c6d4 <UART_WaitOnFlagUntilTimeout>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d022      	beq.n	800c604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e063      	b.n	800c6cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d149      	bne.n	800c6a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c612:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c61a:	2200      	movs	r2, #0
 800c61c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f857 	bl	800c6d4 <UART_WaitOnFlagUntilTimeout>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d03c      	beq.n	800c6a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	623b      	str	r3, [r7, #32]
   return(result);
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c64a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c64c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e6      	bne.n	800c62c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3308      	adds	r3, #8
 800c664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f023 0301 	bic.w	r3, r3, #1
 800c674:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c67e:	61fa      	str	r2, [r7, #28]
 800c680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	69b9      	ldr	r1, [r7, #24]
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	617b      	str	r3, [r7, #20]
   return(result);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e5      	bne.n	800c65e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	e012      	b.n	800c6cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3758      	adds	r7, #88	@ 0x58
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	603b      	str	r3, [r7, #0]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6e4:	e04f      	b.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ec:	d04b      	beq.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6ee:	f7f6 fbd3 	bl	8002e98 <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	69ba      	ldr	r2, [r7, #24]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d302      	bcc.n	800c704 <UART_WaitOnFlagUntilTimeout+0x30>
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e04e      	b.n	800c7a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d037      	beq.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b80      	cmp	r3, #128	@ 0x80
 800c71a:	d034      	beq.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2b40      	cmp	r3, #64	@ 0x40
 800c720:	d031      	beq.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	f003 0308 	and.w	r3, r3, #8
 800c72c:	2b08      	cmp	r3, #8
 800c72e:	d110      	bne.n	800c752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2208      	movs	r2, #8
 800c736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 f972 	bl	800ca22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2208      	movs	r2, #8
 800c742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e029      	b.n	800c7a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	69db      	ldr	r3, [r3, #28]
 800c758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c75c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c760:	d111      	bne.n	800c786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c76a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 f958 	bl	800ca22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2220      	movs	r2, #32
 800c776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c782:	2303      	movs	r3, #3
 800c784:	e00f      	b.n	800c7a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	69da      	ldr	r2, [r3, #28]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4013      	ands	r3, r2
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	429a      	cmp	r2, r3
 800c794:	bf0c      	ite	eq
 800c796:	2301      	moveq	r3, #1
 800c798:	2300      	movne	r3, #0
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	461a      	mov	r2, r3
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d0a0      	beq.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b098      	sub	sp, #96	@ 0x60
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c7be:	88fb      	ldrh	r3, [r7, #6]
 800c7c0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	88fa      	ldrh	r2, [r7, #6]
 800c7ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2222      	movs	r2, #34	@ 0x22
 800c7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d07c      	beq.n	800c8e6 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f2:	4a68      	ldr	r2, [pc, #416]	@ (800c994 <UART_Start_Receive_DMA+0x1e4>)
 800c7f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7fc:	4a66      	ldr	r2, [pc, #408]	@ (800c998 <UART_Start_Receive_DMA+0x1e8>)
 800c7fe:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c806:	4a65      	ldr	r2, [pc, #404]	@ (800c99c <UART_Start_Receive_DMA+0x1ec>)
 800c808:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c810:	2200      	movs	r2, #0
 800c812:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c81c:	d107      	bne.n	800c82e <UART_Start_Receive_DMA+0x7e>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d103      	bne.n	800c82e <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c826:	88fb      	ldrh	r3, [r7, #6]
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d034      	beq.n	800c8a8 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c846:	2b00      	cmp	r3, #0
 800c848:	d02a      	beq.n	800c8a0 <UART_Start_Receive_DMA+0xf0>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d023      	beq.n	800c8a0 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c866:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c892:	4618      	mov	r0, r3
 800c894:	f7f7 fb38 	bl	8003f08 <HAL_DMAEx_List_Start_IT>
 800c898:	4603      	mov	r3, r0
 800c89a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c89e:	e014      	b.n	800c8ca <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c8a6:	e010      	b.n	800c8ca <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3324      	adds	r3, #36	@ 0x24
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c8c0:	f7f6 fdd6 	bl	8003470 <HAL_DMA_Start_IT>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d009      	beq.n	800c8e6 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2210      	movs	r2, #16
 800c8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e051      	b.n	800c98a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d018      	beq.n	800c920 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c902:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c90c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c90e:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c910:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c914:	e841 2300 	strex	r3, r2, [r1]
 800c918:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1e6      	bne.n	800c8ee <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3308      	adds	r3, #8
 800c926:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92a:	e853 3f00 	ldrex	r3, [r3]
 800c92e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c932:	f043 0301 	orr.w	r3, r3, #1
 800c936:	657b      	str	r3, [r7, #84]	@ 0x54
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3308      	adds	r3, #8
 800c93e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c940:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e5      	bne.n	800c920 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	617b      	str	r3, [r7, #20]
   return(result);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3308      	adds	r3, #8
 800c972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c974:	627a      	str	r2, [r7, #36]	@ 0x24
 800c976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c978:	6a39      	ldr	r1, [r7, #32]
 800c97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c97c:	e841 2300 	strex	r3, r2, [r1]
 800c980:	61fb      	str	r3, [r7, #28]
   return(result);
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1e5      	bne.n	800c954 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3760      	adds	r7, #96	@ 0x60
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	0800caef 	.word	0x0800caef
 800c998:	0800cbe1 	.word	0x0800cbe1
 800c99c:	0800cc1f 	.word	0x0800cc1f

0800c9a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b08f      	sub	sp, #60	@ 0x3c
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1e6      	bne.n	800c9a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9fa:	61ba      	str	r2, [r7, #24]
 800c9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	6979      	ldr	r1, [r7, #20]
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	613b      	str	r3, [r7, #16]
   return(result);
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e5      	bne.n	800c9da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2220      	movs	r2, #32
 800ca12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ca16:	bf00      	nop
 800ca18:	373c      	adds	r7, #60	@ 0x3c
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b095      	sub	sp, #84	@ 0x54
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e6      	bne.n	800ca2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca72:	f023 0301 	bic.w	r3, r3, #1
 800ca76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca88:	e841 2300 	strex	r3, r2, [r1]
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e3      	bne.n	800ca5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d118      	bne.n	800cace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	e853 3f00 	ldrex	r3, [r3]
 800caa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f023 0310 	bic.w	r3, r3, #16
 800cab0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caba:	61bb      	str	r3, [r7, #24]
 800cabc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabe:	6979      	ldr	r1, [r7, #20]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	613b      	str	r3, [r7, #16]
   return(result);
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e6      	bne.n	800ca9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2220      	movs	r2, #32
 800cad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cae2:	bf00      	nop
 800cae4:	3754      	adds	r7, #84	@ 0x54
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b096      	sub	sp, #88	@ 0x58
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cafa:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb00:	2b81      	cmp	r3, #129	@ 0x81
 800cb02:	d057      	beq.n	800cbb4 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800cb04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb20:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb2c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e6      	bne.n	800cb0c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	f023 0301 	bic.w	r3, r3, #1
 800cb54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e5      	bne.n	800cb3e <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb74:	2220      	movs	r2, #32
 800cb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d118      	bne.n	800cbb4 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	e853 3f00 	ldrex	r3, [r3]
 800cb8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 0310 	bic.w	r3, r3, #16
 800cb96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba4:	69b9      	ldr	r1, [r7, #24]
 800cba6:	69fa      	ldr	r2, [r7, #28]
 800cba8:	e841 2300 	strex	r3, r2, [r1]
 800cbac:	617b      	str	r3, [r7, #20]
   return(result);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e6      	bne.n	800cb82 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d107      	bne.n	800cbd2 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cbcc:	f7ff fa7c 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbd0:	e002      	b.n	800cbd8 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800cbd2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cbd4:	f7f5 f9ca 	bl	8001f6c <HAL_UART_RxCpltCallback>
}
 800cbd8:	bf00      	nop
 800cbda:	3758      	adds	r7, #88	@ 0x58
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d109      	bne.n	800cc10 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc02:	085b      	lsrs	r3, r3, #1
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4619      	mov	r1, r3
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f7ff fa5d 	bl	800c0c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc0e:	e002      	b.n	800cc16 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff fa45 	bl	800c0a0 <HAL_UART_RxHalfCpltCallback>
}
 800cc16:	bf00      	nop
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc32:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc46:	2b80      	cmp	r3, #128	@ 0x80
 800cc48:	d109      	bne.n	800cc5e <UART_DMAError+0x40>
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	2b21      	cmp	r3, #33	@ 0x21
 800cc4e:	d106      	bne.n	800cc5e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cc58:	6978      	ldr	r0, [r7, #20]
 800cc5a:	f7ff fea1 	bl	800c9a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc68:	2b40      	cmp	r3, #64	@ 0x40
 800cc6a:	d109      	bne.n	800cc80 <UART_DMAError+0x62>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b22      	cmp	r3, #34	@ 0x22
 800cc70:	d106      	bne.n	800cc80 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cc7a:	6978      	ldr	r0, [r7, #20]
 800cc7c:	f7ff fed1 	bl	800ca22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc86:	f043 0210 	orr.w	r2, r3, #16
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc90:	6978      	ldr	r0, [r7, #20]
 800cc92:	f7ff fa0f 	bl	800c0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc96:	bf00      	nop
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7ff f9fd 	bl	800c0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccba:	bf00      	nop
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b088      	sub	sp, #32
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	e853 3f00 	ldrex	r3, [r3]
 800ccd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccde:	61fb      	str	r3, [r7, #28]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e6      	bne.n	800ccca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff f9be 	bl	800c08c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd10:	bf00      	nop
 800cd12:	3720      	adds	r7, #32
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d101      	bne.n	800cd6a <HAL_UARTEx_DisableFifoMode+0x16>
 800cd66:	2302      	movs	r3, #2
 800cd68:	e027      	b.n	800cdba <HAL_UARTEx_DisableFifoMode+0x66>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2224      	movs	r2, #36	@ 0x24
 800cd76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0201 	bic.w	r2, r2, #1
 800cd90:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2220      	movs	r2, #32
 800cdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d101      	bne.n	800cdde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cdda:	2302      	movs	r3, #2
 800cddc:	e02d      	b.n	800ce3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2224      	movs	r2, #36	@ 0x24
 800cdea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f022 0201 	bic.w	r2, r2, #1
 800ce04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f850 	bl	800cec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b084      	sub	sp, #16
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d101      	bne.n	800ce5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce56:	2302      	movs	r3, #2
 800ce58:	e02d      	b.n	800ceb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2224      	movs	r2, #36	@ 0x24
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f022 0201 	bic.w	r2, r2, #1
 800ce80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f812 	bl	800cec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d108      	bne.n	800cee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cee0:	e031      	b.n	800cf46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cee2:	2308      	movs	r3, #8
 800cee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cee6:	2308      	movs	r3, #8
 800cee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	0e5b      	lsrs	r3, r3, #25
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0307 	and.w	r3, r3, #7
 800cef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	0f5b      	lsrs	r3, r3, #29
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	f003 0307 	and.w	r3, r3, #7
 800cf08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
 800cf0c:	7b3a      	ldrb	r2, [r7, #12]
 800cf0e:	4911      	ldr	r1, [pc, #68]	@ (800cf54 <UARTEx_SetNbDataToProcess+0x94>)
 800cf10:	5c8a      	ldrb	r2, [r1, r2]
 800cf12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf16:	7b3a      	ldrb	r2, [r7, #12]
 800cf18:	490f      	ldr	r1, [pc, #60]	@ (800cf58 <UARTEx_SetNbDataToProcess+0x98>)
 800cf1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	7b7a      	ldrb	r2, [r7, #13]
 800cf2c:	4909      	ldr	r1, [pc, #36]	@ (800cf54 <UARTEx_SetNbDataToProcess+0x94>)
 800cf2e:	5c8a      	ldrb	r2, [r1, r2]
 800cf30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf34:	7b7a      	ldrb	r2, [r7, #13]
 800cf36:	4908      	ldr	r1, [pc, #32]	@ (800cf58 <UARTEx_SetNbDataToProcess+0x98>)
 800cf38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf46:	bf00      	nop
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	0800e118 	.word	0x0800e118
 800cf58:	0800e120 	.word	0x0800e120

0800cf5c <std>:
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	b510      	push	{r4, lr}
 800cf60:	4604      	mov	r4, r0
 800cf62:	6083      	str	r3, [r0, #8]
 800cf64:	8181      	strh	r1, [r0, #12]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf6a:	81c2      	strh	r2, [r0, #14]
 800cf6c:	2208      	movs	r2, #8
 800cf6e:	6183      	str	r3, [r0, #24]
 800cf70:	e9c0 3300 	strd	r3, r3, [r0]
 800cf74:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf78:	305c      	adds	r0, #92	@ 0x5c
 800cf7a:	f000 f9f9 	bl	800d370 <memset>
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <std+0x58>)
 800cf80:	6224      	str	r4, [r4, #32]
 800cf82:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf84:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb8 <std+0x5c>)
 800cf86:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf88:	4b0c      	ldr	r3, [pc, #48]	@ (800cfbc <std+0x60>)
 800cf8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <std+0x64>)
 800cf8e:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf90:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc4 <std+0x68>)
 800cf92:	429c      	cmp	r4, r3
 800cf94:	d006      	beq.n	800cfa4 <std+0x48>
 800cf96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf9a:	4294      	cmp	r4, r2
 800cf9c:	d002      	beq.n	800cfa4 <std+0x48>
 800cf9e:	33d0      	adds	r3, #208	@ 0xd0
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	d105      	bne.n	800cfb0 <std+0x54>
 800cfa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfac:	f000 ba58 	b.w	800d460 <__retarget_lock_init_recursive>
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	bf00      	nop
 800cfb4:	0800d1c1 	.word	0x0800d1c1
 800cfb8:	0800d1e3 	.word	0x0800d1e3
 800cfbc:	0800d21b 	.word	0x0800d21b
 800cfc0:	0800d23f 	.word	0x0800d23f
 800cfc4:	200005a4 	.word	0x200005a4

0800cfc8 <stdio_exit_handler>:
 800cfc8:	4a02      	ldr	r2, [pc, #8]	@ (800cfd4 <stdio_exit_handler+0xc>)
 800cfca:	4903      	ldr	r1, [pc, #12]	@ (800cfd8 <stdio_exit_handler+0x10>)
 800cfcc:	4803      	ldr	r0, [pc, #12]	@ (800cfdc <stdio_exit_handler+0x14>)
 800cfce:	f000 b869 	b.w	800d0a4 <_fwalk_sglue>
 800cfd2:	bf00      	nop
 800cfd4:	20000090 	.word	0x20000090
 800cfd8:	0800dd09 	.word	0x0800dd09
 800cfdc:	200000a0 	.word	0x200000a0

0800cfe0 <cleanup_stdio>:
 800cfe0:	6841      	ldr	r1, [r0, #4]
 800cfe2:	4b0c      	ldr	r3, [pc, #48]	@ (800d014 <cleanup_stdio+0x34>)
 800cfe4:	4299      	cmp	r1, r3
 800cfe6:	b510      	push	{r4, lr}
 800cfe8:	4604      	mov	r4, r0
 800cfea:	d001      	beq.n	800cff0 <cleanup_stdio+0x10>
 800cfec:	f000 fe8c 	bl	800dd08 <_fflush_r>
 800cff0:	68a1      	ldr	r1, [r4, #8]
 800cff2:	4b09      	ldr	r3, [pc, #36]	@ (800d018 <cleanup_stdio+0x38>)
 800cff4:	4299      	cmp	r1, r3
 800cff6:	d002      	beq.n	800cffe <cleanup_stdio+0x1e>
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fe85 	bl	800dd08 <_fflush_r>
 800cffe:	68e1      	ldr	r1, [r4, #12]
 800d000:	4b06      	ldr	r3, [pc, #24]	@ (800d01c <cleanup_stdio+0x3c>)
 800d002:	4299      	cmp	r1, r3
 800d004:	d004      	beq.n	800d010 <cleanup_stdio+0x30>
 800d006:	4620      	mov	r0, r4
 800d008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d00c:	f000 be7c 	b.w	800dd08 <_fflush_r>
 800d010:	bd10      	pop	{r4, pc}
 800d012:	bf00      	nop
 800d014:	200005a4 	.word	0x200005a4
 800d018:	2000060c 	.word	0x2000060c
 800d01c:	20000674 	.word	0x20000674

0800d020 <global_stdio_init.part.0>:
 800d020:	b510      	push	{r4, lr}
 800d022:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <global_stdio_init.part.0+0x30>)
 800d024:	2104      	movs	r1, #4
 800d026:	4c0b      	ldr	r4, [pc, #44]	@ (800d054 <global_stdio_init.part.0+0x34>)
 800d028:	4a0b      	ldr	r2, [pc, #44]	@ (800d058 <global_stdio_init.part.0+0x38>)
 800d02a:	4620      	mov	r0, r4
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	2200      	movs	r2, #0
 800d030:	f7ff ff94 	bl	800cf5c <std>
 800d034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d038:	2201      	movs	r2, #1
 800d03a:	2109      	movs	r1, #9
 800d03c:	f7ff ff8e 	bl	800cf5c <std>
 800d040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d044:	2202      	movs	r2, #2
 800d046:	2112      	movs	r1, #18
 800d048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d04c:	f7ff bf86 	b.w	800cf5c <std>
 800d050:	200006dc 	.word	0x200006dc
 800d054:	200005a4 	.word	0x200005a4
 800d058:	0800cfc9 	.word	0x0800cfc9

0800d05c <__sfp_lock_acquire>:
 800d05c:	4801      	ldr	r0, [pc, #4]	@ (800d064 <__sfp_lock_acquire+0x8>)
 800d05e:	f000 ba00 	b.w	800d462 <__retarget_lock_acquire_recursive>
 800d062:	bf00      	nop
 800d064:	200006e5 	.word	0x200006e5

0800d068 <__sfp_lock_release>:
 800d068:	4801      	ldr	r0, [pc, #4]	@ (800d070 <__sfp_lock_release+0x8>)
 800d06a:	f000 b9fb 	b.w	800d464 <__retarget_lock_release_recursive>
 800d06e:	bf00      	nop
 800d070:	200006e5 	.word	0x200006e5

0800d074 <__sinit>:
 800d074:	b510      	push	{r4, lr}
 800d076:	4604      	mov	r4, r0
 800d078:	f7ff fff0 	bl	800d05c <__sfp_lock_acquire>
 800d07c:	6a23      	ldr	r3, [r4, #32]
 800d07e:	b11b      	cbz	r3, 800d088 <__sinit+0x14>
 800d080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d084:	f7ff bff0 	b.w	800d068 <__sfp_lock_release>
 800d088:	4b04      	ldr	r3, [pc, #16]	@ (800d09c <__sinit+0x28>)
 800d08a:	6223      	str	r3, [r4, #32]
 800d08c:	4b04      	ldr	r3, [pc, #16]	@ (800d0a0 <__sinit+0x2c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1f5      	bne.n	800d080 <__sinit+0xc>
 800d094:	f7ff ffc4 	bl	800d020 <global_stdio_init.part.0>
 800d098:	e7f2      	b.n	800d080 <__sinit+0xc>
 800d09a:	bf00      	nop
 800d09c:	0800cfe1 	.word	0x0800cfe1
 800d0a0:	200006dc 	.word	0x200006dc

0800d0a4 <_fwalk_sglue>:
 800d0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	4688      	mov	r8, r1
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b8:	d505      	bpl.n	800d0c6 <_fwalk_sglue+0x22>
 800d0ba:	6824      	ldr	r4, [r4, #0]
 800d0bc:	2c00      	cmp	r4, #0
 800d0be:	d1f7      	bne.n	800d0b0 <_fwalk_sglue+0xc>
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d907      	bls.n	800d0dc <_fwalk_sglue+0x38>
 800d0cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	d003      	beq.n	800d0dc <_fwalk_sglue+0x38>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	47c0      	blx	r8
 800d0da:	4306      	orrs	r6, r0
 800d0dc:	3568      	adds	r5, #104	@ 0x68
 800d0de:	e7e9      	b.n	800d0b4 <_fwalk_sglue+0x10>

0800d0e0 <iprintf>:
 800d0e0:	b40f      	push	{r0, r1, r2, r3}
 800d0e2:	b507      	push	{r0, r1, r2, lr}
 800d0e4:	4906      	ldr	r1, [pc, #24]	@ (800d100 <iprintf+0x20>)
 800d0e6:	ab04      	add	r3, sp, #16
 800d0e8:	6808      	ldr	r0, [r1, #0]
 800d0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ee:	6881      	ldr	r1, [r0, #8]
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	f000 fadb 	bl	800d6ac <_vfiprintf_r>
 800d0f6:	b003      	add	sp, #12
 800d0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0fc:	b004      	add	sp, #16
 800d0fe:	4770      	bx	lr
 800d100:	2000009c 	.word	0x2000009c

0800d104 <_puts_r>:
 800d104:	6a03      	ldr	r3, [r0, #32]
 800d106:	b570      	push	{r4, r5, r6, lr}
 800d108:	4605      	mov	r5, r0
 800d10a:	460e      	mov	r6, r1
 800d10c:	6884      	ldr	r4, [r0, #8]
 800d10e:	b90b      	cbnz	r3, 800d114 <_puts_r+0x10>
 800d110:	f7ff ffb0 	bl	800d074 <__sinit>
 800d114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d116:	07db      	lsls	r3, r3, #31
 800d118:	d405      	bmi.n	800d126 <_puts_r+0x22>
 800d11a:	89a3      	ldrh	r3, [r4, #12]
 800d11c:	0598      	lsls	r0, r3, #22
 800d11e:	d402      	bmi.n	800d126 <_puts_r+0x22>
 800d120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d122:	f000 f99e 	bl	800d462 <__retarget_lock_acquire_recursive>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	0719      	lsls	r1, r3, #28
 800d12a:	d502      	bpl.n	800d132 <_puts_r+0x2e>
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d135      	bne.n	800d19e <_puts_r+0x9a>
 800d132:	4621      	mov	r1, r4
 800d134:	4628      	mov	r0, r5
 800d136:	f000 f8c5 	bl	800d2c4 <__swsetup_r>
 800d13a:	b380      	cbz	r0, 800d19e <_puts_r+0x9a>
 800d13c:	f04f 35ff 	mov.w	r5, #4294967295
 800d140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d142:	07da      	lsls	r2, r3, #31
 800d144:	d405      	bmi.n	800d152 <_puts_r+0x4e>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	059b      	lsls	r3, r3, #22
 800d14a:	d402      	bmi.n	800d152 <_puts_r+0x4e>
 800d14c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d14e:	f000 f989 	bl	800d464 <__retarget_lock_release_recursive>
 800d152:	4628      	mov	r0, r5
 800d154:	bd70      	pop	{r4, r5, r6, pc}
 800d156:	2b00      	cmp	r3, #0
 800d158:	da04      	bge.n	800d164 <_puts_r+0x60>
 800d15a:	69a2      	ldr	r2, [r4, #24]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	dc17      	bgt.n	800d190 <_puts_r+0x8c>
 800d160:	290a      	cmp	r1, #10
 800d162:	d015      	beq.n	800d190 <_puts_r+0x8c>
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	6022      	str	r2, [r4, #0]
 800d16a:	7019      	strb	r1, [r3, #0]
 800d16c:	68a3      	ldr	r3, [r4, #8]
 800d16e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d172:	3b01      	subs	r3, #1
 800d174:	60a3      	str	r3, [r4, #8]
 800d176:	2900      	cmp	r1, #0
 800d178:	d1ed      	bne.n	800d156 <_puts_r+0x52>
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	da11      	bge.n	800d1a2 <_puts_r+0x9e>
 800d17e:	4622      	mov	r2, r4
 800d180:	210a      	movs	r1, #10
 800d182:	4628      	mov	r0, r5
 800d184:	f000 f85f 	bl	800d246 <__swbuf_r>
 800d188:	3001      	adds	r0, #1
 800d18a:	d0d7      	beq.n	800d13c <_puts_r+0x38>
 800d18c:	250a      	movs	r5, #10
 800d18e:	e7d7      	b.n	800d140 <_puts_r+0x3c>
 800d190:	4622      	mov	r2, r4
 800d192:	4628      	mov	r0, r5
 800d194:	f000 f857 	bl	800d246 <__swbuf_r>
 800d198:	3001      	adds	r0, #1
 800d19a:	d1e7      	bne.n	800d16c <_puts_r+0x68>
 800d19c:	e7ce      	b.n	800d13c <_puts_r+0x38>
 800d19e:	3e01      	subs	r6, #1
 800d1a0:	e7e4      	b.n	800d16c <_puts_r+0x68>
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	6022      	str	r2, [r4, #0]
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	e7ee      	b.n	800d18c <_puts_r+0x88>
	...

0800d1b0 <puts>:
 800d1b0:	4b02      	ldr	r3, [pc, #8]	@ (800d1bc <puts+0xc>)
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	f7ff bfa5 	b.w	800d104 <_puts_r>
 800d1ba:	bf00      	nop
 800d1bc:	2000009c 	.word	0x2000009c

0800d1c0 <__sread>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c8:	f000 f8fc 	bl	800d3c4 <_read_r>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	bfab      	itete	ge
 800d1d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d4:	181b      	addge	r3, r3, r0
 800d1d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1da:	bfac      	ite	ge
 800d1dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1de:	81a3      	strhlt	r3, [r4, #12]
 800d1e0:	bd10      	pop	{r4, pc}

0800d1e2 <__swrite>:
 800d1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e6:	461f      	mov	r7, r3
 800d1e8:	898b      	ldrh	r3, [r1, #12]
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	05db      	lsls	r3, r3, #23
 800d1f0:	4616      	mov	r6, r2
 800d1f2:	d505      	bpl.n	800d200 <__swrite+0x1e>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fc:	f000 f8d0 	bl	800d3a0 <_lseek_r>
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	4632      	mov	r2, r6
 800d204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d208:	4628      	mov	r0, r5
 800d20a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	463b      	mov	r3, r7
 800d212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d216:	f000 b8e7 	b.w	800d3e8 <_write_r>

0800d21a <__sseek>:
 800d21a:	b510      	push	{r4, lr}
 800d21c:	460c      	mov	r4, r1
 800d21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d222:	f000 f8bd 	bl	800d3a0 <_lseek_r>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	bf15      	itete	ne
 800d22c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d22e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d236:	81a3      	strheq	r3, [r4, #12]
 800d238:	bf18      	it	ne
 800d23a:	81a3      	strhne	r3, [r4, #12]
 800d23c:	bd10      	pop	{r4, pc}

0800d23e <__sclose>:
 800d23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d242:	f000 b89d 	b.w	800d380 <_close_r>

0800d246 <__swbuf_r>:
 800d246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d248:	460e      	mov	r6, r1
 800d24a:	4614      	mov	r4, r2
 800d24c:	4605      	mov	r5, r0
 800d24e:	b118      	cbz	r0, 800d258 <__swbuf_r+0x12>
 800d250:	6a03      	ldr	r3, [r0, #32]
 800d252:	b90b      	cbnz	r3, 800d258 <__swbuf_r+0x12>
 800d254:	f7ff ff0e 	bl	800d074 <__sinit>
 800d258:	69a3      	ldr	r3, [r4, #24]
 800d25a:	60a3      	str	r3, [r4, #8]
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	071a      	lsls	r2, r3, #28
 800d260:	d501      	bpl.n	800d266 <__swbuf_r+0x20>
 800d262:	6923      	ldr	r3, [r4, #16]
 800d264:	b943      	cbnz	r3, 800d278 <__swbuf_r+0x32>
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	f000 f82b 	bl	800d2c4 <__swsetup_r>
 800d26e:	b118      	cbz	r0, 800d278 <__swbuf_r+0x32>
 800d270:	f04f 37ff 	mov.w	r7, #4294967295
 800d274:	4638      	mov	r0, r7
 800d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	b2f6      	uxtb	r6, r6
 800d27c:	6922      	ldr	r2, [r4, #16]
 800d27e:	4637      	mov	r7, r6
 800d280:	1a98      	subs	r0, r3, r2
 800d282:	6963      	ldr	r3, [r4, #20]
 800d284:	4283      	cmp	r3, r0
 800d286:	dc05      	bgt.n	800d294 <__swbuf_r+0x4e>
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 fd3c 	bl	800dd08 <_fflush_r>
 800d290:	2800      	cmp	r0, #0
 800d292:	d1ed      	bne.n	800d270 <__swbuf_r+0x2a>
 800d294:	68a3      	ldr	r3, [r4, #8]
 800d296:	3b01      	subs	r3, #1
 800d298:	60a3      	str	r3, [r4, #8]
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	6022      	str	r2, [r4, #0]
 800d2a0:	701e      	strb	r6, [r3, #0]
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	6962      	ldr	r2, [r4, #20]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d004      	beq.n	800d2b4 <__swbuf_r+0x6e>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	07db      	lsls	r3, r3, #31
 800d2ae:	d5e1      	bpl.n	800d274 <__swbuf_r+0x2e>
 800d2b0:	2e0a      	cmp	r6, #10
 800d2b2:	d1df      	bne.n	800d274 <__swbuf_r+0x2e>
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 fd26 	bl	800dd08 <_fflush_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d0d9      	beq.n	800d274 <__swbuf_r+0x2e>
 800d2c0:	e7d6      	b.n	800d270 <__swbuf_r+0x2a>
	...

0800d2c4 <__swsetup_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4b29      	ldr	r3, [pc, #164]	@ (800d36c <__swsetup_r+0xa8>)
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	b118      	cbz	r0, 800d2d8 <__swsetup_r+0x14>
 800d2d0:	6a03      	ldr	r3, [r0, #32]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <__swsetup_r+0x14>
 800d2d4:	f7ff fece 	bl	800d074 <__sinit>
 800d2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2dc:	0719      	lsls	r1, r3, #28
 800d2de:	d422      	bmi.n	800d326 <__swsetup_r+0x62>
 800d2e0:	06da      	lsls	r2, r3, #27
 800d2e2:	d407      	bmi.n	800d2f4 <__swsetup_r+0x30>
 800d2e4:	2209      	movs	r2, #9
 800d2e6:	602a      	str	r2, [r5, #0]
 800d2e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	e033      	b.n	800d35c <__swsetup_r+0x98>
 800d2f4:	0758      	lsls	r0, r3, #29
 800d2f6:	d512      	bpl.n	800d31e <__swsetup_r+0x5a>
 800d2f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2fa:	b141      	cbz	r1, 800d30e <__swsetup_r+0x4a>
 800d2fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d300:	4299      	cmp	r1, r3
 800d302:	d002      	beq.n	800d30a <__swsetup_r+0x46>
 800d304:	4628      	mov	r0, r5
 800d306:	f000 f8af 	bl	800d468 <_free_r>
 800d30a:	2300      	movs	r3, #0
 800d30c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d314:	81a3      	strh	r3, [r4, #12]
 800d316:	2300      	movs	r3, #0
 800d318:	6063      	str	r3, [r4, #4]
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	f043 0308 	orr.w	r3, r3, #8
 800d324:	81a3      	strh	r3, [r4, #12]
 800d326:	6923      	ldr	r3, [r4, #16]
 800d328:	b94b      	cbnz	r3, 800d33e <__swsetup_r+0x7a>
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d334:	d003      	beq.n	800d33e <__swsetup_r+0x7a>
 800d336:	4621      	mov	r1, r4
 800d338:	4628      	mov	r0, r5
 800d33a:	f000 fd32 	bl	800dda2 <__smakebuf_r>
 800d33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d342:	f013 0201 	ands.w	r2, r3, #1
 800d346:	d00a      	beq.n	800d35e <__swsetup_r+0x9a>
 800d348:	2200      	movs	r2, #0
 800d34a:	60a2      	str	r2, [r4, #8]
 800d34c:	6962      	ldr	r2, [r4, #20]
 800d34e:	4252      	negs	r2, r2
 800d350:	61a2      	str	r2, [r4, #24]
 800d352:	6922      	ldr	r2, [r4, #16]
 800d354:	b942      	cbnz	r2, 800d368 <__swsetup_r+0xa4>
 800d356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d35a:	d1c5      	bne.n	800d2e8 <__swsetup_r+0x24>
 800d35c:	bd38      	pop	{r3, r4, r5, pc}
 800d35e:	0799      	lsls	r1, r3, #30
 800d360:	bf58      	it	pl
 800d362:	6962      	ldrpl	r2, [r4, #20]
 800d364:	60a2      	str	r2, [r4, #8]
 800d366:	e7f4      	b.n	800d352 <__swsetup_r+0x8e>
 800d368:	2000      	movs	r0, #0
 800d36a:	e7f7      	b.n	800d35c <__swsetup_r+0x98>
 800d36c:	2000009c 	.word	0x2000009c

0800d370 <memset>:
 800d370:	4402      	add	r2, r0
 800d372:	4603      	mov	r3, r0
 800d374:	4293      	cmp	r3, r2
 800d376:	d100      	bne.n	800d37a <memset+0xa>
 800d378:	4770      	bx	lr
 800d37a:	f803 1b01 	strb.w	r1, [r3], #1
 800d37e:	e7f9      	b.n	800d374 <memset+0x4>

0800d380 <_close_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	2300      	movs	r3, #0
 800d384:	4d05      	ldr	r5, [pc, #20]	@ (800d39c <_close_r+0x1c>)
 800d386:	4604      	mov	r4, r0
 800d388:	4608      	mov	r0, r1
 800d38a:	602b      	str	r3, [r5, #0]
 800d38c:	f7f4 fff1 	bl	8002372 <_close>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_close_r+0x1a>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_close_r+0x1a>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	200006e0 	.word	0x200006e0

0800d3a0 <_lseek_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4d06      	ldr	r5, [pc, #24]	@ (800d3c0 <_lseek_r+0x20>)
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f7f5 f806 	bl	80023c0 <_lseek>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_lseek_r+0x1e>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_lseek_r+0x1e>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	200006e0 	.word	0x200006e0

0800d3c4 <_read_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4d06      	ldr	r5, [pc, #24]	@ (800d3e4 <_read_r+0x20>)
 800d3ca:	4608      	mov	r0, r1
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	602a      	str	r2, [r5, #0]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f7f4 ff94 	bl	8002300 <_read>
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	d102      	bne.n	800d3e2 <_read_r+0x1e>
 800d3dc:	682b      	ldr	r3, [r5, #0]
 800d3de:	b103      	cbz	r3, 800d3e2 <_read_r+0x1e>
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
 800d3e4:	200006e0 	.word	0x200006e0

0800d3e8 <_write_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4d06      	ldr	r5, [pc, #24]	@ (800d408 <_write_r+0x20>)
 800d3ee:	4608      	mov	r0, r1
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	602a      	str	r2, [r5, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	f7f4 ff9f 	bl	800233a <_write>
 800d3fc:	1c43      	adds	r3, r0, #1
 800d3fe:	d102      	bne.n	800d406 <_write_r+0x1e>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	b103      	cbz	r3, 800d406 <_write_r+0x1e>
 800d404:	6023      	str	r3, [r4, #0]
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	200006e0 	.word	0x200006e0

0800d40c <__errno>:
 800d40c:	4b01      	ldr	r3, [pc, #4]	@ (800d414 <__errno+0x8>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	2000009c 	.word	0x2000009c

0800d418 <__libc_init_array>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	4d0d      	ldr	r5, [pc, #52]	@ (800d450 <__libc_init_array+0x38>)
 800d41c:	2600      	movs	r6, #0
 800d41e:	4c0d      	ldr	r4, [pc, #52]	@ (800d454 <__libc_init_array+0x3c>)
 800d420:	1b64      	subs	r4, r4, r5
 800d422:	10a4      	asrs	r4, r4, #2
 800d424:	42a6      	cmp	r6, r4
 800d426:	d109      	bne.n	800d43c <__libc_init_array+0x24>
 800d428:	4d0b      	ldr	r5, [pc, #44]	@ (800d458 <__libc_init_array+0x40>)
 800d42a:	2600      	movs	r6, #0
 800d42c:	4c0b      	ldr	r4, [pc, #44]	@ (800d45c <__libc_init_array+0x44>)
 800d42e:	f000 fd35 	bl	800de9c <_init>
 800d432:	1b64      	subs	r4, r4, r5
 800d434:	10a4      	asrs	r4, r4, #2
 800d436:	42a6      	cmp	r6, r4
 800d438:	d105      	bne.n	800d446 <__libc_init_array+0x2e>
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d440:	3601      	adds	r6, #1
 800d442:	4798      	blx	r3
 800d444:	e7ee      	b.n	800d424 <__libc_init_array+0xc>
 800d446:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44a:	3601      	adds	r6, #1
 800d44c:	4798      	blx	r3
 800d44e:	e7f2      	b.n	800d436 <__libc_init_array+0x1e>
 800d450:	0800e164 	.word	0x0800e164
 800d454:	0800e164 	.word	0x0800e164
 800d458:	0800e164 	.word	0x0800e164
 800d45c:	0800e168 	.word	0x0800e168

0800d460 <__retarget_lock_init_recursive>:
 800d460:	4770      	bx	lr

0800d462 <__retarget_lock_acquire_recursive>:
 800d462:	4770      	bx	lr

0800d464 <__retarget_lock_release_recursive>:
 800d464:	4770      	bx	lr
	...

0800d468 <_free_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d041      	beq.n	800d4f4 <_free_r+0x8c>
 800d470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d474:	1f0c      	subs	r4, r1, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfb8      	it	lt
 800d47a:	18e4      	addlt	r4, r4, r3
 800d47c:	f000 f8e0 	bl	800d640 <__malloc_lock>
 800d480:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f8 <_free_r+0x90>)
 800d482:	6813      	ldr	r3, [r2, #0]
 800d484:	b933      	cbnz	r3, 800d494 <_free_r+0x2c>
 800d486:	6063      	str	r3, [r4, #4]
 800d488:	6014      	str	r4, [r2, #0]
 800d48a:	4628      	mov	r0, r5
 800d48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d490:	f000 b8dc 	b.w	800d64c <__malloc_unlock>
 800d494:	42a3      	cmp	r3, r4
 800d496:	d908      	bls.n	800d4aa <_free_r+0x42>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	1821      	adds	r1, r4, r0
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf01      	itttt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	1809      	addeq	r1, r1, r0
 800d4a6:	6021      	streq	r1, [r4, #0]
 800d4a8:	e7ed      	b.n	800d486 <_free_r+0x1e>
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	b10b      	cbz	r3, 800d4b4 <_free_r+0x4c>
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	d9fa      	bls.n	800d4aa <_free_r+0x42>
 800d4b4:	6811      	ldr	r1, [r2, #0]
 800d4b6:	1850      	adds	r0, r2, r1
 800d4b8:	42a0      	cmp	r0, r4
 800d4ba:	d10b      	bne.n	800d4d4 <_free_r+0x6c>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	4401      	add	r1, r0
 800d4c0:	1850      	adds	r0, r2, r1
 800d4c2:	6011      	str	r1, [r2, #0]
 800d4c4:	4283      	cmp	r3, r0
 800d4c6:	d1e0      	bne.n	800d48a <_free_r+0x22>
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	4408      	add	r0, r1
 800d4ce:	6053      	str	r3, [r2, #4]
 800d4d0:	6010      	str	r0, [r2, #0]
 800d4d2:	e7da      	b.n	800d48a <_free_r+0x22>
 800d4d4:	d902      	bls.n	800d4dc <_free_r+0x74>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	e7d6      	b.n	800d48a <_free_r+0x22>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	1821      	adds	r1, r4, r0
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	bf02      	ittt	eq
 800d4e4:	6819      	ldreq	r1, [r3, #0]
 800d4e6:	685b      	ldreq	r3, [r3, #4]
 800d4e8:	1809      	addeq	r1, r1, r0
 800d4ea:	6063      	str	r3, [r4, #4]
 800d4ec:	bf08      	it	eq
 800d4ee:	6021      	streq	r1, [r4, #0]
 800d4f0:	6054      	str	r4, [r2, #4]
 800d4f2:	e7ca      	b.n	800d48a <_free_r+0x22>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	200006ec 	.word	0x200006ec

0800d4fc <sbrk_aligned>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4e0f      	ldr	r6, [pc, #60]	@ (800d53c <sbrk_aligned+0x40>)
 800d500:	460c      	mov	r4, r1
 800d502:	4605      	mov	r5, r0
 800d504:	6831      	ldr	r1, [r6, #0]
 800d506:	b911      	cbnz	r1, 800d50e <sbrk_aligned+0x12>
 800d508:	f000 fcaa 	bl	800de60 <_sbrk_r>
 800d50c:	6030      	str	r0, [r6, #0]
 800d50e:	4621      	mov	r1, r4
 800d510:	4628      	mov	r0, r5
 800d512:	f000 fca5 	bl	800de60 <_sbrk_r>
 800d516:	1c43      	adds	r3, r0, #1
 800d518:	d103      	bne.n	800d522 <sbrk_aligned+0x26>
 800d51a:	f04f 34ff 	mov.w	r4, #4294967295
 800d51e:	4620      	mov	r0, r4
 800d520:	bd70      	pop	{r4, r5, r6, pc}
 800d522:	1cc4      	adds	r4, r0, #3
 800d524:	f024 0403 	bic.w	r4, r4, #3
 800d528:	42a0      	cmp	r0, r4
 800d52a:	d0f8      	beq.n	800d51e <sbrk_aligned+0x22>
 800d52c:	1a21      	subs	r1, r4, r0
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 fc96 	bl	800de60 <_sbrk_r>
 800d534:	3001      	adds	r0, #1
 800d536:	d1f2      	bne.n	800d51e <sbrk_aligned+0x22>
 800d538:	e7ef      	b.n	800d51a <sbrk_aligned+0x1e>
 800d53a:	bf00      	nop
 800d53c:	200006e8 	.word	0x200006e8

0800d540 <_malloc_r>:
 800d540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d544:	1ccd      	adds	r5, r1, #3
 800d546:	4606      	mov	r6, r0
 800d548:	f025 0503 	bic.w	r5, r5, #3
 800d54c:	3508      	adds	r5, #8
 800d54e:	2d0c      	cmp	r5, #12
 800d550:	bf38      	it	cc
 800d552:	250c      	movcc	r5, #12
 800d554:	2d00      	cmp	r5, #0
 800d556:	db01      	blt.n	800d55c <_malloc_r+0x1c>
 800d558:	42a9      	cmp	r1, r5
 800d55a:	d904      	bls.n	800d566 <_malloc_r+0x26>
 800d55c:	230c      	movs	r3, #12
 800d55e:	6033      	str	r3, [r6, #0]
 800d560:	2000      	movs	r0, #0
 800d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d63c <_malloc_r+0xfc>
 800d56a:	f000 f869 	bl	800d640 <__malloc_lock>
 800d56e:	f8d8 3000 	ldr.w	r3, [r8]
 800d572:	461c      	mov	r4, r3
 800d574:	bb44      	cbnz	r4, 800d5c8 <_malloc_r+0x88>
 800d576:	4629      	mov	r1, r5
 800d578:	4630      	mov	r0, r6
 800d57a:	f7ff ffbf 	bl	800d4fc <sbrk_aligned>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	4604      	mov	r4, r0
 800d582:	d158      	bne.n	800d636 <_malloc_r+0xf6>
 800d584:	f8d8 4000 	ldr.w	r4, [r8]
 800d588:	4627      	mov	r7, r4
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	d143      	bne.n	800d616 <_malloc_r+0xd6>
 800d58e:	2c00      	cmp	r4, #0
 800d590:	d04b      	beq.n	800d62a <_malloc_r+0xea>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4639      	mov	r1, r7
 800d596:	4630      	mov	r0, r6
 800d598:	eb04 0903 	add.w	r9, r4, r3
 800d59c:	f000 fc60 	bl	800de60 <_sbrk_r>
 800d5a0:	4581      	cmp	r9, r0
 800d5a2:	d142      	bne.n	800d62a <_malloc_r+0xea>
 800d5a4:	6821      	ldr	r1, [r4, #0]
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	1a6d      	subs	r5, r5, r1
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7ff ffa6 	bl	800d4fc <sbrk_aligned>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d03a      	beq.n	800d62a <_malloc_r+0xea>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	442b      	add	r3, r5
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	bb62      	cbnz	r2, 800d61c <_malloc_r+0xdc>
 800d5c2:	f8c8 7000 	str.w	r7, [r8]
 800d5c6:	e00f      	b.n	800d5e8 <_malloc_r+0xa8>
 800d5c8:	6822      	ldr	r2, [r4, #0]
 800d5ca:	1b52      	subs	r2, r2, r5
 800d5cc:	d420      	bmi.n	800d610 <_malloc_r+0xd0>
 800d5ce:	2a0b      	cmp	r2, #11
 800d5d0:	d917      	bls.n	800d602 <_malloc_r+0xc2>
 800d5d2:	1961      	adds	r1, r4, r5
 800d5d4:	42a3      	cmp	r3, r4
 800d5d6:	6025      	str	r5, [r4, #0]
 800d5d8:	bf18      	it	ne
 800d5da:	6059      	strne	r1, [r3, #4]
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	bf08      	it	eq
 800d5e0:	f8c8 1000 	streq.w	r1, [r8]
 800d5e4:	5162      	str	r2, [r4, r5]
 800d5e6:	604b      	str	r3, [r1, #4]
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 f82f 	bl	800d64c <__malloc_unlock>
 800d5ee:	f104 000b 	add.w	r0, r4, #11
 800d5f2:	1d23      	adds	r3, r4, #4
 800d5f4:	f020 0007 	bic.w	r0, r0, #7
 800d5f8:	1ac2      	subs	r2, r0, r3
 800d5fa:	bf1c      	itt	ne
 800d5fc:	1a1b      	subne	r3, r3, r0
 800d5fe:	50a3      	strne	r3, [r4, r2]
 800d600:	e7af      	b.n	800d562 <_malloc_r+0x22>
 800d602:	6862      	ldr	r2, [r4, #4]
 800d604:	42a3      	cmp	r3, r4
 800d606:	bf0c      	ite	eq
 800d608:	f8c8 2000 	streq.w	r2, [r8]
 800d60c:	605a      	strne	r2, [r3, #4]
 800d60e:	e7eb      	b.n	800d5e8 <_malloc_r+0xa8>
 800d610:	4623      	mov	r3, r4
 800d612:	6864      	ldr	r4, [r4, #4]
 800d614:	e7ae      	b.n	800d574 <_malloc_r+0x34>
 800d616:	463c      	mov	r4, r7
 800d618:	687f      	ldr	r7, [r7, #4]
 800d61a:	e7b6      	b.n	800d58a <_malloc_r+0x4a>
 800d61c:	461a      	mov	r2, r3
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	42a3      	cmp	r3, r4
 800d622:	d1fb      	bne.n	800d61c <_malloc_r+0xdc>
 800d624:	2300      	movs	r3, #0
 800d626:	6053      	str	r3, [r2, #4]
 800d628:	e7de      	b.n	800d5e8 <_malloc_r+0xa8>
 800d62a:	230c      	movs	r3, #12
 800d62c:	4630      	mov	r0, r6
 800d62e:	6033      	str	r3, [r6, #0]
 800d630:	f000 f80c 	bl	800d64c <__malloc_unlock>
 800d634:	e794      	b.n	800d560 <_malloc_r+0x20>
 800d636:	6005      	str	r5, [r0, #0]
 800d638:	e7d6      	b.n	800d5e8 <_malloc_r+0xa8>
 800d63a:	bf00      	nop
 800d63c:	200006ec 	.word	0x200006ec

0800d640 <__malloc_lock>:
 800d640:	4801      	ldr	r0, [pc, #4]	@ (800d648 <__malloc_lock+0x8>)
 800d642:	f7ff bf0e 	b.w	800d462 <__retarget_lock_acquire_recursive>
 800d646:	bf00      	nop
 800d648:	200006e4 	.word	0x200006e4

0800d64c <__malloc_unlock>:
 800d64c:	4801      	ldr	r0, [pc, #4]	@ (800d654 <__malloc_unlock+0x8>)
 800d64e:	f7ff bf09 	b.w	800d464 <__retarget_lock_release_recursive>
 800d652:	bf00      	nop
 800d654:	200006e4 	.word	0x200006e4

0800d658 <__sfputc_r>:
 800d658:	6893      	ldr	r3, [r2, #8]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	6093      	str	r3, [r2, #8]
 800d660:	b410      	push	{r4}
 800d662:	da08      	bge.n	800d676 <__sfputc_r+0x1e>
 800d664:	6994      	ldr	r4, [r2, #24]
 800d666:	42a3      	cmp	r3, r4
 800d668:	db01      	blt.n	800d66e <__sfputc_r+0x16>
 800d66a:	290a      	cmp	r1, #10
 800d66c:	d103      	bne.n	800d676 <__sfputc_r+0x1e>
 800d66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d672:	f7ff bde8 	b.w	800d246 <__swbuf_r>
 800d676:	6813      	ldr	r3, [r2, #0]
 800d678:	1c58      	adds	r0, r3, #1
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	4608      	mov	r0, r1
 800d67e:	7019      	strb	r1, [r3, #0]
 800d680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <__sfputs_r>:
 800d686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d688:	4606      	mov	r6, r0
 800d68a:	460f      	mov	r7, r1
 800d68c:	4614      	mov	r4, r2
 800d68e:	18d5      	adds	r5, r2, r3
 800d690:	42ac      	cmp	r4, r5
 800d692:	d101      	bne.n	800d698 <__sfputs_r+0x12>
 800d694:	2000      	movs	r0, #0
 800d696:	e007      	b.n	800d6a8 <__sfputs_r+0x22>
 800d698:	463a      	mov	r2, r7
 800d69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ffda 	bl	800d658 <__sfputc_r>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d1f3      	bne.n	800d690 <__sfputs_r+0xa>
 800d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6ac <_vfiprintf_r>:
 800d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	b09d      	sub	sp, #116	@ 0x74
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	4698      	mov	r8, r3
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	b118      	cbz	r0, 800d6c4 <_vfiprintf_r+0x18>
 800d6bc:	6a03      	ldr	r3, [r0, #32]
 800d6be:	b90b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x18>
 800d6c0:	f7ff fcd8 	bl	800d074 <__sinit>
 800d6c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6c6:	07d9      	lsls	r1, r3, #31
 800d6c8:	d405      	bmi.n	800d6d6 <_vfiprintf_r+0x2a>
 800d6ca:	89ab      	ldrh	r3, [r5, #12]
 800d6cc:	059a      	lsls	r2, r3, #22
 800d6ce:	d402      	bmi.n	800d6d6 <_vfiprintf_r+0x2a>
 800d6d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6d2:	f7ff fec6 	bl	800d462 <__retarget_lock_acquire_recursive>
 800d6d6:	89ab      	ldrh	r3, [r5, #12]
 800d6d8:	071b      	lsls	r3, r3, #28
 800d6da:	d501      	bpl.n	800d6e0 <_vfiprintf_r+0x34>
 800d6dc:	692b      	ldr	r3, [r5, #16]
 800d6de:	b99b      	cbnz	r3, 800d708 <_vfiprintf_r+0x5c>
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7ff fdee 	bl	800d2c4 <__swsetup_r>
 800d6e8:	b170      	cbz	r0, 800d708 <_vfiprintf_r+0x5c>
 800d6ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6ec:	07dc      	lsls	r4, r3, #31
 800d6ee:	d504      	bpl.n	800d6fa <_vfiprintf_r+0x4e>
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	b01d      	add	sp, #116	@ 0x74
 800d6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fa:	89ab      	ldrh	r3, [r5, #12]
 800d6fc:	0598      	lsls	r0, r3, #22
 800d6fe:	d4f7      	bmi.n	800d6f0 <_vfiprintf_r+0x44>
 800d700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d702:	f7ff feaf 	bl	800d464 <__retarget_lock_release_recursive>
 800d706:	e7f3      	b.n	800d6f0 <_vfiprintf_r+0x44>
 800d708:	2300      	movs	r3, #0
 800d70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d70e:	f04f 0901 	mov.w	r9, #1
 800d712:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d8c8 <_vfiprintf_r+0x21c>
 800d716:	9309      	str	r3, [sp, #36]	@ 0x24
 800d718:	2320      	movs	r3, #32
 800d71a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d71e:	2330      	movs	r3, #48	@ 0x30
 800d720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d724:	4623      	mov	r3, r4
 800d726:	469a      	mov	sl, r3
 800d728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72c:	b10a      	cbz	r2, 800d732 <_vfiprintf_r+0x86>
 800d72e:	2a25      	cmp	r2, #37	@ 0x25
 800d730:	d1f9      	bne.n	800d726 <_vfiprintf_r+0x7a>
 800d732:	ebba 0b04 	subs.w	fp, sl, r4
 800d736:	d00b      	beq.n	800d750 <_vfiprintf_r+0xa4>
 800d738:	465b      	mov	r3, fp
 800d73a:	4622      	mov	r2, r4
 800d73c:	4629      	mov	r1, r5
 800d73e:	4630      	mov	r0, r6
 800d740:	f7ff ffa1 	bl	800d686 <__sfputs_r>
 800d744:	3001      	adds	r0, #1
 800d746:	f000 80a7 	beq.w	800d898 <_vfiprintf_r+0x1ec>
 800d74a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d74c:	445a      	add	r2, fp
 800d74e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d750:	f89a 3000 	ldrb.w	r3, [sl]
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 809f 	beq.w	800d898 <_vfiprintf_r+0x1ec>
 800d75a:	2300      	movs	r3, #0
 800d75c:	f04f 32ff 	mov.w	r2, #4294967295
 800d760:	f10a 0a01 	add.w	sl, sl, #1
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d76c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d76e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d772:	4654      	mov	r4, sl
 800d774:	2205      	movs	r2, #5
 800d776:	4854      	ldr	r0, [pc, #336]	@ (800d8c8 <_vfiprintf_r+0x21c>)
 800d778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77c:	f000 fb80 	bl	800de80 <memchr>
 800d780:	9a04      	ldr	r2, [sp, #16]
 800d782:	b9d8      	cbnz	r0, 800d7bc <_vfiprintf_r+0x110>
 800d784:	06d1      	lsls	r1, r2, #27
 800d786:	bf44      	itt	mi
 800d788:	2320      	movmi	r3, #32
 800d78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d78e:	0713      	lsls	r3, r2, #28
 800d790:	bf44      	itt	mi
 800d792:	232b      	movmi	r3, #43	@ 0x2b
 800d794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d798:	f89a 3000 	ldrb.w	r3, [sl]
 800d79c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d79e:	d015      	beq.n	800d7cc <_vfiprintf_r+0x120>
 800d7a0:	9a07      	ldr	r2, [sp, #28]
 800d7a2:	4654      	mov	r4, sl
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f04f 0c0a 	mov.w	ip, #10
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7b0:	3b30      	subs	r3, #48	@ 0x30
 800d7b2:	2b09      	cmp	r3, #9
 800d7b4:	d94b      	bls.n	800d84e <_vfiprintf_r+0x1a2>
 800d7b6:	b1b0      	cbz	r0, 800d7e6 <_vfiprintf_r+0x13a>
 800d7b8:	9207      	str	r2, [sp, #28]
 800d7ba:	e014      	b.n	800d7e6 <_vfiprintf_r+0x13a>
 800d7bc:	eba0 0308 	sub.w	r3, r0, r8
 800d7c0:	46a2      	mov	sl, r4
 800d7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	9304      	str	r3, [sp, #16]
 800d7ca:	e7d2      	b.n	800d772 <_vfiprintf_r+0xc6>
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	1d19      	adds	r1, r3, #4
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	9103      	str	r1, [sp, #12]
 800d7d6:	bfbb      	ittet	lt
 800d7d8:	425b      	neglt	r3, r3
 800d7da:	f042 0202 	orrlt.w	r2, r2, #2
 800d7de:	9307      	strge	r3, [sp, #28]
 800d7e0:	9307      	strlt	r3, [sp, #28]
 800d7e2:	bfb8      	it	lt
 800d7e4:	9204      	strlt	r2, [sp, #16]
 800d7e6:	7823      	ldrb	r3, [r4, #0]
 800d7e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ea:	d10a      	bne.n	800d802 <_vfiprintf_r+0x156>
 800d7ec:	7863      	ldrb	r3, [r4, #1]
 800d7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7f0:	d132      	bne.n	800d858 <_vfiprintf_r+0x1ac>
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	3402      	adds	r4, #2
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7fe:	9203      	str	r2, [sp, #12]
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8d8 <_vfiprintf_r+0x22c>
 800d806:	2203      	movs	r2, #3
 800d808:	7821      	ldrb	r1, [r4, #0]
 800d80a:	4650      	mov	r0, sl
 800d80c:	f000 fb38 	bl	800de80 <memchr>
 800d810:	b138      	cbz	r0, 800d822 <_vfiprintf_r+0x176>
 800d812:	eba0 000a 	sub.w	r0, r0, sl
 800d816:	2240      	movs	r2, #64	@ 0x40
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	3401      	adds	r4, #1
 800d81c:	4082      	lsls	r2, r0
 800d81e:	4313      	orrs	r3, r2
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d826:	2206      	movs	r2, #6
 800d828:	4828      	ldr	r0, [pc, #160]	@ (800d8cc <_vfiprintf_r+0x220>)
 800d82a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d82e:	f000 fb27 	bl	800de80 <memchr>
 800d832:	2800      	cmp	r0, #0
 800d834:	d03f      	beq.n	800d8b6 <_vfiprintf_r+0x20a>
 800d836:	4b26      	ldr	r3, [pc, #152]	@ (800d8d0 <_vfiprintf_r+0x224>)
 800d838:	bb1b      	cbnz	r3, 800d882 <_vfiprintf_r+0x1d6>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	3307      	adds	r3, #7
 800d83e:	f023 0307 	bic.w	r3, r3, #7
 800d842:	3308      	adds	r3, #8
 800d844:	9303      	str	r3, [sp, #12]
 800d846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d848:	443b      	add	r3, r7
 800d84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d84c:	e76a      	b.n	800d724 <_vfiprintf_r+0x78>
 800d84e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d852:	460c      	mov	r4, r1
 800d854:	2001      	movs	r0, #1
 800d856:	e7a8      	b.n	800d7aa <_vfiprintf_r+0xfe>
 800d858:	2300      	movs	r3, #0
 800d85a:	3401      	adds	r4, #1
 800d85c:	f04f 0c0a 	mov.w	ip, #10
 800d860:	4619      	mov	r1, r3
 800d862:	9305      	str	r3, [sp, #20]
 800d864:	4620      	mov	r0, r4
 800d866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d86a:	3a30      	subs	r2, #48	@ 0x30
 800d86c:	2a09      	cmp	r2, #9
 800d86e:	d903      	bls.n	800d878 <_vfiprintf_r+0x1cc>
 800d870:	2b00      	cmp	r3, #0
 800d872:	d0c6      	beq.n	800d802 <_vfiprintf_r+0x156>
 800d874:	9105      	str	r1, [sp, #20]
 800d876:	e7c4      	b.n	800d802 <_vfiprintf_r+0x156>
 800d878:	fb0c 2101 	mla	r1, ip, r1, r2
 800d87c:	4604      	mov	r4, r0
 800d87e:	2301      	movs	r3, #1
 800d880:	e7f0      	b.n	800d864 <_vfiprintf_r+0x1b8>
 800d882:	ab03      	add	r3, sp, #12
 800d884:	462a      	mov	r2, r5
 800d886:	a904      	add	r1, sp, #16
 800d888:	4630      	mov	r0, r6
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	4b11      	ldr	r3, [pc, #68]	@ (800d8d4 <_vfiprintf_r+0x228>)
 800d88e:	f3af 8000 	nop.w
 800d892:	4607      	mov	r7, r0
 800d894:	1c78      	adds	r0, r7, #1
 800d896:	d1d6      	bne.n	800d846 <_vfiprintf_r+0x19a>
 800d898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d89a:	07d9      	lsls	r1, r3, #31
 800d89c:	d405      	bmi.n	800d8aa <_vfiprintf_r+0x1fe>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	059a      	lsls	r2, r3, #22
 800d8a2:	d402      	bmi.n	800d8aa <_vfiprintf_r+0x1fe>
 800d8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8a6:	f7ff fddd 	bl	800d464 <__retarget_lock_release_recursive>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	065b      	lsls	r3, r3, #25
 800d8ae:	f53f af1f 	bmi.w	800d6f0 <_vfiprintf_r+0x44>
 800d8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8b4:	e71e      	b.n	800d6f4 <_vfiprintf_r+0x48>
 800d8b6:	ab03      	add	r3, sp, #12
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	a904      	add	r1, sp, #16
 800d8bc:	4630      	mov	r0, r6
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	4b04      	ldr	r3, [pc, #16]	@ (800d8d4 <_vfiprintf_r+0x228>)
 800d8c2:	f000 f87d 	bl	800d9c0 <_printf_i>
 800d8c6:	e7e4      	b.n	800d892 <_vfiprintf_r+0x1e6>
 800d8c8:	0800e128 	.word	0x0800e128
 800d8cc:	0800e132 	.word	0x0800e132
 800d8d0:	00000000 	.word	0x00000000
 800d8d4:	0800d687 	.word	0x0800d687
 800d8d8:	0800e12e 	.word	0x0800e12e

0800d8dc <_printf_common>:
 800d8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e0:	4616      	mov	r6, r2
 800d8e2:	4698      	mov	r8, r3
 800d8e4:	688a      	ldr	r2, [r1, #8]
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	690b      	ldr	r3, [r1, #16]
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	bfb8      	it	lt
 800d8f4:	4613      	movlt	r3, r2
 800d8f6:	6033      	str	r3, [r6, #0]
 800d8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8fc:	b10a      	cbz	r2, 800d902 <_printf_common+0x26>
 800d8fe:	3301      	adds	r3, #1
 800d900:	6033      	str	r3, [r6, #0]
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	0699      	lsls	r1, r3, #26
 800d906:	bf42      	ittt	mi
 800d908:	6833      	ldrmi	r3, [r6, #0]
 800d90a:	3302      	addmi	r3, #2
 800d90c:	6033      	strmi	r3, [r6, #0]
 800d90e:	6825      	ldr	r5, [r4, #0]
 800d910:	f015 0506 	ands.w	r5, r5, #6
 800d914:	d106      	bne.n	800d924 <_printf_common+0x48>
 800d916:	f104 0a19 	add.w	sl, r4, #25
 800d91a:	68e3      	ldr	r3, [r4, #12]
 800d91c:	6832      	ldr	r2, [r6, #0]
 800d91e:	1a9b      	subs	r3, r3, r2
 800d920:	42ab      	cmp	r3, r5
 800d922:	dc2b      	bgt.n	800d97c <_printf_common+0xa0>
 800d924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d928:	6822      	ldr	r2, [r4, #0]
 800d92a:	3b00      	subs	r3, #0
 800d92c:	bf18      	it	ne
 800d92e:	2301      	movne	r3, #1
 800d930:	0692      	lsls	r2, r2, #26
 800d932:	d430      	bmi.n	800d996 <_printf_common+0xba>
 800d934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d938:	4641      	mov	r1, r8
 800d93a:	4638      	mov	r0, r7
 800d93c:	47c8      	blx	r9
 800d93e:	3001      	adds	r0, #1
 800d940:	d023      	beq.n	800d98a <_printf_common+0xae>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	341a      	adds	r4, #26
 800d946:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d94a:	f003 0306 	and.w	r3, r3, #6
 800d94e:	2b04      	cmp	r3, #4
 800d950:	bf0a      	itet	eq
 800d952:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d956:	2500      	movne	r5, #0
 800d958:	6833      	ldreq	r3, [r6, #0]
 800d95a:	f04f 0600 	mov.w	r6, #0
 800d95e:	bf08      	it	eq
 800d960:	1aed      	subeq	r5, r5, r3
 800d962:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d966:	bf08      	it	eq
 800d968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d96c:	4293      	cmp	r3, r2
 800d96e:	bfc4      	itt	gt
 800d970:	1a9b      	subgt	r3, r3, r2
 800d972:	18ed      	addgt	r5, r5, r3
 800d974:	42b5      	cmp	r5, r6
 800d976:	d11a      	bne.n	800d9ae <_printf_common+0xd2>
 800d978:	2000      	movs	r0, #0
 800d97a:	e008      	b.n	800d98e <_printf_common+0xb2>
 800d97c:	2301      	movs	r3, #1
 800d97e:	4652      	mov	r2, sl
 800d980:	4641      	mov	r1, r8
 800d982:	4638      	mov	r0, r7
 800d984:	47c8      	blx	r9
 800d986:	3001      	adds	r0, #1
 800d988:	d103      	bne.n	800d992 <_printf_common+0xb6>
 800d98a:	f04f 30ff 	mov.w	r0, #4294967295
 800d98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d992:	3501      	adds	r5, #1
 800d994:	e7c1      	b.n	800d91a <_printf_common+0x3e>
 800d996:	18e1      	adds	r1, r4, r3
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	2030      	movs	r0, #48	@ 0x30
 800d99c:	3302      	adds	r3, #2
 800d99e:	4422      	add	r2, r4
 800d9a0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9ac:	e7c2      	b.n	800d934 <_printf_common+0x58>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	4622      	mov	r2, r4
 800d9b2:	4641      	mov	r1, r8
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	47c8      	blx	r9
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d0e6      	beq.n	800d98a <_printf_common+0xae>
 800d9bc:	3601      	adds	r6, #1
 800d9be:	e7d9      	b.n	800d974 <_printf_common+0x98>

0800d9c0 <_printf_i>:
 800d9c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c4:	7e0f      	ldrb	r7, [r1, #24]
 800d9c6:	4691      	mov	r9, r2
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	2f78      	cmp	r7, #120	@ 0x78
 800d9ce:	469a      	mov	sl, r3
 800d9d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9d6:	d807      	bhi.n	800d9e8 <_printf_i+0x28>
 800d9d8:	2f62      	cmp	r7, #98	@ 0x62
 800d9da:	d80a      	bhi.n	800d9f2 <_printf_i+0x32>
 800d9dc:	2f00      	cmp	r7, #0
 800d9de:	f000 80d2 	beq.w	800db86 <_printf_i+0x1c6>
 800d9e2:	2f58      	cmp	r7, #88	@ 0x58
 800d9e4:	f000 80b9 	beq.w	800db5a <_printf_i+0x19a>
 800d9e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9f0:	e03a      	b.n	800da68 <_printf_i+0xa8>
 800d9f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9f6:	2b15      	cmp	r3, #21
 800d9f8:	d8f6      	bhi.n	800d9e8 <_printf_i+0x28>
 800d9fa:	a101      	add	r1, pc, #4	@ (adr r1, 800da00 <_printf_i+0x40>)
 800d9fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da00:	0800da59 	.word	0x0800da59
 800da04:	0800da6d 	.word	0x0800da6d
 800da08:	0800d9e9 	.word	0x0800d9e9
 800da0c:	0800d9e9 	.word	0x0800d9e9
 800da10:	0800d9e9 	.word	0x0800d9e9
 800da14:	0800d9e9 	.word	0x0800d9e9
 800da18:	0800da6d 	.word	0x0800da6d
 800da1c:	0800d9e9 	.word	0x0800d9e9
 800da20:	0800d9e9 	.word	0x0800d9e9
 800da24:	0800d9e9 	.word	0x0800d9e9
 800da28:	0800d9e9 	.word	0x0800d9e9
 800da2c:	0800db6d 	.word	0x0800db6d
 800da30:	0800da97 	.word	0x0800da97
 800da34:	0800db27 	.word	0x0800db27
 800da38:	0800d9e9 	.word	0x0800d9e9
 800da3c:	0800d9e9 	.word	0x0800d9e9
 800da40:	0800db8f 	.word	0x0800db8f
 800da44:	0800d9e9 	.word	0x0800d9e9
 800da48:	0800da97 	.word	0x0800da97
 800da4c:	0800d9e9 	.word	0x0800d9e9
 800da50:	0800d9e9 	.word	0x0800d9e9
 800da54:	0800db2f 	.word	0x0800db2f
 800da58:	6833      	ldr	r3, [r6, #0]
 800da5a:	1d1a      	adds	r2, r3, #4
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	6032      	str	r2, [r6, #0]
 800da60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da68:	2301      	movs	r3, #1
 800da6a:	e09d      	b.n	800dba8 <_printf_i+0x1e8>
 800da6c:	6833      	ldr	r3, [r6, #0]
 800da6e:	6820      	ldr	r0, [r4, #0]
 800da70:	1d19      	adds	r1, r3, #4
 800da72:	6031      	str	r1, [r6, #0]
 800da74:	0606      	lsls	r6, r0, #24
 800da76:	d501      	bpl.n	800da7c <_printf_i+0xbc>
 800da78:	681d      	ldr	r5, [r3, #0]
 800da7a:	e003      	b.n	800da84 <_printf_i+0xc4>
 800da7c:	0645      	lsls	r5, r0, #25
 800da7e:	d5fb      	bpl.n	800da78 <_printf_i+0xb8>
 800da80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da84:	2d00      	cmp	r5, #0
 800da86:	da03      	bge.n	800da90 <_printf_i+0xd0>
 800da88:	232d      	movs	r3, #45	@ 0x2d
 800da8a:	426d      	negs	r5, r5
 800da8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da90:	4859      	ldr	r0, [pc, #356]	@ (800dbf8 <_printf_i+0x238>)
 800da92:	230a      	movs	r3, #10
 800da94:	e011      	b.n	800daba <_printf_i+0xfa>
 800da96:	6821      	ldr	r1, [r4, #0]
 800da98:	6833      	ldr	r3, [r6, #0]
 800da9a:	0608      	lsls	r0, r1, #24
 800da9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800daa0:	d402      	bmi.n	800daa8 <_printf_i+0xe8>
 800daa2:	0649      	lsls	r1, r1, #25
 800daa4:	bf48      	it	mi
 800daa6:	b2ad      	uxthmi	r5, r5
 800daa8:	2f6f      	cmp	r7, #111	@ 0x6f
 800daaa:	6033      	str	r3, [r6, #0]
 800daac:	4852      	ldr	r0, [pc, #328]	@ (800dbf8 <_printf_i+0x238>)
 800daae:	bf14      	ite	ne
 800dab0:	230a      	movne	r3, #10
 800dab2:	2308      	moveq	r3, #8
 800dab4:	2100      	movs	r1, #0
 800dab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800daba:	6866      	ldr	r6, [r4, #4]
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	60a6      	str	r6, [r4, #8]
 800dac0:	bfa2      	ittt	ge
 800dac2:	6821      	ldrge	r1, [r4, #0]
 800dac4:	f021 0104 	bicge.w	r1, r1, #4
 800dac8:	6021      	strge	r1, [r4, #0]
 800daca:	b90d      	cbnz	r5, 800dad0 <_printf_i+0x110>
 800dacc:	2e00      	cmp	r6, #0
 800dace:	d04b      	beq.n	800db68 <_printf_i+0x1a8>
 800dad0:	4616      	mov	r6, r2
 800dad2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dad6:	fb03 5711 	mls	r7, r3, r1, r5
 800dada:	5dc7      	ldrb	r7, [r0, r7]
 800dadc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dae0:	462f      	mov	r7, r5
 800dae2:	460d      	mov	r5, r1
 800dae4:	42bb      	cmp	r3, r7
 800dae6:	d9f4      	bls.n	800dad2 <_printf_i+0x112>
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d10b      	bne.n	800db04 <_printf_i+0x144>
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	07df      	lsls	r7, r3, #31
 800daf0:	d508      	bpl.n	800db04 <_printf_i+0x144>
 800daf2:	6923      	ldr	r3, [r4, #16]
 800daf4:	6861      	ldr	r1, [r4, #4]
 800daf6:	4299      	cmp	r1, r3
 800daf8:	bfde      	ittt	le
 800dafa:	2330      	movle	r3, #48	@ 0x30
 800dafc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db04:	1b92      	subs	r2, r2, r6
 800db06:	6122      	str	r2, [r4, #16]
 800db08:	464b      	mov	r3, r9
 800db0a:	aa03      	add	r2, sp, #12
 800db0c:	4621      	mov	r1, r4
 800db0e:	4640      	mov	r0, r8
 800db10:	f8cd a000 	str.w	sl, [sp]
 800db14:	f7ff fee2 	bl	800d8dc <_printf_common>
 800db18:	3001      	adds	r0, #1
 800db1a:	d14a      	bne.n	800dbb2 <_printf_i+0x1f2>
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b004      	add	sp, #16
 800db22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	f043 0320 	orr.w	r3, r3, #32
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	2778      	movs	r7, #120	@ 0x78
 800db30:	4832      	ldr	r0, [pc, #200]	@ (800dbfc <_printf_i+0x23c>)
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db38:	061f      	lsls	r7, r3, #24
 800db3a:	6831      	ldr	r1, [r6, #0]
 800db3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800db40:	d402      	bmi.n	800db48 <_printf_i+0x188>
 800db42:	065f      	lsls	r7, r3, #25
 800db44:	bf48      	it	mi
 800db46:	b2ad      	uxthmi	r5, r5
 800db48:	6031      	str	r1, [r6, #0]
 800db4a:	07d9      	lsls	r1, r3, #31
 800db4c:	bf44      	itt	mi
 800db4e:	f043 0320 	orrmi.w	r3, r3, #32
 800db52:	6023      	strmi	r3, [r4, #0]
 800db54:	b11d      	cbz	r5, 800db5e <_printf_i+0x19e>
 800db56:	2310      	movs	r3, #16
 800db58:	e7ac      	b.n	800dab4 <_printf_i+0xf4>
 800db5a:	4827      	ldr	r0, [pc, #156]	@ (800dbf8 <_printf_i+0x238>)
 800db5c:	e7e9      	b.n	800db32 <_printf_i+0x172>
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	f023 0320 	bic.w	r3, r3, #32
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	e7f6      	b.n	800db56 <_printf_i+0x196>
 800db68:	4616      	mov	r6, r2
 800db6a:	e7bd      	b.n	800dae8 <_printf_i+0x128>
 800db6c:	6833      	ldr	r3, [r6, #0]
 800db6e:	6825      	ldr	r5, [r4, #0]
 800db70:	1d18      	adds	r0, r3, #4
 800db72:	6961      	ldr	r1, [r4, #20]
 800db74:	6030      	str	r0, [r6, #0]
 800db76:	062e      	lsls	r6, r5, #24
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	d501      	bpl.n	800db80 <_printf_i+0x1c0>
 800db7c:	6019      	str	r1, [r3, #0]
 800db7e:	e002      	b.n	800db86 <_printf_i+0x1c6>
 800db80:	0668      	lsls	r0, r5, #25
 800db82:	d5fb      	bpl.n	800db7c <_printf_i+0x1bc>
 800db84:	8019      	strh	r1, [r3, #0]
 800db86:	2300      	movs	r3, #0
 800db88:	4616      	mov	r6, r2
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	e7bc      	b.n	800db08 <_printf_i+0x148>
 800db8e:	6833      	ldr	r3, [r6, #0]
 800db90:	2100      	movs	r1, #0
 800db92:	1d1a      	adds	r2, r3, #4
 800db94:	6032      	str	r2, [r6, #0]
 800db96:	681e      	ldr	r6, [r3, #0]
 800db98:	6862      	ldr	r2, [r4, #4]
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 f970 	bl	800de80 <memchr>
 800dba0:	b108      	cbz	r0, 800dba6 <_printf_i+0x1e6>
 800dba2:	1b80      	subs	r0, r0, r6
 800dba4:	6060      	str	r0, [r4, #4]
 800dba6:	6863      	ldr	r3, [r4, #4]
 800dba8:	6123      	str	r3, [r4, #16]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbb0:	e7aa      	b.n	800db08 <_printf_i+0x148>
 800dbb2:	6923      	ldr	r3, [r4, #16]
 800dbb4:	4632      	mov	r2, r6
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	4640      	mov	r0, r8
 800dbba:	47d0      	blx	sl
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	d0ad      	beq.n	800db1c <_printf_i+0x15c>
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	079b      	lsls	r3, r3, #30
 800dbc4:	d413      	bmi.n	800dbee <_printf_i+0x22e>
 800dbc6:	68e0      	ldr	r0, [r4, #12]
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	4298      	cmp	r0, r3
 800dbcc:	bfb8      	it	lt
 800dbce:	4618      	movlt	r0, r3
 800dbd0:	e7a6      	b.n	800db20 <_printf_i+0x160>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	4640      	mov	r0, r8
 800dbda:	47d0      	blx	sl
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d09d      	beq.n	800db1c <_printf_i+0x15c>
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	68e3      	ldr	r3, [r4, #12]
 800dbe4:	9903      	ldr	r1, [sp, #12]
 800dbe6:	1a5b      	subs	r3, r3, r1
 800dbe8:	42ab      	cmp	r3, r5
 800dbea:	dcf2      	bgt.n	800dbd2 <_printf_i+0x212>
 800dbec:	e7eb      	b.n	800dbc6 <_printf_i+0x206>
 800dbee:	2500      	movs	r5, #0
 800dbf0:	f104 0619 	add.w	r6, r4, #25
 800dbf4:	e7f5      	b.n	800dbe2 <_printf_i+0x222>
 800dbf6:	bf00      	nop
 800dbf8:	0800e139 	.word	0x0800e139
 800dbfc:	0800e14a 	.word	0x0800e14a

0800dc00 <__sflush_r>:
 800dc00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc08:	0716      	lsls	r6, r2, #28
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	d454      	bmi.n	800dcba <__sflush_r+0xba>
 800dc10:	684b      	ldr	r3, [r1, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc02      	bgt.n	800dc1c <__sflush_r+0x1c>
 800dc16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	dd48      	ble.n	800dcae <__sflush_r+0xae>
 800dc1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d045      	beq.n	800dcae <__sflush_r+0xae>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc28:	682f      	ldr	r7, [r5, #0]
 800dc2a:	6a21      	ldr	r1, [r4, #32]
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	d030      	beq.n	800dc92 <__sflush_r+0x92>
 800dc30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	0759      	lsls	r1, r3, #29
 800dc36:	d505      	bpl.n	800dc44 <__sflush_r+0x44>
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	1ad2      	subs	r2, r2, r3
 800dc3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc3e:	b10b      	cbz	r3, 800dc44 <__sflush_r+0x44>
 800dc40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc42:	1ad2      	subs	r2, r2, r3
 800dc44:	2300      	movs	r3, #0
 800dc46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc48:	6a21      	ldr	r1, [r4, #32]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b0      	blx	r6
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	d106      	bne.n	800dc62 <__sflush_r+0x62>
 800dc54:	6829      	ldr	r1, [r5, #0]
 800dc56:	291d      	cmp	r1, #29
 800dc58:	d82b      	bhi.n	800dcb2 <__sflush_r+0xb2>
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd04 <__sflush_r+0x104>)
 800dc5c:	410a      	asrs	r2, r1
 800dc5e:	07d6      	lsls	r6, r2, #31
 800dc60:	d427      	bmi.n	800dcb2 <__sflush_r+0xb2>
 800dc62:	2200      	movs	r2, #0
 800dc64:	04d9      	lsls	r1, r3, #19
 800dc66:	6062      	str	r2, [r4, #4]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	d504      	bpl.n	800dc78 <__sflush_r+0x78>
 800dc6e:	1c42      	adds	r2, r0, #1
 800dc70:	d101      	bne.n	800dc76 <__sflush_r+0x76>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b903      	cbnz	r3, 800dc78 <__sflush_r+0x78>
 800dc76:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	b1b9      	cbz	r1, 800dcae <__sflush_r+0xae>
 800dc7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc82:	4299      	cmp	r1, r3
 800dc84:	d002      	beq.n	800dc8c <__sflush_r+0x8c>
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7ff fbee 	bl	800d468 <_free_r>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc90:	e00d      	b.n	800dcae <__sflush_r+0xae>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4628      	mov	r0, r5
 800dc96:	47b0      	blx	r6
 800dc98:	4602      	mov	r2, r0
 800dc9a:	1c50      	adds	r0, r2, #1
 800dc9c:	d1c9      	bne.n	800dc32 <__sflush_r+0x32>
 800dc9e:	682b      	ldr	r3, [r5, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d0c6      	beq.n	800dc32 <__sflush_r+0x32>
 800dca4:	2b1d      	cmp	r3, #29
 800dca6:	d001      	beq.n	800dcac <__sflush_r+0xac>
 800dca8:	2b16      	cmp	r3, #22
 800dcaa:	d11d      	bne.n	800dce8 <__sflush_r+0xe8>
 800dcac:	602f      	str	r7, [r5, #0]
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e021      	b.n	800dcf6 <__sflush_r+0xf6>
 800dcb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcb6:	b21b      	sxth	r3, r3
 800dcb8:	e01a      	b.n	800dcf0 <__sflush_r+0xf0>
 800dcba:	690f      	ldr	r7, [r1, #16]
 800dcbc:	2f00      	cmp	r7, #0
 800dcbe:	d0f6      	beq.n	800dcae <__sflush_r+0xae>
 800dcc0:	0793      	lsls	r3, r2, #30
 800dcc2:	680e      	ldr	r6, [r1, #0]
 800dcc4:	600f      	str	r7, [r1, #0]
 800dcc6:	bf0c      	ite	eq
 800dcc8:	694b      	ldreq	r3, [r1, #20]
 800dcca:	2300      	movne	r3, #0
 800dccc:	eba6 0807 	sub.w	r8, r6, r7
 800dcd0:	608b      	str	r3, [r1, #8]
 800dcd2:	f1b8 0f00 	cmp.w	r8, #0
 800dcd6:	ddea      	ble.n	800dcae <__sflush_r+0xae>
 800dcd8:	4643      	mov	r3, r8
 800dcda:	463a      	mov	r2, r7
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	4628      	mov	r0, r5
 800dce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dce2:	47b0      	blx	r6
 800dce4:	2800      	cmp	r0, #0
 800dce6:	dc08      	bgt.n	800dcfa <__sflush_r+0xfa>
 800dce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfa:	4407      	add	r7, r0
 800dcfc:	eba8 0800 	sub.w	r8, r8, r0
 800dd00:	e7e7      	b.n	800dcd2 <__sflush_r+0xd2>
 800dd02:	bf00      	nop
 800dd04:	dfbffffe 	.word	0xdfbffffe

0800dd08 <_fflush_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b913      	cbnz	r3, 800dd18 <_fflush_r+0x10>
 800dd12:	2500      	movs	r5, #0
 800dd14:	4628      	mov	r0, r5
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	b118      	cbz	r0, 800dd22 <_fflush_r+0x1a>
 800dd1a:	6a03      	ldr	r3, [r0, #32]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <_fflush_r+0x1a>
 800dd1e:	f7ff f9a9 	bl	800d074 <__sinit>
 800dd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f3      	beq.n	800dd12 <_fflush_r+0xa>
 800dd2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd2c:	07d0      	lsls	r0, r2, #31
 800dd2e:	d404      	bmi.n	800dd3a <_fflush_r+0x32>
 800dd30:	0599      	lsls	r1, r3, #22
 800dd32:	d402      	bmi.n	800dd3a <_fflush_r+0x32>
 800dd34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd36:	f7ff fb94 	bl	800d462 <__retarget_lock_acquire_recursive>
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	f7ff ff5f 	bl	800dc00 <__sflush_r>
 800dd42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd44:	4605      	mov	r5, r0
 800dd46:	07da      	lsls	r2, r3, #31
 800dd48:	d4e4      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	059b      	lsls	r3, r3, #22
 800dd4e:	d4e1      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd52:	f7ff fb87 	bl	800d464 <__retarget_lock_release_recursive>
 800dd56:	e7dd      	b.n	800dd14 <_fflush_r+0xc>

0800dd58 <__swhatbuf_r>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd60:	b096      	sub	sp, #88	@ 0x58
 800dd62:	4615      	mov	r5, r2
 800dd64:	2900      	cmp	r1, #0
 800dd66:	461e      	mov	r6, r3
 800dd68:	da0c      	bge.n	800dd84 <__swhatbuf_r+0x2c>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd72:	bf14      	ite	ne
 800dd74:	2340      	movne	r3, #64	@ 0x40
 800dd76:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	6031      	str	r1, [r6, #0]
 800dd7e:	602b      	str	r3, [r5, #0]
 800dd80:	b016      	add	sp, #88	@ 0x58
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
 800dd84:	466a      	mov	r2, sp
 800dd86:	f000 f849 	bl	800de1c <_fstat_r>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	dbed      	blt.n	800dd6a <__swhatbuf_r+0x12>
 800dd8e:	9901      	ldr	r1, [sp, #4]
 800dd90:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd94:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd98:	4259      	negs	r1, r3
 800dd9a:	4159      	adcs	r1, r3
 800dd9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dda0:	e7eb      	b.n	800dd7a <__swhatbuf_r+0x22>

0800dda2 <__smakebuf_r>:
 800dda2:	898b      	ldrh	r3, [r1, #12]
 800dda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dda6:	079d      	lsls	r5, r3, #30
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460c      	mov	r4, r1
 800ddac:	d507      	bpl.n	800ddbe <__smakebuf_r+0x1c>
 800ddae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	6123      	str	r3, [r4, #16]
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	6163      	str	r3, [r4, #20]
 800ddba:	b003      	add	sp, #12
 800ddbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddbe:	ab01      	add	r3, sp, #4
 800ddc0:	466a      	mov	r2, sp
 800ddc2:	f7ff ffc9 	bl	800dd58 <__swhatbuf_r>
 800ddc6:	9f00      	ldr	r7, [sp, #0]
 800ddc8:	4605      	mov	r5, r0
 800ddca:	4630      	mov	r0, r6
 800ddcc:	4639      	mov	r1, r7
 800ddce:	f7ff fbb7 	bl	800d540 <_malloc_r>
 800ddd2:	b948      	cbnz	r0, 800dde8 <__smakebuf_r+0x46>
 800ddd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd8:	059a      	lsls	r2, r3, #22
 800ddda:	d4ee      	bmi.n	800ddba <__smakebuf_r+0x18>
 800dddc:	f023 0303 	bic.w	r3, r3, #3
 800dde0:	f043 0302 	orr.w	r3, r3, #2
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	e7e2      	b.n	800ddae <__smakebuf_r+0xc>
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	6020      	str	r0, [r4, #0]
 800ddec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddf8:	b15b      	cbz	r3, 800de12 <__smakebuf_r+0x70>
 800ddfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddfe:	4630      	mov	r0, r6
 800de00:	f000 f81e 	bl	800de40 <_isatty_r>
 800de04:	b128      	cbz	r0, 800de12 <__smakebuf_r+0x70>
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	f023 0303 	bic.w	r3, r3, #3
 800de0c:	f043 0301 	orr.w	r3, r3, #1
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	431d      	orrs	r5, r3
 800de16:	81a5      	strh	r5, [r4, #12]
 800de18:	e7cf      	b.n	800ddba <__smakebuf_r+0x18>
	...

0800de1c <_fstat_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	2300      	movs	r3, #0
 800de20:	4d06      	ldr	r5, [pc, #24]	@ (800de3c <_fstat_r+0x20>)
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	f7f4 faae 	bl	800238a <_fstat>
 800de2e:	1c43      	adds	r3, r0, #1
 800de30:	d102      	bne.n	800de38 <_fstat_r+0x1c>
 800de32:	682b      	ldr	r3, [r5, #0]
 800de34:	b103      	cbz	r3, 800de38 <_fstat_r+0x1c>
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	200006e0 	.word	0x200006e0

0800de40 <_isatty_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	2300      	movs	r3, #0
 800de44:	4d05      	ldr	r5, [pc, #20]	@ (800de5c <_isatty_r+0x1c>)
 800de46:	4604      	mov	r4, r0
 800de48:	4608      	mov	r0, r1
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	f7f4 faad 	bl	80023aa <_isatty>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	d102      	bne.n	800de5a <_isatty_r+0x1a>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	b103      	cbz	r3, 800de5a <_isatty_r+0x1a>
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	200006e0 	.word	0x200006e0

0800de60 <_sbrk_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	2300      	movs	r3, #0
 800de64:	4d05      	ldr	r5, [pc, #20]	@ (800de7c <_sbrk_r+0x1c>)
 800de66:	4604      	mov	r4, r0
 800de68:	4608      	mov	r0, r1
 800de6a:	602b      	str	r3, [r5, #0]
 800de6c:	f7f4 fab6 	bl	80023dc <_sbrk>
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	d102      	bne.n	800de7a <_sbrk_r+0x1a>
 800de74:	682b      	ldr	r3, [r5, #0]
 800de76:	b103      	cbz	r3, 800de7a <_sbrk_r+0x1a>
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	bd38      	pop	{r3, r4, r5, pc}
 800de7c:	200006e0 	.word	0x200006e0

0800de80 <memchr>:
 800de80:	b2c9      	uxtb	r1, r1
 800de82:	4603      	mov	r3, r0
 800de84:	4402      	add	r2, r0
 800de86:	b510      	push	{r4, lr}
 800de88:	4293      	cmp	r3, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	d101      	bne.n	800de92 <memchr+0x12>
 800de8e:	2000      	movs	r0, #0
 800de90:	e003      	b.n	800de9a <memchr+0x1a>
 800de92:	7804      	ldrb	r4, [r0, #0]
 800de94:	3301      	adds	r3, #1
 800de96:	428c      	cmp	r4, r1
 800de98:	d1f6      	bne.n	800de88 <memchr+0x8>
 800de9a:	bd10      	pop	{r4, pc}

0800de9c <_init>:
 800de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9e:	bf00      	nop
 800dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea2:	bc08      	pop	{r3}
 800dea4:	469e      	mov	lr, r3
 800dea6:	4770      	bx	lr

0800dea8 <_fini>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr
