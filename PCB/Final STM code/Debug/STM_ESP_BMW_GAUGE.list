
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf8  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800cd50  0800cd50  0000dd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce6c  0800ce6c  0000e0ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce6c  0800ce6c  0000de6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce74  0800ce74  0000e0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce74  0800ce74  0000de74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce78  0800ce78  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800ce7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200000ec  0800cf68  0000e0ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800cf68  0000e69c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c592  00000000  00000000  0000e122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342f  00000000  00000000  0002a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ca  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d884  00000000  00000000  0003039a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8d7  00000000  00000000  0005dc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd99  00000000  00000000  0007c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a28e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a98  00000000  00000000  0019a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001a0d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800cd38 	.word	0x0800cd38

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800cd38 	.word	0x0800cd38

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f002 fe00 	bl	8003ab4 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f000 fe93 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f002 ff44 	bl	8003d68 <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00b f8b0 	bl	800c04c <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f002 ff95 	bl	8003e1c <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f000 fe74 	bl	8001be4 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800cd50 	.word	0x0800cd50

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b f96b 	bl	800c20c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fb72 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f000 fe3f 	bl	8001be4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fa0b 	bl	80043e4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f001 fd5a 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f001 fd71 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 fd52 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 fd69 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00a ff5d 	bl	800bf7c <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f002 fec2 	bl	8003e6c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800cd6c 	.word	0x0800cd6c
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00a ff31 	bl	800bf7c <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00a ff2a 	bl	800bf7c <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800cd6c 	.word	0x0800cd6c
 800114c:	0800cd84 	.word	0x0800cd84
 8001150:	20000000 	.word	0x20000000

08001154 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800115c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	201b      	movs	r0, #27
 800117e:	f001 fc85 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001182:	201b      	movs	r0, #27
 8001184:	f001 fc9c 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	44020c00 	.word	0x44020c00

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	4a35      	ldr	r2, [pc, #212]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <MX_GPIO_Init+0x130>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001228:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800122a:	f003 fa2d 	bl	8004688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001234:	4825      	ldr	r0, [pc, #148]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001236:	f003 fa27 	bl	8004688 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f243 413e 	movw	r1, #13374	@ 0x343e
 8001240:	4823      	ldr	r0, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001242:	f003 fa21 	bl	8004688 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800125c:	f003 f8c2 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800127a:	f003 f8b3 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800127e:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001282:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001298:	f003 f8a4 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800129c:	f243 433e 	movw	r3, #13374	@ 0x343e
 80012a0:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 80012b6:	f003 f895 	bl	80043e4 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	44020c00 	.word	0x44020c00
 80012c8:	42020800 	.word	0x42020800
 80012cc:	42020000 	.word	0x42020000
 80012d0:	42020400 	.word	0x42020400

080012d4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012d8:	2000      	movs	r0, #0
 80012da:	f003 fa07 	bl	80046ec <HAL_ICACHE_ConfigAssociativityMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012e4:	f000 fc7e 	bl	8001be4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012e8:	f003 fa20 	bl	800472c <HAL_ICACHE_Enable>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012f2:	f000 fc77 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <ESP32_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP32_SendCommand(const char* command) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7fe ffc7 	bl	8000298 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <ESP32_SendCommand+0x3c>)
 8001316:	f009 fa29 	bl	800a76c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	2202      	movs	r2, #2
 8001320:	4906      	ldr	r1, [pc, #24]	@ (800133c <ESP32_SendCommand+0x40>)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <ESP32_SendCommand+0x3c>)
 8001324:	f009 fa22 	bl	800a76c <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001328:	2064      	movs	r0, #100	@ 0x64
 800132a:	f001 fad3 	bl	80028d4 <HAL_Delay>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200003ac 	.word	0x200003ac
 800133c:	0800cda8 	.word	0x0800cda8

08001340 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800134c:	48b1      	ldr	r0, [pc, #708]	@ (8001614 <parse_frame+0x2d4>)
 800134e:	f003 f9b3 	bl	80046b8 <HAL_GPIO_TogglePin>

    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4bad      	ldr	r3, [pc, #692]	@ (8001618 <parse_frame+0x2d8>)
 8001362:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3304      	adds	r3, #4
 8001368:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4ba8      	ldr	r3, [pc, #672]	@ (8001618 <parse_frame+0x2d8>)
 8001376:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3304      	adds	r3, #4
 800137c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29a      	uxth	r2, r3
 8001388:	4ba3      	ldr	r3, [pc, #652]	@ (8001618 <parse_frame+0x2d8>)
 800138a:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3302      	adds	r3, #2
 8001390:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	4b9f      	ldr	r3, [pc, #636]	@ (8001618 <parse_frame+0x2d8>)
 800139c:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001618 <parse_frame+0x2d8>)
 80013ae:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b95      	ldr	r3, [pc, #596]	@ (8001618 <parse_frame+0x2d8>)
 80013c2:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3304      	adds	r3, #4
 80013c8:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b90      	ldr	r3, [pc, #576]	@ (8001618 <parse_frame+0x2d8>)
 80013d6:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3304      	adds	r3, #4
 80013dc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001618 <parse_frame+0x2d8>)
 80013ea:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3304      	adds	r3, #4
 80013f0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b86      	ldr	r3, [pc, #536]	@ (8001618 <parse_frame+0x2d8>)
 80013fe:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3304      	adds	r3, #4
 8001404:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4b81      	ldr	r3, [pc, #516]	@ (8001618 <parse_frame+0x2d8>)
 8001412:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	3304      	adds	r3, #4
 8001418:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b7c      	ldr	r3, [pc, #496]	@ (8001618 <parse_frame+0x2d8>)
 8001426:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3304      	adds	r3, #4
 800142c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b77      	ldr	r3, [pc, #476]	@ (8001618 <parse_frame+0x2d8>)
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3304      	adds	r3, #4
 8001440:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <parse_frame+0x2d8>)
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3304      	adds	r3, #4
 8001454:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <parse_frame+0x2d8>)
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3304      	adds	r3, #4
 8001468:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <parse_frame+0x2d8>)
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3304      	adds	r3, #4
 800147c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b63      	ldr	r3, [pc, #396]	@ (8001618 <parse_frame+0x2d8>)
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	3304      	adds	r3, #4
 8001490:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <parse_frame+0x2d8>)
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3304      	adds	r3, #4
 80014a4:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	441a      	add	r2, r3
 80014ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <parse_frame+0x2d8>)
 80014ae:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 80014b2:	4613      	mov	r3, r2
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3310      	adds	r3, #16
 80014c2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	441a      	add	r2, r3
 80014ca:	4b53      	ldr	r3, [pc, #332]	@ (8001618 <parse_frame+0x2d8>)
 80014cc:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80014d0:	4613      	mov	r3, r2
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	6859      	ldr	r1, [r3, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3310      	adds	r3, #16
 80014e0:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001618 <parse_frame+0x2d8>)
 80014ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <parse_frame+0x2d8>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f83b 	bl	8000570 <__aeabi_f2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <parse_frame+0x2dc>)
 8001500:	f7ff f9b8 	bl	8000874 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa9a 	bl	8000a44 <__aeabi_d2uiz>
 8001510:	4603      	mov	r3, r0
 8001512:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001518:	89bb      	ldrh	r3, [r7, #12]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	72bb      	strb	r3, [r7, #10]


    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <parse_frame+0x2d8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f823 	bl	8000570 <__aeabi_f2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <parse_frame+0x2e0>)
 8001530:	f7fe fec0 	bl	80002b4 <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <parse_frame+0x2e4>)
 8001542:	f7ff f997 	bl	8000874 <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fa79 	bl	8000a44 <__aeabi_d2uiz>
 8001552:	4603      	mov	r3, r0
 8001554:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <parse_frame+0x2d8>)
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <parse_frame+0x2e8>)
 800156a:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <parse_frame+0x2d8>)
 800156e:	891b      	ldrh	r3, [r3, #8]
 8001570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <parse_frame+0x2ec>)
 8001580:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001582:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <parse_frame+0x2d8>)
 8001584:	891b      	ldrh	r3, [r3, #8]
 8001586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <parse_frame+0x2f0>)
 8001596:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <parse_frame+0x2d8>)
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <parse_frame+0x2f4>)
 80015ac:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <parse_frame+0x2d8>)
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <parse_frame+0x2f8>)
 80015c2:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <parse_frame+0x2d8>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <parse_frame+0x2fc>)
 80015d8:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <parse_frame+0x2d8>)
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <parse_frame+0x300>)
 80015ee:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <parse_frame+0x2d8>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <parse_frame+0x304>)
 8001604:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <parse_frame+0x2d8>)
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	e01a      	b.n	8001648 <parse_frame+0x308>
 8001612:	bf00      	nop
 8001614:	42020000 	.word	0x42020000
 8001618:	20000250 	.word	0x20000250
 800161c:	3fc40000 	.word	0x3fc40000
 8001620:	40480000 	.word	0x40480000
 8001624:	3fe80000 	.word	0x3fe80000
 8001628:	200002b4 	.word	0x200002b4
 800162c:	200002b5 	.word	0x200002b5
 8001630:	200002b6 	.word	0x200002b6
 8001634:	200002b7 	.word	0x200002b7
 8001638:	200002b8 	.word	0x200002b8
 800163c:	200002b9 	.word	0x200002b9
 8001640:	200002ba 	.word	0x200002ba
 8001644:	200002bb 	.word	0x200002bb
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <parse_frame+0x384>)
 8001652:	701a      	strb	r2, [r3, #0]
    isBatteryWarning = frame.showLights & DL_BATTERY;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <parse_frame+0x388>)
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <parse_frame+0x38c>)
 8001668:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <parse_frame+0x388>)
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <parse_frame+0x390>)
 800167e:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <parse_frame+0x388>)
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <parse_frame+0x394>)
 8001694:	701a      	strb	r2, [r3, #0]


    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	461a      	mov	r2, r3
 800169a:	2102      	movs	r1, #2
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fd2d 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 80016a2:	7abb      	ldrb	r3, [r7, #10]
 80016a4:	461a      	mov	r2, r3
 80016a6:	2103      	movs	r1, #3
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd27 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 80016ae:	7a7b      	ldrb	r3, [r7, #9]
 80016b0:	461a      	mov	r2, r3
 80016b2:	2101      	movs	r1, #1
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fd21 	bl	80010fc <modify_can_frame_byte>

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002bc 	.word	0x200002bc
 80016c8:	20000250 	.word	0x20000250
 80016cc:	200002bd 	.word	0x200002bd
 80016d0:	200002be 	.word	0x200002be
 80016d4:	200002bf 	.word	0x200002bf

080016d8 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e009      	b.n	8001702 <calculate_checksum+0x2a>
        checksum ^= data[i];
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	4053      	eors	r3, r2
 80016fa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	3301      	adds	r3, #1
 8001700:	73bb      	strb	r3, [r7, #14]
 8001702:	7bba      	ldrb	r2, [r7, #14]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3f1      	bcc.n	80016ee <calculate_checksum+0x16>
    }
    return checksum;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4 )
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4603      	mov	r3, r0
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	717b      	strb	r3, [r7, #5]
 8001732:	4613      	mov	r3, r2
 8001734:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 800173e:	797b      	ldrb	r3, [r7, #5]
 8001740:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001742:	793b      	ldrb	r3, [r7, #4]
 8001744:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800174a:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 800174c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001750:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001752:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001756:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = 0x7; //lenght
 800175c:	2307      	movs	r3, #7
 800175e:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, 8);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2108      	movs	r1, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffb6 	bl	80016d8 <calculate_checksum>
 800176c:	4603      	mov	r3, r0
 800176e:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001770:	230a      	movs	r3, #10
 8001772:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001774:	f107 010c 	add.w	r1, r7, #12
 8001778:	2364      	movs	r3, #100	@ 0x64
 800177a:	220a      	movs	r2, #10
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <Send_KBUS_frame+0x74>)
 800177e:	f008 fff5 	bl	800a76c <HAL_UART_Transmit>
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000440 	.word	0x20000440

08001790 <process_frame>:


void process_frame(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <process_frame+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <process_frame+0x18>
        parse_frame(FrameBuffer);
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <process_frame+0x20>)
 800179e:	f7ff fdcf 	bl	8001340 <parse_frame>
        frameReady = false;
 80017a2:	4b02      	ldr	r3, [pc, #8]	@ (80017ac <process_frame+0x1c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    }
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000024e 	.word	0x2000024e
 80017b0:	200001ec 	.word	0x200001ec

080017b4 <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f44f 62d7 	mov.w	r2, #1720	@ 0x6b8
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <Set_PWM_Frequency+0xa0>)
 80017ca:	fb82 1203 	smull	r1, r2, r2, r3
 80017ce:	441a      	add	r2, r3
 80017d0:	1212      	asrs	r2, r2, #8
 80017d2:	17db      	asrs	r3, r3, #31
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	3332      	adds	r3, #50	@ 0x32
 80017d8:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f640 62d7 	movw	r2, #3799	@ 0xed7
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d817      	bhi.n	8001814 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f6:	d302      	bcc.n	80017fe <Set_PWM_Frequency+0x4a>
 80017f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fc:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e007      	b.n	8001824 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <Set_PWM_Frequency+0xa4>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d302      	bcc.n	8001832 <Set_PWM_Frequency+0x7e>
 800182c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001830:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <Set_PWM_Frequency+0xa8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <Set_PWM_Frequency+0xa8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001842:	4a06      	ldr	r2, [pc, #24]	@ (800185c <Set_PWM_Frequency+0xa8>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	f2b9d649 	.word	0xf2b9d649
 8001858:	0ee6b280 	.word	0x0ee6b280
 800185c:	200002c8 	.word	0x200002c8

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 ff78 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f000 f872 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186c:	f7ff fc92 	bl	8001194 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001870:	f7ff fc70 	bl	8001154 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001874:	f000 fda4 	bl	80023c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001878:	f000 fb74 	bl	8001f64 <MX_TIM1_Init>
  MX_ICACHE_Init();
 800187c:	f7ff fd2a 	bl	80012d4 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001880:	f7ff fadc 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001884:	f000 fc20 	bl	80020c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001888:	f000 fde6 	bl	8002458 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800188c:	f000 fc90 	bl	80021b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001890:	2104      	movs	r1, #4
 8001892:	4825      	ldr	r0, [pc, #148]	@ (8001928 <main+0xc8>)
 8001894:	f007 fb20 	bl	8008ed8 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001898:	4824      	ldr	r0, [pc, #144]	@ (800192c <main+0xcc>)
 800189a:	f7ff fd2f 	bl	80012fc <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 800189e:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018a2:	f001 f817 	bl	80028d4 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 80018a6:	4822      	ldr	r0, [pc, #136]	@ (8001930 <main+0xd0>)
 80018a8:	f7ff fd28 	bl	80012fc <ESP32_SendCommand>
  HAL_Delay(1000);
 80018ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b0:	f001 f810 	bl	80028d4 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	491f      	ldr	r1, [pc, #124]	@ (8001934 <main+0xd4>)
 80018b8:	481f      	ldr	r0, [pc, #124]	@ (8001938 <main+0xd8>)
 80018ba:	f008 fff5 	bl	800a8a8 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80018be:	481f      	ldr	r0, [pc, #124]	@ (800193c <main+0xdc>)
 80018c0:	f007 f99a 	bl	8008bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80018c4:	481e      	ldr	r0, [pc, #120]	@ (8001940 <main+0xe0>)
 80018c6:	f007 f997 	bl	8008bf8 <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 80018ca:	f7ff fb9b 	bl	8001004 <InitCANFrames>
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d4:	481b      	ldr	r0, [pc, #108]	@ (8001944 <main+0xe4>)
 80018d6:	f002 fed7 	bl	8004688 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // process_frame();
	 speed = frame.speed * 3.6;
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <main+0xe8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe46 	bl	8000570 <__aeabi_f2d>
 80018e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001920 <main+0xc0>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe99 	bl	8000620 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8c5 	bl	8000a84 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <main+0xec>)
 80018fe:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <main+0xec>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190a:	ee17 3a90 	vmov	r3, s15
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4f 	bl	80017b4 <Set_PWM_Frequency>
	 speed = frame.speed * 3.6;
 8001916:	bf00      	nop
 8001918:	e7df      	b.n	80018da <main+0x7a>
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	400ccccc 	.word	0x400ccccc
 8001928:	200002c8 	.word	0x200002c8
 800192c:	0800cdac 	.word	0x0800cdac
 8001930:	0800cdb4 	.word	0x0800cdb4
 8001934:	2000016c 	.word	0x2000016c
 8001938:	200003ac 	.word	0x200003ac
 800193c:	20000314 	.word	0x20000314
 8001940:	20000360 	.word	0x20000360
 8001944:	42020800 	.word	0x42020800
 8001948:	20000250 	.word	0x20000250
 800194c:	200002b0 	.word	0x200002b0

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09c      	sub	sp, #112	@ 0x70
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2250      	movs	r2, #80	@ 0x50
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f00a fc54 	bl	800c20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001976:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <SystemClock_Config+0xdc>)
 800197c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001980:	6113      	str	r3, [r2, #16]
 8001982:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800198e:	bf00      	nop
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d1f9      	bne.n	8001990 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80019aa:	2303      	movs	r3, #3
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 80019b2:	233e      	movs	r3, #62	@ 0x3e
 80019b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80019c2:	230c      	movs	r3, #12
 80019c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80019ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 feb9 	bl	800474c <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e0:	f000 f900 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	231f      	movs	r3, #31
 80019e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2303      	movs	r3, #3
 80019ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	2105      	movs	r1, #5
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fada 	bl	8004fbc <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a0e:	f000 f8e9 	bl	8001be4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <SystemClock_Config+0xe0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <SystemClock_Config+0xe0>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3770      	adds	r7, #112	@ 0x70
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	44020800 	.word	0x44020800
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	482e      	ldr	r0, [pc, #184]	@ (8001af8 <HAL_UART_RxCpltCallback+0xc4>)
 8001a40:	f002 fe3a 	bl	80046b8 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2c      	ldr	r2, [pc, #176]	@ (8001afc <HAL_UART_RxCpltCallback+0xc8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d150      	bne.n	8001af0 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <HAL_UART_RxCpltCallback+0xcc>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a54:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d813      	bhi.n	8001a86 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <HAL_UART_RxCpltCallback+0xd8>)
 8001a66:	5c9a      	ldrb	r2, [r3, r2]
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e033      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e02f      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d10d      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a94:	d127      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001aa0:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e01d      	b.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ab0:	d80a      	bhi.n	8001ac8 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	4a15      	ldr	r2, [pc, #84]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001abc:	7011      	strb	r1, [r2, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <HAL_UART_RxCpltCallback+0xd0>)
 8001ac2:	7819      	ldrb	r1, [r3, #0]
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_UART_RxCpltCallback+0xe0>)
 8001ac6:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ace:	d90a      	bls.n	8001ae6 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_UART_RxCpltCallback+0xe4>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
                process_frame();
 8001ad6:	f7ff fe5b 	bl	8001790 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_UART_RxCpltCallback+0xd4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_UART_RxCpltCallback+0xdc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4905      	ldr	r1, [pc, #20]	@ (8001b00 <HAL_UART_RxCpltCallback+0xcc>)
 8001aea:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <HAL_UART_RxCpltCallback+0xe8>)
 8001aec:	f008 fedc 	bl	800a8a8 <HAL_UART_Receive_DMA>
    }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	42020400 	.word	0x42020400
 8001afc:	40013800 	.word	0x40013800
 8001b00:	2000016c 	.word	0x2000016c
 8001b04:	200002c0 	.word	0x200002c0
 8001b08:	2000024c 	.word	0x2000024c
 8001b0c:	0800cde0 	.word	0x0800cde0
 8001b10:	2000024d 	.word	0x2000024d
 8001b14:	200001ec 	.word	0x200001ec
 8001b18:	2000024e 	.word	0x2000024e
 8001b1c:	200003ac 	.word	0x200003ac

08001b20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a29      	ldr	r2, [pc, #164]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d108      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fabb 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fab8 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fab5 	bl	80010ac <SendCANFrame>

	 }
	 if (htim == &htim3)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a23      	ldr	r2, [pc, #140]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d13d      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0xa6>
	 {
		bool anyConditionMet = false;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x42>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x56>
			command = command | TURN_LEFT;
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x6a>
			command = command | TURN_RIGHT;
 8001b7e:	7bbb      	ldrb	r3, [r7, #14]
 8001b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b84:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_TIM_PeriodElapsedCallback+0x8e>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x83, 0x0a, 0x3f);
 8001b96:	233f      	movs	r3, #63	@ 0x3f
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	2383      	movs	r3, #131	@ 0x83
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	225b      	movs	r2, #91	@ 0x5b
 8001ba6:	21bf      	movs	r1, #191	@ 0xbf
 8001ba8:	20d0      	movs	r0, #208	@ 0xd0
 8001baa:	f7ff fdb5 	bl	8001718 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x83, 0x0a, 0x3f);
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	223f      	movs	r2, #63	@ 0x3f
 8001bb2:	9202      	str	r2, [sp, #8]
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	2283      	movs	r2, #131	@ 0x83
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	225b      	movs	r2, #91	@ 0x5b
 8001bbe:	21bf      	movs	r1, #191	@ 0xbf
 8001bc0:	20d0      	movs	r0, #208	@ 0xd0
 8001bc2:	f7ff fda9 	bl	8001718 <Send_KBUS_frame>
	 }
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000314 	.word	0x20000314
 8001bd4:	20000360 	.word	0x20000360
 8001bd8:	200002b8 	.word	0x200002b8
 8001bdc:	200002be 	.word	0x200002be
 8001be0:	200002bf 	.word	0x200002bf

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	bf00      	nop
 8001c0c:	e7fd      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c12:	bf00      	nop
 8001c14:	e7fd      	b.n	8001c12 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	bf00      	nop
 8001c1c:	e7fd      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 fe1e 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001c62:	f001 fa1c 	bl	800309e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200004d4 	.word	0x200004d4

08001c70 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c76:	f002 f93d 	bl	8003ef4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000108 	.word	0x20000108

08001c84 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <FDCAN1_IT1_IRQHandler+0x10>)
 8001c8a:	f002 f933 	bl	8003ef4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000108 	.word	0x20000108

08001c98 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM1_BRK_IRQHandler+0x10>)
 8001c9e:	f007 fa5f 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200002c8 	.word	0x200002c8

08001cac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <TIM1_UP_IRQHandler+0x10>)
 8001cb2:	f007 fa55 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002c8 	.word	0x200002c8

08001cc0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001cc6:	f007 fa4b 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002c8 	.word	0x200002c8

08001cd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <TIM1_CC_IRQHandler+0x10>)
 8001cda:	f007 fa41 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002c8 	.word	0x200002c8

08001ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <TIM2_IRQHandler+0x10>)
 8001cee:	f007 fa37 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000314 	.word	0x20000314

08001cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <TIM3_IRQHandler+0x10>)
 8001d02:	f007 fa2d 	bl	8009160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000360 	.word	0x20000360

08001d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <USART1_IRQHandler+0x10>)
 8001d16:	f008 fe19 	bl	800a94c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200003ac 	.word	0x200003ac

08001d24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e00a      	b.n	8001d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d36:	f3af 8000 	nop.w
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf0      	blt.n	8001d36 <_read+0x12>
  }

  return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e009      	b.n	8001d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf1      	blt.n	8001d70 <_write+0x12>
  }
  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f00a fa3a 	bl	800c2a8 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20044000 	.word	0x20044000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	200002c4 	.word	0x200002c4
 8001e68:	200006a0 	.word	0x200006a0

08001e6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e72:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <SystemInit+0xdc>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e78:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <SystemInit+0xdc>)
 8001e7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <SystemInit+0xe0>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e88:	4b30      	ldr	r3, [pc, #192]	@ (8001f4c <SystemInit+0xe0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <SystemInit+0xe0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <SystemInit+0xe0>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	492c      	ldr	r1, [pc, #176]	@ (8001f4c <SystemInit+0xe0>)
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <SystemInit+0xe4>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <SystemInit+0xe0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001ea6:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <SystemInit+0xe0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <SystemInit+0xe0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <SystemInit+0xe0>)
 8001eb4:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <SystemInit+0xe8>)
 8001eb6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001eb8:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <SystemInit+0xe0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001ebe:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <SystemInit+0xe0>)
 8001ec0:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <SystemInit+0xe8>)
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <SystemInit+0xe0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <SystemInit+0xe0>)
 8001ecc:	4a21      	ldr	r2, [pc, #132]	@ (8001f54 <SystemInit+0xe8>)
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <SystemInit+0xe0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <SystemInit+0xe0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <SystemInit+0xe0>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <SystemInit+0xe0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <SystemInit+0xdc>)
 8001eea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001eee:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <SystemInit+0xec>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ef8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001f00:	d003      	beq.n	8001f0a <SystemInit+0x9e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001f08:	d117      	bne.n	8001f3a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <SystemInit+0xec>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <SystemInit+0xec>)
 8001f18:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <SystemInit+0xf0>)
 8001f1a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <SystemInit+0xec>)
 8001f1e:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <SystemInit+0xf4>)
 8001f20:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <SystemInit+0xec>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <SystemInit+0xec>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <SystemInit+0xec>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <SystemInit+0xec>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	61d3      	str	r3, [r2, #28]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	44020c00 	.word	0x44020c00
 8001f50:	eae2eae3 	.word	0xeae2eae3
 8001f54:	01010280 	.word	0x01010280
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	08192a3b 	.word	0x08192a3b
 8001f60:	4c5d6e7f 	.word	0x4c5d6e7f

08001f64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b09c      	sub	sp, #112	@ 0x70
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	615a      	str	r2, [r3, #20]
 8001f96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2234      	movs	r2, #52	@ 0x34
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00a f934 	bl	800c20c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa4:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fa6:	4a47      	ldr	r2, [pc, #284]	@ (80020c4 <MX_TIM1_Init+0x160>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001faa:	4b45      	ldr	r3, [pc, #276]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fac:	2231      	movs	r2, #49	@ 0x31
 8001fae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b43      	ldr	r3, [pc, #268]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fb6:	4b42      	ldr	r3, [pc, #264]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fd0:	483b      	ldr	r0, [pc, #236]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fd2:	f006 fdb9 	bl	8008b48 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fdc:	f7ff fe02 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fe6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fea:	4619      	mov	r1, r3
 8001fec:	4834      	ldr	r0, [pc, #208]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001fee:	f007 fb95 	bl	800971c <HAL_TIM_ConfigClockSource>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ff8:	f7ff fdf4 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ffc:	4830      	ldr	r0, [pc, #192]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8001ffe:	f006 ff0a 	bl	8008e16 <HAL_TIM_PWM_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002008:	f7ff fdec 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002018:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800201c:	4619      	mov	r1, r3
 800201e:	4828      	ldr	r0, [pc, #160]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8002020:	f008 f9a4 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800202a:	f7ff fddb 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	@ 0x60
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8002032:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800203c:	2300      	movs	r3, #0
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800204c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002050:	2204      	movs	r2, #4
 8002052:	4619      	mov	r1, r3
 8002054:	481a      	ldr	r0, [pc, #104]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 8002056:	f007 fa4d 	bl	80094f4 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002060:	f7ff fdc0 	bl	8001be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800208a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 80020a2:	f008 fa33 	bl	800a50c <HAL_TIMEx_ConfigBreakDeadTime>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80020ac:	f7ff fd9a 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <MX_TIM1_Init+0x15c>)
 80020b2:	f000 f949 	bl	8002348 <HAL_TIM_MspPostInit>

}
 80020b6:	bf00      	nop
 80020b8:	3770      	adds	r7, #112	@ 0x70
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200002c8 	.word	0x200002c8
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08e      	sub	sp, #56	@ 0x38
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e8:	463b      	mov	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	615a      	str	r2, [r3, #20]
 80020f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020fa:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <MX_TIM2_Init+0xe4>)
 80020fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002100:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002102:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002104:	2231      	movs	r2, #49	@ 0x31
 8002106:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <MX_TIM2_Init+0xe4>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800210e:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002110:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <MX_TIM2_Init+0xe4>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002122:	4822      	ldr	r0, [pc, #136]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002124:	f006 fd10 	bl	8008b48 <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800212e:	f7ff fd59 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002138:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213c:	4619      	mov	r1, r3
 800213e:	481b      	ldr	r0, [pc, #108]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002140:	f007 faec 	bl	800971c <HAL_TIM_ConfigClockSource>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800214a:	f7ff fd4b 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800214e:	4817      	ldr	r0, [pc, #92]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002150:	f006 fe00 	bl	8008d54 <HAL_TIM_OC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800215a:	f7ff fd43 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	480f      	ldr	r0, [pc, #60]	@ (80021ac <MX_TIM2_Init+0xe4>)
 800216e:	f008 f8fd 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002178:	f7ff fd34 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800217c:	2300      	movs	r3, #0
 800217e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	2204      	movs	r2, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	@ (80021ac <MX_TIM2_Init+0xe4>)
 8002194:	f007 f934 	bl	8009400 <HAL_TIM_OC_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800219e:	f7ff fd21 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	3738      	adds	r7, #56	@ 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000314 	.word	0x20000314

080021b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <MX_TIM3_Init+0x9c>)
 80021d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021e4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80021e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f6:	4814      	ldr	r0, [pc, #80]	@ (8002248 <MX_TIM3_Init+0x98>)
 80021f8:	f006 fca6 	bl	8008b48 <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002202:	f7ff fcef 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4619      	mov	r1, r3
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <MX_TIM3_Init+0x98>)
 8002214:	f007 fa82 	bl	800971c <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800221e:	f7ff fce1 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <MX_TIM3_Init+0x98>)
 8002230:	f008 f89c 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800223a:	f7ff fcd3 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000360 	.word	0x20000360
 800224c:	40000400 	.word	0x40000400

08002250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a37      	ldr	r2, [pc, #220]	@ (800233c <HAL_TIM_Base_MspInit+0xec>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d12f      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 8002264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002268:	4a35      	ldr	r2, [pc, #212]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 800226a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800226e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 8002274:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2029      	movs	r0, #41	@ 0x29
 8002286:	f000 fc01 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800228a:	2029      	movs	r0, #41	@ 0x29
 800228c:	f000 fc18 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2102      	movs	r1, #2
 8002294:	202a      	movs	r0, #42	@ 0x2a
 8002296:	f000 fbf9 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800229a:	202a      	movs	r0, #42	@ 0x2a
 800229c:	f000 fc10 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2102      	movs	r1, #2
 80022a4:	202b      	movs	r0, #43	@ 0x2b
 80022a6:	f000 fbf1 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022aa:	202b      	movs	r0, #43	@ 0x2b
 80022ac:	f000 fc08 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2102      	movs	r1, #2
 80022b4:	202c      	movs	r0, #44	@ 0x2c
 80022b6:	f000 fbe9 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022ba:	202c      	movs	r0, #44	@ 0x2c
 80022bc:	f000 fc00 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022c0:	e038      	b.n	8002334 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ca:	d117      	bne.n	80022fc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 80022de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	202d      	movs	r0, #45	@ 0x2d
 80022f0:	f000 fbcc 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f4:	202d      	movs	r0, #45	@ 0x2d
 80022f6:	f000 fbe3 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
}
 80022fa:	e01b      	b.n	8002334 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_TIM_Base_MspInit+0xf4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d116      	bne.n	8002334 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 8002308:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800230c:	4a0c      	ldr	r2, [pc, #48]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_TIM_Base_MspInit+0xf0>)
 8002318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2106      	movs	r1, #6
 8002328:	202e      	movs	r0, #46	@ 0x2e
 800232a:	f000 fbaf 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800232e:	202e      	movs	r0, #46	@ 0x2e
 8002330:	f000 fbc6 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40012c00 	.word	0x40012c00
 8002340:	44020c00 	.word	0x44020c00
 8002344:	40000400 	.word	0x40000400

08002348 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11f      	bne.n	80023aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 800236c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002370:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_TIM_MspPostInit+0x74>)
 80023a6:	f002 f81d 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	44020c00 	.word	0x44020c00
 80023bc:	42020000 	.word	0x42020000

080023c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023c6:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <MX_USART1_UART_Init+0x94>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002408:	4811      	ldr	r0, [pc, #68]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 800240a:	f008 f95f 	bl	800a6cc <HAL_UART_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002414:	f7ff fbe6 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002418:	2100      	movs	r1, #0
 800241a:	480d      	ldr	r0, [pc, #52]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 800241c:	f009 fc21 	bl	800bc62 <HAL_UARTEx_SetTxFifoThreshold>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002426:	f7ff fbdd 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242a:	2100      	movs	r1, #0
 800242c:	4808      	ldr	r0, [pc, #32]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 800242e:	f009 fc56 	bl	800bcde <HAL_UARTEx_SetRxFifoThreshold>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002438:	f7ff fbd4 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800243c:	4804      	ldr	r0, [pc, #16]	@ (8002450 <MX_USART1_UART_Init+0x90>)
 800243e:	f009 fbd7 	bl	800bbf0 <HAL_UARTEx_DisableFifoMode>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002448:	f7ff fbcc 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200003ac 	.word	0x200003ac
 8002454:	40013800 	.word	0x40013800

08002458 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800245c:	4b23      	ldr	r3, [pc, #140]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <MX_USART2_UART_Init+0x98>)
 8002460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 8002464:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 800246c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002470:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 800247a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800247e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249e:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024a4:	4811      	ldr	r0, [pc, #68]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 80024a6:	f008 f911 	bl	800a6cc <HAL_UART_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80024b0:	f7ff fb98 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b4:	2100      	movs	r1, #0
 80024b6:	480d      	ldr	r0, [pc, #52]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 80024b8:	f009 fbd3 	bl	800bc62 <HAL_UARTEx_SetTxFifoThreshold>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80024c2:	f7ff fb8f 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c6:	2100      	movs	r1, #0
 80024c8:	4808      	ldr	r0, [pc, #32]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 80024ca:	f009 fc08 	bl	800bcde <HAL_UARTEx_SetRxFifoThreshold>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80024d4:	f7ff fb86 	bl	8001be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	@ (80024ec <MX_USART2_UART_Init+0x94>)
 80024da:	f009 fb89 	bl	800bbf0 <HAL_UARTEx_DisableFifoMode>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80024e4:	f7ff fb7e 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000440 	.word	0x20000440
 80024f0:	40004400 	.word	0x40004400

080024f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0c0      	sub	sp, #256	@ 0x100
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	22d0      	movs	r2, #208	@ 0xd0
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f009 fe79 	bl	800c20c <memset>
  if(uartHandle->Instance==USART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a72      	ldr	r2, [pc, #456]	@ (80026e8 <HAL_UART_MspInit+0x1f4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f040 8091 	bne.w	8002648 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002526:	f04f 0201 	mov.w	r2, #1
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002532:	2300      	movs	r3, #0
 8002534:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002536:	f107 0318 	add.w	r3, r7, #24
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f880 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002546:	f7ff fb4d 	bl	8001be4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800254a:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800254c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002550:	4a66      	ldr	r2, [pc, #408]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002556:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800255a:	4b64      	ldr	r3, [pc, #400]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800255c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002568:	4b60      	ldr	r3, [pc, #384]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800256a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800256e:	4a5f      	ldr	r2, [pc, #380]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002578:	4b5c      	ldr	r3, [pc, #368]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800257a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002586:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800258a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025a0:	2304      	movs	r3, #4
 80025a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80025aa:	4619      	mov	r1, r3
 80025ac:	4850      	ldr	r0, [pc, #320]	@ (80026f0 <HAL_UART_MspInit+0x1fc>)
 80025ae:	f001 ff19 	bl	80043e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80025b2:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <HAL_UART_MspInit+0x204>)
 80025b6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 80025b8:	4b4e      	ldr	r3, [pc, #312]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025ba:	2215      	movs	r2, #21
 80025bc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80025be:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80025d0:	4b48      	ldr	r3, [pc, #288]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80025d6:	4b47      	ldr	r3, [pc, #284]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80025dc:	4b45      	ldr	r3, [pc, #276]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80025e2:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80025e8:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80025ee:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80025f4:	4b3f      	ldr	r3, [pc, #252]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002600:	4b3c      	ldr	r3, [pc, #240]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002606:	483b      	ldr	r0, [pc, #236]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 8002608:	f000 fb18 	bl	8002c3c <HAL_DMA_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8002612:	f7ff fae7 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a36      	ldr	r2, [pc, #216]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 800261a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800261e:	4a35      	ldr	r2, [pc, #212]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002624:	2110      	movs	r1, #16
 8002626:	4833      	ldr	r0, [pc, #204]	@ (80026f4 <HAL_UART_MspInit+0x200>)
 8002628:	f000 fe9a 	bl	8003360 <HAL_DMA_ConfigChannelAttributes>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002632:	f7ff fad7 	bl	8001be4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2101      	movs	r1, #1
 800263a:	203a      	movs	r0, #58	@ 0x3a
 800263c:	f000 fa26 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002640:	203a      	movs	r0, #58	@ 0x3a
 8002642:	f000 fa3d 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002646:	e049      	b.n	80026dc <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	@ (80026fc <HAL_UART_MspInit+0x208>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d144      	bne.n	80026dc <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002652:	f04f 0202 	mov.w	r2, #2
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800265e:	2300      	movs	r3, #0
 8002660:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002662:	f107 0318 	add.w	r3, r7, #24
 8002666:	4618      	mov	r0, r3
 8002668:	f002 ffea 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002672:	f7ff fab7 	bl	8001be4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002676:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 8002678:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800267c:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002682:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 8002688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 8002696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_UART_MspInit+0x1f8>)
 80026a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026b2:	230c      	movs	r3, #12
 80026b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ca:	2307      	movs	r3, #7
 80026cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80026d4:	4619      	mov	r1, r3
 80026d6:	480a      	ldr	r0, [pc, #40]	@ (8002700 <HAL_UART_MspInit+0x20c>)
 80026d8:	f001 fe84 	bl	80043e4 <HAL_GPIO_Init>
}
 80026dc:	bf00      	nop
 80026de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40013800 	.word	0x40013800
 80026ec:	44020c00 	.word	0x44020c00
 80026f0:	42020400 	.word	0x42020400
 80026f4:	200004d4 	.word	0x200004d4
 80026f8:	40020050 	.word	0x40020050
 80026fc:	40004400 	.word	0x40004400
 8002700:	42020000 	.word	0x42020000

08002704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002706:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002708:	f7ff fbb0 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800270c:	480c      	ldr	r0, [pc, #48]	@ (8002740 <LoopForever+0x6>)
  ldr r1, =_edata
 800270e:	490d      	ldr	r1, [pc, #52]	@ (8002744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <LoopForever+0xe>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002724:	4c0a      	ldr	r4, [pc, #40]	@ (8002750 <LoopForever+0x16>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002732:	f009 fdbf 	bl	800c2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002736:	f7ff f893 	bl	8001860 <main>

0800273a <LoopForever>:

LoopForever:
    b LoopForever
 800273a:	e7fe      	b.n	800273a <LoopForever>
  ldr   r0, =_estack
 800273c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002748:	0800ce7c 	.word	0x0800ce7c
  ldr r2, =_sbss
 800274c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002750:	2000069c 	.word	0x2000069c

08002754 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_IRQHandler>
	...

08002758 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f98a 	bl	8002a76 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002762:	f002 fde3 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_Init+0x44>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	490b      	ldr	r1, [pc, #44]	@ (80027a0 <HAL_Init+0x48>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <HAL_Init+0x4c>)
 800277a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800277c:	2004      	movs	r0, #4
 800277e:	f000 f9cf 	bl	8002b20 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f810 	bl	80027a8 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e002      	b.n	8002798 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002792:	f7ff fa2d 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	44020c00 	.word	0x44020c00
 80027a0:	0800cde8 	.word	0x0800cde8
 80027a4:	20000084 	.word	0x20000084

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80027b4:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_InitTick+0xdc>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e05c      	b.n	800287a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_InitTick+0xe0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d10c      	bne.n	80027e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027cc:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <HAL_InitTick+0xe4>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <HAL_InitTick+0xdc>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e037      	b.n	8002856 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027e6:	f000 f9f3 	bl	8002bd0 <HAL_SYSTICK_GetCLKSourceConfig>
 80027ea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d023      	beq.n	800283a <HAL_InitTick+0x92>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d82d      	bhi.n	8002854 <HAL_InitTick+0xac>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_InitTick+0x5e>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00d      	beq.n	8002820 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002804:	e026      	b.n	8002854 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_InitTick+0xe4>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <HAL_InitTick+0xdc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002814:	fbb3 f3f1 	udiv	r3, r3, r1
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	60fb      	str	r3, [r7, #12]
        break;
 800281e:	e01a      	b.n	8002856 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_InitTick+0xdc>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282a:	fbb3 f3f2 	udiv	r3, r3, r2
 800282e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]
        break;
 8002838:	e00d      	b.n	8002856 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_InitTick+0xdc>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002844:	fbb3 f3f2 	udiv	r3, r3, r2
 8002848:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	60fb      	str	r3, [r7, #12]
        break;
 8002852:	e000      	b.n	8002856 <HAL_InitTick+0xae>
        break;
 8002854:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f940 	bl	8002adc <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e009      	b.n	800287a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002866:	2200      	movs	r2, #0
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	f000 f90d 	bl	8002a8c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002872:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <HAL_InitTick+0xe8>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000008c 	.word	0x2000008c
 8002888:	e000e010 	.word	0xe000e010
 800288c:	20000084 	.word	0x20000084
 8002890:	20000088 	.word	0x20000088

08002894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000008c 	.word	0x2000008c
 80028b8:	2000054c 	.word	0x2000054c

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000054c 	.word	0x2000054c

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000008c 	.word	0x2000008c

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	@ (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff4c 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9a:	f7ff ff63 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002a9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	6978      	ldr	r0, [r7, #20]
 8002aa6:	f7ff ffb3 	bl	8002a10 <NVIC_EncodePriority>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff82 	bl	80029bc <__NVIC_SetPriority>
}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff56 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00d      	b.n	8002b0e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_SYSTICK_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_SYSTICK_Config+0x40>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_SYSTICK_Config+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_SYSTICK_Config+0x40>)
 8002b06:	f043 0303 	orr.w	r3, r3, #3
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d844      	bhi.n	8002bb8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b57 	.word	0x08002b57
 8002b38:	08002b75 	.word	0x08002b75
 8002b3c:	08002b97 	.word	0x08002b97
 8002b40:	08002bb9 	.word	0x08002bb9
 8002b44:	08002b49 	.word	0x08002b49
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b48:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6013      	str	r3, [r2, #0]
      break;
 8002b54:	e031      	b.n	8002bba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b56:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b6a:	f023 030c 	bic.w	r3, r3, #12
 8002b6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b72:	e022      	b.n	8002bba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b86:	f023 030c 	bic.w	r3, r3, #12
 8002b8a:	4a10      	ldr	r2, [pc, #64]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b94:	e011      	b.n	8002bba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ba8:	f023 030c 	bic.w	r3, r3, #12
 8002bac:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002bb6:	e000      	b.n	8002bba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002bb8:	bf00      	nop
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010
 8002bcc:	44020c00 	.word	0x44020c00

08002bd0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002bd6:	4b17      	ldr	r3, [pc, #92]	@ (8002c34 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002be2:	2304      	movs	r3, #4
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	e01e      	b.n	8002c26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002be8:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002bea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d00f      	beq.n	8002c1a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d80f      	bhi.n	8002c20 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d003      	beq.n	8002c14 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002c0c:	e008      	b.n	8002c20 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
        break;
 8002c12:	e008      	b.n	8002c26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002c14:	2301      	movs	r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
        break;
 8002c18:	e005      	b.n	8002c26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	607b      	str	r3, [r7, #4]
        break;
 8002c1e:	e002      	b.n	8002c26 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
        break;
 8002c24:	bf00      	nop
    }
  }
  return systick_source;
 8002c26:	687b      	ldr	r3, [r7, #4]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e010 	.word	0xe000e010
 8002c38:	44020c00 	.word	0x44020c00

08002c3c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff fe3a 	bl	80028bc <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0db      	b.n	8002e0c <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	@ (8002e14 <HAL_DMA_Init+0x1d8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f000 809f 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	@ (8002e18 <HAL_DMA_Init+0x1dc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f000 8099 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6a      	ldr	r2, [pc, #424]	@ (8002e1c <HAL_DMA_Init+0x1e0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f000 8093 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	@ (8002e20 <HAL_DMA_Init+0x1e4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f000 808d 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a66      	ldr	r2, [pc, #408]	@ (8002e24 <HAL_DMA_Init+0x1e8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f000 8087 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a64      	ldr	r2, [pc, #400]	@ (8002e28 <HAL_DMA_Init+0x1ec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f000 8081 	beq.w	8002d9e <HAL_DMA_Init+0x162>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a62      	ldr	r2, [pc, #392]	@ (8002e2c <HAL_DMA_Init+0x1f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d07b      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a61      	ldr	r2, [pc, #388]	@ (8002e30 <HAL_DMA_Init+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d076      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002e34 <HAL_DMA_Init+0x1f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d071      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002e38 <HAL_DMA_Init+0x1fc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d06c      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e3c <HAL_DMA_Init+0x200>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d067      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_DMA_Init+0x204>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d062      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a59      	ldr	r2, [pc, #356]	@ (8002e44 <HAL_DMA_Init+0x208>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d05d      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a58      	ldr	r2, [pc, #352]	@ (8002e48 <HAL_DMA_Init+0x20c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d058      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a56      	ldr	r2, [pc, #344]	@ (8002e4c <HAL_DMA_Init+0x210>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d053      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a55      	ldr	r2, [pc, #340]	@ (8002e50 <HAL_DMA_Init+0x214>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04e      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a53      	ldr	r2, [pc, #332]	@ (8002e54 <HAL_DMA_Init+0x218>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d049      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_DMA_Init+0x21c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d044      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a50      	ldr	r2, [pc, #320]	@ (8002e5c <HAL_DMA_Init+0x220>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d03f      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4f      	ldr	r2, [pc, #316]	@ (8002e60 <HAL_DMA_Init+0x224>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d03a      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e64 <HAL_DMA_Init+0x228>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d035      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a4c      	ldr	r2, [pc, #304]	@ (8002e68 <HAL_DMA_Init+0x22c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d030      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4a      	ldr	r2, [pc, #296]	@ (8002e6c <HAL_DMA_Init+0x230>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a49      	ldr	r2, [pc, #292]	@ (8002e70 <HAL_DMA_Init+0x234>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d026      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a47      	ldr	r2, [pc, #284]	@ (8002e74 <HAL_DMA_Init+0x238>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d021      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	@ (8002e78 <HAL_DMA_Init+0x23c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01c      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a44      	ldr	r2, [pc, #272]	@ (8002e7c <HAL_DMA_Init+0x240>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d017      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a43      	ldr	r2, [pc, #268]	@ (8002e80 <HAL_DMA_Init+0x244>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d012      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a41      	ldr	r2, [pc, #260]	@ (8002e84 <HAL_DMA_Init+0x248>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a40      	ldr	r2, [pc, #256]	@ (8002e88 <HAL_DMA_Init+0x24c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3e      	ldr	r2, [pc, #248]	@ (8002e8c <HAL_DMA_Init+0x250>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <HAL_DMA_Init+0x162>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e90 <HAL_DMA_Init+0x254>)
 8002d9c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0206 	orr.w	r2, r2, #6
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002dbe:	e00f      	b.n	8002de0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002dc0:	f7ff fd7c 	bl	80028bc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d908      	bls.n	8002de0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e015      	b.n	8002e0c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e8      	bne.n	8002dc0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fb18 	bl	8003424 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40020050 	.word	0x40020050
 8002e18:	50020050 	.word	0x50020050
 8002e1c:	400200d0 	.word	0x400200d0
 8002e20:	500200d0 	.word	0x500200d0
 8002e24:	40020150 	.word	0x40020150
 8002e28:	50020150 	.word	0x50020150
 8002e2c:	400201d0 	.word	0x400201d0
 8002e30:	500201d0 	.word	0x500201d0
 8002e34:	40020250 	.word	0x40020250
 8002e38:	50020250 	.word	0x50020250
 8002e3c:	400202d0 	.word	0x400202d0
 8002e40:	500202d0 	.word	0x500202d0
 8002e44:	40020350 	.word	0x40020350
 8002e48:	50020350 	.word	0x50020350
 8002e4c:	400203d0 	.word	0x400203d0
 8002e50:	500203d0 	.word	0x500203d0
 8002e54:	40021050 	.word	0x40021050
 8002e58:	50021050 	.word	0x50021050
 8002e5c:	400210d0 	.word	0x400210d0
 8002e60:	500210d0 	.word	0x500210d0
 8002e64:	40021150 	.word	0x40021150
 8002e68:	50021150 	.word	0x50021150
 8002e6c:	400211d0 	.word	0x400211d0
 8002e70:	500211d0 	.word	0x500211d0
 8002e74:	40021250 	.word	0x40021250
 8002e78:	50021250 	.word	0x50021250
 8002e7c:	400212d0 	.word	0x400212d0
 8002e80:	500212d0 	.word	0x500212d0
 8002e84:	40021350 	.word	0x40021350
 8002e88:	50021350 	.word	0x50021350
 8002e8c:	400213d0 	.word	0x400213d0
 8002e90:	500213d0 	.word	0x500213d0

08002e94 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04f      	b.n	8002f4c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_DMA_Start_IT+0x26>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e048      	b.n	8002f4c <HAL_DMA_Start_IT+0xb8>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d136      	bne.n	8002f3c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa78 	bl	80033d8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002ef6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f26:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e007      	b.n	8002f4c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2240      	movs	r2, #64	@ 0x40
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002f5c:	f7ff fcae 	bl	80028bc <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e06b      	b.n	8003044 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e05c      	b.n	8003044 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0204 	orr.w	r2, r2, #4
 8002f98:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002fa2:	e020      	b.n	8002fe6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002fa4:	f7ff fc8a 	bl	80028bc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d919      	bls.n	8002fe6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e02e      	b.n	8003044 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0d7      	beq.n	8002fa4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0202 	orr.w	r2, r2, #2
 8003002:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003014:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302e:	2201      	movs	r2, #1
 8003030:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e019      	b.n	8003092 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d004      	beq.n	8003074 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e00e      	b.n	8003092 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2204      	movs	r2, #4
 8003078:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030ae:	f023 030f 	bic.w	r3, r3, #15
 80030b2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	3b50      	subs	r3, #80	@ 0x50
 80030be:	09db      	lsrs	r3, r3, #7
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2201      	movs	r2, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 813b 	beq.w	8003354 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d011      	beq.n	8003110 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003102:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003134:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f043 0202 	orr.w	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003166:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d011      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003198:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ca:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d04c      	beq.n	8003284 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d045      	beq.n	8003284 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003200:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b04      	cmp	r3, #4
 800320c:	d12e      	bne.n	800326c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800321c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0202 	orr.w	r2, r2, #2
 800322c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	2201      	movs	r2, #1
 8003248:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
        }

        return;
 800326a:	e075      	b.n	8003358 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2205      	movs	r2, #5
 8003270:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d039      	beq.n	8003306 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d032      	beq.n	8003306 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d111      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032cc:	2201      	movs	r2, #1
 80032ce:	731a      	strb	r2, [r3, #12]
 80032d0:	e008      	b.n	80032e4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80032ec:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	2b00      	cmp	r3, #0
 800330c:	d025      	beq.n	800335a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0202 	orr.w	r2, r2, #2
 800331c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003336:	2201      	movs	r2, #1
 8003338:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
 8003352:	e002      	b.n	800335a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003358:	bf00      	nop
    }
  }
}
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e02b      	b.n	80033cc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800337c:	f023 030f 	bic.w	r3, r3, #15
 8003380:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338a:	3b50      	subs	r3, #80	@ 0x50
 800338c:	09db      	lsrs	r3, r3, #7
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2201      	movs	r2, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f003 0311 	and.w	r3, r3, #17
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d106      	bne.n	80033bc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e006      	b.n	80033ca <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	401a      	ands	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b291      	uxth	r1, r2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003404:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	430a      	orrs	r2, r1
 8003444:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a53      	ldr	r2, [pc, #332]	@ (80035b0 <DMA_Init+0x18c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f000 80a0 	beq.w	80035aa <DMA_Init+0x186>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a51      	ldr	r2, [pc, #324]	@ (80035b4 <DMA_Init+0x190>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f000 809a 	beq.w	80035aa <DMA_Init+0x186>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4f      	ldr	r2, [pc, #316]	@ (80035b8 <DMA_Init+0x194>)
 800347c:	4293      	cmp	r3, r2
 800347e:	f000 8094 	beq.w	80035aa <DMA_Init+0x186>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4d      	ldr	r2, [pc, #308]	@ (80035bc <DMA_Init+0x198>)
 8003488:	4293      	cmp	r3, r2
 800348a:	f000 808e 	beq.w	80035aa <DMA_Init+0x186>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4b      	ldr	r2, [pc, #300]	@ (80035c0 <DMA_Init+0x19c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f000 8088 	beq.w	80035aa <DMA_Init+0x186>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a49      	ldr	r2, [pc, #292]	@ (80035c4 <DMA_Init+0x1a0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	f000 8082 	beq.w	80035aa <DMA_Init+0x186>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a47      	ldr	r2, [pc, #284]	@ (80035c8 <DMA_Init+0x1a4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d07c      	beq.n	80035aa <DMA_Init+0x186>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a45      	ldr	r2, [pc, #276]	@ (80035cc <DMA_Init+0x1a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d077      	beq.n	80035aa <DMA_Init+0x186>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a44      	ldr	r2, [pc, #272]	@ (80035d0 <DMA_Init+0x1ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d072      	beq.n	80035aa <DMA_Init+0x186>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a42      	ldr	r2, [pc, #264]	@ (80035d4 <DMA_Init+0x1b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d06d      	beq.n	80035aa <DMA_Init+0x186>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a41      	ldr	r2, [pc, #260]	@ (80035d8 <DMA_Init+0x1b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d068      	beq.n	80035aa <DMA_Init+0x186>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <DMA_Init+0x1b8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d063      	beq.n	80035aa <DMA_Init+0x186>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3e      	ldr	r2, [pc, #248]	@ (80035e0 <DMA_Init+0x1bc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d05e      	beq.n	80035aa <DMA_Init+0x186>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3c      	ldr	r2, [pc, #240]	@ (80035e4 <DMA_Init+0x1c0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d059      	beq.n	80035aa <DMA_Init+0x186>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3b      	ldr	r2, [pc, #236]	@ (80035e8 <DMA_Init+0x1c4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d054      	beq.n	80035aa <DMA_Init+0x186>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a39      	ldr	r2, [pc, #228]	@ (80035ec <DMA_Init+0x1c8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04f      	beq.n	80035aa <DMA_Init+0x186>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a38      	ldr	r2, [pc, #224]	@ (80035f0 <DMA_Init+0x1cc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d04a      	beq.n	80035aa <DMA_Init+0x186>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a36      	ldr	r2, [pc, #216]	@ (80035f4 <DMA_Init+0x1d0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d045      	beq.n	80035aa <DMA_Init+0x186>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a35      	ldr	r2, [pc, #212]	@ (80035f8 <DMA_Init+0x1d4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d040      	beq.n	80035aa <DMA_Init+0x186>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a33      	ldr	r2, [pc, #204]	@ (80035fc <DMA_Init+0x1d8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d03b      	beq.n	80035aa <DMA_Init+0x186>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <DMA_Init+0x1dc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d036      	beq.n	80035aa <DMA_Init+0x186>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a30      	ldr	r2, [pc, #192]	@ (8003604 <DMA_Init+0x1e0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d031      	beq.n	80035aa <DMA_Init+0x186>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2f      	ldr	r2, [pc, #188]	@ (8003608 <DMA_Init+0x1e4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d02c      	beq.n	80035aa <DMA_Init+0x186>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2d      	ldr	r2, [pc, #180]	@ (800360c <DMA_Init+0x1e8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d027      	beq.n	80035aa <DMA_Init+0x186>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2c      	ldr	r2, [pc, #176]	@ (8003610 <DMA_Init+0x1ec>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <DMA_Init+0x186>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a2a      	ldr	r2, [pc, #168]	@ (8003614 <DMA_Init+0x1f0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01d      	beq.n	80035aa <DMA_Init+0x186>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a29      	ldr	r2, [pc, #164]	@ (8003618 <DMA_Init+0x1f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d018      	beq.n	80035aa <DMA_Init+0x186>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	@ (800361c <DMA_Init+0x1f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <DMA_Init+0x186>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a26      	ldr	r2, [pc, #152]	@ (8003620 <DMA_Init+0x1fc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00e      	beq.n	80035aa <DMA_Init+0x186>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <DMA_Init+0x200>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d009      	beq.n	80035aa <DMA_Init+0x186>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a23      	ldr	r2, [pc, #140]	@ (8003628 <DMA_Init+0x204>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <DMA_Init+0x186>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a21      	ldr	r2, [pc, #132]	@ (800362c <DMA_Init+0x208>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d142      	bne.n	8003630 <DMA_Init+0x20c>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e041      	b.n	8003632 <DMA_Init+0x20e>
 80035ae:	bf00      	nop
 80035b0:	40020050 	.word	0x40020050
 80035b4:	50020050 	.word	0x50020050
 80035b8:	400200d0 	.word	0x400200d0
 80035bc:	500200d0 	.word	0x500200d0
 80035c0:	40020150 	.word	0x40020150
 80035c4:	50020150 	.word	0x50020150
 80035c8:	400201d0 	.word	0x400201d0
 80035cc:	500201d0 	.word	0x500201d0
 80035d0:	40020250 	.word	0x40020250
 80035d4:	50020250 	.word	0x50020250
 80035d8:	400202d0 	.word	0x400202d0
 80035dc:	500202d0 	.word	0x500202d0
 80035e0:	40020350 	.word	0x40020350
 80035e4:	50020350 	.word	0x50020350
 80035e8:	400203d0 	.word	0x400203d0
 80035ec:	500203d0 	.word	0x500203d0
 80035f0:	40021050 	.word	0x40021050
 80035f4:	50021050 	.word	0x50021050
 80035f8:	400210d0 	.word	0x400210d0
 80035fc:	500210d0 	.word	0x500210d0
 8003600:	40021150 	.word	0x40021150
 8003604:	50021150 	.word	0x50021150
 8003608:	400211d0 	.word	0x400211d0
 800360c:	500211d0 	.word	0x500211d0
 8003610:	40021250 	.word	0x40021250
 8003614:	50021250 	.word	0x50021250
 8003618:	400212d0 	.word	0x400212d0
 800361c:	500212d0 	.word	0x500212d0
 8003620:	40021350 	.word	0x40021350
 8003624:	50021350 	.word	0x50021350
 8003628:	400213d0 	.word	0x400213d0
 800362c:	500213d0 	.word	0x500213d0
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	051b      	lsls	r3, r3, #20
 8003642:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003646:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	3b01      	subs	r3, #1
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003654:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	430a      	orrs	r2, r1
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368c:	f040 80b0 	bne.w	80037f0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a84      	ldr	r2, [pc, #528]	@ (80038a8 <DMA_Init+0x484>)
 8003696:	4293      	cmp	r3, r2
 8003698:	f000 80a0 	beq.w	80037dc <DMA_Init+0x3b8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a82      	ldr	r2, [pc, #520]	@ (80038ac <DMA_Init+0x488>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 809a 	beq.w	80037dc <DMA_Init+0x3b8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a80      	ldr	r2, [pc, #512]	@ (80038b0 <DMA_Init+0x48c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f000 8094 	beq.w	80037dc <DMA_Init+0x3b8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7e      	ldr	r2, [pc, #504]	@ (80038b4 <DMA_Init+0x490>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f000 808e 	beq.w	80037dc <DMA_Init+0x3b8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7c      	ldr	r2, [pc, #496]	@ (80038b8 <DMA_Init+0x494>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f000 8088 	beq.w	80037dc <DMA_Init+0x3b8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a7a      	ldr	r2, [pc, #488]	@ (80038bc <DMA_Init+0x498>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f000 8082 	beq.w	80037dc <DMA_Init+0x3b8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a78      	ldr	r2, [pc, #480]	@ (80038c0 <DMA_Init+0x49c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d07c      	beq.n	80037dc <DMA_Init+0x3b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a77      	ldr	r2, [pc, #476]	@ (80038c4 <DMA_Init+0x4a0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d077      	beq.n	80037dc <DMA_Init+0x3b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a75      	ldr	r2, [pc, #468]	@ (80038c8 <DMA_Init+0x4a4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d072      	beq.n	80037dc <DMA_Init+0x3b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a74      	ldr	r2, [pc, #464]	@ (80038cc <DMA_Init+0x4a8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d06d      	beq.n	80037dc <DMA_Init+0x3b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a72      	ldr	r2, [pc, #456]	@ (80038d0 <DMA_Init+0x4ac>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d068      	beq.n	80037dc <DMA_Init+0x3b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a71      	ldr	r2, [pc, #452]	@ (80038d4 <DMA_Init+0x4b0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d063      	beq.n	80037dc <DMA_Init+0x3b8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6f      	ldr	r2, [pc, #444]	@ (80038d8 <DMA_Init+0x4b4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d05e      	beq.n	80037dc <DMA_Init+0x3b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <DMA_Init+0x4b8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d059      	beq.n	80037dc <DMA_Init+0x3b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6c      	ldr	r2, [pc, #432]	@ (80038e0 <DMA_Init+0x4bc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d054      	beq.n	80037dc <DMA_Init+0x3b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6b      	ldr	r2, [pc, #428]	@ (80038e4 <DMA_Init+0x4c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04f      	beq.n	80037dc <DMA_Init+0x3b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a69      	ldr	r2, [pc, #420]	@ (80038e8 <DMA_Init+0x4c4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04a      	beq.n	80037dc <DMA_Init+0x3b8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a68      	ldr	r2, [pc, #416]	@ (80038ec <DMA_Init+0x4c8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d045      	beq.n	80037dc <DMA_Init+0x3b8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a66      	ldr	r2, [pc, #408]	@ (80038f0 <DMA_Init+0x4cc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d040      	beq.n	80037dc <DMA_Init+0x3b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a65      	ldr	r2, [pc, #404]	@ (80038f4 <DMA_Init+0x4d0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d03b      	beq.n	80037dc <DMA_Init+0x3b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a63      	ldr	r2, [pc, #396]	@ (80038f8 <DMA_Init+0x4d4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d036      	beq.n	80037dc <DMA_Init+0x3b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a62      	ldr	r2, [pc, #392]	@ (80038fc <DMA_Init+0x4d8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d031      	beq.n	80037dc <DMA_Init+0x3b8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a60      	ldr	r2, [pc, #384]	@ (8003900 <DMA_Init+0x4dc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02c      	beq.n	80037dc <DMA_Init+0x3b8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5f      	ldr	r2, [pc, #380]	@ (8003904 <DMA_Init+0x4e0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d027      	beq.n	80037dc <DMA_Init+0x3b8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5d      	ldr	r2, [pc, #372]	@ (8003908 <DMA_Init+0x4e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d022      	beq.n	80037dc <DMA_Init+0x3b8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5c      	ldr	r2, [pc, #368]	@ (800390c <DMA_Init+0x4e8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d01d      	beq.n	80037dc <DMA_Init+0x3b8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003910 <DMA_Init+0x4ec>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <DMA_Init+0x3b8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a59      	ldr	r2, [pc, #356]	@ (8003914 <DMA_Init+0x4f0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <DMA_Init+0x3b8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a57      	ldr	r2, [pc, #348]	@ (8003918 <DMA_Init+0x4f4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <DMA_Init+0x3b8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a56      	ldr	r2, [pc, #344]	@ (800391c <DMA_Init+0x4f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <DMA_Init+0x3b8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a54      	ldr	r2, [pc, #336]	@ (8003920 <DMA_Init+0x4fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <DMA_Init+0x3b8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a53      	ldr	r2, [pc, #332]	@ (8003924 <DMA_Init+0x500>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <DMA_Init+0x3bc>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <DMA_Init+0x3be>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e008      	b.n	8003802 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f8:	d103      	bne.n	8003802 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003800:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003812:	4b45      	ldr	r3, [pc, #276]	@ (8003928 <DMA_Init+0x504>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	430b      	orrs	r3, r1
 800381e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2200      	movs	r2, #0
 8003826:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <DMA_Init+0x4b4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <DMA_Init+0x454>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <DMA_Init+0x4b8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d01d      	beq.n	8003878 <DMA_Init+0x454>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <DMA_Init+0x4bc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <DMA_Init+0x454>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a26      	ldr	r2, [pc, #152]	@ (80038e4 <DMA_Init+0x4c0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <DMA_Init+0x454>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <DMA_Init+0x4f4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <DMA_Init+0x454>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2f      	ldr	r2, [pc, #188]	@ (800391c <DMA_Init+0x4f8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <DMA_Init+0x454>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <DMA_Init+0x4fc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <DMA_Init+0x454>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <DMA_Init+0x500>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <DMA_Init+0x458>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <DMA_Init+0x45a>
 800387c:	2300      	movs	r3, #0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40020050 	.word	0x40020050
 80038ac:	50020050 	.word	0x50020050
 80038b0:	400200d0 	.word	0x400200d0
 80038b4:	500200d0 	.word	0x500200d0
 80038b8:	40020150 	.word	0x40020150
 80038bc:	50020150 	.word	0x50020150
 80038c0:	400201d0 	.word	0x400201d0
 80038c4:	500201d0 	.word	0x500201d0
 80038c8:	40020250 	.word	0x40020250
 80038cc:	50020250 	.word	0x50020250
 80038d0:	400202d0 	.word	0x400202d0
 80038d4:	500202d0 	.word	0x500202d0
 80038d8:	40020350 	.word	0x40020350
 80038dc:	50020350 	.word	0x50020350
 80038e0:	400203d0 	.word	0x400203d0
 80038e4:	500203d0 	.word	0x500203d0
 80038e8:	40021050 	.word	0x40021050
 80038ec:	50021050 	.word	0x50021050
 80038f0:	400210d0 	.word	0x400210d0
 80038f4:	500210d0 	.word	0x500210d0
 80038f8:	40021150 	.word	0x40021150
 80038fc:	50021150 	.word	0x50021150
 8003900:	400211d0 	.word	0x400211d0
 8003904:	500211d0 	.word	0x500211d0
 8003908:	40021250 	.word	0x40021250
 800390c:	50021250 	.word	0x50021250
 8003910:	400212d0 	.word	0x400212d0
 8003914:	500212d0 	.word	0x500212d0
 8003918:	40021350 	.word	0x40021350
 800391c:	50021350 	.word	0x50021350
 8003920:	400213d0 	.word	0x400213d0
 8003924:	500213d0 	.word	0x500213d0
 8003928:	3cc02100 	.word	0x3cc02100

0800392c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_DMAEx_List_Start_IT+0x16>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e082      	b.n	8003a4c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800394c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d005      	beq.n	800396c <HAL_DMAEx_List_Start_IT+0x40>
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d16a      	bne.n	8003a3c <HAL_DMAEx_List_Start_IT+0x110>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d067      	beq.n	8003a3c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d157      	bne.n	8003a28 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_DMAEx_List_Start_IT+0x5a>
 8003982:	2302      	movs	r3, #2
 8003984:	e062      	b.n	8003a4c <HAL_DMAEx_List_Start_IT+0x120>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399a:	2202      	movs	r2, #2
 800399c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80039ba:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039ea:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f107 010c 	add.w	r1, r7, #12
 80039f6:	2200      	movs	r2, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f82b 	bl	8003a54 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	0c0b      	lsrs	r3, r1, #16
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e007      	b.n	8003a4c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2240      	movs	r2, #64	@ 0x40
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00c      	beq.n	8003a86 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <DMA_List_GetCLLRNodeInfo+0x58>)
 8003a76:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00f      	beq.n	8003a9e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2207      	movs	r2, #7
 8003a82:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003a84:	e00b      	b.n	8003a9e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	@ (8003ab0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003a90:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	fe010000 	.word	0xfe010000
 8003ab0:	f8010000 	.word	0xf8010000

08003ab4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e147      	b.n	8003d56 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fa18 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0210 	bic.w	r2, r2, #16
 8003aee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af0:	f7fe fee4 	bl	80028bc <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003af6:	e012      	b.n	8003b1e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003af8:	f7fe fee0 	bl	80028bc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b0a      	cmp	r3, #10
 8003b04:	d90b      	bls.n	8003b1e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e11b      	b.n	8003d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d0e5      	beq.n	8003af8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3c:	f7fe febe 	bl	80028bc <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b42:	e012      	b.n	8003b6a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b44:	f7fe feba 	bl	80028bc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b0a      	cmp	r3, #10
 8003b50:	d90b      	bls.n	8003b6a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2203      	movs	r2, #3
 8003b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0f5      	b.n	8003d56 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0e5      	beq.n	8003b44 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0202 	orr.w	r2, r2, #2
 8003b86:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a74      	ldr	r2, [pc, #464]	@ (8003d60 <HAL_FDCAN_Init+0x2ac>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d103      	bne.n	8003b9a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b92:	4a74      	ldr	r2, [pc, #464]	@ (8003d64 <HAL_FDCAN_Init+0x2b0>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7c1b      	ldrb	r3, [r3, #16]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d108      	bne.n	8003bb4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e007      	b.n	8003bc4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7c5b      	ldrb	r3, [r3, #17]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d108      	bne.n	8003bde <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bda:	619a      	str	r2, [r3, #24]
 8003bdc:	e007      	b.n	8003bee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7c9b      	ldrb	r3, [r3, #18]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c04:	619a      	str	r2, [r3, #24]
 8003c06:	e007      	b.n	8003c18 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c16:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003c3c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0210 	bic.w	r2, r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0204 	orr.w	r2, r2, #4
 8003c64:	619a      	str	r2, [r3, #24]
 8003c66:	e02c      	b.n	8003cc2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d028      	beq.n	8003cc2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d01c      	beq.n	8003cb2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c86:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0210 	orr.w	r2, r2, #16
 8003c96:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d110      	bne.n	8003cc2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	619a      	str	r2, [r3, #24]
 8003cb0:	e007      	b.n	8003cc2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cd2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cda:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf6:	d115      	bne.n	8003d24 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	3b01      	subs	r3, #1
 8003d04:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d06:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d10:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d20:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d22:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa74 	bl	8004228 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	4000a400 	.word	0x4000a400
 8003d64:	4000a500 	.word	0x4000a500

08003d68 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d78:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d002      	beq.n	8003d86 <HAL_FDCAN_ConfigFilter+0x1e>
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d13d      	bne.n	8003e02 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d119      	bne.n	8003dc2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003d9a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003da2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e01d      	b.n	8003dfe <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	075a      	lsls	r2, r3, #29
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	079a      	lsls	r2, r3, #30
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3304      	adds	r3, #4
 8003df6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e006      	b.n	8003e10 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d110      	bne.n	8003e52 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e006      	b.n	8003e60 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	f043 0204 	orr.w	r2, r3, #4
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d12c      	bne.n	8003ede <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e023      	b.n	8003eec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa16 	bl	80042ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e006      	b.n	8003eec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	@ 0x30
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f02:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f10:	4013      	ands	r3, r2
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f28:	4013      	ands	r3, r2
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	4013      	ands	r3, r2
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003f4e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f66:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f82:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2240      	movs	r2, #64	@ 0x40
 8003f9e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f921 	bl	80041e8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d019      	beq.n	8003fe4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d014      	beq.n	8003fe4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fc2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fda:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003fdc:	6939      	ldr	r1, [r7, #16]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8e3 	bl	80041aa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8a2 	bl	800413e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004006:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8a2 	bl	8004154 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800401e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8a2 	bl	800416a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00c      	beq.n	800404a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004042:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f89b 	bl	8004180 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d018      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d013      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004066:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2280      	movs	r2, #128	@ 0x80
 800407c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f887 	bl	8004194 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f88b 	bl	80041c0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80040c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f883 	bl	80041d4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004106:	69f9      	ldr	r1, [r7, #28]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f881 	bl	8004210 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f863 	bl	80041fc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004136:	bf00      	nop
 8004138:	3730      	adds	r7, #48	@ 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004230:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004232:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d103      	bne.n	8004246 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004244:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004254:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425c:	041a      	lsls	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800427a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	061a      	lsls	r2, r3, #24
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e005      	b.n	80042c8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3f3      	bcc.n	80042bc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	4000ac00 	.word	0x4000ac00
 80042e8:	4000a800 	.word	0x4000a800

080042ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	@ 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800430a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004312:	4313      	orrs	r3, r2
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e00a      	b.n	800432e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004320:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004326:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004328:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800432c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004338:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800433e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004344:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	3304      	adds	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3304      	adds	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e020      	b.n	80043c2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	3303      	adds	r3, #3
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3302      	adds	r3, #2
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	440b      	add	r3, r1
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004398:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3301      	adds	r3, #1
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	440b      	add	r3, r1
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80043a6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	440a      	add	r2, r1
 80043ae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80043b0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3304      	adds	r3, #4
 80043ba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	3304      	adds	r3, #4
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4a06      	ldr	r2, [pc, #24]	@ (80043e0 <FDCAN_CopyMessageToRAM+0xf4>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	461a      	mov	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d3d6      	bcc.n	8004380 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	3724      	adds	r7, #36	@ 0x24
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	0800ce00 	.word	0x0800ce00

080043e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043f2:	e136      	b.n	8004662 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8128 	beq.w	800465c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x38>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b12      	cmp	r3, #18
 800441a:	d125      	bne.n	8004468 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4013      	ands	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	08da      	lsrs	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3208      	adds	r2, #8
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4013      	ands	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d00b      	beq.n	80044bc <HAL_GPIO_Init+0xd8>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d007      	beq.n	80044bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b0:	2b11      	cmp	r3, #17
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b12      	cmp	r3, #18
 80044ba:	d130      	bne.n	800451e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f2:	2201      	movs	r2, #1
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0201 	and.w	r2, r3, #1
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d017      	beq.n	8004556 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2203      	movs	r2, #3
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4013      	ands	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d07c      	beq.n	800465c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004562:	4a47      	ldr	r2, [pc, #284]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	3318      	adds	r3, #24
 800456a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	220f      	movs	r2, #15
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4013      	ands	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0a9a      	lsrs	r2, r3, #10
 800458a:	4b3e      	ldr	r3, [pc, #248]	@ (8004684 <HAL_GPIO_Init+0x2a0>)
 800458c:	4013      	ands	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f002 0203 	and.w	r2, r2, #3
 8004594:	00d2      	lsls	r2, r2, #3
 8004596:	4093      	lsls	r3, r2
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800459e:	4938      	ldr	r1, [pc, #224]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3318      	adds	r3, #24
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80045ac:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80045d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	43db      	mvns	r3, r3
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4013      	ands	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80045fa:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004600:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004606:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4013      	ands	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800462e:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004634:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4013      	ands	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004654:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <HAL_GPIO_Init+0x29c>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3301      	adds	r3, #1
 8004660:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f aec1 	bne.w	80043f4 <HAL_GPIO_Init+0x10>
  }
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	44022000 	.word	0x44022000
 8004684:	002f7f7f 	.word	0x002f7f7f

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43d9      	mvns	r1, r3
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	400b      	ands	r3, r1
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e007      	b.n	800471a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800470a:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0204 	bic.w	r2, r3, #4
 8004712:	4905      	ldr	r1, [pc, #20]	@ (8004728 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
  }

  return status;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40030400 	.word	0x40030400

0800472c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_ICACHE_Enable+0x1c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <HAL_ICACHE_Enable+0x1c>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40030400 	.word	0x40030400

0800474c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f000 bc28 	b.w	8004fb0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004760:	4b94      	ldr	r3, [pc, #592]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0318 	and.w	r3, r3, #24
 8004768:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800476a:	4b92      	ldr	r3, [pc, #584]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d05b      	beq.n	8004838 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b08      	cmp	r3, #8
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x46>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b18      	cmp	r3, #24
 800478a:	d114      	bne.n	80047b6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d111      	bne.n	80047b6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f000 bc08 	b.w	8004fb0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80047a0:	4b84      	ldr	r3, [pc, #528]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	4981      	ldr	r1, [pc, #516]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80047b4:	e040      	b.n	8004838 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d023      	beq.n	8004806 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047be:	4b7d      	ldr	r3, [pc, #500]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7c      	ldr	r2, [pc, #496]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ca:	f7fe f877 	bl	80028bc <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80047d2:	f7fe f873 	bl	80028bc <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e3e5      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80047e4:	4b73      	ldr	r3, [pc, #460]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80047f0:	4b70      	ldr	r3, [pc, #448]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	496d      	ldr	r1, [pc, #436]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004800:	4313      	orrs	r3, r2
 8004802:	618b      	str	r3, [r1, #24]
 8004804:	e018      	b.n	8004838 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004806:	4b6b      	ldr	r3, [pc, #428]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6a      	ldr	r2, [pc, #424]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800480c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fe f853 	bl	80028bc <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800481a:	f7fe f84f 	bl	80028bc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e3c1      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800482c:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a0 	beq.w	8004986 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b10      	cmp	r3, #16
 800484a:	d005      	beq.n	8004858 <HAL_RCC_OscConfig+0x10c>
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b18      	cmp	r3, #24
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 8092 	bne.w	8004986 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e3a4      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486e:	d106      	bne.n	800487e <HAL_RCC_OscConfig+0x132>
 8004870:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a4f      	ldr	r2, [pc, #316]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e058      	b.n	8004930 <HAL_RCC_OscConfig+0x1e4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d112      	bne.n	80048ac <HAL_RCC_OscConfig+0x160>
 8004886:	4b4b      	ldr	r3, [pc, #300]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a4a      	ldr	r2, [pc, #296]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800488c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b48      	ldr	r3, [pc, #288]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a47      	ldr	r2, [pc, #284]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004898:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b45      	ldr	r3, [pc, #276]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a44      	ldr	r2, [pc, #272]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e041      	b.n	8004930 <HAL_RCC_OscConfig+0x1e4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b4:	d112      	bne.n	80048dc <HAL_RCC_OscConfig+0x190>
 80048b6:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b39      	ldr	r3, [pc, #228]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a38      	ldr	r2, [pc, #224]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e029      	b.n	8004930 <HAL_RCC_OscConfig+0x1e4>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80048e4:	d112      	bne.n	800490c <HAL_RCC_OscConfig+0x1c0>
 80048e6:	4b33      	ldr	r3, [pc, #204]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a32      	ldr	r2, [pc, #200]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b30      	ldr	r3, [pc, #192]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2f      	ldr	r2, [pc, #188]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 80048f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b2d      	ldr	r3, [pc, #180]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2c      	ldr	r2, [pc, #176]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e011      	b.n	8004930 <HAL_RCC_OscConfig+0x1e4>
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a25      	ldr	r2, [pc, #148]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800491e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b23      	ldr	r3, [pc, #140]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800492a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd ffc0 	bl	80028bc <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004940:	f7fd ffbc 	bl	80028bc <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	@ 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e32e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004952:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x1f4>
 800495e:	e012      	b.n	8004986 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd ffac 	bl	80028bc <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004968:	f7fd ffa8 	bl	80028bc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e31a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800497a:	4b0e      	ldr	r3, [pc, #56]	@ (80049b4 <HAL_RCC_OscConfig+0x268>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 809a 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x25a>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b18      	cmp	r3, #24
 800499e:	d149      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d146      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e2fe      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
 80049b2:	bf00      	nop
 80049b4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80049be:	4b9a      	ldr	r3, [pc, #616]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0218 	and.w	r2, r3, #24
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d014      	beq.n	80049f8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80049ce:	4b96      	ldr	r3, [pc, #600]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 0218 	bic.w	r2, r3, #24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	4993      	ldr	r1, [pc, #588]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80049e0:	f000 fdd0 	bl	8005584 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049e4:	4b91      	ldr	r3, [pc, #580]	@ (8004c2c <HAL_RCC_OscConfig+0x4e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd fedd 	bl	80027a8 <HAL_InitTick>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e2db      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd ff60 	bl	80028bc <HAL_GetTick>
 80049fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a00:	f7fd ff5c 	bl	80028bc <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e2ce      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a12:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004a1e:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	497e      	ldr	r1, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004a32:	e049      	b.n	8004ac8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 0218 	bic.w	r2, r3, #24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	4977      	ldr	r1, [pc, #476]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004a4e:	4b76      	ldr	r3, [pc, #472]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a75      	ldr	r2, [pc, #468]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fd ff2f 	bl	80028bc <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a62:	f7fd ff2b 	bl	80028bc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e29d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a74:	4b6c      	ldr	r3, [pc, #432]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004a80:	4b69      	ldr	r3, [pc, #420]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4966      	ldr	r1, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
 8004a94:	e018      	b.n	8004ac8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a96:	4b64      	ldr	r3, [pc, #400]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a63      	ldr	r2, [pc, #396]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd ff0b 	bl	80028bc <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004aaa:	f7fd ff07 	bl	80028bc <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e279      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004abc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d03c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01c      	beq.n	8004b16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004adc:	4b52      	ldr	r3, [pc, #328]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae2:	4a51      	ldr	r2, [pc, #324]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004ae4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd fee6 	bl	80028bc <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004af4:	f7fd fee2 	bl	80028bc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e254      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004b06:	4b48      	ldr	r3, [pc, #288]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ef      	beq.n	8004af4 <HAL_RCC_OscConfig+0x3a8>
 8004b14:	e01b      	b.n	8004b4e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b16:	4b44      	ldr	r3, [pc, #272]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1c:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fd fec9 	bl	80028bc <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004b2e:	f7fd fec5 	bl	80028bc <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e237      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ef      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80d2 	beq.w	8004d00 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x4e4>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d118      	bne.n	8004b9a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004b68:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <HAL_RCC_OscConfig+0x4e4>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	4a30      	ldr	r2, [pc, #192]	@ (8004c30 <HAL_RCC_OscConfig+0x4e4>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b74:	f7fd fea2 	bl	80028bc <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fd fe9e 	bl	80028bc <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e210      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004b8e:	4b28      	ldr	r3, [pc, #160]	@ (8004c30 <HAL_RCC_OscConfig+0x4e4>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x468>
 8004ba2:	4b21      	ldr	r3, [pc, #132]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bb2:	e074      	b.n	8004c9e <HAL_RCC_OscConfig+0x552>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d118      	bne.n	8004bee <HAL_RCC_OscConfig+0x4a2>
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bcc:	4b16      	ldr	r3, [pc, #88]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd2:	4a15      	ldr	r2, [pc, #84]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bdc:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be2:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bec:	e057      	b.n	8004c9e <HAL_RCC_OscConfig+0x552>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d11e      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4e8>
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c0c:	4a06      	ldr	r2, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c16:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c1c:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCC_OscConfig+0x4dc>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c26:	e03a      	b.n	8004c9e <HAL_RCC_OscConfig+0x552>
 8004c28:	44020c00 	.word	0x44020c00
 8004c2c:	20000088 	.word	0x20000088
 8004c30:	44020800 	.word	0x44020800
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b85      	cmp	r3, #133	@ 0x85
 8004c3a:	d118      	bne.n	8004c6e <HAL_RCC_OscConfig+0x522>
 8004c3c:	4ba2      	ldr	r3, [pc, #648]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c42:	4aa1      	ldr	r2, [pc, #644]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c44:	f043 0304 	orr.w	r3, r3, #4
 8004c48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c52:	4a9d      	ldr	r2, [pc, #628]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c62:	4a99      	ldr	r2, [pc, #612]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c6c:	e017      	b.n	8004c9e <HAL_RCC_OscConfig+0x552>
 8004c6e:	4b96      	ldr	r3, [pc, #600]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c74:	4a94      	ldr	r2, [pc, #592]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c7e:	4b92      	ldr	r3, [pc, #584]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c84:	4a90      	ldr	r2, [pc, #576]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c86:	f023 0304 	bic.w	r3, r3, #4
 8004c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c8e:	4b8e      	ldr	r3, [pc, #568]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c94:	4a8c      	ldr	r2, [pc, #560]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fd fe09 	bl	80028bc <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fd fe05 	bl	80028bc <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e175      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc4:	4b80      	ldr	r3, [pc, #512]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ed      	beq.n	8004cae <HAL_RCC_OscConfig+0x562>
 8004cd2:	e015      	b.n	8004d00 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fdf2 	bl	80028bc <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fdee 	bl	80028bc <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e15e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf2:	4b75      	ldr	r3, [pc, #468]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ed      	bne.n	8004cdc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d036      	beq.n	8004d7a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d14:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd fdcc 	bl	80028bc <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004d28:	f7fd fdc8 	bl	80028bc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e13a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d3a:	4b63      	ldr	r3, [pc, #396]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x5dc>
 8004d46:	e018      	b.n	8004d7a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d48:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd fdb2 	bl	80028bc <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004d5c:	f7fd fdae 	bl	80028bc <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e120      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d6e:	4b56      	ldr	r3, [pc, #344]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8115 	beq.w	8004fae <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b18      	cmp	r3, #24
 8004d88:	f000 80af 	beq.w	8004eea <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	f040 8086 	bne.w	8004ea2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004d96:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004d9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fd fd8b 	bl	80028bc <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004daa:	f7fd fd87 	bl	80028bc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0f9      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dbc:	4b42      	ldr	r3, [pc, #264]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f0      	bne.n	8004daa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004dd0:	f023 0303 	bic.w	r3, r3, #3
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ddc:	0212      	lsls	r2, r2, #8
 8004dde:	430a      	orrs	r2, r1
 8004de0:	4939      	ldr	r1, [pc, #228]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	628b      	str	r3, [r1, #40]	@ 0x28
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	3b01      	subs	r3, #1
 8004df6:	025b      	lsls	r3, r3, #9
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	3b01      	subs	r3, #1
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e16:	492c      	ldr	r1, [pc, #176]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	4a29      	ldr	r2, [pc, #164]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2c:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004e32:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	4a24      	ldr	r2, [pc, #144]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e38:	f043 0310 	orr.w	r3, r3, #16
 8004e3c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	f023 020c 	bic.w	r2, r3, #12
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	491f      	ldr	r1, [pc, #124]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f023 0220 	bic.w	r2, r3, #32
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5c:	491a      	ldr	r1, [pc, #104]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	4a18      	ldr	r2, [pc, #96]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fd fd1f 	bl	80028bc <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004e82:	f7fd fd1b 	bl	80028bc <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e08d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x736>
 8004ea0:	e085      	b.n	8004fae <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004ea2:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <HAL_RCC_OscConfig+0x77c>)
 8004ea8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fd fd05 	bl	80028bc <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004eb6:	f7fd fd01 	bl	80028bc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d903      	bls.n	8004ecc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e073      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
 8004ec8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ee      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004ed8:	4b37      	ldr	r3, [pc, #220]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	4a36      	ldr	r2, [pc, #216]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004ede:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	6293      	str	r3, [r2, #40]	@ 0x28
 8004ee8:	e061      	b.n	8004fae <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004eea:	4b33      	ldr	r3, [pc, #204]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ef0:	4b31      	ldr	r3, [pc, #196]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d031      	beq.n	8004f62 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0203 	and.w	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d12a      	bne.n	8004f62 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d122      	bne.n	8004f62 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d11a      	bne.n	8004f62 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0a5b      	lsrs	r3, r3, #9
 8004f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d111      	bne.n	8004f62 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d108      	bne.n	8004f62 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	0e1b      	lsrs	r3, r3, #24
 8004f54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e024      	b.n	8004fb0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f66:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d01a      	beq.n	8004fae <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004f78:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd fc9a 	bl	80028bc <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004f8a:	bf00      	nop
 8004f8c:	f7fd fc96 	bl	80028bc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d0f9      	beq.n	8004f8c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f9c:	4a06      	ldr	r2, [pc, #24]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <HAL_RCC_OscConfig+0x86c>)
 8004fa8:	f043 0310 	orr.w	r3, r3, #16
 8004fac:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	44020c00 	.word	0x44020c00

08004fbc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e19e      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b83      	ldr	r3, [pc, #524]	@ (80051e0 <HAL_RCC_ClockConfig+0x224>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d910      	bls.n	8005000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b80      	ldr	r3, [pc, #512]	@ (80051e0 <HAL_RCC_ClockConfig+0x224>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 020f 	bic.w	r2, r3, #15
 8004fe6:	497e      	ldr	r1, [pc, #504]	@ (80051e0 <HAL_RCC_ClockConfig+0x224>)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b7c      	ldr	r3, [pc, #496]	@ (80051e0 <HAL_RCC_ClockConfig+0x224>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e186      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d012      	beq.n	8005032 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	4b74      	ldr	r3, [pc, #464]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800501a:	429a      	cmp	r2, r3
 800501c:	d909      	bls.n	8005032 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800501e:	4b71      	ldr	r3, [pc, #452]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	496d      	ldr	r1, [pc, #436]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 800502e:	4313      	orrs	r3, r2
 8005030:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d012      	beq.n	8005064 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	4b68      	ldr	r3, [pc, #416]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800504c:	429a      	cmp	r2, r3
 800504e:	d909      	bls.n	8005064 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005050:	4b64      	ldr	r3, [pc, #400]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4961      	ldr	r1, [pc, #388]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005060:	4313      	orrs	r3, r2
 8005062:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005080:	4b58      	ldr	r3, [pc, #352]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4955      	ldr	r1, [pc, #340]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 800508e:	4313      	orrs	r3, r2
 8005090:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	4b50      	ldr	r3, [pc, #320]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d908      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80050ae:	4b4d      	ldr	r3, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 020f 	bic.w	r2, r3, #15
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	494a      	ldr	r1, [pc, #296]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8093 	beq.w	80051f4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050d6:	4b43      	ldr	r3, [pc, #268]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d121      	bne.n	8005126 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e113      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ee:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d115      	bne.n	8005126 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e107      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005106:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0fb      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005116:	4b33      	ldr	r3, [pc, #204]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0f3      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005126:	4b2f      	ldr	r3, [pc, #188]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	492c      	ldr	r1, [pc, #176]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005134:	4313      	orrs	r3, r2
 8005136:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fd fbc0 	bl	80028bc <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d112      	bne.n	800516c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fd fbb8 	bl	80028bc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0d7      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800515e:	4b21      	ldr	r3, [pc, #132]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f003 0318 	and.w	r3, r3, #24
 8005166:	2b18      	cmp	r3, #24
 8005168:	d1ee      	bne.n	8005148 <HAL_RCC_ClockConfig+0x18c>
 800516a:	e043      	b.n	80051f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d112      	bne.n	800519a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005174:	e00a      	b.n	800518c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005176:	f7fd fba1 	bl	80028bc <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0c0      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f003 0318 	and.w	r3, r3, #24
 8005194:	2b10      	cmp	r3, #16
 8005196:	d1ee      	bne.n	8005176 <HAL_RCC_ClockConfig+0x1ba>
 8005198:	e02c      	b.n	80051f4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d122      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fd fb8a 	bl	80028bc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0a9      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80051ba:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <HAL_RCC_ClockConfig+0x228>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0318 	and.w	r3, r3, #24
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d1ee      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x1e8>
 80051c6:	e015      	b.n	80051f4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80051c8:	f7fd fb78 	bl	80028bc <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d906      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e097      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
 80051de:	bf00      	nop
 80051e0:	40022000 	.word	0x40022000
 80051e4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 0318 	and.w	r3, r3, #24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e9      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d010      	beq.n	8005222 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	4b44      	ldr	r3, [pc, #272]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	429a      	cmp	r2, r3
 800520e:	d208      	bcs.n	8005222 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005210:	4b41      	ldr	r3, [pc, #260]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f023 020f 	bic.w	r2, r3, #15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	493e      	ldr	r1, [pc, #248]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005222:	4b3e      	ldr	r3, [pc, #248]	@ (800531c <HAL_RCC_ClockConfig+0x360>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d210      	bcs.n	8005252 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005230:	4b3a      	ldr	r3, [pc, #232]	@ (800531c <HAL_RCC_ClockConfig+0x360>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 020f 	bic.w	r2, r3, #15
 8005238:	4938      	ldr	r1, [pc, #224]	@ (800531c <HAL_RCC_ClockConfig+0x360>)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005240:	4b36      	ldr	r3, [pc, #216]	@ (800531c <HAL_RCC_ClockConfig+0x360>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d001      	beq.n	8005252 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e05d      	b.n	800530e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	4b2d      	ldr	r3, [pc, #180]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800526a:	429a      	cmp	r2, r3
 800526c:	d208      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800526e:	4b2a      	ldr	r3, [pc, #168]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4927      	ldr	r1, [pc, #156]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 800527c:	4313      	orrs	r3, r2
 800527e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	4b21      	ldr	r3, [pc, #132]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529a:	429a      	cmp	r2, r3
 800529c:	d209      	bcs.n	80052b2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800529e:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	491a      	ldr	r1, [pc, #104]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d209      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80052d0:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	490e      	ldr	r1, [pc, #56]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052e4:	f000 f822 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <HAL_RCC_ClockConfig+0x35c>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	490b      	ldr	r1, [pc, #44]	@ (8005320 <HAL_RCC_ClockConfig+0x364>)
 80052f4:	5ccb      	ldrb	r3, [r1, r3]
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005324 <HAL_RCC_ClockConfig+0x368>)
 80052fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCC_ClockConfig+0x36c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd fa50 	bl	80027a8 <HAL_InitTick>
 8005308:	4603      	mov	r3, r0
 800530a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800530c:	7afb      	ldrb	r3, [r7, #11]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	44020c00 	.word	0x44020c00
 800531c:	40022000 	.word	0x40022000
 8005320:	0800cde8 	.word	0x0800cde8
 8005324:	20000084 	.word	0x20000084
 8005328:	20000088 	.word	0x20000088

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	@ 0x24
 8005330:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005332:	4b8c      	ldr	r3, [pc, #560]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0318 	and.w	r3, r3, #24
 800533a:	2b08      	cmp	r3, #8
 800533c:	d102      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800533e:	4b8a      	ldr	r3, [pc, #552]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e107      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005344:	4b87      	ldr	r3, [pc, #540]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f003 0318 	and.w	r3, r3, #24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d112      	bne.n	8005376 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005350:	4b84      	ldr	r3, [pc, #528]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800535c:	4b81      	ldr	r3, [pc, #516]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	4a81      	ldr	r2, [pc, #516]	@ (800556c <HAL_RCC_GetSysClockFreq+0x240>)
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e0f1      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005370:	4b7e      	ldr	r3, [pc, #504]	@ (800556c <HAL_RCC_GetSysClockFreq+0x240>)
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e0ee      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005376:	4b7b      	ldr	r3, [pc, #492]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f003 0318 	and.w	r3, r3, #24
 800537e:	2b10      	cmp	r3, #16
 8005380:	d102      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005382:	4b7b      	ldr	r3, [pc, #492]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x244>)
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e0e5      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005388:	4b76      	ldr	r3, [pc, #472]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0318 	and.w	r3, r3, #24
 8005390:	2b18      	cmp	r3, #24
 8005392:	f040 80dd 	bne.w	8005550 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005396:	4b73      	ldr	r3, [pc, #460]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80053a0:	4b70      	ldr	r3, [pc, #448]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80053ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80053b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80b7 	beq.w	800554a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d003      	beq.n	80053ea <HAL_RCC_GetSysClockFreq+0xbe>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d056      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x16a>
 80053e8:	e077      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80053ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02d      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	4a5a      	ldr	r2, [pc, #360]	@ (800556c <HAL_RCC_GetSysClockFreq+0x240>)
 8005402:	fa22 f303 	lsr.w	r3, r2, r3
 8005406:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005420:	4b50      	ldr	r3, [pc, #320]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005430:	ed97 6a02 	vldr	s12, [r7, #8]
 8005434:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x248>
 8005438:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800543c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005444:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005450:	e065      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005578 <HAL_RCC_GetSysClockFreq+0x24c>
 8005460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005464:	4b3f      	ldr	r3, [pc, #252]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005474:	ed97 6a02 	vldr	s12, [r7, #8]
 8005478:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x248>
 800547c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005480:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005484:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005488:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005494:	e043      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800557c <HAL_RCC_GetSysClockFreq+0x250>
 80054a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80054aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80054bc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x248>
 80054c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80054d8:	e021      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x254>
 80054e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 80054ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f4:	ee07 3a90 	vmov	s15, r3
 80054f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005500:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x248>
 8005504:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005508:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800550c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005510:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005518:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800551c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x238>)
 8005520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005522:	0a5b      	lsrs	r3, r3, #9
 8005524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005528:	3301      	adds	r3, #1
 800552a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005536:	edd7 6a06 	vldr	s13, [r7, #24]
 800553a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005542:	ee17 3a90 	vmov	r3, s15
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e004      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e001      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005550:	4b06      	ldr	r3, [pc, #24]	@ (800556c <HAL_RCC_GetSysClockFreq+0x240>)
 8005552:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005554:	69fb      	ldr	r3, [r7, #28]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3724      	adds	r7, #36	@ 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	44020c00 	.word	0x44020c00
 8005568:	003d0900 	.word	0x003d0900
 800556c:	03d09000 	.word	0x03d09000
 8005570:	007a1200 	.word	0x007a1200
 8005574:	46000000 	.word	0x46000000
 8005578:	4c742400 	.word	0x4c742400
 800557c:	4af42400 	.word	0x4af42400
 8005580:	4a742400 	.word	0x4a742400

08005584 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005588:	f7ff fed0 	bl	800532c <HAL_RCC_GetSysClockFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005592:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005596:	4907      	ldr	r1, [pc, #28]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005598:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800559a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	4a05      	ldr	r2, [pc, #20]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x34>)
 80055a4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80055a6:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x34>)
 80055a8:	681b      	ldr	r3, [r3, #0]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	44020c00 	.word	0x44020c00
 80055b4:	0800cde8 	.word	0x0800cde8
 80055b8:	20000084 	.word	0x20000084

080055bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80055c0:	f7ff ffe0 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	4904      	ldr	r1, [pc, #16]	@ (80055e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	44020c00 	.word	0x44020c00
 80055e4:	0800cdf8 	.word	0x0800cdf8

080055e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80055ec:	f7ff ffca 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b06      	ldr	r3, [pc, #24]	@ (800560c <HAL_RCC_GetPCLK2Freq+0x24>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4904      	ldr	r1, [pc, #16]	@ (8005610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	44020c00 	.word	0x44020c00
 8005610:	0800cdf8 	.word	0x0800cdf8

08005614 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005618:	f7ff ffb4 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	0b1b      	lsrs	r3, r3, #12
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	@ (800563c <HAL_RCC_GetPCLK3Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	44020c00 	.word	0x44020c00
 800563c:	0800cdf8 	.word	0x0800cdf8

08005640 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005644:	b0ba      	sub	sp, #232	@ 0xe8
 8005646:	af00      	add	r7, sp, #0
 8005648:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800564c:	2300      	movs	r3, #0
 800564e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005652:	2300      	movs	r3, #0
 8005654:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005664:	2500      	movs	r5, #0
 8005666:	ea54 0305 	orrs.w	r3, r4, r5
 800566a:	d00b      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800566c:	4bcd      	ldr	r3, [pc, #820]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800566e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005672:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567c:	4ac9      	ldr	r2, [pc, #804]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800567e:	430b      	orrs	r3, r1
 8005680:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 0801 	and.w	r8, r2, #1
 8005690:	f04f 0900 	mov.w	r9, #0
 8005694:	ea58 0309 	orrs.w	r3, r8, r9
 8005698:	d042      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a0:	2b05      	cmp	r3, #5
 80056a2:	d823      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xac>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056f5 	.word	0x080056f5
 80056b0:	080056c5 	.word	0x080056c5
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056f5 	.word	0x080056f5
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	080056f5 	.word	0x080056f5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c8:	3308      	adds	r3, #8
 80056ca:	4618      	mov	r0, r3
 80056cc:	f003 f90c 	bl	80088e8 <RCCEx_PLL2_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80056d6:	e00e      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056dc:	3330      	adds	r3, #48	@ 0x30
 80056de:	4618      	mov	r0, r3
 80056e0:	f003 f99a 	bl	8008a18 <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80056ea:	e004      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80056fe:	4ba9      	ldr	r3, [pc, #676]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005704:	f023 0107 	bic.w	r1, r3, #7
 8005708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800570c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570e:	4aa5      	ldr	r2, [pc, #660]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005710:	430b      	orrs	r3, r1
 8005712:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005716:	e003      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800571c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f002 0a02 	and.w	sl, r2, #2
 800572c:	f04f 0b00 	mov.w	fp, #0
 8005730:	ea5a 030b 	orrs.w	r3, sl, fp
 8005734:	f000 8088 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573e:	2b28      	cmp	r3, #40	@ 0x28
 8005740:	d868      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800581d 	.word	0x0800581d
 800574c:	08005815 	.word	0x08005815
 8005750:	08005815 	.word	0x08005815
 8005754:	08005815 	.word	0x08005815
 8005758:	08005815 	.word	0x08005815
 800575c:	08005815 	.word	0x08005815
 8005760:	08005815 	.word	0x08005815
 8005764:	08005815 	.word	0x08005815
 8005768:	080057ed 	.word	0x080057ed
 800576c:	08005815 	.word	0x08005815
 8005770:	08005815 	.word	0x08005815
 8005774:	08005815 	.word	0x08005815
 8005778:	08005815 	.word	0x08005815
 800577c:	08005815 	.word	0x08005815
 8005780:	08005815 	.word	0x08005815
 8005784:	08005815 	.word	0x08005815
 8005788:	08005801 	.word	0x08005801
 800578c:	08005815 	.word	0x08005815
 8005790:	08005815 	.word	0x08005815
 8005794:	08005815 	.word	0x08005815
 8005798:	08005815 	.word	0x08005815
 800579c:	08005815 	.word	0x08005815
 80057a0:	08005815 	.word	0x08005815
 80057a4:	08005815 	.word	0x08005815
 80057a8:	0800581d 	.word	0x0800581d
 80057ac:	08005815 	.word	0x08005815
 80057b0:	08005815 	.word	0x08005815
 80057b4:	08005815 	.word	0x08005815
 80057b8:	08005815 	.word	0x08005815
 80057bc:	08005815 	.word	0x08005815
 80057c0:	08005815 	.word	0x08005815
 80057c4:	08005815 	.word	0x08005815
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	08005815 	.word	0x08005815
 80057d0:	08005815 	.word	0x08005815
 80057d4:	08005815 	.word	0x08005815
 80057d8:	08005815 	.word	0x08005815
 80057dc:	08005815 	.word	0x08005815
 80057e0:	08005815 	.word	0x08005815
 80057e4:	08005815 	.word	0x08005815
 80057e8:	0800581d 	.word	0x0800581d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f0:	3308      	adds	r3, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f003 f878 	bl	80088e8 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80057fe:	e00e      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005804:	3330      	adds	r3, #48	@ 0x30
 8005806:	4618      	mov	r0, r3
 8005808:	f003 f906 	bl	8008a18 <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005812:	e004      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800581c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005826:	4b5f      	ldr	r3, [pc, #380]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005828:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800582c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005836:	4a5b      	ldr	r2, [pc, #364]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005838:	430b      	orrs	r3, r1
 800583a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005844:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 0304 	and.w	r3, r2, #4
 8005854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800585e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d04e      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005872:	d02c      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005874:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005878:	d825      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800587a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800587e:	d028      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005884:	d81f      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005886:	2bc0      	cmp	r3, #192	@ 0xc0
 8005888:	d025      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800588a:	2bc0      	cmp	r3, #192	@ 0xc0
 800588c:	d81b      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800588e:	2b80      	cmp	r3, #128	@ 0x80
 8005890:	d00f      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005892:	2b80      	cmp	r3, #128	@ 0x80
 8005894:	d817      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01f      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d113      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800589e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a2:	3308      	adds	r3, #8
 80058a4:	4618      	mov	r0, r3
 80058a6:	f003 f81f 	bl	80088e8 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80058b0:	e014      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b6:	3330      	adds	r3, #48	@ 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f003 f8ad 	bl	8008a18 <RCCEx_PLL3_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80058c4:	e00a      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058cc:	e006      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80058ce:	bf00      	nop
 80058d0:	e004      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80058d2:	bf00      	nop
 80058d4:	e002      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80058da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10c      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80058e4:	4b2f      	ldr	r3, [pc, #188]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058ea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f4:	4a2b      	ldr	r2, [pc, #172]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058f6:	430b      	orrs	r3, r1
 80058f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005902:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f002 0308 	and.w	r3, r2, #8
 8005912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800591c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d056      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800592c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005930:	d031      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005932:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005936:	d82a      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593c:	d02d      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005942:	d824      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005944:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005948:	d029      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800594a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800594e:	d81e      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595a:	d818      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d023      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005964:	d113      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596a:	3308      	adds	r3, #8
 800596c:	4618      	mov	r0, r3
 800596e:	f002 ffbb 	bl	80088e8 <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8005978:	e017      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800597a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800597e:	3330      	adds	r3, #48	@ 0x30
 8005980:	4618      	mov	r0, r3
 8005982:	f003 f849 	bl	8008a18 <RCCEx_PLL3_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800598c:	e00d      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005994:	e009      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005996:	bf00      	nop
 8005998:	e007      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800599a:	bf00      	nop
 800599c:	e005      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800599e:	bf00      	nop
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80059a2:	bf00      	nop
 80059a4:	44020c00 	.word	0x44020c00
        break;
 80059a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10c      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80059b2:	4bb9      	ldr	r3, [pc, #740]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059b8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c2:	4ab5      	ldr	r2, [pc, #724]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80059ca:	e003      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f002 0310 	and.w	r3, r2, #16
 80059e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059e4:	2300      	movs	r3, #0
 80059e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80059ee:	460b      	mov	r3, r1
 80059f0:	4313      	orrs	r3, r2
 80059f2:	d053      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80059f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059fe:	d031      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005a00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005a04:	d82a      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a0a:	d02d      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a10:	d824      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a16:	d029      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a1c:	d81e      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a22:	d011      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a28:	d818      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a32:	d113      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a38:	3308      	adds	r3, #8
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f002 ff54 	bl	80088e8 <RCCEx_PLL2_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005a46:	e014      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a4c:	3330      	adds	r3, #48	@ 0x30
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 ffe2 	bl	8008a18 <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a62:	e006      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a64:	bf00      	nop
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005a7a:	4b87      	ldr	r3, [pc, #540]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	4a83      	ldr	r2, [pc, #524]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f002 0320 	and.w	r3, r2, #32
 8005aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ab2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d053      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ac6:	d031      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005ac8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005acc:	d82a      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad2:	d02d      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad8:	d824      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005ada:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005ade:	d029      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005ae0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005ae4:	d81e      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aea:	d011      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d818      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d020      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	d113      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b00:	3308      	adds	r3, #8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f002 fef0 	bl	80088e8 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005b0e:	e014      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b14:	3330      	adds	r3, #48	@ 0x30
 8005b16:	4618      	mov	r0, r3
 8005b18:	f002 ff7e 	bl	8008a18 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8005b22:	e00a      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b2a:	e006      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10c      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005b42:	4b55      	ldr	r3, [pc, #340]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b48:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	4a51      	ldr	r2, [pc, #324]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b5a:	e003      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d053      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b8e:	d031      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005b90:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b94:	d82a      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005b96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b9a:	d02d      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ba0:	d824      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005ba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ba6:	d029      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ba8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bac:	d81e      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb2:	d011      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb8:	d818      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bc2:	d113      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bc8:	3308      	adds	r3, #8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 fe8c 	bl	80088e8 <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005bd6:	e014      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bdc:	3330      	adds	r3, #48	@ 0x30
 8005bde:	4618      	mov	r0, r3
 8005be0:	f002 ff1a 	bl	8008a18 <RCCEx_PLL3_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005bea:	e00a      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bf2:	e006      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005c0a:	4b23      	ldr	r3, [pc, #140]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c42:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	d03d      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c56:	d01b      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c5c:	d814      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c62:	d017      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8005c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c68:	d80e      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c72:	d109      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c78:	3330      	adds	r3, #48	@ 0x30
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 fecc 	bl	8008a18 <RCCEx_PLL3_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005c86:	e00a      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c8e:	e006      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005c90:	bf00      	nop
 8005c92:	e004      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8005c94:	bf00      	nop
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8005c98:	44020c00 	.word	0x44020c00
        break;
 8005c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ca6:	4b99      	ldr	r3, [pc, #612]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cb6:	4a95      	ldr	r2, [pc, #596]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cc4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	d03b      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cf2:	d01b      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005cf4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cf8:	d814      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005cfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cfe:	d017      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005d00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d04:	d80e      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d014      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8005d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d0e:	d109      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d14:	3330      	adds	r3, #48	@ 0x30
 8005d16:	4618      	mov	r0, r3
 8005d18:	f002 fe7e 	bl	8008a18 <RCCEx_PLL3_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005d22:	e008      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d2a:	e004      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005d2c:	bf00      	nop
 8005d2e:	e002      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005d30:	bf00      	nop
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005d3e:	4b73      	ldr	r3, [pc, #460]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d44:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d56:	e003      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d70:	2300      	movs	r3, #0
 8005d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	d03d      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d8c:	d01b      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8005d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d92:	d814      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d98:	d017      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8005d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d9e:	d80e      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d014      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8005da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da8:	d109      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dae:	3330      	adds	r3, #48	@ 0x30
 8005db0:	4618      	mov	r0, r3
 8005db2:	f002 fe31 	bl	8008a18 <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dea:	4a48      	ldr	r2, [pc, #288]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005df8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e12:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d035      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e28:	d015      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005e2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e2e:	d80e      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d012      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e38:	d109      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e3e:	3330      	adds	r3, #48	@ 0x30
 8005e40:	4618      	mov	r0, r3
 8005e42:	f002 fde9 	bl	8008a18 <RCCEx_PLL3_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005e4c:	e006      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005e64:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e6a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e76:	4a25      	ldr	r2, [pc, #148]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e7e:	e003      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	2100      	movs	r1, #0
 8005e92:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d037      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb4:	d015      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005eb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eba:	d80e      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d012      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005ec0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ec4:	d109      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eca:	3330      	adds	r3, #48	@ 0x30
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f002 fda3 	bl	8008a18 <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005ee6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ee8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10f      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005ef0:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ef2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ef6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	4a02      	ldr	r2, [pc, #8]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f0a:	e005      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005f0c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	2100      	movs	r1, #0
 8005f22:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f2a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4313      	orrs	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005f34:	4bb8      	ldr	r3, [pc, #736]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	4ab7      	ldr	r2, [pc, #732]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005f3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f3e:	61d3      	str	r3, [r2, #28]
 8005f40:	4bb5      	ldr	r3, [pc, #724]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005f42:	69d9      	ldr	r1, [r3, #28]
 8005f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f4c:	4ab2      	ldr	r2, [pc, #712]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f60:	2300      	movs	r3, #0
 8005f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d055      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f76:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f7a:	d031      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005f7c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f80:	d82a      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f86:	d02d      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8c:	d824      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f92:	d029      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f98:	d81e      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9e:	d011      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa4:	d818      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fae:	d113      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 fc96 	bl	80088e8 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005fc2:	e014      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fc8:	3330      	adds	r3, #48	@ 0x30
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 fd24 	bl	8008a18 <RCCEx_PLL3_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005fd6:	e00a      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005fde:	e006      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e004      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005fe4:	bf00      	nop
 8005fe6:	e002      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005ff6:	4b88      	ldr	r3, [pc, #544]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ffc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006008:	4a83      	ldr	r2, [pc, #524]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800600a:	430b      	orrs	r3, r1
 800600c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006010:	e003      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006016:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800601a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006026:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006028:	2300      	movs	r3, #0
 800602a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800602c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d055      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006042:	d031      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8006044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006048:	d82a      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800604a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800604e:	d02d      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006054:	d824      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800605a:	d029      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800605c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006060:	d81e      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006066:	d011      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606c:	d818      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006076:	d113      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800607c:	3308      	adds	r3, #8
 800607e:	4618      	mov	r0, r3
 8006080:	f002 fc32 	bl	80088e8 <RCCEx_PLL2_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800608a:	e014      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800608c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006090:	3330      	adds	r3, #48	@ 0x30
 8006092:	4618      	mov	r0, r3
 8006094:	f002 fcc0 	bl	8008a18 <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800609e:	e00a      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060a6:	e006      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80060a8:	bf00      	nop
 80060aa:	e004      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80060b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10d      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80060be:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80060c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d0:	4a51      	ldr	r2, [pc, #324]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80060d2:	430b      	orrs	r3, r1
 80060d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80060d8:	e003      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060de:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80060e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80060ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f0:	2300      	movs	r3, #0
 80060f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80060f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d032      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006106:	2b05      	cmp	r3, #5
 8006108:	d80f      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800610a:	2b03      	cmp	r3, #3
 800610c:	d211      	bcs.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800610e:	2b01      	cmp	r3, #1
 8006110:	d911      	bls.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006112:	2b02      	cmp	r3, #2
 8006114:	d109      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800611a:	3308      	adds	r3, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f002 fbe3 	bl	80088e8 <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006128:	e006      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006130:	e002      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006138:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006140:	4b35      	ldr	r3, [pc, #212]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006146:	f023 0107 	bic.w	r1, r3, #7
 800614a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800614e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006152:	4a31      	ldr	r2, [pc, #196]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006154:	430b      	orrs	r3, r1
 8006156:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800615a:	e003      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006160:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	2100      	movs	r1, #0
 800616e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006176:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800617a:	460b      	mov	r3, r1
 800617c:	4313      	orrs	r3, r2
 800617e:	d024      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800618c:	2b08      	cmp	r3, #8
 800618e:	d005      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006196:	e002      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800619c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10d      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80061a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80061a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061ac:	f023 0108 	bic.w	r1, r3, #8
 80061b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061b8:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80061d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d8:	2300      	movs	r3, #0
 80061da:	657b      	str	r3, [r7, #84]	@ 0x54
 80061dc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80061e0:	460b      	mov	r3, r1
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f000 80b9 	beq.w	800635a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80061e8:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	4a0b      	ldr	r2, [pc, #44]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f4:	f7fc fb62 	bl	80028bc <HAL_GetTick>
 80061f8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061fc:	e010      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fe:	f7fc fb5d 	bl	80028bc <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d908      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006214:	e00a      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006216:	bf00      	nop
 8006218:	44020c00 	.word	0x44020c00
 800621c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006220:	4bba      	ldr	r3, [pc, #744]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0e8      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800622c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 808e 	bne.w	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006236:	4bb6      	ldr	r3, [pc, #728]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800623c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006240:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d023      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800624c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006250:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	4293      	cmp	r3, r2
 800625a:	d01b      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800625c:	4bac      	ldr	r3, [pc, #688]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800625e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800626a:	4ba9      	ldr	r3, [pc, #676]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	4aa7      	ldr	r2, [pc, #668]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800627a:	4ba5      	ldr	r3, [pc, #660]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800627c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006280:	4aa3      	ldr	r2, [pc, #652]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800628a:	4aa1      	ldr	r2, [pc, #644]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d019      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fc fb0c 	bl	80028bc <HAL_GetTick>
 80062a4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a8:	e00d      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062aa:	f7fc fb07 	bl	80028bc <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d903      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c6:	4b92      	ldr	r3, [pc, #584]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ea      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80062d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d135      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80062dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ec:	d110      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80062ee:	4b88      	ldr	r3, [pc, #544]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80062fe:	091b      	lsrs	r3, r3, #4
 8006300:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006304:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006308:	4a81      	ldr	r2, [pc, #516]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800630a:	430b      	orrs	r3, r1
 800630c:	61d3      	str	r3, [r2, #28]
 800630e:	e005      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006310:	4b7f      	ldr	r3, [pc, #508]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4a7e      	ldr	r2, [pc, #504]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006316:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800631a:	61d3      	str	r3, [r2, #28]
 800631c:	4b7c      	ldr	r3, [pc, #496]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800631e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006322:	4a7b      	ldr	r2, [pc, #492]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006328:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800632c:	4b78      	ldr	r3, [pc, #480]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800632e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006336:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800633a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633e:	4a74      	ldr	r2, [pc, #464]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006340:	430b      	orrs	r3, r1
 8006342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006346:	e008      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006348:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800634c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006356:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800635a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006368:	2300      	movs	r3, #0
 800636a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800636c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d035      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800637a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800637e:	2b30      	cmp	r3, #48	@ 0x30
 8006380:	d014      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d80e      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006386:	2b20      	cmp	r3, #32
 8006388:	d012      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800638a:	2b20      	cmp	r3, #32
 800638c:	d80a      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8006392:	2b10      	cmp	r3, #16
 8006394:	d106      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006396:	4b5e      	ldr	r3, [pc, #376]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639a:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800639c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80063a2:	e008      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80063aa:	e004      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80063b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80063be:	4b54      	ldr	r3, [pc, #336]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80063c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d0:	4a4f      	ldr	r2, [pc, #316]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063de:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f0:	2300      	movs	r3, #0
 80063f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80063f8:	460b      	mov	r3, r1
 80063fa:	4313      	orrs	r3, r2
 80063fc:	d033      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80063fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d007      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800640e:	e010      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006410:	4b3f      	ldr	r3, [pc, #252]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	4a3e      	ldr	r2, [pc, #248]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800641c:	e00d      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800641e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006422:	3308      	adds	r3, #8
 8006424:	4618      	mov	r0, r3
 8006426:	f002 fa5f 	bl	80088e8 <RCCEx_PLL2_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006442:	4b33      	ldr	r3, [pc, #204]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006448:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800644c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006454:	4a2e      	ldr	r2, [pc, #184]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006456:	430b      	orrs	r3, r1
 8006458:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800645c:	e003      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006462:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006474:	2300      	movs	r3, #0
 8006476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006478:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800647c:	460b      	mov	r3, r1
 800647e:	4313      	orrs	r3, r2
 8006480:	d04c      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800648a:	2b04      	cmp	r3, #4
 800648c:	d827      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a9 	.word	0x080064a9
 8006498:	080064b7 	.word	0x080064b7
 800649c:	080064cb 	.word	0x080064cb
 80064a0:	080064e7 	.word	0x080064e7
 80064a4:	080064e7 	.word	0x080064e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80064ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064b4:	e018      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ba:	3308      	adds	r3, #8
 80064bc:	4618      	mov	r0, r3
 80064be:	f002 fa13 	bl	80088e8 <RCCEx_PLL2_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064c8:	e00e      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ce:	3330      	adds	r3, #48	@ 0x30
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 faa1 	bl	8008a18 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80064e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d111      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80064f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064f6:	f023 0107 	bic.w	r1, r3, #7
 80064fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006502:	4a03      	ldr	r2, [pc, #12]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006504:	430b      	orrs	r3, r1
 8006506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800650a:	e007      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800650c:	44020800 	.word	0x44020800
 8006510:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006518:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800651c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30
 800652a:	2300      	movs	r3, #0
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
 800652e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	f000 8081 	beq.w	800663c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800653a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800653e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006542:	2b20      	cmp	r3, #32
 8006544:	d85f      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065d1 	.word	0x080065d1
 8006550:	08006607 	.word	0x08006607
 8006554:	08006607 	.word	0x08006607
 8006558:	08006607 	.word	0x08006607
 800655c:	08006607 	.word	0x08006607
 8006560:	08006607 	.word	0x08006607
 8006564:	08006607 	.word	0x08006607
 8006568:	08006607 	.word	0x08006607
 800656c:	080065df 	.word	0x080065df
 8006570:	08006607 	.word	0x08006607
 8006574:	08006607 	.word	0x08006607
 8006578:	08006607 	.word	0x08006607
 800657c:	08006607 	.word	0x08006607
 8006580:	08006607 	.word	0x08006607
 8006584:	08006607 	.word	0x08006607
 8006588:	08006607 	.word	0x08006607
 800658c:	080065f3 	.word	0x080065f3
 8006590:	08006607 	.word	0x08006607
 8006594:	08006607 	.word	0x08006607
 8006598:	08006607 	.word	0x08006607
 800659c:	08006607 	.word	0x08006607
 80065a0:	08006607 	.word	0x08006607
 80065a4:	08006607 	.word	0x08006607
 80065a8:	08006607 	.word	0x08006607
 80065ac:	0800660f 	.word	0x0800660f
 80065b0:	08006607 	.word	0x08006607
 80065b4:	08006607 	.word	0x08006607
 80065b8:	08006607 	.word	0x08006607
 80065bc:	08006607 	.word	0x08006607
 80065c0:	08006607 	.word	0x08006607
 80065c4:	08006607 	.word	0x08006607
 80065c8:	08006607 	.word	0x08006607
 80065cc:	0800660f 	.word	0x0800660f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4bb9      	ldr	r3, [pc, #740]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	4ab8      	ldr	r2, [pc, #736]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80065dc:	e018      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065e2:	3308      	adds	r3, #8
 80065e4:	4618      	mov	r0, r3
 80065e6:	f002 f97f 	bl	80088e8 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80065f0:	e00e      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f6:	3330      	adds	r3, #48	@ 0x30
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 fa0d 	bl	8008a18 <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006604:	e004      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800660c:	e000      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800660e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006610:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10d      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006618:	4ba7      	ldr	r3, [pc, #668]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800661a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800661e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800662a:	4aa3      	ldr	r2, [pc, #652]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800662c:	430b      	orrs	r3, r1
 800662e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006638:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800663c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800664a:	2300      	movs	r3, #0
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006652:	460b      	mov	r3, r1
 8006654:	4313      	orrs	r3, r2
 8006656:	d04e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800665c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006664:	d02e      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666a:	d827      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800666c:	2bc0      	cmp	r3, #192	@ 0xc0
 800666e:	d02b      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8006670:	2bc0      	cmp	r3, #192	@ 0xc0
 8006672:	d823      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006674:	2b80      	cmp	r3, #128	@ 0x80
 8006676:	d017      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8006678:	2b80      	cmp	r3, #128	@ 0x80
 800667a:	d81f      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d007      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8006684:	e01a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006686:	4b8c      	ldr	r3, [pc, #560]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668a:	4a8b      	ldr	r2, [pc, #556]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800668c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006690:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006692:	e01a      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006698:	3308      	adds	r3, #8
 800669a:	4618      	mov	r0, r3
 800669c:	f002 f924 	bl	80088e8 <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80066a6:	e010      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ac:	3330      	adds	r3, #48	@ 0x30
 80066ae:	4618      	mov	r0, r3
 80066b0:	f002 f9b2 	bl	8008a18 <RCCEx_PLL3_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80066ba:	e006      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80066c2:	e002      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80066c4:	bf00      	nop
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80066c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10d      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80066d2:	4b79      	ldr	r3, [pc, #484]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80066d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066d8:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80066dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066e4:	4974      	ldr	r1, [pc, #464]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80066ec:	e003      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80066f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006702:	623b      	str	r3, [r7, #32]
 8006704:	2300      	movs	r3, #0
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
 8006708:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d055      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800671a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800671e:	d031      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8006720:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006724:	d82a      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672a:	d02d      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006730:	d824      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8006732:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006736:	d029      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8006738:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800673c:	d81e      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006742:	d011      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006748:	d818      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d020      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800674e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006752:	d113      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006758:	3308      	adds	r3, #8
 800675a:	4618      	mov	r0, r3
 800675c:	f002 f8c4 	bl	80088e8 <RCCEx_PLL2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006766:	e014      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800676c:	3330      	adds	r3, #48	@ 0x30
 800676e:	4618      	mov	r0, r3
 8006770:	f002 f952 	bl	8008a18 <RCCEx_PLL3_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800677a:	e00a      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006782:	e006      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006784:	bf00      	nop
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006788:	bf00      	nop
 800678a:	e002      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8006790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006792:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800679a:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800679c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067a0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80067a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067ac:	4942      	ldr	r1, [pc, #264]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80067b4:	e003      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	2100      	movs	r1, #0
 80067c8:	61b9      	str	r1, [r7, #24]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067d4:	460b      	mov	r3, r1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	d03c      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80067da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d81b      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006827 	.word	0x08006827
 80067f0:	080067fd 	.word	0x080067fd
 80067f4:	0800680b 	.word	0x0800680b
 80067f8:	08006827 	.word	0x08006827
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4b2e      	ldr	r3, [pc, #184]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	4a2d      	ldr	r2, [pc, #180]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006806:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006808:	e00e      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800680a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800680e:	3308      	adds	r3, #8
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f869 	bl	80088e8 <RCCEx_PLL2_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800681c:	e004      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006824:	e000      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8006826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006828:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006830:	4b21      	ldr	r3, [pc, #132]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006836:	f023 0203 	bic.w	r2, r3, #3
 800683a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800683e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006842:	491d      	ldr	r1, [pc, #116]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800684a:	e003      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006850:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	2100      	movs	r1, #0
 800685e:	6139      	str	r1, [r7, #16]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800686a:	460b      	mov	r3, r1
 800686c:	4313      	orrs	r3, r2
 800686e:	d03c      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d00e      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800687e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006882:	d815      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d019      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8006888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688c:	d110      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	4a09      	ldr	r2, [pc, #36]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8006894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006898:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800689a:	e010      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068a0:	3308      	adds	r3, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 f820 	bl	80088e8 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80068ae:	e006      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80068b6:	e002      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80068b8:	44020c00 	.word	0x44020c00
        break;
 80068bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80068c6:	4b3d      	ldr	r3, [pc, #244]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80068c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d8:	4938      	ldr	r1, [pc, #224]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	2100      	movs	r1, #0
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d038      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800690a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800690e:	2b30      	cmp	r3, #48	@ 0x30
 8006910:	d01b      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8006912:	2b30      	cmp	r3, #48	@ 0x30
 8006914:	d815      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8006916:	2b10      	cmp	r3, #16
 8006918:	d002      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800691a:	2b20      	cmp	r3, #32
 800691c:	d007      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800691e:	e010      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	4a25      	ldr	r2, [pc, #148]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800692a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800692c:	e00e      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800692e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006932:	3330      	adds	r3, #48	@ 0x30
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f86f 	bl	8008a18 <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10d      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006954:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800695a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800695e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006962:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006966:	4915      	ldr	r1, [pc, #84]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800696e:	e003      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006974:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	2100      	movs	r1, #0
 8006982:	6039      	str	r1, [r7, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d00c      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8006996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800699a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800699e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069a6:	4905      	ldr	r1, [pc, #20]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80069ae:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	37e8      	adds	r7, #232	@ 0xe8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069bc:	44020c00 	.word	0x44020c00

080069c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b08b      	sub	sp, #44	@ 0x2c
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80069c8:	4bae      	ldr	r3, [pc, #696]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80069d2:	4bac      	ldr	r3, [pc, #688]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80069dc:	4ba9      	ldr	r3, [pc, #676]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	0a1b      	lsrs	r3, r3, #8
 80069e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80069e8:	4ba6      	ldr	r3, [pc, #664]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80069f4:	4ba3      	ldr	r3, [pc, #652]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	08db      	lsrs	r3, r3, #3
 80069fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	fb02 f303 	mul.w	r3, r2, r3
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8126 	beq.w	8006c64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d053      	beq.n	8006ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d86f      	bhi.n	8006b04 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d003      	beq.n	8006a32 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d02b      	beq.n	8006a88 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006a30:	e068      	b.n	8006b04 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a32:	4b94      	ldr	r3, [pc, #592]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	4a92      	ldr	r2, [pc, #584]	@ (8006c88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a42:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a6a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006a86:	e068      	b.n	8006b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa4:	ed97 6a04 	vldr	s12, [r7, #16]
 8006aa8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006ac4:	e049      	b.n	8006b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ae6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b02:	e02a      	b.n	8006b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b04:	4b5f      	ldr	r3, [pc, #380]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	08db      	lsrs	r3, r3, #3
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8006c88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
 8006b14:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b38:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b3c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b58:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b66:	d121      	bne.n	8006bac <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006b68:	4b46      	ldr	r3, [pc, #280]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d017      	beq.n	8006ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b74:	4b43      	ldr	r3, [pc, #268]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b78:	0a5b      	lsrs	r3, r3, #9
 8006b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006b8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e006      	b.n	8006bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bb2:	4b34      	ldr	r3, [pc, #208]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bbe:	d121      	bne.n	8006c04 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006bc0:	4b30      	ldr	r3, [pc, #192]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd0:	0c1b      	lsrs	r3, r3, #16
 8006bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006be6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	e006      	b.n	8006c0a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	e002      	b.n	8006c0a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c16:	d121      	bne.n	8006c5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006c18:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d017      	beq.n	8006c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c24:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c3e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c52:	e010      	b.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
}
 8006c5a:	e00c      	b.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	e008      	b.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	372c      	adds	r7, #44	@ 0x2c
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	44020c00 	.word	0x44020c00
 8006c88:	03d09000 	.word	0x03d09000
 8006c8c:	46000000 	.word	0x46000000
 8006c90:	4a742400 	.word	0x4a742400
 8006c94:	4af42400 	.word	0x4af42400

08006c98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b08b      	sub	sp, #44	@ 0x2c
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006ca0:	4bae      	ldr	r3, [pc, #696]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006caa:	4bac      	ldr	r3, [pc, #688]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006cb4:	4ba9      	ldr	r3, [pc, #676]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cbe:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006cc0:	4ba6      	ldr	r3, [pc, #664]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	08db      	lsrs	r3, r3, #3
 8006cd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8126 	beq.w	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d053      	beq.n	8006d9e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d86f      	bhi.n	8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d003      	beq.n	8006d0a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d02b      	beq.n	8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006d08:	e068      	b.n	8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d0a:	4b94      	ldr	r3, [pc, #592]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	4a92      	ldr	r2, [pc, #584]	@ (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d42:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d5e:	e068      	b.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d80:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006d9c:	e049      	b.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dbe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006dda:	e02a      	b.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	4a5e      	ldr	r2, [pc, #376]	@ (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e10:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e14:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006e30:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e32:	4b4a      	ldr	r3, [pc, #296]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e3e:	d121      	bne.n	8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006e40:	4b46      	ldr	r3, [pc, #280]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d017      	beq.n	8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e4c:	4b43      	ldr	r3, [pc, #268]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e50:	0a5b      	lsrs	r3, r3, #9
 8006e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e62:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006e66:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e72:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e006      	b.n	8006e8a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e002      	b.n	8006e8a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e8a:	4b34      	ldr	r3, [pc, #208]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e96:	d121      	bne.n	8006edc <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006e98:	4b30      	ldr	r3, [pc, #192]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d017      	beq.n	8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006ebe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eca:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eee:	d121      	bne.n	8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f12:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f16:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f22:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f2a:	e010      	b.n	8006f4e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
}
 8006f32:	e00c      	b.n	8006f4e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
}
 8006f3a:	e008      	b.n	8006f4e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	372c      	adds	r7, #44	@ 0x2c
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	44020c00 	.word	0x44020c00
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	46000000 	.word	0x46000000
 8006f68:	4a742400 	.word	0x4a742400
 8006f6c:	4af42400 	.word	0x4af42400

08006f70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b08b      	sub	sp, #44	@ 0x2c
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006f78:	4bae      	ldr	r3, [pc, #696]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f80:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006f82:	4bac      	ldr	r3, [pc, #688]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006f8c:	4ba9      	ldr	r3, [pc, #676]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f96:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006f98:	4ba6      	ldr	r3, [pc, #664]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006fa4:	4ba3      	ldr	r3, [pc, #652]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	fb02 f303 	mul.w	r3, r2, r3
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8126 	beq.w	8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d053      	beq.n	8007076 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d86f      	bhi.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d02b      	beq.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006fe0:	e068      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fe2:	4b94      	ldr	r3, [pc, #592]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	4a92      	ldr	r2, [pc, #584]	@ (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a04 	vldr	s12, [r7, #16]
 800701a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800723c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007036:	e068      	b.n	800710a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007054:	ed97 6a04 	vldr	s12, [r7, #16]
 8007058:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800723c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800705c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007070:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007074:	e049      	b.n	800710a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007080:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a04 	vldr	s12, [r7, #16]
 8007096:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800723c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80070b2:	e02a      	b.n	800710a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	4a5e      	ldr	r2, [pc, #376]	@ (8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
 80070c4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80070ec:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800723c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007108:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800710a:	4b4a      	ldr	r3, [pc, #296]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007116:	d121      	bne.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007118:	4b46      	ldr	r3, [pc, #280]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800711a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d017      	beq.n	8007154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007124:	4b43      	ldr	r3, [pc, #268]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007128:	0a5b      	lsrs	r3, r3, #9
 800712a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800713a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800713e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e006      	b.n	8007162 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e002      	b.n	8007162 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007162:	4b34      	ldr	r3, [pc, #208]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716e:	d121      	bne.n	80071b4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007170:	4b30      	ldr	r3, [pc, #192]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800717c:	4b2d      	ldr	r3, [pc, #180]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800717e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800718e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007192:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007196:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	e006      	b.n	80071ba <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	e002      	b.n	80071ba <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071c6:	d121      	bne.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80071c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d017      	beq.n	8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071d4:	4b17      	ldr	r3, [pc, #92]	@ (8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80071e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fa:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007202:	e010      	b.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	609a      	str	r2, [r3, #8]
}
 800720a:	e00c      	b.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	609a      	str	r2, [r3, #8]
}
 8007212:	e008      	b.n	8007226 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
}
 8007226:	bf00      	nop
 8007228:	372c      	adds	r7, #44	@ 0x2c
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	44020c00 	.word	0x44020c00
 8007238:	03d09000 	.word	0x03d09000
 800723c:	46000000 	.word	0x46000000
 8007240:	4a742400 	.word	0x4a742400
 8007244:	4af42400 	.word	0x4af42400

08007248 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b08f      	sub	sp, #60	@ 0x3c
 800724c:	af00      	add	r7, sp, #0
 800724e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007256:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800725a:	4321      	orrs	r1, r4
 800725c:	d150      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800725e:	4b26      	ldr	r3, [pc, #152]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007268:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800726a:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800726c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b02      	cmp	r3, #2
 8007276:	d108      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727e:	d104      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007280:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
 8007286:	f001 bb20 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800728a:	4b1b      	ldr	r3, [pc, #108]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800728c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007298:	d108      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072a0:	d104      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80072a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a8:	f001 bb0f 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80072ac:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072b8:	d119      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072c0:	d115      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072ce:	d30a      	bcc.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80072d0:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	0a1b      	lsrs	r3, r3, #8
 80072d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072da:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80072e2:	f001 baf2 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80072ea:	f001 baee 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f2:	f001 baea 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80072f6:	bf00      	nop
 80072f8:	44020c00 	.word	0x44020c00
 80072fc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007304:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8007308:	ea50 0104 	orrs.w	r1, r0, r4
 800730c:	f000 8615 	beq.w	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8007310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007314:	2801      	cmp	r0, #1
 8007316:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800731a:	f081 82d3 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800731e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007322:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007326:	ea50 0104 	orrs.w	r1, r0, r4
 800732a:	f000 84d8 	beq.w	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800732e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007332:	2801      	cmp	r0, #1
 8007334:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007338:	f081 82c4 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800733c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007340:	f1a1 0410 	sub.w	r4, r1, #16
 8007344:	ea50 0104 	orrs.w	r1, r0, r4
 8007348:	f001 8288 	beq.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800734c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007350:	2801      	cmp	r0, #1
 8007352:	f171 0110 	sbcs.w	r1, r1, #16
 8007356:	f081 82b5 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800735a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800735e:	f1a1 0408 	sub.w	r4, r1, #8
 8007362:	ea50 0104 	orrs.w	r1, r0, r4
 8007366:	f001 81fe 	beq.w	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800736a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800736e:	2801      	cmp	r0, #1
 8007370:	f171 0108 	sbcs.w	r1, r1, #8
 8007374:	f081 82a6 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800737c:	1f0c      	subs	r4, r1, #4
 800737e:	ea50 0104 	orrs.w	r1, r0, r4
 8007382:	f000 8753 	beq.w	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8007386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800738a:	2801      	cmp	r0, #1
 800738c:	f171 0104 	sbcs.w	r1, r1, #4
 8007390:	f081 8298 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007394:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007398:	1e8c      	subs	r4, r1, #2
 800739a:	ea50 0104 	orrs.w	r1, r0, r4
 800739e:	f001 8173 	beq.w	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80073a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a6:	2801      	cmp	r0, #1
 80073a8:	f171 0102 	sbcs.w	r1, r1, #2
 80073ac:	f081 828a 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80073b8:	4321      	orrs	r1, r4
 80073ba:	f001 80fe 	beq.w	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80073be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c2:	4ccb      	ldr	r4, [pc, #812]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80073c4:	42a0      	cmp	r0, r4
 80073c6:	f171 0100 	sbcs.w	r1, r1, #0
 80073ca:	f081 827b 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d2:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80073d6:	4321      	orrs	r1, r4
 80073d8:	f001 8076 	beq.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80073dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e0:	4cc4      	ldr	r4, [pc, #784]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80073e2:	42a0      	cmp	r0, r4
 80073e4:	f171 0100 	sbcs.w	r1, r1, #0
 80073e8:	f081 826c 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80073ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073f0:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80073f4:	4321      	orrs	r1, r4
 80073f6:	f000 87b5 	beq.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80073fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073fe:	4cbe      	ldr	r4, [pc, #760]	@ (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8007400:	42a0      	cmp	r0, r4
 8007402:	f171 0100 	sbcs.w	r1, r1, #0
 8007406:	f081 825d 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800740a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800740e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007412:	4321      	orrs	r1, r4
 8007414:	f000 8738 	beq.w	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741c:	4cb7      	ldr	r4, [pc, #732]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800741e:	42a0      	cmp	r0, r4
 8007420:	f171 0100 	sbcs.w	r1, r1, #0
 8007424:	f081 824e 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007430:	4321      	orrs	r1, r4
 8007432:	f001 81cd 	beq.w	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8007436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743a:	4cb1      	ldr	r4, [pc, #708]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800743c:	42a0      	cmp	r0, r4
 800743e:	f171 0100 	sbcs.w	r1, r1, #0
 8007442:	f081 823f 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800744a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800744e:	4321      	orrs	r1, r4
 8007450:	f000 80d9 	beq.w	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007458:	4caa      	ldr	r4, [pc, #680]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800745a:	42a0      	cmp	r0, r4
 800745c:	f171 0100 	sbcs.w	r1, r1, #0
 8007460:	f081 8230 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007468:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800746c:	4321      	orrs	r1, r4
 800746e:	f000 83da 	beq.w	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007476:	4ca4      	ldr	r4, [pc, #656]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8007478:	42a0      	cmp	r0, r4
 800747a:	f171 0100 	sbcs.w	r1, r1, #0
 800747e:	f081 8221 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007486:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800748a:	4321      	orrs	r1, r4
 800748c:	f000 8627 	beq.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8007490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007494:	4c9d      	ldr	r4, [pc, #628]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8007496:	42a0      	cmp	r0, r4
 8007498:	f171 0100 	sbcs.w	r1, r1, #0
 800749c:	f081 8212 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80074a8:	4321      	orrs	r1, r4
 80074aa:	f000 857a 	beq.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80074ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b2:	4c97      	ldr	r4, [pc, #604]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	f171 0100 	sbcs.w	r1, r1, #0
 80074ba:	f081 8203 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80074c6:	4321      	orrs	r1, r4
 80074c8:	f000 84fb 	beq.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80074cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80074d4:	f171 0100 	sbcs.w	r1, r1, #0
 80074d8:	f081 81f4 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80074e4:	4321      	orrs	r1, r4
 80074e6:	f000 84a9 	beq.w	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80074ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ee:	f248 0401 	movw	r4, #32769	@ 0x8001
 80074f2:	42a0      	cmp	r0, r4
 80074f4:	f171 0100 	sbcs.w	r1, r1, #0
 80074f8:	f081 81e4 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80074fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007500:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007504:	4321      	orrs	r1, r4
 8007506:	f000 8456 	beq.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800750a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007512:	42a0      	cmp	r0, r4
 8007514:	f171 0100 	sbcs.w	r1, r1, #0
 8007518:	f081 81d4 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800751c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007520:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007524:	4321      	orrs	r1, r4
 8007526:	f000 8403 	beq.w	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800752a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800752e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007532:	42a0      	cmp	r0, r4
 8007534:	f171 0100 	sbcs.w	r1, r1, #0
 8007538:	f081 81c4 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800753c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007540:	2821      	cmp	r0, #33	@ 0x21
 8007542:	f171 0100 	sbcs.w	r1, r1, #0
 8007546:	d255      	bcs.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800754c:	4301      	orrs	r1, r0
 800754e:	f001 81b9 	beq.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007556:	1e42      	subs	r2, r0, #1
 8007558:	f141 33ff 	adc.w	r3, r1, #4294967295
 800755c:	2a20      	cmp	r2, #32
 800755e:	f173 0100 	sbcs.w	r1, r3, #0
 8007562:	f081 81af 	bcs.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007566:	2a1f      	cmp	r2, #31
 8007568:	f201 81ac 	bhi.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800756c:	a101      	add	r1, pc, #4	@ (adr r1, 8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800756e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007572:	bf00      	nop
 8007574:	0800764b 	.word	0x0800764b
 8007578:	08007749 	.word	0x08007749
 800757c:	080088c5 	.word	0x080088c5
 8007580:	08007809 	.word	0x08007809
 8007584:	080088c5 	.word	0x080088c5
 8007588:	080088c5 	.word	0x080088c5
 800758c:	080088c5 	.word	0x080088c5
 8007590:	080078d9 	.word	0x080078d9
 8007594:	080088c5 	.word	0x080088c5
 8007598:	080088c5 	.word	0x080088c5
 800759c:	080088c5 	.word	0x080088c5
 80075a0:	080088c5 	.word	0x080088c5
 80075a4:	080088c5 	.word	0x080088c5
 80075a8:	080088c5 	.word	0x080088c5
 80075ac:	080088c5 	.word	0x080088c5
 80075b0:	080079bd 	.word	0x080079bd
 80075b4:	080088c5 	.word	0x080088c5
 80075b8:	080088c5 	.word	0x080088c5
 80075bc:	080088c5 	.word	0x080088c5
 80075c0:	080088c5 	.word	0x080088c5
 80075c4:	080088c5 	.word	0x080088c5
 80075c8:	080088c5 	.word	0x080088c5
 80075cc:	080088c5 	.word	0x080088c5
 80075d0:	080088c5 	.word	0x080088c5
 80075d4:	080088c5 	.word	0x080088c5
 80075d8:	080088c5 	.word	0x080088c5
 80075dc:	080088c5 	.word	0x080088c5
 80075e0:	080088c5 	.word	0x080088c5
 80075e4:	080088c5 	.word	0x080088c5
 80075e8:	080088c5 	.word	0x080088c5
 80075ec:	080088c5 	.word	0x080088c5
 80075f0:	08007a93 	.word	0x08007a93
 80075f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075fc:	430b      	orrs	r3, r1
 80075fe:	f000 82b3 	beq.w	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8007602:	f001 b95f 	b.w	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007606:	4b43      	ldr	r3, [pc, #268]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007618:	f107 0320 	add.w	r3, r7, #32
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff f9cf 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007626:	f001 b950 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d108      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fb2f 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800763e:	f001 b944 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007646:	f001 b940 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800764a:	4b32      	ldr	r3, [pc, #200]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800764c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800765c:	f7fd ffc4 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 8007660:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007662:	f001 b932 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007666:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800766e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007672:	d10a      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	2b01      	cmp	r3, #1
 8007678:	d107      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800767a:	f107 0314 	add.w	r3, r7, #20
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff fb0a 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
 8007688:	e05c      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800768a:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007696:	d10a      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	2b02      	cmp	r3, #2
 800769c:	d107      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fc64 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ac:	e04a      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80076ae:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d10c      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d109      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076c0:	4b14      	ldr	r3, [pc, #80]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	08db      	lsrs	r3, r3, #3
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	4a13      	ldr	r2, [pc, #76]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80076cc:	fa22 f303 	lsr.w	r3, r2, r3
 80076d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d2:	e037      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80076d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076e0:	d11e      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d11b      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80076e8:	4b0c      	ldr	r3, [pc, #48]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80076ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ec:	e02a      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80076ee:	bf00      	nop
 80076f0:	40000001 	.word	0x40000001
 80076f4:	20000001 	.word	0x20000001
 80076f8:	10000001 	.word	0x10000001
 80076fc:	08000001 	.word	0x08000001
 8007700:	04000001 	.word	0x04000001
 8007704:	00400001 	.word	0x00400001
 8007708:	00200001 	.word	0x00200001
 800770c:	00040001 	.word	0x00040001
 8007710:	00020001 	.word	0x00020001
 8007714:	44020c00 	.word	0x44020c00
 8007718:	03d09000 	.word	0x03d09000
 800771c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007720:	4ba3      	ldr	r3, [pc, #652]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d106      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	2b05      	cmp	r3, #5
 8007732:	d103      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8007734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
 800773a:	e003      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007740:	f001 b8c3 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007744:	f001 b8c1 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007748:	4b99      	ldr	r3, [pc, #612]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800774a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800774e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007752:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800775a:	f7fd ff2f 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 800775e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007760:	f001 b8b3 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007764:	4b92      	ldr	r3, [pc, #584]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800776c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007770:	d10a      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	2b08      	cmp	r3, #8
 8007776:	d107      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fa8b 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
 8007786:	e03d      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	2b10      	cmp	r3, #16
 800778c:	d108      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fbec 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800779c:	f001 b895 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80077a0:	4b83      	ldr	r3, [pc, #524]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d10c      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	2b18      	cmp	r3, #24
 80077b0:	d109      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077b2:	4b7f      	ldr	r3, [pc, #508]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	4a7d      	ldr	r2, [pc, #500]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	e01e      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80077c6:	4b7a      	ldr	r3, [pc, #488]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d2:	d105      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d102      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80077da:	4b77      	ldr	r3, [pc, #476]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077de:	e011      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80077e0:	4b73      	ldr	r3, [pc, #460]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80077e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d106      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2b28      	cmp	r3, #40	@ 0x28
 80077f2:	d103      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80077f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	e003      	b.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007800:	f001 b863 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007804:	f001 b861 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007808:	4b69      	ldr	r3, [pc, #420]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800780a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800780e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007812:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800781a:	f7fd fecf 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 800781e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007820:	f001 b853 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007824:	4b62      	ldr	r3, [pc, #392]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007830:	d10a      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b40      	cmp	r3, #64	@ 0x40
 8007836:	d107      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fa2b 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	e045      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007848:	4b59      	ldr	r3, [pc, #356]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007854:	d10a      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b80      	cmp	r3, #128	@ 0x80
 800785a:	d107      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fb85 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
 800786a:	e033      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800786c:	4b50      	ldr	r3, [pc, #320]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d10c      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	2bc0      	cmp	r3, #192	@ 0xc0
 800787c:	d109      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800787e:	4b4c      	ldr	r3, [pc, #304]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a4a      	ldr	r2, [pc, #296]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007890:	e020      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007892:	4b47      	ldr	r3, [pc, #284]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800789a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800789e:	d106      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a6:	d102      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80078a8:	4b43      	ldr	r3, [pc, #268]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ac:	e012      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80078ae:	4b40      	ldr	r3, [pc, #256]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d107      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80078c2:	d103      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80078c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078d0:	f000 bffb 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80078d4:	f000 bff9 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80078d8:	4b35      	ldr	r3, [pc, #212]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80078de:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80078e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078ea:	f7fd fe67 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 80078ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80078f0:	f000 bfeb 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80078f4:	4b2e      	ldr	r3, [pc, #184]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007900:	d10b      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007908:	d107      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff f9c2 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	e047      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800791a:	4b25      	ldr	r3, [pc, #148]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007926:	d10b      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800792e:	d107      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fb1b 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	e034      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007940:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b02      	cmp	r3, #2
 800794a:	d10d      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007954:	4b16      	ldr	r3, [pc, #88]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	08db      	lsrs	r3, r3, #3
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	4a15      	ldr	r2, [pc, #84]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
 8007966:	e020      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007974:	d106      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800797c:	d102      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800797e:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
 8007982:	e012      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007984:	4b0a      	ldr	r3, [pc, #40]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8007986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007998:	d103      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800799a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a0:	e003      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079a6:	f000 bf90 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80079aa:	f000 bf8e 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80079ae:	bf00      	nop
 80079b0:	44020c00 	.word	0x44020c00
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80079bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80079be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80079c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80079ce:	f7fd fdf5 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 80079d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80079d4:	f000 bf79 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80079d8:	4b9e      	ldr	r3, [pc, #632]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e4:	d10b      	bne.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ec:	d107      	bne.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ee:	f107 0314 	add.w	r3, r7, #20
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff f950 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fc:	e047      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80079fe:	4b95      	ldr	r3, [pc, #596]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0a:	d10b      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a12:	d107      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff faa9 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a22:	e034      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007a24:	4b8b      	ldr	r3, [pc, #556]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d10d      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a36:	d109      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a38:	4b86      	ldr	r3, [pc, #536]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	4a85      	ldr	r2, [pc, #532]	@ (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4a:	e020      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007a4c:	4b81      	ldr	r3, [pc, #516]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a58:	d106      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a60:	d102      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8007a62:	4b7e      	ldr	r3, [pc, #504]	@ (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	e012      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a68:	4b7a      	ldr	r3, [pc, #488]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d107      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a7c:	d103      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8007a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a84:	e003      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8a:	f000 bf1e 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007a8e:	f000 bf1c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007a92:	4b70      	ldr	r3, [pc, #448]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a98:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007a9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007aa4:	f7fd fd8a 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007aa8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007aaa:	f000 bf0e 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007aae:	4b69      	ldr	r3, [pc, #420]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aba:	d10b      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac2:	d107      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f8e5 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad2:	e047      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae0:	d10b      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae8:	d107      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fa3e 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af8:	e034      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007afa:	4b56      	ldr	r3, [pc, #344]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d10d      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007b0c:	d109      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b0e:	4b51      	ldr	r3, [pc, #324]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	08db      	lsrs	r3, r3, #3
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	4a4f      	ldr	r2, [pc, #316]	@ (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b20:	e020      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007b22:	4b4c      	ldr	r3, [pc, #304]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b36:	d102      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8007b38:	4b48      	ldr	r3, [pc, #288]	@ (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3c:	e012      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007b3e:	4b45      	ldr	r3, [pc, #276]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d107      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007b52:	d103      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5a:	e003      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b60:	f000 beb3 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007b64:	f000 beb1 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007b68:	4b3a      	ldr	r3, [pc, #232]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b6e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007b72:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007b7a:	f7fd fd4b 	bl	8005614 <HAL_RCC_GetPCLK3Freq>
 8007b7e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b80:	f000 bea3 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b8a:	d108      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f881 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b9a:	f000 be96 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ba4:	d108      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff f9e0 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb4:	f000 be89 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007bb8:	4b26      	ldr	r3, [pc, #152]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d10d      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bca:	d109      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bcc:	4b21      	ldr	r3, [pc, #132]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	08db      	lsrs	r3, r3, #3
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	4a20      	ldr	r2, [pc, #128]	@ (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	e020      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007be0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bec:	d106      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bf4:	d102      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8007bf6:	4b19      	ldr	r3, [pc, #100]	@ (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfa:	e012      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007bfc:	4b15      	ldr	r3, [pc, #84]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d107      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007c10:	d103      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8007c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c18:	e003      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c1e:	f000 be54 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007c22:	f000 be52 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007c26:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8007c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007c38:	f7fd fca4 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8007c3c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007c3e:	f000 be44 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d10b      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c48:	f7fd fb70 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8007c4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c4e:	f000 be3c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007c52:	bf00      	nop
 8007c54:	44020c00 	.word	0x44020c00
 8007c58:	03d09000 	.word	0x03d09000
 8007c5c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d108      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c66:	f107 0314 	add.w	r3, r7, #20
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff f814 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c74:	f000 be29 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007c78:	4b9f      	ldr	r3, [pc, #636]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c84:	d105      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d102      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8007c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c90:	e023      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007c92:	4b99      	ldr	r3, [pc, #612]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d10c      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d109      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ca4:	4b94      	ldr	r3, [pc, #592]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	08db      	lsrs	r3, r3, #3
 8007caa:	f003 0303 	and.w	r3, r3, #3
 8007cae:	4a94      	ldr	r2, [pc, #592]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb6:	e010      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc4:	d105      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	2b05      	cmp	r3, #5
 8007cca:	d102      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8007ccc:	4b8d      	ldr	r3, [pc, #564]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd0:	e003      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd6:	f000 bdf8 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007cda:	f000 bdf6 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007cde:	4b86      	ldr	r3, [pc, #536]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007cea:	4b83      	ldr	r3, [pc, #524]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d103      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d04:	e012      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007d06:	4b7c      	ldr	r3, [pc, #496]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d14:	d106      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d103      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8007d1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007d28:	f000 bdcf 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007d2c:	f000 bdcd 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d30:	4b71      	ldr	r3, [pc, #452]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7fd fc3b 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007d46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d48:	f000 bdbf 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d52:	d108      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff f909 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d62:	f000 bdb2 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007d66:	4b64      	ldr	r3, [pc, #400]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d10d      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d78:	d109      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	4a5e      	ldr	r2, [pc, #376]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	e011      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007da2:	d102      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8007da4:	4b57      	ldr	r3, [pc, #348]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dae:	f000 bd8c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007db2:	f000 bd8a 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007db6:	4b50      	ldr	r3, [pc, #320]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dbc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007dc0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dc8:	f7fd fbf8 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007dcc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dce:	f000 bd7c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dd8:	d108      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f8c6 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007de8:	f000 bd6f 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007dec:	4b42      	ldr	r3, [pc, #264]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d10d      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dfe:	d109      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e00:	4b3d      	ldr	r3, [pc, #244]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	08db      	lsrs	r3, r3, #3
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e12:	e011      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007e14:	4b38      	ldr	r3, [pc, #224]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e20:	d106      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007e28:	d102      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8007e2a:	4b36      	ldr	r3, [pc, #216]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e34:	f000 bd49 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007e38:	f000 bd47 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007e46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007e4e:	f7fd fbe1 	bl	8005614 <HAL_RCC_GetPCLK3Freq>
 8007e52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e54:	f000 bd39 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e5e:	d108      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff f883 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e6e:	f000 bd2c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007e72:	4b21      	ldr	r3, [pc, #132]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d10d      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e84:	d109      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e86:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a1b      	ldr	r2, [pc, #108]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e98:	e011      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007e9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea6:	d106      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eae:	d102      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8007eb0:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8007eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eba:	f000 bd06 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ebe:	f000 bd04 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8007ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ec8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ed4:	f7fd fb72 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8007ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007eda:	f000 bcf6 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ee4:	d110      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff f840 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ef4:	f000 bce9 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007ef8:	44020c00 	.word	0x44020c00
 8007efc:	007a1200 	.word	0x007a1200
 8007f00:	03d09000 	.word	0x03d09000
 8007f04:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007f08:	4ba4      	ldr	r3, [pc, #656]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d10e      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f1a:	d10a      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f1c:	4b9f      	ldr	r3, [pc, #636]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	08db      	lsrs	r3, r3, #3
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	4a9e      	ldr	r2, [pc, #632]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f2e:	f000 bccc 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f36:	f000 bcc8 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007f3a:	4b98      	ldr	r3, [pc, #608]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007f44:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007f4c:	f7fd fb62 	bl	8005614 <HAL_RCC_GetPCLK3Freq>
 8007f50:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f52:	f000 bcba 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f5c:	d108      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff f804 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f6c:	f000 bcad 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8007f70:	4b8a      	ldr	r3, [pc, #552]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d10e      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f82:	d10a      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f84:	4b85      	ldr	r3, [pc, #532]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	4a84      	ldr	r2, [pc, #528]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f96:	f000 bc98 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f9e:	f000 bc94 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007fa2:	4b7e      	ldr	r3, [pc, #504]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8007fa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007fb4:	d056      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007fbc:	f200 808b 	bhi.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc6:	d03e      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fce:	f200 8082 	bhi.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fd8:	d027      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fe0:	d879      	bhi.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe8:	d017      	beq.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff0:	d871      	bhi.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ffe:	d004      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8008000:	e069      	b.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008002:	f7fd fb07 	bl	8005614 <HAL_RCC_GetPCLK3Freq>
 8008006:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008008:	e068      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fe42 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008018:	e060      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe ffa6 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008028:	e058      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800802a:	4b5c      	ldr	r3, [pc, #368]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800802c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b02      	cmp	r3, #2
 8008036:	d103      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8008038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800803c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800803e:	e04d      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008044:	e04a      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008046:	4b55      	ldr	r3, [pc, #340]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800804c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008054:	d103      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8008056:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800805c:	e03e      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008062:	e03b      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008064:	4b4d      	ldr	r3, [pc, #308]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800806a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800806e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008070:	4b4a      	ldr	r3, [pc, #296]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b02      	cmp	r3, #2
 800807a:	d10c      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008082:	4b46      	ldr	r3, [pc, #280]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a44      	ldr	r2, [pc, #272]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
 8008094:	e01e      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008096:	4b41      	ldr	r3, [pc, #260]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a2:	d106      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80080a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080aa:	d102      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080ac:	4b3d      	ldr	r3, [pc, #244]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b0:	e010      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080b2:	4b3a      	ldr	r3, [pc, #232]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080be:	d106      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080c6:	d102      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80080c8:	4b37      	ldr	r3, [pc, #220]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80080cc:	e002      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80080ce:	2300      	movs	r3, #0
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080da:	bf00      	nop
          }
        }
        break;
 80080dc:	e3f5      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080de:	4b2f      	ldr	r3, [pc, #188]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80080e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80080e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080f0:	d05f      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080f8:	f200 8094 	bhi.w	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008102:	d03f      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800810a:	f200 808b 	bhi.w	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008114:	d028      	beq.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800811c:	f200 8082 	bhi.w	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008126:	d017      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812e:	d879      	bhi.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800813c:	d004      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800813e:	e071      	b.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008140:	f7fd fa3c 	bl	80055bc <HAL_RCC_GetPCLK1Freq>
 8008144:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008146:	e070      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fda3 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008156:	e068      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe ff07 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008166:	e060      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008168:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800816a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d103      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8008176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800817c:	e055      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008182:	e052      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800818a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800818e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008192:	d10b      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008194:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008198:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800819a:	e046      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800819c:	44020c00 	.word	0x44020c00
 80081a0:	03d09000 	.word	0x03d09000
 80081a4:	003d0900 	.word	0x003d0900
 80081a8:	007a1200 	.word	0x007a1200
              frequency = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081b0:	e03b      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081b2:	4bae      	ldr	r3, [pc, #696]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80081bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081be:	4bab      	ldr	r3, [pc, #684]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d10c      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80081ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081d0:	4ba6      	ldr	r3, [pc, #664]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	08db      	lsrs	r3, r3, #3
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	4aa5      	ldr	r2, [pc, #660]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e2:	e01e      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081e4:	4ba1      	ldr	r3, [pc, #644]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f0:	d106      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f8:	d102      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80081fa:	4b9e      	ldr	r3, [pc, #632]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	e010      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008200:	4b9a      	ldr	r3, [pc, #616]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800820c:	d106      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008214:	d102      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008216:	4b98      	ldr	r3, [pc, #608]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
 800821a:	e002      	b.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008220:	e003      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008222:	e002      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008228:	bf00      	nop
          }
        }
        break;
 800822a:	e34e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800822c:	4b8f      	ldr	r3, [pc, #572]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800822e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008236:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008238:	4b8c      	ldr	r3, [pc, #560]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008244:	d105      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800824c:	4b8a      	ldr	r3, [pc, #552]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800824e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008250:	e33b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d107      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825a:	f107 0320 	add.w	r3, r7, #32
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fbae 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008268:	e32f      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008270:	d107      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008272:	f107 0314 	add.w	r3, r7, #20
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd0e 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008280:	e323      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008286:	e320      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008288:	4b78      	ldr	r3, [pc, #480]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800828a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	633b      	str	r3, [r7, #48]	@ 0x30
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	2b04      	cmp	r3, #4
 8008298:	d860      	bhi.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082c5 	.word	0x080082c5
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082eb 	.word	0x080082eb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082b4:	f107 0320 	add.w	r3, r7, #32
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fb81 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082c2:	e04e      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fce5 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082d2:	e046      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d4:	f107 0308 	add.w	r3, r7, #8
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe fe49 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082e2:	e03e      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80082e4:	4b65      	ldr	r3, [pc, #404]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082e8:	e03b      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082ea:	4b60      	ldr	r3, [pc, #384]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80082f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082f6:	4b5d      	ldr	r3, [pc, #372]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d10c      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d109      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008308:	4b58      	ldr	r3, [pc, #352]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a57      	ldr	r2, [pc, #348]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e01e      	b.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800831c:	4b53      	ldr	r3, [pc, #332]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008328:	d106      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800832a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008330:	d102      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008332:	4b50      	ldr	r3, [pc, #320]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008334:	637b      	str	r3, [r7, #52]	@ 0x34
 8008336:	e010      	b.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008338:	4b4c      	ldr	r3, [pc, #304]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008344:	d106      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834c:	d102      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800834e:	4b4a      	ldr	r3, [pc, #296]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
 8008352:	e002      	b.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008358:	e003      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008360:	bf00      	nop
          }
        }
        break;
 8008362:	e2b2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008364:	4b41      	ldr	r3, [pc, #260]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800836a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800836e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008372:	2b20      	cmp	r3, #32
 8008374:	f200 80a4 	bhi.w	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8008378:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008405 	.word	0x08008405
 8008384:	080084c1 	.word	0x080084c1
 8008388:	080084c1 	.word	0x080084c1
 800838c:	080084c1 	.word	0x080084c1
 8008390:	080084c1 	.word	0x080084c1
 8008394:	080084c1 	.word	0x080084c1
 8008398:	080084c1 	.word	0x080084c1
 800839c:	080084c1 	.word	0x080084c1
 80083a0:	08008415 	.word	0x08008415
 80083a4:	080084c1 	.word	0x080084c1
 80083a8:	080084c1 	.word	0x080084c1
 80083ac:	080084c1 	.word	0x080084c1
 80083b0:	080084c1 	.word	0x080084c1
 80083b4:	080084c1 	.word	0x080084c1
 80083b8:	080084c1 	.word	0x080084c1
 80083bc:	080084c1 	.word	0x080084c1
 80083c0:	08008425 	.word	0x08008425
 80083c4:	080084c1 	.word	0x080084c1
 80083c8:	080084c1 	.word	0x080084c1
 80083cc:	080084c1 	.word	0x080084c1
 80083d0:	080084c1 	.word	0x080084c1
 80083d4:	080084c1 	.word	0x080084c1
 80083d8:	080084c1 	.word	0x080084c1
 80083dc:	080084c1 	.word	0x080084c1
 80083e0:	08008435 	.word	0x08008435
 80083e4:	080084c1 	.word	0x080084c1
 80083e8:	080084c1 	.word	0x080084c1
 80083ec:	080084c1 	.word	0x080084c1
 80083f0:	080084c1 	.word	0x080084c1
 80083f4:	080084c1 	.word	0x080084c1
 80083f8:	080084c1 	.word	0x080084c1
 80083fc:	080084c1 	.word	0x080084c1
 8008400:	0800843b 	.word	0x0800843b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008404:	f107 0320 	add.w	r3, r7, #32
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fad9 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008412:	e058      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008414:	f107 0314 	add.w	r3, r7, #20
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fc3d 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008422:	e050      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fda1 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008432:	e048      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008436:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008438:	e045      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800843a:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800843c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008440:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008446:	4b09      	ldr	r3, [pc, #36]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b02      	cmp	r3, #2
 8008450:	d116      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8008452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008458:	4b04      	ldr	r3, [pc, #16]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	4a03      	ldr	r2, [pc, #12]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008464:	fa22 f303 	lsr.w	r3, r2, r3
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	e028      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800846c:	44020c00 	.word	0x44020c00
 8008470:	03d09000 	.word	0x03d09000
 8008474:	003d0900 	.word	0x003d0900
 8008478:	007a1200 	.word	0x007a1200
 800847c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008480:	4b95      	ldr	r3, [pc, #596]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800848c:	d106      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008494:	d102      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008496:	4b91      	ldr	r3, [pc, #580]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
 800849a:	e010      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800849c:	4b8e      	ldr	r3, [pc, #568]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a8:	d106      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80084aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084b0:	d102      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084b2:	4b8b      	ldr	r3, [pc, #556]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80084b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b6:	e002      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80084be:	e002      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084c4:	bf00      	nop
          }
        }
        break;
 80084c6:	e200      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80084c8:	4b83      	ldr	r3, [pc, #524]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80084ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80084d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084da:	d031      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e2:	d866      	bhi.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80084e8:	d027      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80084ee:	d860      	bhi.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	2b80      	cmp	r3, #128	@ 0x80
 80084f4:	d019      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d85a      	bhi.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d008      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8008508:	e053      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850a:	f107 0320 	add.w	r3, r7, #32
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fa56 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008518:	e04e      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851a:	f107 0314 	add.w	r3, r7, #20
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fbba 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008528:	e046      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fd1e 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008538:	e03e      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800853a:	4b6a      	ldr	r3, [pc, #424]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800853e:	e03b      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008540:	4b65      	ldr	r3, [pc, #404]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008546:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800854a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800854c:	4b62      	ldr	r3, [pc, #392]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b02      	cmp	r3, #2
 8008556:	d10c      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800855e:	4b5e      	ldr	r3, [pc, #376]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	08db      	lsrs	r3, r3, #3
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	4a5f      	ldr	r2, [pc, #380]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800856a:	fa22 f303 	lsr.w	r3, r2, r3
 800856e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008570:	e01e      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008572:	4b59      	ldr	r3, [pc, #356]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800857a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800857e:	d106      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008586:	d102      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008588:	4b54      	ldr	r3, [pc, #336]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
 800858c:	e010      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800858e:	4b52      	ldr	r3, [pc, #328]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800859a:	d106      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80085a4:	4b4e      	ldr	r3, [pc, #312]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a8:	e002      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80085ae:	e003      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085b6:	bf00      	nop
          }
        }
        break;
 80085b8:	e187      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80085ba:	4b47      	ldr	r3, [pc, #284]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085c0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80085c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80085cc:	f7fd f80c 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 80085d0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80085d2:	e17a      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80085d4:	4b40      	ldr	r3, [pc, #256]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e0:	d10b      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ea:	f107 0314 	add.w	r3, r7, #20
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fb52 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f8:	e045      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80085fa:	4b37      	ldr	r3, [pc, #220]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008606:	d10b      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860e:	d107      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fcab 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	e032      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008620:	4b2d      	ldr	r3, [pc, #180]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b02      	cmp	r3, #2
 800862a:	d10d      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008632:	d109      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008634:	4b28      	ldr	r3, [pc, #160]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	08db      	lsrs	r3, r3, #3
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	4a2a      	ldr	r2, [pc, #168]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8008640:	fa22 f303 	lsr.w	r3, r2, r3
 8008644:	637b      	str	r3, [r7, #52]	@ 0x34
 8008646:	e01e      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008648:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008654:	d106      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800865c:	d102      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800865e:	4b1f      	ldr	r3, [pc, #124]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
 8008662:	e010      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008664:	4b1c      	ldr	r3, [pc, #112]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008670:	d106      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008678:	d102      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800867a:	4b19      	ldr	r3, [pc, #100]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
 800867e:	e002      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008684:	e121      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008686:	e120      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008688:	4b13      	ldr	r3, [pc, #76]	@ (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800868a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	2b03      	cmp	r3, #3
 8008698:	d861      	bhi.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800869a:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b9 	.word	0x080086b9
 80086a8:	080086c9 	.word	0x080086c9
 80086ac:	080086ed 	.word	0x080086ed

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80086b0:	f7fc ff68 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80086b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80086b6:	e055      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b8:	f107 0320 	add.w	r3, r7, #32
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe f97f 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086c6:	e04d      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fae3 	bl	8006c98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086d6:	e045      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80086d8:	44020c00 	.word	0x44020c00
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	007a1200 	.word	0x007a1200
 80086e4:	00bb8000 	.word	0x00bb8000
 80086e8:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086ec:	4b79      	ldr	r3, [pc, #484]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086f8:	4b76      	ldr	r3, [pc, #472]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b02      	cmp	r3, #2
 8008702:	d10c      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800870a:	4b72      	ldr	r3, [pc, #456]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	08db      	lsrs	r3, r3, #3
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	4a70      	ldr	r2, [pc, #448]	@ (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8008716:	fa22 f303 	lsr.w	r3, r2, r3
 800871a:	637b      	str	r3, [r7, #52]	@ 0x34
 800871c:	e01e      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800871e:	4b6d      	ldr	r3, [pc, #436]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800872a:	d106      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800872c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008732:	d102      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008734:	4b69      	ldr	r3, [pc, #420]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8008736:	637b      	str	r3, [r7, #52]	@ 0x34
 8008738:	e010      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800873a:	4b66      	ldr	r3, [pc, #408]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008746:	d106      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800874e:	d102      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008750:	4b63      	ldr	r3, [pc, #396]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
 8008754:	e002      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800875a:	e003      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800875c:	e002      	b.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008762:	bf00      	nop
          }
        }
        break;
 8008764:	e0b1      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008766:	4b5b      	ldr	r3, [pc, #364]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800876c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008770:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008772:	4b58      	ldr	r3, [pc, #352]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b02      	cmp	r3, #2
 800877e:	d106      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b00      	cmp	r3, #0
 8008784:	d103      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8008786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800878a:	637b      	str	r3, [r7, #52]	@ 0x34
 800878c:	e01f      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800878e:	4b51      	ldr	r3, [pc, #324]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800879c:	d106      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	2b40      	cmp	r3, #64	@ 0x40
 80087a2:	d103      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80087a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087aa:	e010      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80087ac:	4b49      	ldr	r3, [pc, #292]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b8:	d106      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	2b80      	cmp	r3, #128	@ 0x80
 80087be:	d103      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80087c0:	f248 0312 	movw	r3, #32786	@ 0x8012
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c6:	e002      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80087cc:	e07d      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80087ce:	e07c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80087d0:	4b40      	ldr	r3, [pc, #256]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087da:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80087dc:	4b3d      	ldr	r3, [pc, #244]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e8:	d105      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80087f0:	4b3c      	ldr	r3, [pc, #240]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f4:	e031      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80087f6:	4b37      	ldr	r3, [pc, #220]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008802:	d10a      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	2b10      	cmp	r3, #16
 8008808:	d107      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880a:	f107 0320 	add.w	r3, r7, #32
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe f8d6 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	637b      	str	r3, [r7, #52]	@ 0x34
 8008818:	e01f      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800881a:	4b2e      	ldr	r3, [pc, #184]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800881c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b02      	cmp	r3, #2
 8008826:	d106      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	2b20      	cmp	r3, #32
 800882c:	d103      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800882e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
 8008834:	e011      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008836:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800883c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	2b30      	cmp	r3, #48	@ 0x30
 800884a:	d103      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800884c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
 8008852:	e002      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008858:	e037      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800885a:	e036      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800885c:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800885e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008862:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008866:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	2b10      	cmp	r3, #16
 800886c:	d107      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800886e:	f107 0320 	add.w	r3, r7, #32
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe f8a4 	bl	80069c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800887c:	e025      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888a:	d10a      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	2b20      	cmp	r3, #32
 8008890:	d107      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008892:	f107 0308 	add.w	r3, r7, #8
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fb6a 	bl	8006f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a0:	e00f      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80088a2:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ae:	d105      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	2b30      	cmp	r3, #48	@ 0x30
 80088b4:	d102      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80088b6:	4b0b      	ldr	r3, [pc, #44]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80088c0:	e003      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80088c2:	e002      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80088ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	373c      	adds	r7, #60	@ 0x3c
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd90      	pop	{r4, r7, pc}
 80088d4:	44020c00 	.word	0x44020c00
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	003d0900 	.word	0x003d0900
 80088e0:	007a1200 	.word	0x007a1200
 80088e4:	02dc6c00 	.word	0x02dc6c00

080088e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80088f0:	4b48      	ldr	r3, [pc, #288]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a47      	ldr	r2, [pc, #284]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80088f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088fc:	f7f9 ffde 	bl	80028bc <HAL_GetTick>
 8008900:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008902:	e008      	b.n	8008916 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008904:	f7f9 ffda 	bl	80028bc <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e07a      	b.n	8008a0c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008916:	4b3f      	ldr	r3, [pc, #252]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008922:	4b3c      	ldr	r3, [pc, #240]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6811      	ldr	r1, [r2, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6852      	ldr	r2, [r2, #4]
 8008936:	0212      	lsls	r2, r2, #8
 8008938:	430a      	orrs	r2, r1
 800893a:	4936      	ldr	r1, [pc, #216]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 800893c:	4313      	orrs	r3, r2
 800893e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	3b01      	subs	r3, #1
 8008946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	3b01      	subs	r3, #1
 8008950:	025b      	lsls	r3, r3, #9
 8008952:	b29b      	uxth	r3, r3
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	3b01      	subs	r3, #1
 800895c:	041b      	lsls	r3, r3, #16
 800895e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	3b01      	subs	r3, #1
 800896a:	061b      	lsls	r3, r3, #24
 800896c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008970:	4928      	ldr	r1, [pc, #160]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008972:	4313      	orrs	r3, r2
 8008974:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008976:	4b27      	ldr	r3, [pc, #156]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	f023 020c 	bic.w	r2, r3, #12
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	4924      	ldr	r1, [pc, #144]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008984:	4313      	orrs	r3, r2
 8008986:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008988:	4b22      	ldr	r3, [pc, #136]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	f023 0220 	bic.w	r2, r3, #32
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	491f      	ldr	r1, [pc, #124]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800899a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	491c      	ldr	r1, [pc, #112]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80089a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	4a19      	ldr	r2, [pc, #100]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80089b4:	4b17      	ldr	r3, [pc, #92]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6a12      	ldr	r2, [r2, #32]
 80089c4:	00d2      	lsls	r2, r2, #3
 80089c6:	4913      	ldr	r1, [pc, #76]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80089cc:	4b11      	ldr	r3, [pc, #68]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d0:	4a10      	ldr	r2, [pc, #64]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089d2:	f043 0310 	orr.w	r3, r3, #16
 80089d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 80089de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089e4:	f7f9 ff6a 	bl	80028bc <HAL_GetTick>
 80089e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089ea:	e008      	b.n	80089fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089ec:	f7f9 ff66 	bl	80028bc <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d901      	bls.n	80089fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e006      	b.n	8008a0c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089fe:	4b05      	ldr	r3, [pc, #20]	@ (8008a14 <RCCEx_PLL2_Config+0x12c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0

}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	44020c00 	.word	0x44020c00

08008a18 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008a20:	4b48      	ldr	r3, [pc, #288]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a47      	ldr	r2, [pc, #284]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a2c:	f7f9 ff46 	bl	80028bc <HAL_GetTick>
 8008a30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a32:	e008      	b.n	8008a46 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a34:	f7f9 ff42 	bl	80028bc <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e07a      	b.n	8008b3c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a46:	4b3f      	ldr	r3, [pc, #252]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a52:	4b3c      	ldr	r3, [pc, #240]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6811      	ldr	r1, [r2, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6852      	ldr	r2, [r2, #4]
 8008a66:	0212      	lsls	r2, r2, #8
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	4936      	ldr	r1, [pc, #216]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	630b      	str	r3, [r1, #48]	@ 0x30
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	025b      	lsls	r3, r3, #9
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	041b      	lsls	r3, r3, #16
 8008a8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	061b      	lsls	r3, r3, #24
 8008a9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008aa0:	4928      	ldr	r1, [pc, #160]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aa6:	4b27      	ldr	r3, [pc, #156]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	f023 020c 	bic.w	r2, r3, #12
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	4924      	ldr	r1, [pc, #144]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008ab8:	4b22      	ldr	r3, [pc, #136]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abc:	f023 0220 	bic.w	r2, r3, #32
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	491f      	ldr	r1, [pc, #124]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008aca:	4b1e      	ldr	r3, [pc, #120]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad2:	491c      	ldr	r1, [pc, #112]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008adc:	4a19      	ldr	r2, [pc, #100]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008ae4:	4b17      	ldr	r3, [pc, #92]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6a12      	ldr	r2, [r2, #32]
 8008af4:	00d2      	lsls	r2, r2, #3
 8008af6:	4913      	ldr	r1, [pc, #76]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008afc:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b00:	4a10      	ldr	r2, [pc, #64]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008b02:	f043 0310 	orr.w	r3, r3, #16
 8008b06:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008b08:	4b0e      	ldr	r3, [pc, #56]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b14:	f7f9 fed2 	bl	80028bc <HAL_GetTick>
 8008b18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b1a:	e008      	b.n	8008b2e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b1c:	f7f9 fece 	bl	80028bc <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e006      	b.n	8008b3c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b2e:	4b05      	ldr	r3, [pc, #20]	@ (8008b44 <RCCEx_PLL3_Config+0x12c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	44020c00 	.word	0x44020c00

08008b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e049      	b.n	8008bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7f9 fb6e 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f000 ff0e 	bl	80099a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d001      	beq.n	8008c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e07c      	b.n	8008d0a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8008d18 <HAL_TIM_Base_Start_IT+0x120>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d04a      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a39      	ldr	r2, [pc, #228]	@ (8008d1c <HAL_TIM_Base_Start_IT+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d045      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c44:	d040      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c4e:	d03b      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a32      	ldr	r2, [pc, #200]	@ (8008d20 <HAL_TIM_Base_Start_IT+0x128>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d036      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a31      	ldr	r2, [pc, #196]	@ (8008d24 <HAL_TIM_Base_Start_IT+0x12c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d031      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a2f      	ldr	r2, [pc, #188]	@ (8008d28 <HAL_TIM_Base_Start_IT+0x130>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d02c      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a2e      	ldr	r2, [pc, #184]	@ (8008d2c <HAL_TIM_Base_Start_IT+0x134>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d027      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8008d30 <HAL_TIM_Base_Start_IT+0x138>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d022      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a2b      	ldr	r2, [pc, #172]	@ (8008d34 <HAL_TIM_Base_Start_IT+0x13c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d01d      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a29      	ldr	r2, [pc, #164]	@ (8008d38 <HAL_TIM_Base_Start_IT+0x140>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d018      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a28      	ldr	r2, [pc, #160]	@ (8008d3c <HAL_TIM_Base_Start_IT+0x144>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a26      	ldr	r2, [pc, #152]	@ (8008d40 <HAL_TIM_Base_Start_IT+0x148>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a25      	ldr	r2, [pc, #148]	@ (8008d44 <HAL_TIM_Base_Start_IT+0x14c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a23      	ldr	r2, [pc, #140]	@ (8008d48 <HAL_TIM_Base_Start_IT+0x150>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d004      	beq.n	8008cc8 <HAL_TIM_Base_Start_IT+0xd0>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a22      	ldr	r2, [pc, #136]	@ (8008d4c <HAL_TIM_Base_Start_IT+0x154>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d115      	bne.n	8008cf4 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	4b20      	ldr	r3, [pc, #128]	@ (8008d50 <HAL_TIM_Base_Start_IT+0x158>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b06      	cmp	r3, #6
 8008cd8:	d015      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x10e>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce0:	d011      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	e008      	b.n	8008d06 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	50012c00 	.word	0x50012c00
 8008d20:	40000400 	.word	0x40000400
 8008d24:	50000400 	.word	0x50000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	50000800 	.word	0x50000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	50000c00 	.word	0x50000c00
 8008d38:	40013400 	.word	0x40013400
 8008d3c:	50013400 	.word	0x50013400
 8008d40:	40001800 	.word	0x40001800
 8008d44:	50001800 	.word	0x50001800
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	50014000 	.word	0x50014000
 8008d50:	00010007 	.word	0x00010007

08008d54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e049      	b.n	8008dfa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f841 	bl	8008e02 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f000 fe08 	bl	80099a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e049      	b.n	8008ebc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f841 	bl	8008ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f000 fda7 	bl	80099a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <HAL_TIM_PWM_Start+0x24>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bf14      	ite	ne
 8008ef4:	2301      	movne	r3, #1
 8008ef6:	2300      	moveq	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	e03c      	b.n	8008f76 <HAL_TIM_PWM_Start+0x9e>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d109      	bne.n	8008f16 <HAL_TIM_PWM_Start+0x3e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	bf14      	ite	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	2300      	moveq	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	e02f      	b.n	8008f76 <HAL_TIM_PWM_Start+0x9e>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d109      	bne.n	8008f30 <HAL_TIM_PWM_Start+0x58>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	e022      	b.n	8008f76 <HAL_TIM_PWM_Start+0x9e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b0c      	cmp	r3, #12
 8008f34:	d109      	bne.n	8008f4a <HAL_TIM_PWM_Start+0x72>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	bf14      	ite	ne
 8008f42:	2301      	movne	r3, #1
 8008f44:	2300      	moveq	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	e015      	b.n	8008f76 <HAL_TIM_PWM_Start+0x9e>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	d109      	bne.n	8008f64 <HAL_TIM_PWM_Start+0x8c>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	bf14      	ite	ne
 8008f5c:	2301      	movne	r3, #1
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	e008      	b.n	8008f76 <HAL_TIM_PWM_Start+0x9e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	bf14      	ite	ne
 8008f70:	2301      	movne	r3, #1
 8008f72:	2300      	moveq	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0ce      	b.n	800911c <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_PWM_Start+0xb6>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f8c:	e023      	b.n	8008fd6 <HAL_TIM_PWM_Start+0xfe>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d104      	bne.n	8008f9e <HAL_TIM_PWM_Start+0xc6>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f9c:	e01b      	b.n	8008fd6 <HAL_TIM_PWM_Start+0xfe>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d104      	bne.n	8008fae <HAL_TIM_PWM_Start+0xd6>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fac:	e013      	b.n	8008fd6 <HAL_TIM_PWM_Start+0xfe>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b0c      	cmp	r3, #12
 8008fb2:	d104      	bne.n	8008fbe <HAL_TIM_PWM_Start+0xe6>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fbc:	e00b      	b.n	8008fd6 <HAL_TIM_PWM_Start+0xfe>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d104      	bne.n	8008fce <HAL_TIM_PWM_Start+0xf6>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fcc:	e003      	b.n	8008fd6 <HAL_TIM_PWM_Start+0xfe>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 f99e 	bl	800a320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a4e      	ldr	r2, [pc, #312]	@ (8009124 <HAL_TIM_PWM_Start+0x24c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d018      	beq.n	8009020 <HAL_TIM_PWM_Start+0x148>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a4d      	ldr	r2, [pc, #308]	@ (8009128 <HAL_TIM_PWM_Start+0x250>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d013      	beq.n	8009020 <HAL_TIM_PWM_Start+0x148>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800912c <HAL_TIM_PWM_Start+0x254>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00e      	beq.n	8009020 <HAL_TIM_PWM_Start+0x148>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a4a      	ldr	r2, [pc, #296]	@ (8009130 <HAL_TIM_PWM_Start+0x258>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d009      	beq.n	8009020 <HAL_TIM_PWM_Start+0x148>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a48      	ldr	r2, [pc, #288]	@ (8009134 <HAL_TIM_PWM_Start+0x25c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIM_PWM_Start+0x148>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a47      	ldr	r2, [pc, #284]	@ (8009138 <HAL_TIM_PWM_Start+0x260>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d101      	bne.n	8009024 <HAL_TIM_PWM_Start+0x14c>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <HAL_TIM_PWM_Start+0x14e>
 8009024:	2300      	movs	r3, #0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009038:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a39      	ldr	r2, [pc, #228]	@ (8009124 <HAL_TIM_PWM_Start+0x24c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d04a      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a37      	ldr	r2, [pc, #220]	@ (8009128 <HAL_TIM_PWM_Start+0x250>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d045      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009056:	d040      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009060:	d03b      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a35      	ldr	r2, [pc, #212]	@ (800913c <HAL_TIM_PWM_Start+0x264>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d036      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a33      	ldr	r2, [pc, #204]	@ (8009140 <HAL_TIM_PWM_Start+0x268>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d031      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a32      	ldr	r2, [pc, #200]	@ (8009144 <HAL_TIM_PWM_Start+0x26c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d02c      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a30      	ldr	r2, [pc, #192]	@ (8009148 <HAL_TIM_PWM_Start+0x270>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d027      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2f      	ldr	r2, [pc, #188]	@ (800914c <HAL_TIM_PWM_Start+0x274>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d022      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a2d      	ldr	r2, [pc, #180]	@ (8009150 <HAL_TIM_PWM_Start+0x278>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d01d      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a22      	ldr	r2, [pc, #136]	@ (800912c <HAL_TIM_PWM_Start+0x254>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d018      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a20      	ldr	r2, [pc, #128]	@ (8009130 <HAL_TIM_PWM_Start+0x258>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d013      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a27      	ldr	r2, [pc, #156]	@ (8009154 <HAL_TIM_PWM_Start+0x27c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00e      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a25      	ldr	r2, [pc, #148]	@ (8009158 <HAL_TIM_PWM_Start+0x280>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d009      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009134 <HAL_TIM_PWM_Start+0x25c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d004      	beq.n	80090da <HAL_TIM_PWM_Start+0x202>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a18      	ldr	r2, [pc, #96]	@ (8009138 <HAL_TIM_PWM_Start+0x260>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d115      	bne.n	8009106 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	4b1e      	ldr	r3, [pc, #120]	@ (800915c <HAL_TIM_PWM_Start+0x284>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b06      	cmp	r3, #6
 80090ea:	d015      	beq.n	8009118 <HAL_TIM_PWM_Start+0x240>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f2:	d011      	beq.n	8009118 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009104:	e008      	b.n	8009118 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0201 	orr.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	e000      	b.n	800911a <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009118:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40012c00 	.word	0x40012c00
 8009128:	50012c00 	.word	0x50012c00
 800912c:	40013400 	.word	0x40013400
 8009130:	50013400 	.word	0x50013400
 8009134:	40014000 	.word	0x40014000
 8009138:	50014000 	.word	0x50014000
 800913c:	40000400 	.word	0x40000400
 8009140:	50000400 	.word	0x50000400
 8009144:	40000800 	.word	0x40000800
 8009148:	50000800 	.word	0x50000800
 800914c:	40000c00 	.word	0x40000c00
 8009150:	50000c00 	.word	0x50000c00
 8009154:	40001800 	.word	0x40001800
 8009158:	50001800 	.word	0x50001800
 800915c:	00010007 	.word	0x00010007

08009160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d020      	beq.n	80091c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01b      	beq.n	80091c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0202 	mvn.w	r2, #2
 8009194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbde 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 80091b0:	e005      	b.n	80091be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fbd0 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbe1 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d020      	beq.n	8009210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0204 	mvn.w	r2, #4
 80091e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fbb8 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fbaa 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fbbb 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d020      	beq.n	800925c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01b      	beq.n	800925c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0208 	mvn.w	r2, #8
 800922c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2204      	movs	r2, #4
 8009232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fb92 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 8009248:	e005      	b.n	8009256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fb84 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fb95 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 0310 	and.w	r3, r3, #16
 8009262:	2b00      	cmp	r3, #0
 8009264:	d020      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01b      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0210 	mvn.w	r2, #16
 8009278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2208      	movs	r2, #8
 800927e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fb6c 	bl	800996c <HAL_TIM_IC_CaptureCallback>
 8009294:	e005      	b.n	80092a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fb5e 	bl	8009958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fb6f 	bl	8009980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00c      	beq.n	80092cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f06f 0201 	mvn.w	r2, #1
 80092c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7f8 fc2a 	bl	8001b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 f9ad 	bl	800a654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f9a5 	bl	800a668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00c      	beq.n	8009342 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800933a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fb29 	bl	8009994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00c      	beq.n	8009366 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f06f 0220 	mvn.w	r2, #32
 800935e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 f96d 	bl	800a640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f979 	bl	800a67c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f971 	bl	800a690 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00c      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d007      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80093ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 f969 	bl	800a6a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00c      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80093ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f961 	bl	800a6b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_TIM_OC_ConfigChannel+0x1e>
 800941a:	2302      	movs	r3, #2
 800941c:	e066      	b.n	80094ec <HAL_TIM_OC_ConfigChannel+0xec>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b14      	cmp	r3, #20
 800942a:	d857      	bhi.n	80094dc <HAL_TIM_OC_ConfigChannel+0xdc>
 800942c:	a201      	add	r2, pc, #4	@ (adr r2, 8009434 <HAL_TIM_OC_ConfigChannel+0x34>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	08009489 	.word	0x08009489
 8009438:	080094dd 	.word	0x080094dd
 800943c:	080094dd 	.word	0x080094dd
 8009440:	080094dd 	.word	0x080094dd
 8009444:	08009497 	.word	0x08009497
 8009448:	080094dd 	.word	0x080094dd
 800944c:	080094dd 	.word	0x080094dd
 8009450:	080094dd 	.word	0x080094dd
 8009454:	080094a5 	.word	0x080094a5
 8009458:	080094dd 	.word	0x080094dd
 800945c:	080094dd 	.word	0x080094dd
 8009460:	080094dd 	.word	0x080094dd
 8009464:	080094b3 	.word	0x080094b3
 8009468:	080094dd 	.word	0x080094dd
 800946c:	080094dd 	.word	0x080094dd
 8009470:	080094dd 	.word	0x080094dd
 8009474:	080094c1 	.word	0x080094c1
 8009478:	080094dd 	.word	0x080094dd
 800947c:	080094dd 	.word	0x080094dd
 8009480:	080094dd 	.word	0x080094dd
 8009484:	080094cf 	.word	0x080094cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68b9      	ldr	r1, [r7, #8]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fb74 	bl	8009b7c <TIM_OC1_SetConfig>
      break;
 8009494:	e025      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fc07 	bl	8009cb0 <TIM_OC2_SetConfig>
      break;
 80094a2:	e01e      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fc98 	bl	8009de0 <TIM_OC3_SetConfig>
      break;
 80094b0:	e017      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68b9      	ldr	r1, [r7, #8]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fd27 	bl	8009f0c <TIM_OC4_SetConfig>
      break;
 80094be:	e010      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fdb8 	bl	800a03c <TIM_OC5_SetConfig>
      break;
 80094cc:	e009      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fe1b 	bl	800a110 <TIM_OC6_SetConfig>
      break;
 80094da:	e002      	b.n	80094e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
      break;
 80094e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800950e:	2302      	movs	r3, #2
 8009510:	e0ff      	b.n	8009712 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b14      	cmp	r3, #20
 800951e:	f200 80f0 	bhi.w	8009702 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009522:	a201      	add	r2, pc, #4	@ (adr r2, 8009528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	0800957d 	.word	0x0800957d
 800952c:	08009703 	.word	0x08009703
 8009530:	08009703 	.word	0x08009703
 8009534:	08009703 	.word	0x08009703
 8009538:	080095bd 	.word	0x080095bd
 800953c:	08009703 	.word	0x08009703
 8009540:	08009703 	.word	0x08009703
 8009544:	08009703 	.word	0x08009703
 8009548:	080095ff 	.word	0x080095ff
 800954c:	08009703 	.word	0x08009703
 8009550:	08009703 	.word	0x08009703
 8009554:	08009703 	.word	0x08009703
 8009558:	0800963f 	.word	0x0800963f
 800955c:	08009703 	.word	0x08009703
 8009560:	08009703 	.word	0x08009703
 8009564:	08009703 	.word	0x08009703
 8009568:	08009681 	.word	0x08009681
 800956c:	08009703 	.word	0x08009703
 8009570:	08009703 	.word	0x08009703
 8009574:	08009703 	.word	0x08009703
 8009578:	080096c1 	.word	0x080096c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fafa 	bl	8009b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0208 	orr.w	r2, r2, #8
 8009596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0204 	bic.w	r2, r2, #4
 80095a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6999      	ldr	r1, [r3, #24]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	619a      	str	r2, [r3, #24]
      break;
 80095ba:	e0a5      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb74 	bl	8009cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6999      	ldr	r1, [r3, #24]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	021a      	lsls	r2, r3, #8
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	619a      	str	r2, [r3, #24]
      break;
 80095fc:	e084      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fbeb 	bl	8009de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0208 	orr.w	r2, r2, #8
 8009618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0204 	bic.w	r2, r2, #4
 8009628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69d9      	ldr	r1, [r3, #28]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	61da      	str	r2, [r3, #28]
      break;
 800963c:	e064      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fc61 	bl	8009f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69d9      	ldr	r1, [r3, #28]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	021a      	lsls	r2, r3, #8
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	61da      	str	r2, [r3, #28]
      break;
 800967e:	e043      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fcd8 	bl	800a03c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0208 	orr.w	r2, r2, #8
 800969a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0204 	bic.w	r2, r2, #4
 80096aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80096be:	e023      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fd22 	bl	800a110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	021a      	lsls	r2, r3, #8
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009700:	e002      	b.n	8009708 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
      break;
 8009706:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop

0800971c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_TIM_ConfigClockSource+0x1c>
 8009734:	2302      	movs	r3, #2
 8009736:	e0fe      	b.n	8009936 <HAL_TIM_ConfigClockSource+0x21a>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009756:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800975a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009774:	f000 80c9 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800977c:	f200 80ce 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009780:	4a6f      	ldr	r2, [pc, #444]	@ (8009940 <HAL_TIM_ConfigClockSource+0x224>)
 8009782:	4293      	cmp	r3, r2
 8009784:	f000 80c1 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009788:	4a6d      	ldr	r2, [pc, #436]	@ (8009940 <HAL_TIM_ConfigClockSource+0x224>)
 800978a:	4293      	cmp	r3, r2
 800978c:	f200 80c6 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009790:	4a6c      	ldr	r2, [pc, #432]	@ (8009944 <HAL_TIM_ConfigClockSource+0x228>)
 8009792:	4293      	cmp	r3, r2
 8009794:	f000 80b9 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009798:	4a6a      	ldr	r2, [pc, #424]	@ (8009944 <HAL_TIM_ConfigClockSource+0x228>)
 800979a:	4293      	cmp	r3, r2
 800979c:	f200 80be 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097a0:	4a69      	ldr	r2, [pc, #420]	@ (8009948 <HAL_TIM_ConfigClockSource+0x22c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	f000 80b1 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097a8:	4a67      	ldr	r2, [pc, #412]	@ (8009948 <HAL_TIM_ConfigClockSource+0x22c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	f200 80b6 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097b0:	4a66      	ldr	r2, [pc, #408]	@ (800994c <HAL_TIM_ConfigClockSource+0x230>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	f000 80a9 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097b8:	4a64      	ldr	r2, [pc, #400]	@ (800994c <HAL_TIM_ConfigClockSource+0x230>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	f200 80ae 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097c0:	4a63      	ldr	r2, [pc, #396]	@ (8009950 <HAL_TIM_ConfigClockSource+0x234>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	f000 80a1 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097c8:	4a61      	ldr	r2, [pc, #388]	@ (8009950 <HAL_TIM_ConfigClockSource+0x234>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	f200 80a6 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097d0:	4a60      	ldr	r2, [pc, #384]	@ (8009954 <HAL_TIM_ConfigClockSource+0x238>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	f000 8099 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097d8:	4a5e      	ldr	r2, [pc, #376]	@ (8009954 <HAL_TIM_ConfigClockSource+0x238>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	f200 809e 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097e4:	f000 8091 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097ec:	f200 8096 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 80097f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097f4:	f000 8089 	beq.w	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 80097f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097fc:	f200 808e 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009804:	d03e      	beq.n	8009884 <HAL_TIM_ConfigClockSource+0x168>
 8009806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800980a:	f200 8087 	bhi.w	800991c <HAL_TIM_ConfigClockSource+0x200>
 800980e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009812:	f000 8086 	beq.w	8009922 <HAL_TIM_ConfigClockSource+0x206>
 8009816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800981a:	d87f      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 800981c:	2b70      	cmp	r3, #112	@ 0x70
 800981e:	d01a      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x13a>
 8009820:	2b70      	cmp	r3, #112	@ 0x70
 8009822:	d87b      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009824:	2b60      	cmp	r3, #96	@ 0x60
 8009826:	d050      	beq.n	80098ca <HAL_TIM_ConfigClockSource+0x1ae>
 8009828:	2b60      	cmp	r3, #96	@ 0x60
 800982a:	d877      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 800982c:	2b50      	cmp	r3, #80	@ 0x50
 800982e:	d03c      	beq.n	80098aa <HAL_TIM_ConfigClockSource+0x18e>
 8009830:	2b50      	cmp	r3, #80	@ 0x50
 8009832:	d873      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009834:	2b40      	cmp	r3, #64	@ 0x40
 8009836:	d058      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0x1ce>
 8009838:	2b40      	cmp	r3, #64	@ 0x40
 800983a:	d86f      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 800983c:	2b30      	cmp	r3, #48	@ 0x30
 800983e:	d064      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009840:	2b30      	cmp	r3, #48	@ 0x30
 8009842:	d86b      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 8009844:	2b20      	cmp	r3, #32
 8009846:	d060      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009848:	2b20      	cmp	r3, #32
 800984a:	d867      	bhi.n	800991c <HAL_TIM_ConfigClockSource+0x200>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d05c      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009850:	2b10      	cmp	r3, #16
 8009852:	d05a      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x1ee>
 8009854:	e062      	b.n	800991c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009866:	f000 fd3b 	bl	800a2e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	609a      	str	r2, [r3, #8]
      break;
 8009882:	e04f      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009894:	f000 fd24 	bl	800a2e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098a6:	609a      	str	r2, [r3, #8]
      break;
 80098a8:	e03c      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098b6:	461a      	mov	r2, r3
 80098b8:	f000 fc96 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2150      	movs	r1, #80	@ 0x50
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fcef 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 80098c8:	e02c      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098d6:	461a      	mov	r2, r3
 80098d8:	f000 fcb5 	bl	800a246 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2160      	movs	r1, #96	@ 0x60
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fcdf 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 80098e8:	e01c      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098f6:	461a      	mov	r2, r3
 80098f8:	f000 fc76 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2140      	movs	r1, #64	@ 0x40
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fccf 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 8009908:	e00c      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4619      	mov	r1, r3
 8009914:	4610      	mov	r0, r2
 8009916:	f000 fcc6 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 800991a:	e003      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
      break;
 8009920:	e000      	b.n	8009924 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009934:	7bfb      	ldrb	r3, [r7, #15]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	00100070 	.word	0x00100070
 8009944:	00100060 	.word	0x00100060
 8009948:	00100050 	.word	0x00100050
 800994c:	00100040 	.word	0x00100040
 8009950:	00100030 	.word	0x00100030
 8009954:	00100020 	.word	0x00100020

08009958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a62      	ldr	r2, [pc, #392]	@ (8009b44 <TIM_Base_SetConfig+0x19c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d02b      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a61      	ldr	r2, [pc, #388]	@ (8009b48 <TIM_Base_SetConfig+0x1a0>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d027      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ce:	d023      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099d6:	d01f      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a5c      	ldr	r2, [pc, #368]	@ (8009b4c <TIM_Base_SetConfig+0x1a4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d01b      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a5b      	ldr	r2, [pc, #364]	@ (8009b50 <TIM_Base_SetConfig+0x1a8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d017      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a5a      	ldr	r2, [pc, #360]	@ (8009b54 <TIM_Base_SetConfig+0x1ac>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a59      	ldr	r2, [pc, #356]	@ (8009b58 <TIM_Base_SetConfig+0x1b0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00f      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a58      	ldr	r2, [pc, #352]	@ (8009b5c <TIM_Base_SetConfig+0x1b4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a57      	ldr	r2, [pc, #348]	@ (8009b60 <TIM_Base_SetConfig+0x1b8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a56      	ldr	r2, [pc, #344]	@ (8009b64 <TIM_Base_SetConfig+0x1bc>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_Base_SetConfig+0x70>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a55      	ldr	r2, [pc, #340]	@ (8009b68 <TIM_Base_SetConfig+0x1c0>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d108      	bne.n	8009a2a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a45      	ldr	r2, [pc, #276]	@ (8009b44 <TIM_Base_SetConfig+0x19c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d03b      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a44      	ldr	r2, [pc, #272]	@ (8009b48 <TIM_Base_SetConfig+0x1a0>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d037      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a40:	d033      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a48:	d02f      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b4c <TIM_Base_SetConfig+0x1a4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d02b      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a3e      	ldr	r2, [pc, #248]	@ (8009b50 <TIM_Base_SetConfig+0x1a8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d027      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b54 <TIM_Base_SetConfig+0x1ac>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d023      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a3c      	ldr	r2, [pc, #240]	@ (8009b58 <TIM_Base_SetConfig+0x1b0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01f      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b5c <TIM_Base_SetConfig+0x1b4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a3a      	ldr	r2, [pc, #232]	@ (8009b60 <TIM_Base_SetConfig+0x1b8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a39      	ldr	r2, [pc, #228]	@ (8009b64 <TIM_Base_SetConfig+0x1bc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a38      	ldr	r2, [pc, #224]	@ (8009b68 <TIM_Base_SetConfig+0x1c0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a37      	ldr	r2, [pc, #220]	@ (8009b6c <TIM_Base_SetConfig+0x1c4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a36      	ldr	r2, [pc, #216]	@ (8009b70 <TIM_Base_SetConfig+0x1c8>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a35      	ldr	r2, [pc, #212]	@ (8009b74 <TIM_Base_SetConfig+0x1cc>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0x102>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a34      	ldr	r2, [pc, #208]	@ (8009b78 <TIM_Base_SetConfig+0x1d0>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a18      	ldr	r2, [pc, #96]	@ (8009b44 <TIM_Base_SetConfig+0x19c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d013      	beq.n	8009b10 <TIM_Base_SetConfig+0x168>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a17      	ldr	r2, [pc, #92]	@ (8009b48 <TIM_Base_SetConfig+0x1a0>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00f      	beq.n	8009b10 <TIM_Base_SetConfig+0x168>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b64 <TIM_Base_SetConfig+0x1bc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00b      	beq.n	8009b10 <TIM_Base_SetConfig+0x168>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a1b      	ldr	r2, [pc, #108]	@ (8009b68 <TIM_Base_SetConfig+0x1c0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d007      	beq.n	8009b10 <TIM_Base_SetConfig+0x168>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a1c      	ldr	r2, [pc, #112]	@ (8009b74 <TIM_Base_SetConfig+0x1cc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d003      	beq.n	8009b10 <TIM_Base_SetConfig+0x168>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <TIM_Base_SetConfig+0x1d0>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d103      	bne.n	8009b18 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d105      	bne.n	8009b36 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f023 0201 	bic.w	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	611a      	str	r2, [r3, #16]
  }
}
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	40012c00 	.word	0x40012c00
 8009b48:	50012c00 	.word	0x50012c00
 8009b4c:	40000400 	.word	0x40000400
 8009b50:	50000400 	.word	0x50000400
 8009b54:	40000800 	.word	0x40000800
 8009b58:	50000800 	.word	0x50000800
 8009b5c:	40000c00 	.word	0x40000c00
 8009b60:	50000c00 	.word	0x50000c00
 8009b64:	40013400 	.word	0x40013400
 8009b68:	50013400 	.word	0x50013400
 8009b6c:	40001800 	.word	0x40001800
 8009b70:	50001800 	.word	0x50001800
 8009b74:	40014000 	.word	0x40014000
 8009b78:	50014000 	.word	0x50014000

08009b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	f023 0201 	bic.w	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 0303 	bic.w	r3, r3, #3
 8009bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f023 0302 	bic.w	r3, r3, #2
 8009bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a30      	ldr	r2, [pc, #192]	@ (8009c98 <TIM_OC1_SetConfig+0x11c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d013      	beq.n	8009c04 <TIM_OC1_SetConfig+0x88>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a2f      	ldr	r2, [pc, #188]	@ (8009c9c <TIM_OC1_SetConfig+0x120>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00f      	beq.n	8009c04 <TIM_OC1_SetConfig+0x88>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a2e      	ldr	r2, [pc, #184]	@ (8009ca0 <TIM_OC1_SetConfig+0x124>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00b      	beq.n	8009c04 <TIM_OC1_SetConfig+0x88>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a2d      	ldr	r2, [pc, #180]	@ (8009ca4 <TIM_OC1_SetConfig+0x128>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d007      	beq.n	8009c04 <TIM_OC1_SetConfig+0x88>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8009ca8 <TIM_OC1_SetConfig+0x12c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d003      	beq.n	8009c04 <TIM_OC1_SetConfig+0x88>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8009cac <TIM_OC1_SetConfig+0x130>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d10c      	bne.n	8009c1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f023 0308 	bic.w	r3, r3, #8
 8009c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f023 0304 	bic.w	r3, r3, #4
 8009c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a1d      	ldr	r2, [pc, #116]	@ (8009c98 <TIM_OC1_SetConfig+0x11c>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d013      	beq.n	8009c4e <TIM_OC1_SetConfig+0xd2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <TIM_OC1_SetConfig+0x120>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00f      	beq.n	8009c4e <TIM_OC1_SetConfig+0xd2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <TIM_OC1_SetConfig+0x124>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00b      	beq.n	8009c4e <TIM_OC1_SetConfig+0xd2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca4 <TIM_OC1_SetConfig+0x128>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d007      	beq.n	8009c4e <TIM_OC1_SetConfig+0xd2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <TIM_OC1_SetConfig+0x12c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d003      	beq.n	8009c4e <TIM_OC1_SetConfig+0xd2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <TIM_OC1_SetConfig+0x130>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d111      	bne.n	8009c72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	621a      	str	r2, [r3, #32]
}
 8009c8c:	bf00      	nop
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	40012c00 	.word	0x40012c00
 8009c9c:	50012c00 	.word	0x50012c00
 8009ca0:	40013400 	.word	0x40013400
 8009ca4:	50013400 	.word	0x50013400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	50014000 	.word	0x50014000

08009cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	f023 0210 	bic.w	r2, r3, #16
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0320 	bic.w	r3, r3, #32
 8009cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	011b      	lsls	r3, r3, #4
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8009dc8 <TIM_OC2_SetConfig+0x118>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00b      	beq.n	8009d2c <TIM_OC2_SetConfig+0x7c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a2d      	ldr	r2, [pc, #180]	@ (8009dcc <TIM_OC2_SetConfig+0x11c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_OC2_SetConfig+0x7c>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8009dd0 <TIM_OC2_SetConfig+0x120>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_OC2_SetConfig+0x7c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a2b      	ldr	r2, [pc, #172]	@ (8009dd4 <TIM_OC2_SetConfig+0x124>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d10d      	bne.n	8009d48 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009dc8 <TIM_OC2_SetConfig+0x118>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <TIM_OC2_SetConfig+0xc8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1e      	ldr	r2, [pc, #120]	@ (8009dcc <TIM_OC2_SetConfig+0x11c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00f      	beq.n	8009d78 <TIM_OC2_SetConfig+0xc8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd0 <TIM_OC2_SetConfig+0x120>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_OC2_SetConfig+0xc8>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd4 <TIM_OC2_SetConfig+0x124>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_OC2_SetConfig+0xc8>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd8 <TIM_OC2_SetConfig+0x128>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC2_SetConfig+0xc8>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1a      	ldr	r2, [pc, #104]	@ (8009ddc <TIM_OC2_SetConfig+0x12c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d113      	bne.n	8009da0 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	40012c00 	.word	0x40012c00
 8009dcc:	50012c00 	.word	0x50012c00
 8009dd0:	40013400 	.word	0x40013400
 8009dd4:	50013400 	.word	0x50013400
 8009dd8:	40014000 	.word	0x40014000
 8009ddc:	50014000 	.word	0x50014000

08009de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef4 <TIM_OC3_SetConfig+0x114>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a2c      	ldr	r2, [pc, #176]	@ (8009ef8 <TIM_OC3_SetConfig+0x118>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009efc <TIM_OC3_SetConfig+0x11c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a2a      	ldr	r2, [pc, #168]	@ (8009f00 <TIM_OC3_SetConfig+0x120>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d10d      	bne.n	8009e76 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef4 <TIM_OC3_SetConfig+0x114>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d013      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xc6>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a1d      	ldr	r2, [pc, #116]	@ (8009ef8 <TIM_OC3_SetConfig+0x118>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00f      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xc6>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a1c      	ldr	r2, [pc, #112]	@ (8009efc <TIM_OC3_SetConfig+0x11c>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00b      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xc6>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a1b      	ldr	r2, [pc, #108]	@ (8009f00 <TIM_OC3_SetConfig+0x120>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d007      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xc6>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a1a      	ldr	r2, [pc, #104]	@ (8009f04 <TIM_OC3_SetConfig+0x124>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d003      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xc6>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a19      	ldr	r2, [pc, #100]	@ (8009f08 <TIM_OC3_SetConfig+0x128>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d113      	bne.n	8009ece <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	621a      	str	r2, [r3, #32]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	50012c00 	.word	0x50012c00
 8009efc:	40013400 	.word	0x40013400
 8009f00:	50013400 	.word	0x50013400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	50014000 	.word	0x50014000

08009f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	021b      	lsls	r3, r3, #8
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	031b      	lsls	r3, r3, #12
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a2e      	ldr	r2, [pc, #184]	@ (800a024 <TIM_OC4_SetConfig+0x118>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00b      	beq.n	8009f88 <TIM_OC4_SetConfig+0x7c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a2d      	ldr	r2, [pc, #180]	@ (800a028 <TIM_OC4_SetConfig+0x11c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d007      	beq.n	8009f88 <TIM_OC4_SetConfig+0x7c>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800a02c <TIM_OC4_SetConfig+0x120>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC4_SetConfig+0x7c>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a2b      	ldr	r2, [pc, #172]	@ (800a030 <TIM_OC4_SetConfig+0x124>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d10d      	bne.n	8009fa4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	031b      	lsls	r3, r3, #12
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a1f      	ldr	r2, [pc, #124]	@ (800a024 <TIM_OC4_SetConfig+0x118>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d013      	beq.n	8009fd4 <TIM_OC4_SetConfig+0xc8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a1e      	ldr	r2, [pc, #120]	@ (800a028 <TIM_OC4_SetConfig+0x11c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d00f      	beq.n	8009fd4 <TIM_OC4_SetConfig+0xc8>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800a02c <TIM_OC4_SetConfig+0x120>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00b      	beq.n	8009fd4 <TIM_OC4_SetConfig+0xc8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1c      	ldr	r2, [pc, #112]	@ (800a030 <TIM_OC4_SetConfig+0x124>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d007      	beq.n	8009fd4 <TIM_OC4_SetConfig+0xc8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	@ (800a034 <TIM_OC4_SetConfig+0x128>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d003      	beq.n	8009fd4 <TIM_OC4_SetConfig+0xc8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1a      	ldr	r2, [pc, #104]	@ (800a038 <TIM_OC4_SetConfig+0x12c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d113      	bne.n	8009ffc <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fda:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fe2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	019b      	lsls	r3, r3, #6
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	019b      	lsls	r3, r3, #6
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40012c00 	.word	0x40012c00
 800a028:	50012c00 	.word	0x50012c00
 800a02c:	40013400 	.word	0x40013400
 800a030:	50013400 	.word	0x50013400
 800a034:	40014000 	.word	0x40014000
 800a038:	50014000 	.word	0x50014000

0800a03c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	041b      	lsls	r3, r3, #16
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a19      	ldr	r2, [pc, #100]	@ (800a0f8 <TIM_OC5_SetConfig+0xbc>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d013      	beq.n	800a0be <TIM_OC5_SetConfig+0x82>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a18      	ldr	r2, [pc, #96]	@ (800a0fc <TIM_OC5_SetConfig+0xc0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d00f      	beq.n	800a0be <TIM_OC5_SetConfig+0x82>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a17      	ldr	r2, [pc, #92]	@ (800a100 <TIM_OC5_SetConfig+0xc4>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00b      	beq.n	800a0be <TIM_OC5_SetConfig+0x82>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a16      	ldr	r2, [pc, #88]	@ (800a104 <TIM_OC5_SetConfig+0xc8>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d007      	beq.n	800a0be <TIM_OC5_SetConfig+0x82>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a15      	ldr	r2, [pc, #84]	@ (800a108 <TIM_OC5_SetConfig+0xcc>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d003      	beq.n	800a0be <TIM_OC5_SetConfig+0x82>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a14      	ldr	r2, [pc, #80]	@ (800a10c <TIM_OC5_SetConfig+0xd0>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d109      	bne.n	800a0d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	621a      	str	r2, [r3, #32]
}
 800a0ec:	bf00      	nop
 800a0ee:	371c      	adds	r7, #28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	40012c00 	.word	0x40012c00
 800a0fc:	50012c00 	.word	0x50012c00
 800a100:	40013400 	.word	0x40013400
 800a104:	50013400 	.word	0x50013400
 800a108:	40014000 	.word	0x40014000
 800a10c:	50014000 	.word	0x50014000

0800a110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a13e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	051b      	lsls	r3, r3, #20
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a1a      	ldr	r2, [pc, #104]	@ (800a1d0 <TIM_OC6_SetConfig+0xc0>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d013      	beq.n	800a194 <TIM_OC6_SetConfig+0x84>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a19      	ldr	r2, [pc, #100]	@ (800a1d4 <TIM_OC6_SetConfig+0xc4>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00f      	beq.n	800a194 <TIM_OC6_SetConfig+0x84>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a18      	ldr	r2, [pc, #96]	@ (800a1d8 <TIM_OC6_SetConfig+0xc8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d00b      	beq.n	800a194 <TIM_OC6_SetConfig+0x84>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a17      	ldr	r2, [pc, #92]	@ (800a1dc <TIM_OC6_SetConfig+0xcc>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d007      	beq.n	800a194 <TIM_OC6_SetConfig+0x84>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a16      	ldr	r2, [pc, #88]	@ (800a1e0 <TIM_OC6_SetConfig+0xd0>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d003      	beq.n	800a194 <TIM_OC6_SetConfig+0x84>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a15      	ldr	r2, [pc, #84]	@ (800a1e4 <TIM_OC6_SetConfig+0xd4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d109      	bne.n	800a1a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a19a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	029b      	lsls	r3, r3, #10
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40012c00 	.word	0x40012c00
 800a1d4:	50012c00 	.word	0x50012c00
 800a1d8:	40013400 	.word	0x40013400
 800a1dc:	50013400 	.word	0x50013400
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	50014000 	.word	0x50014000

0800a1e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f023 030a 	bic.w	r3, r3, #10
 800a224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a246:	b480      	push	{r7}
 800a248:	b087      	sub	sp, #28
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	f023 0210 	bic.w	r2, r3, #16
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	031b      	lsls	r3, r3, #12
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a282:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a2bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	f043 0307 	orr.w	r3, r3, #7
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	021a      	lsls	r2, r3, #8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	431a      	orrs	r2, r3
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	4313      	orrs	r3, r2
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	609a      	str	r2, [r3, #8]
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f003 031f 	and.w	r3, r3, #31
 800a332:	2201      	movs	r2, #1
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a1a      	ldr	r2, [r3, #32]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	43db      	mvns	r3, r3
 800a342:	401a      	ands	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	fa01 f303 	lsl.w	r3, r1, r3
 800a358:	431a      	orrs	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d101      	bne.n	800a384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a380:	2302      	movs	r3, #2
 800a382:	e0a1      	b.n	800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a4a      	ldr	r2, [pc, #296]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00e      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a49      	ldr	r2, [pc, #292]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a47      	ldr	r2, [pc, #284]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a46      	ldr	r2, [pc, #280]	@ (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a3e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a34      	ldr	r2, [pc, #208]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d04a      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a33      	ldr	r2, [pc, #204]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d045      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a418:	d040      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a422:	d03b      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a2e      	ldr	r2, [pc, #184]	@ (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d036      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a2d      	ldr	r2, [pc, #180]	@ (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d031      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a2b      	ldr	r2, [pc, #172]	@ (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d02c      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d027      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a28      	ldr	r2, [pc, #160]	@ (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d022      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a27      	ldr	r2, [pc, #156]	@ (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d01d      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1d      	ldr	r2, [pc, #116]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a20      	ldr	r2, [pc, #128]	@ (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1f      	ldr	r2, [pc, #124]	@ (800a500 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1d      	ldr	r2, [pc, #116]	@ (800a504 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1c      	ldr	r2, [pc, #112]	@ (800a508 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d10c      	bne.n	800a4b6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40012c00 	.word	0x40012c00
 800a4d8:	50012c00 	.word	0x50012c00
 800a4dc:	40013400 	.word	0x40013400
 800a4e0:	50013400 	.word	0x50013400
 800a4e4:	40000400 	.word	0x40000400
 800a4e8:	50000400 	.word	0x50000400
 800a4ec:	40000800 	.word	0x40000800
 800a4f0:	50000800 	.word	0x50000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	50000c00 	.word	0x50000c00
 800a4fc:	40001800 	.word	0x40001800
 800a500:	50001800 	.word	0x50001800
 800a504:	40014000 	.word	0x40014000
 800a508:	50014000 	.word	0x50014000

0800a50c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a524:	2302      	movs	r3, #2
 800a526:	e07d      	b.n	800a624 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4313      	orrs	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	041b      	lsls	r3, r3, #16
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a630 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00e      	beq.n	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a1d      	ldr	r2, [pc, #116]	@ (800a634 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a638 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d004      	beq.n	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a63c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d11c      	bne.n	800a612 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e2:	051b      	lsls	r3, r3, #20
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a600:	4313      	orrs	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	4313      	orrs	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	40012c00 	.word	0x40012c00
 800a634:	50012c00 	.word	0x50012c00
 800a638:	40013400 	.word	0x40013400
 800a63c:	50013400 	.word	0x50013400

0800a640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e042      	b.n	800a764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7f7 feff 	bl	80024f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2224      	movs	r2, #36	@ 0x24
 800a6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 0201 	bic.w	r2, r2, #1
 800a70c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fdde 	bl	800b2d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fc2d 	bl	800af7c <UART_SetConfig>
 800a722:	4603      	mov	r3, r0
 800a724:	2b01      	cmp	r3, #1
 800a726:	d101      	bne.n	800a72c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e01b      	b.n	800a764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a73a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a74a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fe5d 	bl	800b41c <UART_CheckIdleState>
 800a762:	4603      	mov	r3, r0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	@ 0x28
 800a770:	af02      	add	r7, sp, #8
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	603b      	str	r3, [r7, #0]
 800a778:	4613      	mov	r3, r2
 800a77a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a782:	2b20      	cmp	r3, #32
 800a784:	f040 808b 	bne.w	800a89e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <HAL_UART_Transmit+0x28>
 800a78e:	88fb      	ldrh	r3, [r7, #6]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e083      	b.n	800a8a0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a2:	2b80      	cmp	r3, #128	@ 0x80
 800a7a4:	d107      	bne.n	800a7b6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7b4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2221      	movs	r2, #33	@ 0x21
 800a7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7c6:	f7f8 f879 	bl	80028bc <HAL_GetTick>
 800a7ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	88fa      	ldrh	r2, [r7, #6]
 800a7d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	88fa      	ldrh	r2, [r7, #6]
 800a7d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7e4:	d108      	bne.n	800a7f8 <HAL_UART_Transmit+0x8c>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d104      	bne.n	800a7f8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	61bb      	str	r3, [r7, #24]
 800a7f6:	e003      	b.n	800a800 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a800:	e030      	b.n	800a864 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2200      	movs	r2, #0
 800a80a:	2180      	movs	r1, #128	@ 0x80
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 feaf 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d005      	beq.n	800a824 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e03d      	b.n	800a8a0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a838:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	3302      	adds	r3, #2
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	e007      	b.n	800a852 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	781a      	ldrb	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	3301      	adds	r3, #1
 800a850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a858:	b29b      	uxth	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1c8      	bne.n	800a802 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2200      	movs	r2, #0
 800a878:	2140      	movs	r1, #64	@ 0x40
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 fe78 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e006      	b.n	800a8a0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2220      	movs	r2, #32
 800a896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e000      	b.n	800a8a0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a89e:	2302      	movs	r3, #2
  }
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08a      	sub	sp, #40	@ 0x28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d13c      	bne.n	800a93a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_UART_Receive_DMA+0x24>
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e035      	b.n	800a93c <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a1a      	ldr	r2, [pc, #104]	@ (800a944 <HAL_UART_Receive_DMA+0x9c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d024      	beq.n	800a92a <HAL_UART_Receive_DMA+0x82>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a18      	ldr	r2, [pc, #96]	@ (800a948 <HAL_UART_Receive_DMA+0xa0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d01f      	beq.n	800a92a <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d018      	beq.n	800a92a <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	613b      	str	r3, [r7, #16]
   return(result);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	623b      	str	r3, [r7, #32]
 800a918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	69f9      	ldr	r1, [r7, #28]
 800a91c:	6a3a      	ldr	r2, [r7, #32]
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	61bb      	str	r3, [r7, #24]
   return(result);
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e6      	bne.n	800a8f8 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a92a:	88fb      	ldrh	r3, [r7, #6]
 800a92c:	461a      	mov	r2, r3
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 fe8b 	bl	800b64c <UART_Start_Receive_DMA>
 800a936:	4603      	mov	r3, r0
 800a938:	e000      	b.n	800a93c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a93a:	2302      	movs	r3, #2
  }
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3728      	adds	r7, #40	@ 0x28
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	44002400 	.word	0x44002400
 800a948:	54002400 	.word	0x54002400

0800a94c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b0ae      	sub	sp, #184	@ 0xb8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a97a:	4013      	ands	r3, r2
 800a97c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800a980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a984:	2b00      	cmp	r3, #0
 800a986:	d11b      	bne.n	800a9c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a98c:	f003 0320 	and.w	r3, r3, #32
 800a990:	2b00      	cmp	r3, #0
 800a992:	d015      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 82ac 	beq.w	800af0e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
      }
      return;
 800a9be:	e2a6      	b.n	800af0e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80fd 	beq.w	800abc4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a9ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a9ce:	4b7a      	ldr	r3, [pc, #488]	@ (800abb8 <HAL_UART_IRQHandler+0x26c>)
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a9d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9da:	4b78      	ldr	r3, [pc, #480]	@ (800abbc <HAL_UART_IRQHandler+0x270>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 80f0 	beq.w	800abc4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d011      	beq.n	800aa14 <HAL_UART_IRQHandler+0xc8>
 800a9f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a9f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2201      	movs	r2, #1
 800aa02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa0a:	f043 0201 	orr.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d011      	beq.n	800aa44 <HAL_UART_IRQHandler+0xf8>
 800aa20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00b      	beq.n	800aa44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2202      	movs	r2, #2
 800aa32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa3a:	f043 0204 	orr.w	r2, r3, #4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d011      	beq.n	800aa74 <HAL_UART_IRQHandler+0x128>
 800aa50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00b      	beq.n	800aa74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2204      	movs	r2, #4
 800aa62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa6a:	f043 0202 	orr.w	r2, r3, #2
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa78:	f003 0308 	and.w	r3, r3, #8
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d017      	beq.n	800aab0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aa90:	4b49      	ldr	r3, [pc, #292]	@ (800abb8 <HAL_UART_IRQHandler+0x26c>)
 800aa92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00b      	beq.n	800aab0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaa6:	f043 0208 	orr.w	r2, r3, #8
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d012      	beq.n	800aae2 <HAL_UART_IRQHandler+0x196>
 800aabc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00c      	beq.n	800aae2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aad8:	f043 0220 	orr.w	r2, r3, #32
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 8212 	beq.w	800af12 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aaee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d013      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aafa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d105      	bne.n	800ab12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab36:	2b40      	cmp	r3, #64	@ 0x40
 800ab38:	d005      	beq.n	800ab46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d02e      	beq.n	800aba4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 feb9 	bl	800b8be <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab56:	2b40      	cmp	r3, #64	@ 0x40
 800ab58:	d120      	bne.n	800ab9c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d017      	beq.n	800ab94 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab6a:	4a15      	ldr	r2, [pc, #84]	@ (800abc0 <HAL_UART_IRQHandler+0x274>)
 800ab6c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7f8 fa69 	bl	800304c <HAL_DMA_Abort_IT>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d019      	beq.n	800abb4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab92:	e00f      	b.n	800abb4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f9db 	bl	800af50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab9a:	e00b      	b.n	800abb4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f9d7 	bl	800af50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba2:	e007      	b.n	800abb4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f9d3 	bl	800af50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800abb2:	e1ae      	b.n	800af12 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	bf00      	nop
    return;
 800abb6:	e1ac      	b.n	800af12 <HAL_UART_IRQHandler+0x5c6>
 800abb8:	10000001 	.word	0x10000001
 800abbc:	04000120 	.word	0x04000120
 800abc0:	0800bb3b 	.word	0x0800bb3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc8:	2b01      	cmp	r3, #1
 800abca:	f040 8142 	bne.w	800ae52 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 813b 	beq.w	800ae52 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8134 	beq.w	800ae52 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2210      	movs	r2, #16
 800abf0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfc:	2b40      	cmp	r3, #64	@ 0x40
 800abfe:	f040 80aa 	bne.w	800ad56 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac0c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800ac10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 8084 	beq.w	800ad22 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac20:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d27c      	bcs.n	800ad22 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ac2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac3a:	2b81      	cmp	r3, #129	@ 0x81
 800ac3c:	d060      	beq.n	800ad00 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac46:	e853 3f00 	ldrex	r3, [r3]
 800ac4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac64:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ac68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ac6c:	e841 2300 	strex	r3, r2, [r1]
 800ac70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ac72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e2      	bne.n	800ac3e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ac88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac8a:	f023 0301 	bic.w	r3, r3, #1
 800ac8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ac9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ac9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aca2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aca4:	e841 2300 	strex	r3, r2, [r1]
 800aca8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800acaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e3      	bne.n	800ac78 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2220      	movs	r2, #32
 800acb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc6:	e853 3f00 	ldrex	r3, [r3]
 800acca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800accc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acce:	f023 0310 	bic.w	r3, r3, #16
 800acd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ace0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ace2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ace6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e4      	bne.n	800acbe <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7f8 f92a 	bl	8002f54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f922 	bl	800af64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ad20:	e0f9      	b.n	800af16 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad28:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	f040 80f2 	bne.w	800af16 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad3a:	2b81      	cmp	r3, #129	@ 0x81
 800ad3c:	f040 80eb 	bne.w	800af16 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f908 	bl	800af64 <HAL_UARTEx_RxEventCallback>
      return;
 800ad54:	e0df      	b.n	800af16 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 80d1 	beq.w	800af1a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800ad78:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80cc 	beq.w	800af1a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	e853 3f00 	ldrex	r3, [r3]
 800ad8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ada4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ada6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e4      	bne.n	800ad82 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3308      	adds	r3, #8
 800adbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	623b      	str	r3, [r7, #32]
   return(result);
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ade0:	633a      	str	r2, [r7, #48]	@ 0x30
 800ade2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e1      	bne.n	800adb8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f023 0310 	bic.w	r3, r3, #16
 800ae1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	69b9      	ldr	r1, [r7, #24]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	617b      	str	r3, [r7, #20]
   return(result);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e4      	bne.n	800ae08 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2202      	movs	r2, #2
 800ae42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae44:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f88a 	bl	800af64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae50:	e063      	b.n	800af1a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00e      	beq.n	800ae7c <HAL_UART_IRQHandler+0x530>
 800ae5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d008      	beq.n	800ae7c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fe9d 	bl	800bbb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae7a:	e051      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d014      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d03a      	beq.n	800af1e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	4798      	blx	r3
    }
    return;
 800aeb0:	e035      	b.n	800af1e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aeb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <HAL_UART_IRQHandler+0x586>
 800aebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fe47 	bl	800bb5e <UART_EndTransmit_IT>
    return;
 800aed0:	e026      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <HAL_UART_IRQHandler+0x5a6>
 800aede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aee2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fe76 	bl	800bbdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aef0:	e016      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d010      	beq.n	800af20 <HAL_UART_IRQHandler+0x5d4>
 800aefe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800af02:	2b00      	cmp	r3, #0
 800af04:	da0c      	bge.n	800af20 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fe5e 	bl	800bbc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af0c:	e008      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
      return;
 800af0e:	bf00      	nop
 800af10:	e006      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
    return;
 800af12:	bf00      	nop
 800af14:	e004      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
      return;
 800af16:	bf00      	nop
 800af18:	e002      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
      return;
 800af1a:	bf00      	nop
 800af1c:	e000      	b.n	800af20 <HAL_UART_IRQHandler+0x5d4>
    return;
 800af1e:	bf00      	nop
  }
}
 800af20:	37b8      	adds	r7, #184	@ 0xb8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop

0800af28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af80:	b094      	sub	sp, #80	@ 0x50
 800af82:	af00      	add	r7, sp, #0
 800af84:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800af8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	4b83      	ldr	r3, [pc, #524]	@ (800b1a0 <UART_SetConfig+0x224>)
 800af92:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af96:	689a      	ldr	r2, [r3, #8]
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	431a      	orrs	r2, r3
 800af9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	497c      	ldr	r1, [pc, #496]	@ (800b1a4 <UART_SetConfig+0x228>)
 800afb4:	4019      	ands	r1, r3
 800afb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afbc:	430b      	orrs	r3, r1
 800afbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	68d9      	ldr	r1, [r3, #12]
 800afce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	ea40 0301 	orr.w	r3, r0, r1
 800afd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	4b6f      	ldr	r3, [pc, #444]	@ (800b1a0 <UART_SetConfig+0x224>)
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d009      	beq.n	800affc <UART_SetConfig+0x80>
 800afe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	4b6e      	ldr	r3, [pc, #440]	@ (800b1a8 <UART_SetConfig+0x22c>)
 800afee:	429a      	cmp	r2, r3
 800aff0:	d004      	beq.n	800affc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff4:	6a1a      	ldr	r2, [r3, #32]
 800aff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aff8:	4313      	orrs	r3, r2
 800affa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800affc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b006:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b010:	430b      	orrs	r3, r1
 800b012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	f023 000f 	bic.w	r0, r3, #15
 800b01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b020:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	ea40 0301 	orr.w	r3, r0, r1
 800b02a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4b5e      	ldr	r3, [pc, #376]	@ (800b1ac <UART_SetConfig+0x230>)
 800b032:	429a      	cmp	r2, r3
 800b034:	d102      	bne.n	800b03c <UART_SetConfig+0xc0>
 800b036:	2301      	movs	r3, #1
 800b038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b03a:	e032      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	4b5b      	ldr	r3, [pc, #364]	@ (800b1b0 <UART_SetConfig+0x234>)
 800b042:	429a      	cmp	r2, r3
 800b044:	d102      	bne.n	800b04c <UART_SetConfig+0xd0>
 800b046:	2302      	movs	r3, #2
 800b048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b04a:	e02a      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	4b58      	ldr	r3, [pc, #352]	@ (800b1b4 <UART_SetConfig+0x238>)
 800b052:	429a      	cmp	r2, r3
 800b054:	d102      	bne.n	800b05c <UART_SetConfig+0xe0>
 800b056:	2304      	movs	r3, #4
 800b058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b05a:	e022      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	4b55      	ldr	r3, [pc, #340]	@ (800b1b8 <UART_SetConfig+0x23c>)
 800b062:	429a      	cmp	r2, r3
 800b064:	d102      	bne.n	800b06c <UART_SetConfig+0xf0>
 800b066:	2308      	movs	r3, #8
 800b068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b06a:	e01a      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4b52      	ldr	r3, [pc, #328]	@ (800b1bc <UART_SetConfig+0x240>)
 800b072:	429a      	cmp	r2, r3
 800b074:	d102      	bne.n	800b07c <UART_SetConfig+0x100>
 800b076:	2310      	movs	r3, #16
 800b078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b07a:	e012      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	4b4f      	ldr	r3, [pc, #316]	@ (800b1c0 <UART_SetConfig+0x244>)
 800b082:	429a      	cmp	r2, r3
 800b084:	d102      	bne.n	800b08c <UART_SetConfig+0x110>
 800b086:	2320      	movs	r3, #32
 800b088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b08a:	e00a      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	4b43      	ldr	r3, [pc, #268]	@ (800b1a0 <UART_SetConfig+0x224>)
 800b092:	429a      	cmp	r2, r3
 800b094:	d103      	bne.n	800b09e <UART_SetConfig+0x122>
 800b096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b09a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b09c:	e001      	b.n	800b0a2 <UART_SetConfig+0x126>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4b3e      	ldr	r3, [pc, #248]	@ (800b1a0 <UART_SetConfig+0x224>)
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d005      	beq.n	800b0b8 <UART_SetConfig+0x13c>
 800b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b1a8 <UART_SetConfig+0x22c>)
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	f040 8088 	bne.w	800b1c8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b0b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	623b      	str	r3, [r7, #32]
 800b0be:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0c4:	f7fc f8c0 	bl	8007248 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0c8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80eb 	beq.w	800b2a8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	4a3b      	ldr	r2, [pc, #236]	@ (800b1c4 <UART_SetConfig+0x248>)
 800b0d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	4413      	add	r3, r2
 800b0f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d305      	bcc.n	800b102 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d903      	bls.n	800b10a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b108:	e048      	b.n	800b19c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b10c:	2200      	movs	r2, #0
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	61fa      	str	r2, [r7, #28]
 800b112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	4a2b      	ldr	r2, [pc, #172]	@ (800b1c4 <UART_SetConfig+0x248>)
 800b118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2200      	movs	r2, #0
 800b120:	613b      	str	r3, [r7, #16]
 800b122:	617a      	str	r2, [r7, #20]
 800b124:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b128:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b12c:	f7f5 fcfa 	bl	8000b24 <__aeabi_uldivmod>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4610      	mov	r0, r2
 800b136:	4619      	mov	r1, r3
 800b138:	f04f 0200 	mov.w	r2, #0
 800b13c:	f04f 0300 	mov.w	r3, #0
 800b140:	020b      	lsls	r3, r1, #8
 800b142:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b146:	0202      	lsls	r2, r0, #8
 800b148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b14a:	6849      	ldr	r1, [r1, #4]
 800b14c:	0849      	lsrs	r1, r1, #1
 800b14e:	2000      	movs	r0, #0
 800b150:	460c      	mov	r4, r1
 800b152:	4605      	mov	r5, r0
 800b154:	eb12 0804 	adds.w	r8, r2, r4
 800b158:	eb43 0905 	adc.w	r9, r3, r5
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	60bb      	str	r3, [r7, #8]
 800b164:	60fa      	str	r2, [r7, #12]
 800b166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f5 fcd9 	bl	8000b24 <__aeabi_uldivmod>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4613      	mov	r3, r2
 800b178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b180:	d308      	bcc.n	800b194 <UART_SetConfig+0x218>
 800b182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b188:	d204      	bcs.n	800b194 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b190:	60da      	str	r2, [r3, #12]
 800b192:	e003      	b.n	800b19c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b19a:	e085      	b.n	800b2a8 <UART_SetConfig+0x32c>
 800b19c:	e084      	b.n	800b2a8 <UART_SetConfig+0x32c>
 800b19e:	bf00      	nop
 800b1a0:	44002400 	.word	0x44002400
 800b1a4:	cfff69f3 	.word	0xcfff69f3
 800b1a8:	54002400 	.word	0x54002400
 800b1ac:	40013800 	.word	0x40013800
 800b1b0:	40004400 	.word	0x40004400
 800b1b4:	40004800 	.word	0x40004800
 800b1b8:	40004c00 	.word	0x40004c00
 800b1bc:	40005000 	.word	0x40005000
 800b1c0:	40006400 	.word	0x40006400
 800b1c4:	0800ce10 	.word	0x0800ce10
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1d0:	d13c      	bne.n	800b24c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b1d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	607a      	str	r2, [r7, #4]
 800b1da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1de:	f7fc f833 	bl	8007248 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1e2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d05e      	beq.n	800b2a8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ee:	4a39      	ldr	r2, [pc, #228]	@ (800b2d4 <UART_SetConfig+0x358>)
 800b1f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1fc:	005a      	lsls	r2, r3, #1
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	085b      	lsrs	r3, r3, #1
 800b204:	441a      	add	r2, r3
 800b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b212:	2b0f      	cmp	r3, #15
 800b214:	d916      	bls.n	800b244 <UART_SetConfig+0x2c8>
 800b216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b21c:	d212      	bcs.n	800b244 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b220:	b29b      	uxth	r3, r3
 800b222:	f023 030f 	bic.w	r3, r3, #15
 800b226:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22a:	085b      	lsrs	r3, r3, #1
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	b29a      	uxth	r2, r3
 800b234:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b236:	4313      	orrs	r3, r2
 800b238:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b240:	60da      	str	r2, [r3, #12]
 800b242:	e031      	b.n	800b2a8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b24a:	e02d      	b.n	800b2a8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b24c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b24e:	2200      	movs	r2, #0
 800b250:	469a      	mov	sl, r3
 800b252:	4693      	mov	fp, r2
 800b254:	4650      	mov	r0, sl
 800b256:	4659      	mov	r1, fp
 800b258:	f7fb fff6 	bl	8007248 <HAL_RCCEx_GetPeriphCLKFreq>
 800b25c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	d021      	beq.n	800b2a8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b268:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d4 <UART_SetConfig+0x358>)
 800b26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26e:	461a      	mov	r2, r3
 800b270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b272:	fbb3 f2f2 	udiv	r2, r3, r2
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	441a      	add	r2, r3
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	fbb2 f3f3 	udiv	r3, r2, r3
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28a:	2b0f      	cmp	r3, #15
 800b28c:	d909      	bls.n	800b2a2 <UART_SetConfig+0x326>
 800b28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b294:	d205      	bcs.n	800b2a2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b298:	b29a      	uxth	r2, r3
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60da      	str	r2, [r3, #12]
 800b2a0:	e002      	b.n	800b2a8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3750      	adds	r7, #80	@ 0x50
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800ce10 	.word	0x0800ce10

0800b2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38e:	f003 0320 	and.w	r3, r3, #32
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01a      	beq.n	800b3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3d6:	d10a      	bne.n	800b3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	605a      	str	r2, [r3, #4]
  }
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b098      	sub	sp, #96	@ 0x60
 800b420:	af02      	add	r7, sp, #8
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b42c:	f7f7 fa46 	bl	80028bc <HAL_GetTick>
 800b430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d12f      	bne.n	800b4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b448:	2200      	movs	r2, #0
 800b44a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f88e 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d022      	beq.n	800b4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b46e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b478:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e6      	bne.n	800b45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e063      	b.n	800b568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d149      	bne.n	800b542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f857 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d03c      	beq.n	800b542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e6      	bne.n	800b4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	60fb      	str	r3, [r7, #12]
   return(result);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f023 0301 	bic.w	r3, r3, #1
 800b510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b51a:	61fa      	str	r2, [r7, #28]
 800b51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	69b9      	ldr	r1, [r7, #24]
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	617b      	str	r3, [r7, #20]
   return(result);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e5      	bne.n	800b4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2220      	movs	r2, #32
 800b532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e012      	b.n	800b568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3758      	adds	r7, #88	@ 0x58
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b580:	e04f      	b.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d04b      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b58a:	f7f7 f997 	bl	80028bc <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	429a      	cmp	r2, r3
 800b598:	d302      	bcc.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e04e      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d037      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b80      	cmp	r3, #128	@ 0x80
 800b5b6:	d034      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b40      	cmp	r3, #64	@ 0x40
 800b5bc:	d031      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d110      	bne.n	800b5ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f972 	bl	800b8be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2208      	movs	r2, #8
 800b5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e029      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5fc:	d111      	bne.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 f958 	bl	800b8be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2220      	movs	r2, #32
 800b612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e00f      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	69da      	ldr	r2, [r3, #28]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	4013      	ands	r3, r2
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	429a      	cmp	r2, r3
 800b630:	bf0c      	ite	eq
 800b632:	2301      	moveq	r3, #1
 800b634:	2300      	movne	r3, #0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	461a      	mov	r2, r3
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d0a0      	beq.n	800b582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b098      	sub	sp, #96	@ 0x60
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2222      	movs	r2, #34	@ 0x22
 800b67a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b684:	2b00      	cmp	r3, #0
 800b686:	d07c      	beq.n	800b782 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68e:	4a68      	ldr	r2, [pc, #416]	@ (800b830 <UART_Start_Receive_DMA+0x1e4>)
 800b690:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b698:	4a66      	ldr	r2, [pc, #408]	@ (800b834 <UART_Start_Receive_DMA+0x1e8>)
 800b69a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a2:	4a65      	ldr	r2, [pc, #404]	@ (800b838 <UART_Start_Receive_DMA+0x1ec>)
 800b6a4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6b8:	d107      	bne.n	800b6ca <UART_Start_Receive_DMA+0x7e>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d034      	beq.n	800b744 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d02a      	beq.n	800b73c <UART_Start_Receive_DMA+0xf0>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d023      	beq.n	800b73c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800b702:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f8 f8fc 	bl	800392c <HAL_DMAEx_List_Start_IT>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b73a:	e014      	b.n	800b766 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b742:	e010      	b.n	800b766 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3324      	adds	r3, #36	@ 0x24
 800b750:	4619      	mov	r1, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b756:	461a      	mov	r2, r3
 800b758:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b75c:	f7f7 fb9a 	bl	8002e94 <HAL_DMA_Start_IT>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800b766:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d009      	beq.n	800b782 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2210      	movs	r2, #16
 800b772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2220      	movs	r2, #32
 800b77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e051      	b.n	800b826 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d018      	beq.n	800b7bc <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b79a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b79e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7aa:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b7ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b7b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e6      	bne.n	800b78a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ce:	f043 0301 	orr.w	r3, r3, #1
 800b7d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3308      	adds	r3, #8
 800b7da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b7dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b7de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e5      	bne.n	800b7bc <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	e853 3f00 	ldrex	r3, [r3]
 800b7fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b806:	653b      	str	r3, [r7, #80]	@ 0x50
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3308      	adds	r3, #8
 800b80e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b810:	627a      	str	r2, [r7, #36]	@ 0x24
 800b812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	6a39      	ldr	r1, [r7, #32]
 800b816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e5      	bne.n	800b7f0 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3760      	adds	r7, #96	@ 0x60
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	0800b98b 	.word	0x0800b98b
 800b834:	0800ba7d 	.word	0x0800ba7d
 800b838:	0800babb 	.word	0x0800babb

0800b83c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b08f      	sub	sp, #60	@ 0x3c
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	61fb      	str	r3, [r7, #28]
   return(result);
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b858:	637b      	str	r3, [r7, #52]	@ 0x34
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b864:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e6      	bne.n	800b844 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	60bb      	str	r3, [r7, #8]
   return(result);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b88c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b896:	61ba      	str	r2, [r7, #24]
 800b898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6979      	ldr	r1, [r7, #20]
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e5      	bne.n	800b876 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b8b2:	bf00      	nop
 800b8b4:	373c      	adds	r7, #60	@ 0x3c
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b095      	sub	sp, #84	@ 0x54
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ce:	e853 3f00 	ldrex	r3, [r3]
 800b8d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8ec:	e841 2300 	strex	r3, r2, [r1]
 800b8f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e6      	bne.n	800b8c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	61fb      	str	r3, [r7, #28]
   return(result);
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b90e:	f023 0301 	bic.w	r3, r3, #1
 800b912:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3308      	adds	r3, #8
 800b91a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b91c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b91e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e3      	bne.n	800b8f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b934:	2b01      	cmp	r3, #1
 800b936:	d118      	bne.n	800b96a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	e853 3f00 	ldrex	r3, [r3]
 800b944:	60bb      	str	r3, [r7, #8]
   return(result);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f023 0310 	bic.w	r3, r3, #16
 800b94c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b956:	61bb      	str	r3, [r7, #24]
 800b958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	613b      	str	r3, [r7, #16]
   return(result);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e6      	bne.n	800b938 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b97e:	bf00      	nop
 800b980:	3754      	adds	r7, #84	@ 0x54
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b096      	sub	sp, #88	@ 0x58
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b996:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b99c:	2b81      	cmp	r3, #129	@ 0x81
 800b99e:	d057      	beq.n	800ba50 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800b9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9ce:	e841 2300 	strex	r3, r2, [r1]
 800b9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1e6      	bne.n	800b9a8 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e4:	e853 3f00 	ldrex	r3, [r3]
 800b9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	f023 0301 	bic.w	r3, r3, #1
 800b9f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba02:	e841 2300 	strex	r3, r2, [r1]
 800ba06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1e5      	bne.n	800b9da <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba10:	2220      	movs	r2, #32
 800ba12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d118      	bne.n	800ba50 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 0310 	bic.w	r3, r3, #16
 800ba32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba3c:	61fb      	str	r3, [r7, #28]
 800ba3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	69b9      	ldr	r1, [r7, #24]
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	617b      	str	r3, [r7, #20]
   return(result);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e6      	bne.n	800ba1e <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba52:	2200      	movs	r2, #0
 800ba54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d107      	bne.n	800ba6e <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba64:	4619      	mov	r1, r3
 800ba66:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ba68:	f7ff fa7c 	bl	800af64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba6c:	e002      	b.n	800ba74 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800ba6e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ba70:	f7f5 ffe0 	bl	8001a34 <HAL_UART_RxCpltCallback>
}
 800ba74:	bf00      	nop
 800ba76:	3758      	adds	r7, #88	@ 0x58
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d109      	bne.n	800baac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba9e:	085b      	lsrs	r3, r3, #1
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4619      	mov	r1, r3
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff fa5d 	bl	800af64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baaa:	e002      	b.n	800bab2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7ff fa45 	bl	800af3c <HAL_UART_RxHalfCpltCallback>
}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bace:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae2:	2b80      	cmp	r3, #128	@ 0x80
 800bae4:	d109      	bne.n	800bafa <UART_DMAError+0x40>
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2b21      	cmp	r3, #33	@ 0x21
 800baea:	d106      	bne.n	800bafa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800baf4:	6978      	ldr	r0, [r7, #20]
 800baf6:	f7ff fea1 	bl	800b83c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb04:	2b40      	cmp	r3, #64	@ 0x40
 800bb06:	d109      	bne.n	800bb1c <UART_DMAError+0x62>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b22      	cmp	r3, #34	@ 0x22
 800bb0c:	d106      	bne.n	800bb1c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb16:	6978      	ldr	r0, [r7, #20]
 800bb18:	f7ff fed1 	bl	800b8be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb22:	f043 0210 	orr.w	r2, r3, #16
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb2c:	6978      	ldr	r0, [r7, #20]
 800bb2e:	f7ff fa0f 	bl	800af50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb32:	bf00      	nop
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f7ff f9fd 	bl	800af50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb56:	bf00      	nop
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b088      	sub	sp, #32
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	e853 3f00 	ldrex	r3, [r3]
 800bb72:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	6979      	ldr	r1, [r7, #20]
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	613b      	str	r3, [r7, #16]
   return(result);
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e6      	bne.n	800bb66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff f9be 	bl	800af28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbac:	bf00      	nop
 800bbae:	3720      	adds	r7, #32
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d101      	bne.n	800bc06 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc02:	2302      	movs	r3, #2
 800bc04:	e027      	b.n	800bc56 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2224      	movs	r2, #36	@ 0x24
 800bc12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0201 	bic.w	r2, r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d101      	bne.n	800bc7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc76:	2302      	movs	r3, #2
 800bc78:	e02d      	b.n	800bcd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2224      	movs	r2, #36	@ 0x24
 800bc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 0201 	bic.w	r2, r2, #1
 800bca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f850 	bl	800bd5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d101      	bne.n	800bcf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e02d      	b.n	800bd52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2224      	movs	r2, #36	@ 0x24
 800bd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0201 	bic.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f812 	bl	800bd5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2220      	movs	r2, #32
 800bd44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d108      	bne.n	800bd7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd7c:	e031      	b.n	800bde2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd7e:	2308      	movs	r3, #8
 800bd80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd82:	2308      	movs	r3, #8
 800bd84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	0e5b      	lsrs	r3, r3, #25
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	0f5b      	lsrs	r3, r3, #29
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0307 	and.w	r3, r3, #7
 800bda4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	7b3a      	ldrb	r2, [r7, #12]
 800bdaa:	4911      	ldr	r1, [pc, #68]	@ (800bdf0 <UARTEx_SetNbDataToProcess+0x94>)
 800bdac:	5c8a      	ldrb	r2, [r1, r2]
 800bdae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdb2:	7b3a      	ldrb	r2, [r7, #12]
 800bdb4:	490f      	ldr	r1, [pc, #60]	@ (800bdf4 <UARTEx_SetNbDataToProcess+0x98>)
 800bdb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	7b7a      	ldrb	r2, [r7, #13]
 800bdc8:	4909      	ldr	r1, [pc, #36]	@ (800bdf0 <UARTEx_SetNbDataToProcess+0x94>)
 800bdca:	5c8a      	ldrb	r2, [r1, r2]
 800bdcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bdd0:	7b7a      	ldrb	r2, [r7, #13]
 800bdd2:	4908      	ldr	r1, [pc, #32]	@ (800bdf4 <UARTEx_SetNbDataToProcess+0x98>)
 800bdd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	0800ce28 	.word	0x0800ce28
 800bdf4:	0800ce30 	.word	0x0800ce30

0800bdf8 <std>:
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	b510      	push	{r4, lr}
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	6083      	str	r3, [r0, #8]
 800be00:	8181      	strh	r1, [r0, #12]
 800be02:	4619      	mov	r1, r3
 800be04:	6643      	str	r3, [r0, #100]	@ 0x64
 800be06:	81c2      	strh	r2, [r0, #14]
 800be08:	2208      	movs	r2, #8
 800be0a:	6183      	str	r3, [r0, #24]
 800be0c:	e9c0 3300 	strd	r3, r3, [r0]
 800be10:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be14:	305c      	adds	r0, #92	@ 0x5c
 800be16:	f000 f9f9 	bl	800c20c <memset>
 800be1a:	4b0d      	ldr	r3, [pc, #52]	@ (800be50 <std+0x58>)
 800be1c:	6224      	str	r4, [r4, #32]
 800be1e:	6263      	str	r3, [r4, #36]	@ 0x24
 800be20:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <std+0x5c>)
 800be22:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be24:	4b0c      	ldr	r3, [pc, #48]	@ (800be58 <std+0x60>)
 800be26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be28:	4b0c      	ldr	r3, [pc, #48]	@ (800be5c <std+0x64>)
 800be2a:	6323      	str	r3, [r4, #48]	@ 0x30
 800be2c:	4b0c      	ldr	r3, [pc, #48]	@ (800be60 <std+0x68>)
 800be2e:	429c      	cmp	r4, r3
 800be30:	d006      	beq.n	800be40 <std+0x48>
 800be32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be36:	4294      	cmp	r4, r2
 800be38:	d002      	beq.n	800be40 <std+0x48>
 800be3a:	33d0      	adds	r3, #208	@ 0xd0
 800be3c:	429c      	cmp	r4, r3
 800be3e:	d105      	bne.n	800be4c <std+0x54>
 800be40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be48:	f000 ba58 	b.w	800c2fc <__retarget_lock_init_recursive>
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	bf00      	nop
 800be50:	0800c05d 	.word	0x0800c05d
 800be54:	0800c07f 	.word	0x0800c07f
 800be58:	0800c0b7 	.word	0x0800c0b7
 800be5c:	0800c0db 	.word	0x0800c0db
 800be60:	20000550 	.word	0x20000550

0800be64 <stdio_exit_handler>:
 800be64:	4a02      	ldr	r2, [pc, #8]	@ (800be70 <stdio_exit_handler+0xc>)
 800be66:	4903      	ldr	r1, [pc, #12]	@ (800be74 <stdio_exit_handler+0x10>)
 800be68:	4803      	ldr	r0, [pc, #12]	@ (800be78 <stdio_exit_handler+0x14>)
 800be6a:	f000 b869 	b.w	800bf40 <_fwalk_sglue>
 800be6e:	bf00      	nop
 800be70:	20000090 	.word	0x20000090
 800be74:	0800cba5 	.word	0x0800cba5
 800be78:	200000a0 	.word	0x200000a0

0800be7c <cleanup_stdio>:
 800be7c:	6841      	ldr	r1, [r0, #4]
 800be7e:	4b0c      	ldr	r3, [pc, #48]	@ (800beb0 <cleanup_stdio+0x34>)
 800be80:	4299      	cmp	r1, r3
 800be82:	b510      	push	{r4, lr}
 800be84:	4604      	mov	r4, r0
 800be86:	d001      	beq.n	800be8c <cleanup_stdio+0x10>
 800be88:	f000 fe8c 	bl	800cba4 <_fflush_r>
 800be8c:	68a1      	ldr	r1, [r4, #8]
 800be8e:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <cleanup_stdio+0x38>)
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <cleanup_stdio+0x1e>
 800be94:	4620      	mov	r0, r4
 800be96:	f000 fe85 	bl	800cba4 <_fflush_r>
 800be9a:	68e1      	ldr	r1, [r4, #12]
 800be9c:	4b06      	ldr	r3, [pc, #24]	@ (800beb8 <cleanup_stdio+0x3c>)
 800be9e:	4299      	cmp	r1, r3
 800bea0:	d004      	beq.n	800beac <cleanup_stdio+0x30>
 800bea2:	4620      	mov	r0, r4
 800bea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea8:	f000 be7c 	b.w	800cba4 <_fflush_r>
 800beac:	bd10      	pop	{r4, pc}
 800beae:	bf00      	nop
 800beb0:	20000550 	.word	0x20000550
 800beb4:	200005b8 	.word	0x200005b8
 800beb8:	20000620 	.word	0x20000620

0800bebc <global_stdio_init.part.0>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	4b0b      	ldr	r3, [pc, #44]	@ (800beec <global_stdio_init.part.0+0x30>)
 800bec0:	2104      	movs	r1, #4
 800bec2:	4c0b      	ldr	r4, [pc, #44]	@ (800bef0 <global_stdio_init.part.0+0x34>)
 800bec4:	4a0b      	ldr	r2, [pc, #44]	@ (800bef4 <global_stdio_init.part.0+0x38>)
 800bec6:	4620      	mov	r0, r4
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	2200      	movs	r2, #0
 800becc:	f7ff ff94 	bl	800bdf8 <std>
 800bed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bed4:	2201      	movs	r2, #1
 800bed6:	2109      	movs	r1, #9
 800bed8:	f7ff ff8e 	bl	800bdf8 <std>
 800bedc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bee0:	2202      	movs	r2, #2
 800bee2:	2112      	movs	r1, #18
 800bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee8:	f7ff bf86 	b.w	800bdf8 <std>
 800beec:	20000688 	.word	0x20000688
 800bef0:	20000550 	.word	0x20000550
 800bef4:	0800be65 	.word	0x0800be65

0800bef8 <__sfp_lock_acquire>:
 800bef8:	4801      	ldr	r0, [pc, #4]	@ (800bf00 <__sfp_lock_acquire+0x8>)
 800befa:	f000 ba00 	b.w	800c2fe <__retarget_lock_acquire_recursive>
 800befe:	bf00      	nop
 800bf00:	20000691 	.word	0x20000691

0800bf04 <__sfp_lock_release>:
 800bf04:	4801      	ldr	r0, [pc, #4]	@ (800bf0c <__sfp_lock_release+0x8>)
 800bf06:	f000 b9fb 	b.w	800c300 <__retarget_lock_release_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	20000691 	.word	0x20000691

0800bf10 <__sinit>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4604      	mov	r4, r0
 800bf14:	f7ff fff0 	bl	800bef8 <__sfp_lock_acquire>
 800bf18:	6a23      	ldr	r3, [r4, #32]
 800bf1a:	b11b      	cbz	r3, 800bf24 <__sinit+0x14>
 800bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf20:	f7ff bff0 	b.w	800bf04 <__sfp_lock_release>
 800bf24:	4b04      	ldr	r3, [pc, #16]	@ (800bf38 <__sinit+0x28>)
 800bf26:	6223      	str	r3, [r4, #32]
 800bf28:	4b04      	ldr	r3, [pc, #16]	@ (800bf3c <__sinit+0x2c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1f5      	bne.n	800bf1c <__sinit+0xc>
 800bf30:	f7ff ffc4 	bl	800bebc <global_stdio_init.part.0>
 800bf34:	e7f2      	b.n	800bf1c <__sinit+0xc>
 800bf36:	bf00      	nop
 800bf38:	0800be7d 	.word	0x0800be7d
 800bf3c:	20000688 	.word	0x20000688

0800bf40 <_fwalk_sglue>:
 800bf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf44:	4607      	mov	r7, r0
 800bf46:	4688      	mov	r8, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf50:	f1b9 0901 	subs.w	r9, r9, #1
 800bf54:	d505      	bpl.n	800bf62 <_fwalk_sglue+0x22>
 800bf56:	6824      	ldr	r4, [r4, #0]
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	d1f7      	bne.n	800bf4c <_fwalk_sglue+0xc>
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d907      	bls.n	800bf78 <_fwalk_sglue+0x38>
 800bf68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	d003      	beq.n	800bf78 <_fwalk_sglue+0x38>
 800bf70:	4629      	mov	r1, r5
 800bf72:	4638      	mov	r0, r7
 800bf74:	47c0      	blx	r8
 800bf76:	4306      	orrs	r6, r0
 800bf78:	3568      	adds	r5, #104	@ 0x68
 800bf7a:	e7e9      	b.n	800bf50 <_fwalk_sglue+0x10>

0800bf7c <iprintf>:
 800bf7c:	b40f      	push	{r0, r1, r2, r3}
 800bf7e:	b507      	push	{r0, r1, r2, lr}
 800bf80:	4906      	ldr	r1, [pc, #24]	@ (800bf9c <iprintf+0x20>)
 800bf82:	ab04      	add	r3, sp, #16
 800bf84:	6808      	ldr	r0, [r1, #0]
 800bf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf8a:	6881      	ldr	r1, [r0, #8]
 800bf8c:	9301      	str	r3, [sp, #4]
 800bf8e:	f000 fadb 	bl	800c548 <_vfiprintf_r>
 800bf92:	b003      	add	sp, #12
 800bf94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf98:	b004      	add	sp, #16
 800bf9a:	4770      	bx	lr
 800bf9c:	2000009c 	.word	0x2000009c

0800bfa0 <_puts_r>:
 800bfa0:	6a03      	ldr	r3, [r0, #32]
 800bfa2:	b570      	push	{r4, r5, r6, lr}
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460e      	mov	r6, r1
 800bfa8:	6884      	ldr	r4, [r0, #8]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <_puts_r+0x10>
 800bfac:	f7ff ffb0 	bl	800bf10 <__sinit>
 800bfb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfb2:	07db      	lsls	r3, r3, #31
 800bfb4:	d405      	bmi.n	800bfc2 <_puts_r+0x22>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	0598      	lsls	r0, r3, #22
 800bfba:	d402      	bmi.n	800bfc2 <_puts_r+0x22>
 800bfbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfbe:	f000 f99e 	bl	800c2fe <__retarget_lock_acquire_recursive>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	0719      	lsls	r1, r3, #28
 800bfc6:	d502      	bpl.n	800bfce <_puts_r+0x2e>
 800bfc8:	6923      	ldr	r3, [r4, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d135      	bne.n	800c03a <_puts_r+0x9a>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f000 f8c5 	bl	800c160 <__swsetup_r>
 800bfd6:	b380      	cbz	r0, 800c03a <_puts_r+0x9a>
 800bfd8:	f04f 35ff 	mov.w	r5, #4294967295
 800bfdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfde:	07da      	lsls	r2, r3, #31
 800bfe0:	d405      	bmi.n	800bfee <_puts_r+0x4e>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	d402      	bmi.n	800bfee <_puts_r+0x4e>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfea:	f000 f989 	bl	800c300 <__retarget_lock_release_recursive>
 800bfee:	4628      	mov	r0, r5
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da04      	bge.n	800c000 <_puts_r+0x60>
 800bff6:	69a2      	ldr	r2, [r4, #24]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	dc17      	bgt.n	800c02c <_puts_r+0x8c>
 800bffc:	290a      	cmp	r1, #10
 800bffe:	d015      	beq.n	800c02c <_puts_r+0x8c>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	1c5a      	adds	r2, r3, #1
 800c004:	6022      	str	r2, [r4, #0]
 800c006:	7019      	strb	r1, [r3, #0]
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c00e:	3b01      	subs	r3, #1
 800c010:	60a3      	str	r3, [r4, #8]
 800c012:	2900      	cmp	r1, #0
 800c014:	d1ed      	bne.n	800bff2 <_puts_r+0x52>
 800c016:	2b00      	cmp	r3, #0
 800c018:	da11      	bge.n	800c03e <_puts_r+0x9e>
 800c01a:	4622      	mov	r2, r4
 800c01c:	210a      	movs	r1, #10
 800c01e:	4628      	mov	r0, r5
 800c020:	f000 f85f 	bl	800c0e2 <__swbuf_r>
 800c024:	3001      	adds	r0, #1
 800c026:	d0d7      	beq.n	800bfd8 <_puts_r+0x38>
 800c028:	250a      	movs	r5, #10
 800c02a:	e7d7      	b.n	800bfdc <_puts_r+0x3c>
 800c02c:	4622      	mov	r2, r4
 800c02e:	4628      	mov	r0, r5
 800c030:	f000 f857 	bl	800c0e2 <__swbuf_r>
 800c034:	3001      	adds	r0, #1
 800c036:	d1e7      	bne.n	800c008 <_puts_r+0x68>
 800c038:	e7ce      	b.n	800bfd8 <_puts_r+0x38>
 800c03a:	3e01      	subs	r6, #1
 800c03c:	e7e4      	b.n	800c008 <_puts_r+0x68>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	6022      	str	r2, [r4, #0]
 800c044:	220a      	movs	r2, #10
 800c046:	701a      	strb	r2, [r3, #0]
 800c048:	e7ee      	b.n	800c028 <_puts_r+0x88>
	...

0800c04c <puts>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	@ (800c058 <puts+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f7ff bfa5 	b.w	800bfa0 <_puts_r>
 800c056:	bf00      	nop
 800c058:	2000009c 	.word	0x2000009c

0800c05c <__sread>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	460c      	mov	r4, r1
 800c060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c064:	f000 f8fc 	bl	800c260 <_read_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	bfab      	itete	ge
 800c06c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c06e:	89a3      	ldrhlt	r3, [r4, #12]
 800c070:	181b      	addge	r3, r3, r0
 800c072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c076:	bfac      	ite	ge
 800c078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c07a:	81a3      	strhlt	r3, [r4, #12]
 800c07c:	bd10      	pop	{r4, pc}

0800c07e <__swrite>:
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	461f      	mov	r7, r3
 800c084:	898b      	ldrh	r3, [r1, #12]
 800c086:	4605      	mov	r5, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	05db      	lsls	r3, r3, #23
 800c08c:	4616      	mov	r6, r2
 800c08e:	d505      	bpl.n	800c09c <__swrite+0x1e>
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c098:	f000 f8d0 	bl	800c23c <_lseek_r>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	4632      	mov	r2, r6
 800c0a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0aa:	81a3      	strh	r3, [r4, #12]
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b2:	f000 b8e7 	b.w	800c284 <_write_r>

0800c0b6 <__sseek>:
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	f000 f8bd 	bl	800c23c <_lseek_r>
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	bf15      	itete	ne
 800c0c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0d2:	81a3      	strheq	r3, [r4, #12]
 800c0d4:	bf18      	it	ne
 800c0d6:	81a3      	strhne	r3, [r4, #12]
 800c0d8:	bd10      	pop	{r4, pc}

0800c0da <__sclose>:
 800c0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0de:	f000 b89d 	b.w	800c21c <_close_r>

0800c0e2 <__swbuf_r>:
 800c0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e4:	460e      	mov	r6, r1
 800c0e6:	4614      	mov	r4, r2
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	b118      	cbz	r0, 800c0f4 <__swbuf_r+0x12>
 800c0ec:	6a03      	ldr	r3, [r0, #32]
 800c0ee:	b90b      	cbnz	r3, 800c0f4 <__swbuf_r+0x12>
 800c0f0:	f7ff ff0e 	bl	800bf10 <__sinit>
 800c0f4:	69a3      	ldr	r3, [r4, #24]
 800c0f6:	60a3      	str	r3, [r4, #8]
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	071a      	lsls	r2, r3, #28
 800c0fc:	d501      	bpl.n	800c102 <__swbuf_r+0x20>
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	b943      	cbnz	r3, 800c114 <__swbuf_r+0x32>
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f82b 	bl	800c160 <__swsetup_r>
 800c10a:	b118      	cbz	r0, 800c114 <__swbuf_r+0x32>
 800c10c:	f04f 37ff 	mov.w	r7, #4294967295
 800c110:	4638      	mov	r0, r7
 800c112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	b2f6      	uxtb	r6, r6
 800c118:	6922      	ldr	r2, [r4, #16]
 800c11a:	4637      	mov	r7, r6
 800c11c:	1a98      	subs	r0, r3, r2
 800c11e:	6963      	ldr	r3, [r4, #20]
 800c120:	4283      	cmp	r3, r0
 800c122:	dc05      	bgt.n	800c130 <__swbuf_r+0x4e>
 800c124:	4621      	mov	r1, r4
 800c126:	4628      	mov	r0, r5
 800c128:	f000 fd3c 	bl	800cba4 <_fflush_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d1ed      	bne.n	800c10c <__swbuf_r+0x2a>
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	3b01      	subs	r3, #1
 800c134:	60a3      	str	r3, [r4, #8]
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	6022      	str	r2, [r4, #0]
 800c13c:	701e      	strb	r6, [r3, #0]
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	6962      	ldr	r2, [r4, #20]
 800c142:	429a      	cmp	r2, r3
 800c144:	d004      	beq.n	800c150 <__swbuf_r+0x6e>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	07db      	lsls	r3, r3, #31
 800c14a:	d5e1      	bpl.n	800c110 <__swbuf_r+0x2e>
 800c14c:	2e0a      	cmp	r6, #10
 800c14e:	d1df      	bne.n	800c110 <__swbuf_r+0x2e>
 800c150:	4621      	mov	r1, r4
 800c152:	4628      	mov	r0, r5
 800c154:	f000 fd26 	bl	800cba4 <_fflush_r>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0d9      	beq.n	800c110 <__swbuf_r+0x2e>
 800c15c:	e7d6      	b.n	800c10c <__swbuf_r+0x2a>
	...

0800c160 <__swsetup_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4b29      	ldr	r3, [pc, #164]	@ (800c208 <__swsetup_r+0xa8>)
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	b118      	cbz	r0, 800c174 <__swsetup_r+0x14>
 800c16c:	6a03      	ldr	r3, [r0, #32]
 800c16e:	b90b      	cbnz	r3, 800c174 <__swsetup_r+0x14>
 800c170:	f7ff fece 	bl	800bf10 <__sinit>
 800c174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c178:	0719      	lsls	r1, r3, #28
 800c17a:	d422      	bmi.n	800c1c2 <__swsetup_r+0x62>
 800c17c:	06da      	lsls	r2, r3, #27
 800c17e:	d407      	bmi.n	800c190 <__swsetup_r+0x30>
 800c180:	2209      	movs	r2, #9
 800c182:	602a      	str	r2, [r5, #0]
 800c184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c188:	f04f 30ff 	mov.w	r0, #4294967295
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	e033      	b.n	800c1f8 <__swsetup_r+0x98>
 800c190:	0758      	lsls	r0, r3, #29
 800c192:	d512      	bpl.n	800c1ba <__swsetup_r+0x5a>
 800c194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c196:	b141      	cbz	r1, 800c1aa <__swsetup_r+0x4a>
 800c198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c19c:	4299      	cmp	r1, r3
 800c19e:	d002      	beq.n	800c1a6 <__swsetup_r+0x46>
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f000 f8af 	bl	800c304 <_free_r>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f043 0308 	orr.w	r3, r3, #8
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	b94b      	cbnz	r3, 800c1da <__swsetup_r+0x7a>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1d0:	d003      	beq.n	800c1da <__swsetup_r+0x7a>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f000 fd32 	bl	800cc3e <__smakebuf_r>
 800c1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1de:	f013 0201 	ands.w	r2, r3, #1
 800c1e2:	d00a      	beq.n	800c1fa <__swsetup_r+0x9a>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	60a2      	str	r2, [r4, #8]
 800c1e8:	6962      	ldr	r2, [r4, #20]
 800c1ea:	4252      	negs	r2, r2
 800c1ec:	61a2      	str	r2, [r4, #24]
 800c1ee:	6922      	ldr	r2, [r4, #16]
 800c1f0:	b942      	cbnz	r2, 800c204 <__swsetup_r+0xa4>
 800c1f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1f6:	d1c5      	bne.n	800c184 <__swsetup_r+0x24>
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	0799      	lsls	r1, r3, #30
 800c1fc:	bf58      	it	pl
 800c1fe:	6962      	ldrpl	r2, [r4, #20]
 800c200:	60a2      	str	r2, [r4, #8]
 800c202:	e7f4      	b.n	800c1ee <__swsetup_r+0x8e>
 800c204:	2000      	movs	r0, #0
 800c206:	e7f7      	b.n	800c1f8 <__swsetup_r+0x98>
 800c208:	2000009c 	.word	0x2000009c

0800c20c <memset>:
 800c20c:	4402      	add	r2, r0
 800c20e:	4603      	mov	r3, r0
 800c210:	4293      	cmp	r3, r2
 800c212:	d100      	bne.n	800c216 <memset+0xa>
 800c214:	4770      	bx	lr
 800c216:	f803 1b01 	strb.w	r1, [r3], #1
 800c21a:	e7f9      	b.n	800c210 <memset+0x4>

0800c21c <_close_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	2300      	movs	r3, #0
 800c220:	4d05      	ldr	r5, [pc, #20]	@ (800c238 <_close_r+0x1c>)
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f5 fdb5 	bl	8001d96 <_close>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_close_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_close_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	2000068c 	.word	0x2000068c

0800c23c <_lseek_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4604      	mov	r4, r0
 800c240:	4d06      	ldr	r5, [pc, #24]	@ (800c25c <_lseek_r+0x20>)
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 fdca 	bl	8001de4 <_lseek>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_lseek_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_lseek_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	2000068c 	.word	0x2000068c

0800c260 <_read_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4604      	mov	r4, r0
 800c264:	4d06      	ldr	r5, [pc, #24]	@ (800c280 <_read_r+0x20>)
 800c266:	4608      	mov	r0, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	602a      	str	r2, [r5, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	f7f5 fd58 	bl	8001d24 <_read>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_read_r+0x1e>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_read_r+0x1e>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	2000068c 	.word	0x2000068c

0800c284 <_write_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4604      	mov	r4, r0
 800c288:	4d06      	ldr	r5, [pc, #24]	@ (800c2a4 <_write_r+0x20>)
 800c28a:	4608      	mov	r0, r1
 800c28c:	4611      	mov	r1, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	602a      	str	r2, [r5, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	f7f5 fd63 	bl	8001d5e <_write>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_write_r+0x1e>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_write_r+0x1e>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	2000068c 	.word	0x2000068c

0800c2a8 <__errno>:
 800c2a8:	4b01      	ldr	r3, [pc, #4]	@ (800c2b0 <__errno+0x8>)
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	2000009c 	.word	0x2000009c

0800c2b4 <__libc_init_array>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c2ec <__libc_init_array+0x38>)
 800c2b8:	2600      	movs	r6, #0
 800c2ba:	4c0d      	ldr	r4, [pc, #52]	@ (800c2f0 <__libc_init_array+0x3c>)
 800c2bc:	1b64      	subs	r4, r4, r5
 800c2be:	10a4      	asrs	r4, r4, #2
 800c2c0:	42a6      	cmp	r6, r4
 800c2c2:	d109      	bne.n	800c2d8 <__libc_init_array+0x24>
 800c2c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c2f4 <__libc_init_array+0x40>)
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	4c0b      	ldr	r4, [pc, #44]	@ (800c2f8 <__libc_init_array+0x44>)
 800c2ca:	f000 fd35 	bl	800cd38 <_init>
 800c2ce:	1b64      	subs	r4, r4, r5
 800c2d0:	10a4      	asrs	r4, r4, #2
 800c2d2:	42a6      	cmp	r6, r4
 800c2d4:	d105      	bne.n	800c2e2 <__libc_init_array+0x2e>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2dc:	3601      	adds	r6, #1
 800c2de:	4798      	blx	r3
 800c2e0:	e7ee      	b.n	800c2c0 <__libc_init_array+0xc>
 800c2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e6:	3601      	adds	r6, #1
 800c2e8:	4798      	blx	r3
 800c2ea:	e7f2      	b.n	800c2d2 <__libc_init_array+0x1e>
 800c2ec:	0800ce74 	.word	0x0800ce74
 800c2f0:	0800ce74 	.word	0x0800ce74
 800c2f4:	0800ce74 	.word	0x0800ce74
 800c2f8:	0800ce78 	.word	0x0800ce78

0800c2fc <__retarget_lock_init_recursive>:
 800c2fc:	4770      	bx	lr

0800c2fe <__retarget_lock_acquire_recursive>:
 800c2fe:	4770      	bx	lr

0800c300 <__retarget_lock_release_recursive>:
 800c300:	4770      	bx	lr
	...

0800c304 <_free_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4605      	mov	r5, r0
 800c308:	2900      	cmp	r1, #0
 800c30a:	d041      	beq.n	800c390 <_free_r+0x8c>
 800c30c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c310:	1f0c      	subs	r4, r1, #4
 800c312:	2b00      	cmp	r3, #0
 800c314:	bfb8      	it	lt
 800c316:	18e4      	addlt	r4, r4, r3
 800c318:	f000 f8e0 	bl	800c4dc <__malloc_lock>
 800c31c:	4a1d      	ldr	r2, [pc, #116]	@ (800c394 <_free_r+0x90>)
 800c31e:	6813      	ldr	r3, [r2, #0]
 800c320:	b933      	cbnz	r3, 800c330 <_free_r+0x2c>
 800c322:	6063      	str	r3, [r4, #4]
 800c324:	6014      	str	r4, [r2, #0]
 800c326:	4628      	mov	r0, r5
 800c328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c32c:	f000 b8dc 	b.w	800c4e8 <__malloc_unlock>
 800c330:	42a3      	cmp	r3, r4
 800c332:	d908      	bls.n	800c346 <_free_r+0x42>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	1821      	adds	r1, r4, r0
 800c338:	428b      	cmp	r3, r1
 800c33a:	bf01      	itttt	eq
 800c33c:	6819      	ldreq	r1, [r3, #0]
 800c33e:	685b      	ldreq	r3, [r3, #4]
 800c340:	1809      	addeq	r1, r1, r0
 800c342:	6021      	streq	r1, [r4, #0]
 800c344:	e7ed      	b.n	800c322 <_free_r+0x1e>
 800c346:	461a      	mov	r2, r3
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	b10b      	cbz	r3, 800c350 <_free_r+0x4c>
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	d9fa      	bls.n	800c346 <_free_r+0x42>
 800c350:	6811      	ldr	r1, [r2, #0]
 800c352:	1850      	adds	r0, r2, r1
 800c354:	42a0      	cmp	r0, r4
 800c356:	d10b      	bne.n	800c370 <_free_r+0x6c>
 800c358:	6820      	ldr	r0, [r4, #0]
 800c35a:	4401      	add	r1, r0
 800c35c:	1850      	adds	r0, r2, r1
 800c35e:	6011      	str	r1, [r2, #0]
 800c360:	4283      	cmp	r3, r0
 800c362:	d1e0      	bne.n	800c326 <_free_r+0x22>
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	4408      	add	r0, r1
 800c36a:	6053      	str	r3, [r2, #4]
 800c36c:	6010      	str	r0, [r2, #0]
 800c36e:	e7da      	b.n	800c326 <_free_r+0x22>
 800c370:	d902      	bls.n	800c378 <_free_r+0x74>
 800c372:	230c      	movs	r3, #12
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	e7d6      	b.n	800c326 <_free_r+0x22>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	1821      	adds	r1, r4, r0
 800c37c:	428b      	cmp	r3, r1
 800c37e:	bf02      	ittt	eq
 800c380:	6819      	ldreq	r1, [r3, #0]
 800c382:	685b      	ldreq	r3, [r3, #4]
 800c384:	1809      	addeq	r1, r1, r0
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	bf08      	it	eq
 800c38a:	6021      	streq	r1, [r4, #0]
 800c38c:	6054      	str	r4, [r2, #4]
 800c38e:	e7ca      	b.n	800c326 <_free_r+0x22>
 800c390:	bd38      	pop	{r3, r4, r5, pc}
 800c392:	bf00      	nop
 800c394:	20000698 	.word	0x20000698

0800c398 <sbrk_aligned>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	4e0f      	ldr	r6, [pc, #60]	@ (800c3d8 <sbrk_aligned+0x40>)
 800c39c:	460c      	mov	r4, r1
 800c39e:	4605      	mov	r5, r0
 800c3a0:	6831      	ldr	r1, [r6, #0]
 800c3a2:	b911      	cbnz	r1, 800c3aa <sbrk_aligned+0x12>
 800c3a4:	f000 fcaa 	bl	800ccfc <_sbrk_r>
 800c3a8:	6030      	str	r0, [r6, #0]
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f000 fca5 	bl	800ccfc <_sbrk_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	d103      	bne.n	800c3be <sbrk_aligned+0x26>
 800c3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	bd70      	pop	{r4, r5, r6, pc}
 800c3be:	1cc4      	adds	r4, r0, #3
 800c3c0:	f024 0403 	bic.w	r4, r4, #3
 800c3c4:	42a0      	cmp	r0, r4
 800c3c6:	d0f8      	beq.n	800c3ba <sbrk_aligned+0x22>
 800c3c8:	1a21      	subs	r1, r4, r0
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 fc96 	bl	800ccfc <_sbrk_r>
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	d1f2      	bne.n	800c3ba <sbrk_aligned+0x22>
 800c3d4:	e7ef      	b.n	800c3b6 <sbrk_aligned+0x1e>
 800c3d6:	bf00      	nop
 800c3d8:	20000694 	.word	0x20000694

0800c3dc <_malloc_r>:
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	1ccd      	adds	r5, r1, #3
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	f025 0503 	bic.w	r5, r5, #3
 800c3e8:	3508      	adds	r5, #8
 800c3ea:	2d0c      	cmp	r5, #12
 800c3ec:	bf38      	it	cc
 800c3ee:	250c      	movcc	r5, #12
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	db01      	blt.n	800c3f8 <_malloc_r+0x1c>
 800c3f4:	42a9      	cmp	r1, r5
 800c3f6:	d904      	bls.n	800c402 <_malloc_r+0x26>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	6033      	str	r3, [r6, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4d8 <_malloc_r+0xfc>
 800c406:	f000 f869 	bl	800c4dc <__malloc_lock>
 800c40a:	f8d8 3000 	ldr.w	r3, [r8]
 800c40e:	461c      	mov	r4, r3
 800c410:	bb44      	cbnz	r4, 800c464 <_malloc_r+0x88>
 800c412:	4629      	mov	r1, r5
 800c414:	4630      	mov	r0, r6
 800c416:	f7ff ffbf 	bl	800c398 <sbrk_aligned>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	4604      	mov	r4, r0
 800c41e:	d158      	bne.n	800c4d2 <_malloc_r+0xf6>
 800c420:	f8d8 4000 	ldr.w	r4, [r8]
 800c424:	4627      	mov	r7, r4
 800c426:	2f00      	cmp	r7, #0
 800c428:	d143      	bne.n	800c4b2 <_malloc_r+0xd6>
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	d04b      	beq.n	800c4c6 <_malloc_r+0xea>
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	4639      	mov	r1, r7
 800c432:	4630      	mov	r0, r6
 800c434:	eb04 0903 	add.w	r9, r4, r3
 800c438:	f000 fc60 	bl	800ccfc <_sbrk_r>
 800c43c:	4581      	cmp	r9, r0
 800c43e:	d142      	bne.n	800c4c6 <_malloc_r+0xea>
 800c440:	6821      	ldr	r1, [r4, #0]
 800c442:	4630      	mov	r0, r6
 800c444:	1a6d      	subs	r5, r5, r1
 800c446:	4629      	mov	r1, r5
 800c448:	f7ff ffa6 	bl	800c398 <sbrk_aligned>
 800c44c:	3001      	adds	r0, #1
 800c44e:	d03a      	beq.n	800c4c6 <_malloc_r+0xea>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	442b      	add	r3, r5
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	f8d8 3000 	ldr.w	r3, [r8]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	bb62      	cbnz	r2, 800c4b8 <_malloc_r+0xdc>
 800c45e:	f8c8 7000 	str.w	r7, [r8]
 800c462:	e00f      	b.n	800c484 <_malloc_r+0xa8>
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	1b52      	subs	r2, r2, r5
 800c468:	d420      	bmi.n	800c4ac <_malloc_r+0xd0>
 800c46a:	2a0b      	cmp	r2, #11
 800c46c:	d917      	bls.n	800c49e <_malloc_r+0xc2>
 800c46e:	1961      	adds	r1, r4, r5
 800c470:	42a3      	cmp	r3, r4
 800c472:	6025      	str	r5, [r4, #0]
 800c474:	bf18      	it	ne
 800c476:	6059      	strne	r1, [r3, #4]
 800c478:	6863      	ldr	r3, [r4, #4]
 800c47a:	bf08      	it	eq
 800c47c:	f8c8 1000 	streq.w	r1, [r8]
 800c480:	5162      	str	r2, [r4, r5]
 800c482:	604b      	str	r3, [r1, #4]
 800c484:	4630      	mov	r0, r6
 800c486:	f000 f82f 	bl	800c4e8 <__malloc_unlock>
 800c48a:	f104 000b 	add.w	r0, r4, #11
 800c48e:	1d23      	adds	r3, r4, #4
 800c490:	f020 0007 	bic.w	r0, r0, #7
 800c494:	1ac2      	subs	r2, r0, r3
 800c496:	bf1c      	itt	ne
 800c498:	1a1b      	subne	r3, r3, r0
 800c49a:	50a3      	strne	r3, [r4, r2]
 800c49c:	e7af      	b.n	800c3fe <_malloc_r+0x22>
 800c49e:	6862      	ldr	r2, [r4, #4]
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	bf0c      	ite	eq
 800c4a4:	f8c8 2000 	streq.w	r2, [r8]
 800c4a8:	605a      	strne	r2, [r3, #4]
 800c4aa:	e7eb      	b.n	800c484 <_malloc_r+0xa8>
 800c4ac:	4623      	mov	r3, r4
 800c4ae:	6864      	ldr	r4, [r4, #4]
 800c4b0:	e7ae      	b.n	800c410 <_malloc_r+0x34>
 800c4b2:	463c      	mov	r4, r7
 800c4b4:	687f      	ldr	r7, [r7, #4]
 800c4b6:	e7b6      	b.n	800c426 <_malloc_r+0x4a>
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	d1fb      	bne.n	800c4b8 <_malloc_r+0xdc>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	6053      	str	r3, [r2, #4]
 800c4c4:	e7de      	b.n	800c484 <_malloc_r+0xa8>
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	6033      	str	r3, [r6, #0]
 800c4cc:	f000 f80c 	bl	800c4e8 <__malloc_unlock>
 800c4d0:	e794      	b.n	800c3fc <_malloc_r+0x20>
 800c4d2:	6005      	str	r5, [r0, #0]
 800c4d4:	e7d6      	b.n	800c484 <_malloc_r+0xa8>
 800c4d6:	bf00      	nop
 800c4d8:	20000698 	.word	0x20000698

0800c4dc <__malloc_lock>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	@ (800c4e4 <__malloc_lock+0x8>)
 800c4de:	f7ff bf0e 	b.w	800c2fe <__retarget_lock_acquire_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	20000690 	.word	0x20000690

0800c4e8 <__malloc_unlock>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	@ (800c4f0 <__malloc_unlock+0x8>)
 800c4ea:	f7ff bf09 	b.w	800c300 <__retarget_lock_release_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	20000690 	.word	0x20000690

0800c4f4 <__sfputc_r>:
 800c4f4:	6893      	ldr	r3, [r2, #8]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	6093      	str	r3, [r2, #8]
 800c4fc:	b410      	push	{r4}
 800c4fe:	da08      	bge.n	800c512 <__sfputc_r+0x1e>
 800c500:	6994      	ldr	r4, [r2, #24]
 800c502:	42a3      	cmp	r3, r4
 800c504:	db01      	blt.n	800c50a <__sfputc_r+0x16>
 800c506:	290a      	cmp	r1, #10
 800c508:	d103      	bne.n	800c512 <__sfputc_r+0x1e>
 800c50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c50e:	f7ff bde8 	b.w	800c0e2 <__swbuf_r>
 800c512:	6813      	ldr	r3, [r2, #0]
 800c514:	1c58      	adds	r0, r3, #1
 800c516:	6010      	str	r0, [r2, #0]
 800c518:	4608      	mov	r0, r1
 800c51a:	7019      	strb	r1, [r3, #0]
 800c51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <__sfputs_r>:
 800c522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c524:	4606      	mov	r6, r0
 800c526:	460f      	mov	r7, r1
 800c528:	4614      	mov	r4, r2
 800c52a:	18d5      	adds	r5, r2, r3
 800c52c:	42ac      	cmp	r4, r5
 800c52e:	d101      	bne.n	800c534 <__sfputs_r+0x12>
 800c530:	2000      	movs	r0, #0
 800c532:	e007      	b.n	800c544 <__sfputs_r+0x22>
 800c534:	463a      	mov	r2, r7
 800c536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7ff ffda 	bl	800c4f4 <__sfputc_r>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d1f3      	bne.n	800c52c <__sfputs_r+0xa>
 800c544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c548 <_vfiprintf_r>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	460d      	mov	r5, r1
 800c54e:	b09d      	sub	sp, #116	@ 0x74
 800c550:	4614      	mov	r4, r2
 800c552:	4698      	mov	r8, r3
 800c554:	4606      	mov	r6, r0
 800c556:	b118      	cbz	r0, 800c560 <_vfiprintf_r+0x18>
 800c558:	6a03      	ldr	r3, [r0, #32]
 800c55a:	b90b      	cbnz	r3, 800c560 <_vfiprintf_r+0x18>
 800c55c:	f7ff fcd8 	bl	800bf10 <__sinit>
 800c560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c562:	07d9      	lsls	r1, r3, #31
 800c564:	d405      	bmi.n	800c572 <_vfiprintf_r+0x2a>
 800c566:	89ab      	ldrh	r3, [r5, #12]
 800c568:	059a      	lsls	r2, r3, #22
 800c56a:	d402      	bmi.n	800c572 <_vfiprintf_r+0x2a>
 800c56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c56e:	f7ff fec6 	bl	800c2fe <__retarget_lock_acquire_recursive>
 800c572:	89ab      	ldrh	r3, [r5, #12]
 800c574:	071b      	lsls	r3, r3, #28
 800c576:	d501      	bpl.n	800c57c <_vfiprintf_r+0x34>
 800c578:	692b      	ldr	r3, [r5, #16]
 800c57a:	b99b      	cbnz	r3, 800c5a4 <_vfiprintf_r+0x5c>
 800c57c:	4629      	mov	r1, r5
 800c57e:	4630      	mov	r0, r6
 800c580:	f7ff fdee 	bl	800c160 <__swsetup_r>
 800c584:	b170      	cbz	r0, 800c5a4 <_vfiprintf_r+0x5c>
 800c586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c588:	07dc      	lsls	r4, r3, #31
 800c58a:	d504      	bpl.n	800c596 <_vfiprintf_r+0x4e>
 800c58c:	f04f 30ff 	mov.w	r0, #4294967295
 800c590:	b01d      	add	sp, #116	@ 0x74
 800c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	0598      	lsls	r0, r3, #22
 800c59a:	d4f7      	bmi.n	800c58c <_vfiprintf_r+0x44>
 800c59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c59e:	f7ff feaf 	bl	800c300 <__retarget_lock_release_recursive>
 800c5a2:	e7f3      	b.n	800c58c <_vfiprintf_r+0x44>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5aa:	f04f 0901 	mov.w	r9, #1
 800c5ae:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c764 <_vfiprintf_r+0x21c>
 800c5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5ba:	2330      	movs	r3, #48	@ 0x30
 800c5bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	469a      	mov	sl, r3
 800c5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c8:	b10a      	cbz	r2, 800c5ce <_vfiprintf_r+0x86>
 800c5ca:	2a25      	cmp	r2, #37	@ 0x25
 800c5cc:	d1f9      	bne.n	800c5c2 <_vfiprintf_r+0x7a>
 800c5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d2:	d00b      	beq.n	800c5ec <_vfiprintf_r+0xa4>
 800c5d4:	465b      	mov	r3, fp
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7ff ffa1 	bl	800c522 <__sfputs_r>
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f000 80a7 	beq.w	800c734 <_vfiprintf_r+0x1ec>
 800c5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e8:	445a      	add	r2, fp
 800c5ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 809f 	beq.w	800c734 <_vfiprintf_r+0x1ec>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5fc:	f10a 0a01 	add.w	sl, sl, #1
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	9307      	str	r3, [sp, #28]
 800c604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c608:	931a      	str	r3, [sp, #104]	@ 0x68
 800c60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60e:	4654      	mov	r4, sl
 800c610:	2205      	movs	r2, #5
 800c612:	4854      	ldr	r0, [pc, #336]	@ (800c764 <_vfiprintf_r+0x21c>)
 800c614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c618:	f000 fb80 	bl	800cd1c <memchr>
 800c61c:	9a04      	ldr	r2, [sp, #16]
 800c61e:	b9d8      	cbnz	r0, 800c658 <_vfiprintf_r+0x110>
 800c620:	06d1      	lsls	r1, r2, #27
 800c622:	bf44      	itt	mi
 800c624:	2320      	movmi	r3, #32
 800c626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c62a:	0713      	lsls	r3, r2, #28
 800c62c:	bf44      	itt	mi
 800c62e:	232b      	movmi	r3, #43	@ 0x2b
 800c630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c634:	f89a 3000 	ldrb.w	r3, [sl]
 800c638:	2b2a      	cmp	r3, #42	@ 0x2a
 800c63a:	d015      	beq.n	800c668 <_vfiprintf_r+0x120>
 800c63c:	9a07      	ldr	r2, [sp, #28]
 800c63e:	4654      	mov	r4, sl
 800c640:	2000      	movs	r0, #0
 800c642:	f04f 0c0a 	mov.w	ip, #10
 800c646:	4621      	mov	r1, r4
 800c648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c64c:	3b30      	subs	r3, #48	@ 0x30
 800c64e:	2b09      	cmp	r3, #9
 800c650:	d94b      	bls.n	800c6ea <_vfiprintf_r+0x1a2>
 800c652:	b1b0      	cbz	r0, 800c682 <_vfiprintf_r+0x13a>
 800c654:	9207      	str	r2, [sp, #28]
 800c656:	e014      	b.n	800c682 <_vfiprintf_r+0x13a>
 800c658:	eba0 0308 	sub.w	r3, r0, r8
 800c65c:	46a2      	mov	sl, r4
 800c65e:	fa09 f303 	lsl.w	r3, r9, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	e7d2      	b.n	800c60e <_vfiprintf_r+0xc6>
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	1d19      	adds	r1, r3, #4
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	9103      	str	r1, [sp, #12]
 800c672:	bfbb      	ittet	lt
 800c674:	425b      	neglt	r3, r3
 800c676:	f042 0202 	orrlt.w	r2, r2, #2
 800c67a:	9307      	strge	r3, [sp, #28]
 800c67c:	9307      	strlt	r3, [sp, #28]
 800c67e:	bfb8      	it	lt
 800c680:	9204      	strlt	r2, [sp, #16]
 800c682:	7823      	ldrb	r3, [r4, #0]
 800c684:	2b2e      	cmp	r3, #46	@ 0x2e
 800c686:	d10a      	bne.n	800c69e <_vfiprintf_r+0x156>
 800c688:	7863      	ldrb	r3, [r4, #1]
 800c68a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c68c:	d132      	bne.n	800c6f4 <_vfiprintf_r+0x1ac>
 800c68e:	9b03      	ldr	r3, [sp, #12]
 800c690:	3402      	adds	r4, #2
 800c692:	1d1a      	adds	r2, r3, #4
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c69a:	9203      	str	r2, [sp, #12]
 800c69c:	9305      	str	r3, [sp, #20]
 800c69e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c774 <_vfiprintf_r+0x22c>
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	7821      	ldrb	r1, [r4, #0]
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	f000 fb38 	bl	800cd1c <memchr>
 800c6ac:	b138      	cbz	r0, 800c6be <_vfiprintf_r+0x176>
 800c6ae:	eba0 000a 	sub.w	r0, r0, sl
 800c6b2:	2240      	movs	r2, #64	@ 0x40
 800c6b4:	9b04      	ldr	r3, [sp, #16]
 800c6b6:	3401      	adds	r4, #1
 800c6b8:	4082      	lsls	r2, r0
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	2206      	movs	r2, #6
 800c6c4:	4828      	ldr	r0, [pc, #160]	@ (800c768 <_vfiprintf_r+0x220>)
 800c6c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6ca:	f000 fb27 	bl	800cd1c <memchr>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d03f      	beq.n	800c752 <_vfiprintf_r+0x20a>
 800c6d2:	4b26      	ldr	r3, [pc, #152]	@ (800c76c <_vfiprintf_r+0x224>)
 800c6d4:	bb1b      	cbnz	r3, 800c71e <_vfiprintf_r+0x1d6>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	3307      	adds	r3, #7
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	3308      	adds	r3, #8
 800c6e0:	9303      	str	r3, [sp, #12]
 800c6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e4:	443b      	add	r3, r7
 800c6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e8:	e76a      	b.n	800c5c0 <_vfiprintf_r+0x78>
 800c6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	e7a8      	b.n	800c646 <_vfiprintf_r+0xfe>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	f04f 0c0a 	mov.w	ip, #10
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	9305      	str	r3, [sp, #20]
 800c700:	4620      	mov	r0, r4
 800c702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c706:	3a30      	subs	r2, #48	@ 0x30
 800c708:	2a09      	cmp	r2, #9
 800c70a:	d903      	bls.n	800c714 <_vfiprintf_r+0x1cc>
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0c6      	beq.n	800c69e <_vfiprintf_r+0x156>
 800c710:	9105      	str	r1, [sp, #20]
 800c712:	e7c4      	b.n	800c69e <_vfiprintf_r+0x156>
 800c714:	fb0c 2101 	mla	r1, ip, r1, r2
 800c718:	4604      	mov	r4, r0
 800c71a:	2301      	movs	r3, #1
 800c71c:	e7f0      	b.n	800c700 <_vfiprintf_r+0x1b8>
 800c71e:	ab03      	add	r3, sp, #12
 800c720:	462a      	mov	r2, r5
 800c722:	a904      	add	r1, sp, #16
 800c724:	4630      	mov	r0, r6
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	4b11      	ldr	r3, [pc, #68]	@ (800c770 <_vfiprintf_r+0x228>)
 800c72a:	f3af 8000 	nop.w
 800c72e:	4607      	mov	r7, r0
 800c730:	1c78      	adds	r0, r7, #1
 800c732:	d1d6      	bne.n	800c6e2 <_vfiprintf_r+0x19a>
 800c734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c736:	07d9      	lsls	r1, r3, #31
 800c738:	d405      	bmi.n	800c746 <_vfiprintf_r+0x1fe>
 800c73a:	89ab      	ldrh	r3, [r5, #12]
 800c73c:	059a      	lsls	r2, r3, #22
 800c73e:	d402      	bmi.n	800c746 <_vfiprintf_r+0x1fe>
 800c740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c742:	f7ff fddd 	bl	800c300 <__retarget_lock_release_recursive>
 800c746:	89ab      	ldrh	r3, [r5, #12]
 800c748:	065b      	lsls	r3, r3, #25
 800c74a:	f53f af1f 	bmi.w	800c58c <_vfiprintf_r+0x44>
 800c74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c750:	e71e      	b.n	800c590 <_vfiprintf_r+0x48>
 800c752:	ab03      	add	r3, sp, #12
 800c754:	462a      	mov	r2, r5
 800c756:	a904      	add	r1, sp, #16
 800c758:	4630      	mov	r0, r6
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	4b04      	ldr	r3, [pc, #16]	@ (800c770 <_vfiprintf_r+0x228>)
 800c75e:	f000 f87d 	bl	800c85c <_printf_i>
 800c762:	e7e4      	b.n	800c72e <_vfiprintf_r+0x1e6>
 800c764:	0800ce38 	.word	0x0800ce38
 800c768:	0800ce42 	.word	0x0800ce42
 800c76c:	00000000 	.word	0x00000000
 800c770:	0800c523 	.word	0x0800c523
 800c774:	0800ce3e 	.word	0x0800ce3e

0800c778 <_printf_common>:
 800c778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c77c:	4616      	mov	r6, r2
 800c77e:	4698      	mov	r8, r3
 800c780:	688a      	ldr	r2, [r1, #8]
 800c782:	4607      	mov	r7, r0
 800c784:	690b      	ldr	r3, [r1, #16]
 800c786:	460c      	mov	r4, r1
 800c788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c78c:	4293      	cmp	r3, r2
 800c78e:	bfb8      	it	lt
 800c790:	4613      	movlt	r3, r2
 800c792:	6033      	str	r3, [r6, #0]
 800c794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c798:	b10a      	cbz	r2, 800c79e <_printf_common+0x26>
 800c79a:	3301      	adds	r3, #1
 800c79c:	6033      	str	r3, [r6, #0]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	0699      	lsls	r1, r3, #26
 800c7a2:	bf42      	ittt	mi
 800c7a4:	6833      	ldrmi	r3, [r6, #0]
 800c7a6:	3302      	addmi	r3, #2
 800c7a8:	6033      	strmi	r3, [r6, #0]
 800c7aa:	6825      	ldr	r5, [r4, #0]
 800c7ac:	f015 0506 	ands.w	r5, r5, #6
 800c7b0:	d106      	bne.n	800c7c0 <_printf_common+0x48>
 800c7b2:	f104 0a19 	add.w	sl, r4, #25
 800c7b6:	68e3      	ldr	r3, [r4, #12]
 800c7b8:	6832      	ldr	r2, [r6, #0]
 800c7ba:	1a9b      	subs	r3, r3, r2
 800c7bc:	42ab      	cmp	r3, r5
 800c7be:	dc2b      	bgt.n	800c818 <_printf_common+0xa0>
 800c7c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7c4:	6822      	ldr	r2, [r4, #0]
 800c7c6:	3b00      	subs	r3, #0
 800c7c8:	bf18      	it	ne
 800c7ca:	2301      	movne	r3, #1
 800c7cc:	0692      	lsls	r2, r2, #26
 800c7ce:	d430      	bmi.n	800c832 <_printf_common+0xba>
 800c7d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7d4:	4641      	mov	r1, r8
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	47c8      	blx	r9
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d023      	beq.n	800c826 <_printf_common+0xae>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	341a      	adds	r4, #26
 800c7e2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c7e6:	f003 0306 	and.w	r3, r3, #6
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	bf0a      	itet	eq
 800c7ee:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c7f2:	2500      	movne	r5, #0
 800c7f4:	6833      	ldreq	r3, [r6, #0]
 800c7f6:	f04f 0600 	mov.w	r6, #0
 800c7fa:	bf08      	it	eq
 800c7fc:	1aed      	subeq	r5, r5, r3
 800c7fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c802:	bf08      	it	eq
 800c804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c808:	4293      	cmp	r3, r2
 800c80a:	bfc4      	itt	gt
 800c80c:	1a9b      	subgt	r3, r3, r2
 800c80e:	18ed      	addgt	r5, r5, r3
 800c810:	42b5      	cmp	r5, r6
 800c812:	d11a      	bne.n	800c84a <_printf_common+0xd2>
 800c814:	2000      	movs	r0, #0
 800c816:	e008      	b.n	800c82a <_printf_common+0xb2>
 800c818:	2301      	movs	r3, #1
 800c81a:	4652      	mov	r2, sl
 800c81c:	4641      	mov	r1, r8
 800c81e:	4638      	mov	r0, r7
 800c820:	47c8      	blx	r9
 800c822:	3001      	adds	r0, #1
 800c824:	d103      	bne.n	800c82e <_printf_common+0xb6>
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82e:	3501      	adds	r5, #1
 800c830:	e7c1      	b.n	800c7b6 <_printf_common+0x3e>
 800c832:	18e1      	adds	r1, r4, r3
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	2030      	movs	r0, #48	@ 0x30
 800c838:	3302      	adds	r3, #2
 800c83a:	4422      	add	r2, r4
 800c83c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c848:	e7c2      	b.n	800c7d0 <_printf_common+0x58>
 800c84a:	2301      	movs	r3, #1
 800c84c:	4622      	mov	r2, r4
 800c84e:	4641      	mov	r1, r8
 800c850:	4638      	mov	r0, r7
 800c852:	47c8      	blx	r9
 800c854:	3001      	adds	r0, #1
 800c856:	d0e6      	beq.n	800c826 <_printf_common+0xae>
 800c858:	3601      	adds	r6, #1
 800c85a:	e7d9      	b.n	800c810 <_printf_common+0x98>

0800c85c <_printf_i>:
 800c85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c860:	7e0f      	ldrb	r7, [r1, #24]
 800c862:	4691      	mov	r9, r2
 800c864:	4680      	mov	r8, r0
 800c866:	460c      	mov	r4, r1
 800c868:	2f78      	cmp	r7, #120	@ 0x78
 800c86a:	469a      	mov	sl, r3
 800c86c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c86e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c872:	d807      	bhi.n	800c884 <_printf_i+0x28>
 800c874:	2f62      	cmp	r7, #98	@ 0x62
 800c876:	d80a      	bhi.n	800c88e <_printf_i+0x32>
 800c878:	2f00      	cmp	r7, #0
 800c87a:	f000 80d2 	beq.w	800ca22 <_printf_i+0x1c6>
 800c87e:	2f58      	cmp	r7, #88	@ 0x58
 800c880:	f000 80b9 	beq.w	800c9f6 <_printf_i+0x19a>
 800c884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c88c:	e03a      	b.n	800c904 <_printf_i+0xa8>
 800c88e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c892:	2b15      	cmp	r3, #21
 800c894:	d8f6      	bhi.n	800c884 <_printf_i+0x28>
 800c896:	a101      	add	r1, pc, #4	@ (adr r1, 800c89c <_printf_i+0x40>)
 800c898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c89c:	0800c8f5 	.word	0x0800c8f5
 800c8a0:	0800c909 	.word	0x0800c909
 800c8a4:	0800c885 	.word	0x0800c885
 800c8a8:	0800c885 	.word	0x0800c885
 800c8ac:	0800c885 	.word	0x0800c885
 800c8b0:	0800c885 	.word	0x0800c885
 800c8b4:	0800c909 	.word	0x0800c909
 800c8b8:	0800c885 	.word	0x0800c885
 800c8bc:	0800c885 	.word	0x0800c885
 800c8c0:	0800c885 	.word	0x0800c885
 800c8c4:	0800c885 	.word	0x0800c885
 800c8c8:	0800ca09 	.word	0x0800ca09
 800c8cc:	0800c933 	.word	0x0800c933
 800c8d0:	0800c9c3 	.word	0x0800c9c3
 800c8d4:	0800c885 	.word	0x0800c885
 800c8d8:	0800c885 	.word	0x0800c885
 800c8dc:	0800ca2b 	.word	0x0800ca2b
 800c8e0:	0800c885 	.word	0x0800c885
 800c8e4:	0800c933 	.word	0x0800c933
 800c8e8:	0800c885 	.word	0x0800c885
 800c8ec:	0800c885 	.word	0x0800c885
 800c8f0:	0800c9cb 	.word	0x0800c9cb
 800c8f4:	6833      	ldr	r3, [r6, #0]
 800c8f6:	1d1a      	adds	r2, r3, #4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6032      	str	r2, [r6, #0]
 800c8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c904:	2301      	movs	r3, #1
 800c906:	e09d      	b.n	800ca44 <_printf_i+0x1e8>
 800c908:	6833      	ldr	r3, [r6, #0]
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	1d19      	adds	r1, r3, #4
 800c90e:	6031      	str	r1, [r6, #0]
 800c910:	0606      	lsls	r6, r0, #24
 800c912:	d501      	bpl.n	800c918 <_printf_i+0xbc>
 800c914:	681d      	ldr	r5, [r3, #0]
 800c916:	e003      	b.n	800c920 <_printf_i+0xc4>
 800c918:	0645      	lsls	r5, r0, #25
 800c91a:	d5fb      	bpl.n	800c914 <_printf_i+0xb8>
 800c91c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c920:	2d00      	cmp	r5, #0
 800c922:	da03      	bge.n	800c92c <_printf_i+0xd0>
 800c924:	232d      	movs	r3, #45	@ 0x2d
 800c926:	426d      	negs	r5, r5
 800c928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c92c:	4859      	ldr	r0, [pc, #356]	@ (800ca94 <_printf_i+0x238>)
 800c92e:	230a      	movs	r3, #10
 800c930:	e011      	b.n	800c956 <_printf_i+0xfa>
 800c932:	6821      	ldr	r1, [r4, #0]
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	0608      	lsls	r0, r1, #24
 800c938:	f853 5b04 	ldr.w	r5, [r3], #4
 800c93c:	d402      	bmi.n	800c944 <_printf_i+0xe8>
 800c93e:	0649      	lsls	r1, r1, #25
 800c940:	bf48      	it	mi
 800c942:	b2ad      	uxthmi	r5, r5
 800c944:	2f6f      	cmp	r7, #111	@ 0x6f
 800c946:	6033      	str	r3, [r6, #0]
 800c948:	4852      	ldr	r0, [pc, #328]	@ (800ca94 <_printf_i+0x238>)
 800c94a:	bf14      	ite	ne
 800c94c:	230a      	movne	r3, #10
 800c94e:	2308      	moveq	r3, #8
 800c950:	2100      	movs	r1, #0
 800c952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c956:	6866      	ldr	r6, [r4, #4]
 800c958:	2e00      	cmp	r6, #0
 800c95a:	60a6      	str	r6, [r4, #8]
 800c95c:	bfa2      	ittt	ge
 800c95e:	6821      	ldrge	r1, [r4, #0]
 800c960:	f021 0104 	bicge.w	r1, r1, #4
 800c964:	6021      	strge	r1, [r4, #0]
 800c966:	b90d      	cbnz	r5, 800c96c <_printf_i+0x110>
 800c968:	2e00      	cmp	r6, #0
 800c96a:	d04b      	beq.n	800ca04 <_printf_i+0x1a8>
 800c96c:	4616      	mov	r6, r2
 800c96e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c972:	fb03 5711 	mls	r7, r3, r1, r5
 800c976:	5dc7      	ldrb	r7, [r0, r7]
 800c978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c97c:	462f      	mov	r7, r5
 800c97e:	460d      	mov	r5, r1
 800c980:	42bb      	cmp	r3, r7
 800c982:	d9f4      	bls.n	800c96e <_printf_i+0x112>
 800c984:	2b08      	cmp	r3, #8
 800c986:	d10b      	bne.n	800c9a0 <_printf_i+0x144>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	07df      	lsls	r7, r3, #31
 800c98c:	d508      	bpl.n	800c9a0 <_printf_i+0x144>
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	6861      	ldr	r1, [r4, #4]
 800c992:	4299      	cmp	r1, r3
 800c994:	bfde      	ittt	le
 800c996:	2330      	movle	r3, #48	@ 0x30
 800c998:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c99c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9a0:	1b92      	subs	r2, r2, r6
 800c9a2:	6122      	str	r2, [r4, #16]
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	aa03      	add	r2, sp, #12
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	f8cd a000 	str.w	sl, [sp]
 800c9b0:	f7ff fee2 	bl	800c778 <_printf_common>
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d14a      	bne.n	800ca4e <_printf_i+0x1f2>
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	b004      	add	sp, #16
 800c9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	f043 0320 	orr.w	r3, r3, #32
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	2778      	movs	r7, #120	@ 0x78
 800c9cc:	4832      	ldr	r0, [pc, #200]	@ (800ca98 <_printf_i+0x23c>)
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9d4:	061f      	lsls	r7, r3, #24
 800c9d6:	6831      	ldr	r1, [r6, #0]
 800c9d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9dc:	d402      	bmi.n	800c9e4 <_printf_i+0x188>
 800c9de:	065f      	lsls	r7, r3, #25
 800c9e0:	bf48      	it	mi
 800c9e2:	b2ad      	uxthmi	r5, r5
 800c9e4:	6031      	str	r1, [r6, #0]
 800c9e6:	07d9      	lsls	r1, r3, #31
 800c9e8:	bf44      	itt	mi
 800c9ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c9ee:	6023      	strmi	r3, [r4, #0]
 800c9f0:	b11d      	cbz	r5, 800c9fa <_printf_i+0x19e>
 800c9f2:	2310      	movs	r3, #16
 800c9f4:	e7ac      	b.n	800c950 <_printf_i+0xf4>
 800c9f6:	4827      	ldr	r0, [pc, #156]	@ (800ca94 <_printf_i+0x238>)
 800c9f8:	e7e9      	b.n	800c9ce <_printf_i+0x172>
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	f023 0320 	bic.w	r3, r3, #32
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	e7f6      	b.n	800c9f2 <_printf_i+0x196>
 800ca04:	4616      	mov	r6, r2
 800ca06:	e7bd      	b.n	800c984 <_printf_i+0x128>
 800ca08:	6833      	ldr	r3, [r6, #0]
 800ca0a:	6825      	ldr	r5, [r4, #0]
 800ca0c:	1d18      	adds	r0, r3, #4
 800ca0e:	6961      	ldr	r1, [r4, #20]
 800ca10:	6030      	str	r0, [r6, #0]
 800ca12:	062e      	lsls	r6, r5, #24
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	d501      	bpl.n	800ca1c <_printf_i+0x1c0>
 800ca18:	6019      	str	r1, [r3, #0]
 800ca1a:	e002      	b.n	800ca22 <_printf_i+0x1c6>
 800ca1c:	0668      	lsls	r0, r5, #25
 800ca1e:	d5fb      	bpl.n	800ca18 <_printf_i+0x1bc>
 800ca20:	8019      	strh	r1, [r3, #0]
 800ca22:	2300      	movs	r3, #0
 800ca24:	4616      	mov	r6, r2
 800ca26:	6123      	str	r3, [r4, #16]
 800ca28:	e7bc      	b.n	800c9a4 <_printf_i+0x148>
 800ca2a:	6833      	ldr	r3, [r6, #0]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	1d1a      	adds	r2, r3, #4
 800ca30:	6032      	str	r2, [r6, #0]
 800ca32:	681e      	ldr	r6, [r3, #0]
 800ca34:	6862      	ldr	r2, [r4, #4]
 800ca36:	4630      	mov	r0, r6
 800ca38:	f000 f970 	bl	800cd1c <memchr>
 800ca3c:	b108      	cbz	r0, 800ca42 <_printf_i+0x1e6>
 800ca3e:	1b80      	subs	r0, r0, r6
 800ca40:	6060      	str	r0, [r4, #4]
 800ca42:	6863      	ldr	r3, [r4, #4]
 800ca44:	6123      	str	r3, [r4, #16]
 800ca46:	2300      	movs	r3, #0
 800ca48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca4c:	e7aa      	b.n	800c9a4 <_printf_i+0x148>
 800ca4e:	6923      	ldr	r3, [r4, #16]
 800ca50:	4632      	mov	r2, r6
 800ca52:	4649      	mov	r1, r9
 800ca54:	4640      	mov	r0, r8
 800ca56:	47d0      	blx	sl
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d0ad      	beq.n	800c9b8 <_printf_i+0x15c>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	079b      	lsls	r3, r3, #30
 800ca60:	d413      	bmi.n	800ca8a <_printf_i+0x22e>
 800ca62:	68e0      	ldr	r0, [r4, #12]
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	4298      	cmp	r0, r3
 800ca68:	bfb8      	it	lt
 800ca6a:	4618      	movlt	r0, r3
 800ca6c:	e7a6      	b.n	800c9bc <_printf_i+0x160>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	4632      	mov	r2, r6
 800ca72:	4649      	mov	r1, r9
 800ca74:	4640      	mov	r0, r8
 800ca76:	47d0      	blx	sl
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d09d      	beq.n	800c9b8 <_printf_i+0x15c>
 800ca7c:	3501      	adds	r5, #1
 800ca7e:	68e3      	ldr	r3, [r4, #12]
 800ca80:	9903      	ldr	r1, [sp, #12]
 800ca82:	1a5b      	subs	r3, r3, r1
 800ca84:	42ab      	cmp	r3, r5
 800ca86:	dcf2      	bgt.n	800ca6e <_printf_i+0x212>
 800ca88:	e7eb      	b.n	800ca62 <_printf_i+0x206>
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	f104 0619 	add.w	r6, r4, #25
 800ca90:	e7f5      	b.n	800ca7e <_printf_i+0x222>
 800ca92:	bf00      	nop
 800ca94:	0800ce49 	.word	0x0800ce49
 800ca98:	0800ce5a 	.word	0x0800ce5a

0800ca9c <__sflush_r>:
 800ca9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	0716      	lsls	r6, r2, #28
 800caa6:	4605      	mov	r5, r0
 800caa8:	460c      	mov	r4, r1
 800caaa:	d454      	bmi.n	800cb56 <__sflush_r+0xba>
 800caac:	684b      	ldr	r3, [r1, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dc02      	bgt.n	800cab8 <__sflush_r+0x1c>
 800cab2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dd48      	ble.n	800cb4a <__sflush_r+0xae>
 800cab8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caba:	2e00      	cmp	r6, #0
 800cabc:	d045      	beq.n	800cb4a <__sflush_r+0xae>
 800cabe:	2300      	movs	r3, #0
 800cac0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cac4:	682f      	ldr	r7, [r5, #0]
 800cac6:	6a21      	ldr	r1, [r4, #32]
 800cac8:	602b      	str	r3, [r5, #0]
 800caca:	d030      	beq.n	800cb2e <__sflush_r+0x92>
 800cacc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	0759      	lsls	r1, r3, #29
 800cad2:	d505      	bpl.n	800cae0 <__sflush_r+0x44>
 800cad4:	6863      	ldr	r3, [r4, #4]
 800cad6:	1ad2      	subs	r2, r2, r3
 800cad8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cada:	b10b      	cbz	r3, 800cae0 <__sflush_r+0x44>
 800cadc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cade:	1ad2      	subs	r2, r2, r3
 800cae0:	2300      	movs	r3, #0
 800cae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cae4:	6a21      	ldr	r1, [r4, #32]
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b0      	blx	r6
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	d106      	bne.n	800cafe <__sflush_r+0x62>
 800caf0:	6829      	ldr	r1, [r5, #0]
 800caf2:	291d      	cmp	r1, #29
 800caf4:	d82b      	bhi.n	800cb4e <__sflush_r+0xb2>
 800caf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cba0 <__sflush_r+0x104>)
 800caf8:	410a      	asrs	r2, r1
 800cafa:	07d6      	lsls	r6, r2, #31
 800cafc:	d427      	bmi.n	800cb4e <__sflush_r+0xb2>
 800cafe:	2200      	movs	r2, #0
 800cb00:	04d9      	lsls	r1, r3, #19
 800cb02:	6062      	str	r2, [r4, #4]
 800cb04:	6922      	ldr	r2, [r4, #16]
 800cb06:	6022      	str	r2, [r4, #0]
 800cb08:	d504      	bpl.n	800cb14 <__sflush_r+0x78>
 800cb0a:	1c42      	adds	r2, r0, #1
 800cb0c:	d101      	bne.n	800cb12 <__sflush_r+0x76>
 800cb0e:	682b      	ldr	r3, [r5, #0]
 800cb10:	b903      	cbnz	r3, 800cb14 <__sflush_r+0x78>
 800cb12:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb16:	602f      	str	r7, [r5, #0]
 800cb18:	b1b9      	cbz	r1, 800cb4a <__sflush_r+0xae>
 800cb1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb1e:	4299      	cmp	r1, r3
 800cb20:	d002      	beq.n	800cb28 <__sflush_r+0x8c>
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7ff fbee 	bl	800c304 <_free_r>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb2c:	e00d      	b.n	800cb4a <__sflush_r+0xae>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b0      	blx	r6
 800cb34:	4602      	mov	r2, r0
 800cb36:	1c50      	adds	r0, r2, #1
 800cb38:	d1c9      	bne.n	800cace <__sflush_r+0x32>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d0c6      	beq.n	800cace <__sflush_r+0x32>
 800cb40:	2b1d      	cmp	r3, #29
 800cb42:	d001      	beq.n	800cb48 <__sflush_r+0xac>
 800cb44:	2b16      	cmp	r3, #22
 800cb46:	d11d      	bne.n	800cb84 <__sflush_r+0xe8>
 800cb48:	602f      	str	r7, [r5, #0]
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e021      	b.n	800cb92 <__sflush_r+0xf6>
 800cb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb52:	b21b      	sxth	r3, r3
 800cb54:	e01a      	b.n	800cb8c <__sflush_r+0xf0>
 800cb56:	690f      	ldr	r7, [r1, #16]
 800cb58:	2f00      	cmp	r7, #0
 800cb5a:	d0f6      	beq.n	800cb4a <__sflush_r+0xae>
 800cb5c:	0793      	lsls	r3, r2, #30
 800cb5e:	680e      	ldr	r6, [r1, #0]
 800cb60:	600f      	str	r7, [r1, #0]
 800cb62:	bf0c      	ite	eq
 800cb64:	694b      	ldreq	r3, [r1, #20]
 800cb66:	2300      	movne	r3, #0
 800cb68:	eba6 0807 	sub.w	r8, r6, r7
 800cb6c:	608b      	str	r3, [r1, #8]
 800cb6e:	f1b8 0f00 	cmp.w	r8, #0
 800cb72:	ddea      	ble.n	800cb4a <__sflush_r+0xae>
 800cb74:	4643      	mov	r3, r8
 800cb76:	463a      	mov	r2, r7
 800cb78:	6a21      	ldr	r1, [r4, #32]
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb7e:	47b0      	blx	r6
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dc08      	bgt.n	800cb96 <__sflush_r+0xfa>
 800cb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb96:	4407      	add	r7, r0
 800cb98:	eba8 0800 	sub.w	r8, r8, r0
 800cb9c:	e7e7      	b.n	800cb6e <__sflush_r+0xd2>
 800cb9e:	bf00      	nop
 800cba0:	dfbffffe 	.word	0xdfbffffe

0800cba4 <_fflush_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	690b      	ldr	r3, [r1, #16]
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	b913      	cbnz	r3, 800cbb4 <_fflush_r+0x10>
 800cbae:	2500      	movs	r5, #0
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	b118      	cbz	r0, 800cbbe <_fflush_r+0x1a>
 800cbb6:	6a03      	ldr	r3, [r0, #32]
 800cbb8:	b90b      	cbnz	r3, 800cbbe <_fflush_r+0x1a>
 800cbba:	f7ff f9a9 	bl	800bf10 <__sinit>
 800cbbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0f3      	beq.n	800cbae <_fflush_r+0xa>
 800cbc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbc8:	07d0      	lsls	r0, r2, #31
 800cbca:	d404      	bmi.n	800cbd6 <_fflush_r+0x32>
 800cbcc:	0599      	lsls	r1, r3, #22
 800cbce:	d402      	bmi.n	800cbd6 <_fflush_r+0x32>
 800cbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbd2:	f7ff fb94 	bl	800c2fe <__retarget_lock_acquire_recursive>
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	4621      	mov	r1, r4
 800cbda:	f7ff ff5f 	bl	800ca9c <__sflush_r>
 800cbde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	07da      	lsls	r2, r3, #31
 800cbe4:	d4e4      	bmi.n	800cbb0 <_fflush_r+0xc>
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	059b      	lsls	r3, r3, #22
 800cbea:	d4e1      	bmi.n	800cbb0 <_fflush_r+0xc>
 800cbec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbee:	f7ff fb87 	bl	800c300 <__retarget_lock_release_recursive>
 800cbf2:	e7dd      	b.n	800cbb0 <_fflush_r+0xc>

0800cbf4 <__swhatbuf_r>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfc:	b096      	sub	sp, #88	@ 0x58
 800cbfe:	4615      	mov	r5, r2
 800cc00:	2900      	cmp	r1, #0
 800cc02:	461e      	mov	r6, r3
 800cc04:	da0c      	bge.n	800cc20 <__swhatbuf_r+0x2c>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	2100      	movs	r1, #0
 800cc0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc0e:	bf14      	ite	ne
 800cc10:	2340      	movne	r3, #64	@ 0x40
 800cc12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc16:	2000      	movs	r0, #0
 800cc18:	6031      	str	r1, [r6, #0]
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	b016      	add	sp, #88	@ 0x58
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	466a      	mov	r2, sp
 800cc22:	f000 f849 	bl	800ccb8 <_fstat_r>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	dbed      	blt.n	800cc06 <__swhatbuf_r+0x12>
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc34:	4259      	negs	r1, r3
 800cc36:	4159      	adcs	r1, r3
 800cc38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc3c:	e7eb      	b.n	800cc16 <__swhatbuf_r+0x22>

0800cc3e <__smakebuf_r>:
 800cc3e:	898b      	ldrh	r3, [r1, #12]
 800cc40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc42:	079d      	lsls	r5, r3, #30
 800cc44:	4606      	mov	r6, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	d507      	bpl.n	800cc5a <__smakebuf_r+0x1c>
 800cc4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc4e:	6023      	str	r3, [r4, #0]
 800cc50:	6123      	str	r3, [r4, #16]
 800cc52:	2301      	movs	r3, #1
 800cc54:	6163      	str	r3, [r4, #20]
 800cc56:	b003      	add	sp, #12
 800cc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5a:	ab01      	add	r3, sp, #4
 800cc5c:	466a      	mov	r2, sp
 800cc5e:	f7ff ffc9 	bl	800cbf4 <__swhatbuf_r>
 800cc62:	9f00      	ldr	r7, [sp, #0]
 800cc64:	4605      	mov	r5, r0
 800cc66:	4630      	mov	r0, r6
 800cc68:	4639      	mov	r1, r7
 800cc6a:	f7ff fbb7 	bl	800c3dc <_malloc_r>
 800cc6e:	b948      	cbnz	r0, 800cc84 <__smakebuf_r+0x46>
 800cc70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc74:	059a      	lsls	r2, r3, #22
 800cc76:	d4ee      	bmi.n	800cc56 <__smakebuf_r+0x18>
 800cc78:	f023 0303 	bic.w	r3, r3, #3
 800cc7c:	f043 0302 	orr.w	r3, r3, #2
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	e7e2      	b.n	800cc4a <__smakebuf_r+0xc>
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	6020      	str	r0, [r4, #0]
 800cc88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc94:	b15b      	cbz	r3, 800ccae <__smakebuf_r+0x70>
 800cc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 f81e 	bl	800ccdc <_isatty_r>
 800cca0:	b128      	cbz	r0, 800ccae <__smakebuf_r+0x70>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	f023 0303 	bic.w	r3, r3, #3
 800cca8:	f043 0301 	orr.w	r3, r3, #1
 800ccac:	81a3      	strh	r3, [r4, #12]
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	431d      	orrs	r5, r3
 800ccb2:	81a5      	strh	r5, [r4, #12]
 800ccb4:	e7cf      	b.n	800cc56 <__smakebuf_r+0x18>
	...

0800ccb8 <_fstat_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4d06      	ldr	r5, [pc, #24]	@ (800ccd8 <_fstat_r+0x20>)
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	f7f5 f872 	bl	8001dae <_fstat>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d102      	bne.n	800ccd4 <_fstat_r+0x1c>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b103      	cbz	r3, 800ccd4 <_fstat_r+0x1c>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	2000068c 	.word	0x2000068c

0800ccdc <_isatty_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	2300      	movs	r3, #0
 800cce0:	4d05      	ldr	r5, [pc, #20]	@ (800ccf8 <_isatty_r+0x1c>)
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f5 f871 	bl	8001dce <_isatty>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_isatty_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_isatty_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	2000068c 	.word	0x2000068c

0800ccfc <_sbrk_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	2300      	movs	r3, #0
 800cd00:	4d05      	ldr	r5, [pc, #20]	@ (800cd18 <_sbrk_r+0x1c>)
 800cd02:	4604      	mov	r4, r0
 800cd04:	4608      	mov	r0, r1
 800cd06:	602b      	str	r3, [r5, #0]
 800cd08:	f7f5 f87a 	bl	8001e00 <_sbrk>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_sbrk_r+0x1a>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_sbrk_r+0x1a>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	2000068c 	.word	0x2000068c

0800cd1c <memchr>:
 800cd1c:	b2c9      	uxtb	r1, r1
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4402      	add	r2, r0
 800cd22:	b510      	push	{r4, lr}
 800cd24:	4293      	cmp	r3, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	d101      	bne.n	800cd2e <memchr+0x12>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	e003      	b.n	800cd36 <memchr+0x1a>
 800cd2e:	7804      	ldrb	r4, [r0, #0]
 800cd30:	3301      	adds	r3, #1
 800cd32:	428c      	cmp	r4, r1
 800cd34:	d1f6      	bne.n	800cd24 <memchr+0x8>
 800cd36:	bd10      	pop	{r4, pc}

0800cd38 <_init>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	bf00      	nop
 800cd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd3e:	bc08      	pop	{r3}
 800cd40:	469e      	mov	lr, r3
 800cd42:	4770      	bx	lr

0800cd44 <_fini>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	bf00      	nop
 800cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4a:	bc08      	pop	{r3}
 800cd4c:	469e      	mov	lr, r3
 800cd4e:	4770      	bx	lr
