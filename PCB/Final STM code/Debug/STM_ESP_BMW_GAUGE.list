
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d908  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcdc  0800dcdc  0000f144  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcdc  0800dcdc  0000ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dce4  0800dce4  0000f144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dce4  0800dce4  0000ece4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dce8  0800dce8  0000ece8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800dcec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000144  0800de30  0000f144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800de30  0000f7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b82  00000000  00000000  0000f17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1d  00000000  00000000  0002fcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ae  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6a7  00000000  00000000  00036736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000244ae  00000000  00000000  00064ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120c3b  00000000  00000000  0008928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aec  00000000  00000000  001a9f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b19f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000144 	.word	0x20000144
 8000274:	00000000 	.word	0x00000000
 8000278:	0800db48 	.word	0x0800db48

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000148 	.word	0x20000148
 8000294:	0800db48 	.word	0x0800db48

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_d2uiz>:
 8000b54:	004a      	lsls	r2, r1, #1
 8000b56:	d211      	bcs.n	8000b7c <__aeabi_d2uiz+0x28>
 8000b58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b5c:	d211      	bcs.n	8000b82 <__aeabi_d2uiz+0x2e>
 8000b5e:	d50d      	bpl.n	8000b7c <__aeabi_d2uiz+0x28>
 8000b60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b68:	d40e      	bmi.n	8000b88 <__aeabi_d2uiz+0x34>
 8000b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d102      	bne.n	8000b8e <__aeabi_d2uiz+0x3a>
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	4770      	bx	lr
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_d2f>:
 8000b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b9c:	bf24      	itt	cs
 8000b9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba6:	d90d      	bls.n	8000bc4 <__aeabi_d2f+0x30>
 8000ba8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bbc:	bf08      	it	eq
 8000bbe:	f020 0001 	biceq.w	r0, r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc8:	d121      	bne.n	8000c0e <__aeabi_d2f+0x7a>
 8000bca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bce:	bfbc      	itt	lt
 8000bd0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	4770      	bxlt	lr
 8000bd6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bde:	f1c2 0218 	rsb	r2, r2, #24
 8000be2:	f1c2 0c20 	rsb	ip, r2, #32
 8000be6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bea:	fa20 f002 	lsr.w	r0, r0, r2
 8000bee:	bf18      	it	ne
 8000bf0:	f040 0001 	orrne.w	r0, r0, #1
 8000bf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c00:	ea40 000c 	orr.w	r0, r0, ip
 8000c04:	fa23 f302 	lsr.w	r3, r3, r2
 8000c08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c0c:	e7cc      	b.n	8000ba8 <__aeabi_d2f+0x14>
 8000c0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c12:	d107      	bne.n	8000c24 <__aeabi_d2f+0x90>
 8000c14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c18:	bf1e      	ittt	ne
 8000c1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c22:	4770      	bxne	lr
 8000c24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_uldivmod>:
 8000c34:	b953      	cbnz	r3, 8000c4c <__aeabi_uldivmod+0x18>
 8000c36:	b94a      	cbnz	r2, 8000c4c <__aeabi_uldivmod+0x18>
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	2800      	cmpeq	r0, #0
 8000c3e:	bf1c      	itt	ne
 8000c40:	f04f 31ff 	movne.w	r1, #4294967295
 8000c44:	f04f 30ff 	movne.w	r0, #4294967295
 8000c48:	f000 b97e 	b.w	8000f48 <__aeabi_idiv0>
 8000c4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c54:	f000 f806 	bl	8000c64 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4770      	bx	lr

08000c64 <__udivmoddi4>:
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d14d      	bne.n	8000d0c <__udivmoddi4+0xa8>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	460f      	mov	r7, r1
 8000c74:	4684      	mov	ip, r0
 8000c76:	4696      	mov	lr, r2
 8000c78:	fab2 f382 	clz	r3, r2
 8000c7c:	d960      	bls.n	8000d40 <__udivmoddi4+0xdc>
 8000c7e:	b14b      	cbz	r3, 8000c94 <__udivmoddi4+0x30>
 8000c80:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c84:	f1c3 0220 	rsb	r2, r3, #32
 8000c88:	409f      	lsls	r7, r3
 8000c8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c98:	fa1f f48e 	uxth.w	r4, lr
 8000c9c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ca0:	fbb7 f1f6 	udiv	r1, r7, r6
 8000ca4:	fb06 7711 	mls	r7, r6, r1, r7
 8000ca8:	fb01 f004 	mul.w	r0, r1, r4
 8000cac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x62>
 8000cb4:	eb1e 0202 	adds.w	r2, lr, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x60>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f200 812d 	bhi.w	8000f1e <__udivmoddi4+0x2ba>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	1a12      	subs	r2, r2, r0
 8000cc8:	fa1f fc8c 	uxth.w	ip, ip
 8000ccc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000cd0:	fb06 2210 	mls	r2, r6, r0, r2
 8000cd4:	fb00 f404 	mul.w	r4, r0, r4
 8000cd8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cdc:	4564      	cmp	r4, ip
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x8e>
 8000ce0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x8c>
 8000cea:	4564      	cmp	r4, ip
 8000cec:	f200 811a 	bhi.w	8000f24 <__udivmoddi4+0x2c0>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cf6:	ebac 0c04 	sub.w	ip, ip, r4
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	b125      	cbz	r5, 8000d08 <__udivmoddi4+0xa4>
 8000cfe:	fa2c f303 	lsr.w	r3, ip, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	e9c5 3200 	strd	r3, r2, [r5]
 8000d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d905      	bls.n	8000d1c <__udivmoddi4+0xb8>
 8000d10:	b10d      	cbz	r5, 8000d16 <__udivmoddi4+0xb2>
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	2100      	movs	r1, #0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e7f5      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000d1c:	fab3 f183 	clz	r1, r3
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d14d      	bne.n	8000dc0 <__udivmoddi4+0x15c>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	f0c0 80f2 	bcc.w	8000f0e <__udivmoddi4+0x2aa>
 8000d2a:	4290      	cmp	r0, r2
 8000d2c:	f080 80ef 	bcs.w	8000f0e <__udivmoddi4+0x2aa>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e6      	beq.n	8000d08 <__udivmoddi4+0xa4>
 8000d3a:	e9c5 6300 	strd	r6, r3, [r5]
 8000d3e:	e7e3      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f040 80a2 	bne.w	8000e8a <__udivmoddi4+0x226>
 8000d46:	1a8a      	subs	r2, r1, r2
 8000d48:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d4c:	fa1f f68e 	uxth.w	r6, lr
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d56:	fb07 2014 	mls	r0, r7, r4, r2
 8000d5a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb06 f004 	mul.w	r0, r6, r4
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d90f      	bls.n	8000d8a <__udivmoddi4+0x126>
 8000d6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000d6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d72:	bf2c      	ite	cs
 8000d74:	f04f 0901 	movcs.w	r9, #1
 8000d78:	f04f 0900 	movcc.w	r9, #0
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d903      	bls.n	8000d88 <__udivmoddi4+0x124>
 8000d80:	f1b9 0f00 	cmp.w	r9, #0
 8000d84:	f000 80c8 	beq.w	8000f18 <__udivmoddi4+0x2b4>
 8000d88:	4644      	mov	r4, r8
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	fa1f fc8c 	uxth.w	ip, ip
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	fb00 f606 	mul.w	r6, r0, r6
 8000d9c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da0:	4566      	cmp	r6, ip
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x152>
 8000da4:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x150>
 8000dae:	4566      	cmp	r6, ip
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c6>
 8000db4:	4610      	mov	r0, r2
 8000db6:	ebac 0c06 	sub.w	ip, ip, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	e79d      	b.n	8000cfc <__udivmoddi4+0x98>
 8000dc0:	f1c1 0620 	rsb	r6, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd2:	40f4      	lsrs	r4, r6
 8000dd4:	408a      	lsls	r2, r1
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ddc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000de0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000de4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	fbb4 f0f8 	udiv	r0, r4, r8
 8000df0:	fb08 4410 	mls	r4, r8, r0, r4
 8000df4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df8:	fb00 f90c 	mul.w	r9, r0, ip
 8000dfc:	45a1      	cmp	r9, r4
 8000dfe:	d90e      	bls.n	8000e1e <__udivmoddi4+0x1ba>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e06:	bf2c      	ite	cs
 8000e08:	f04f 0b01 	movcs.w	fp, #1
 8000e0c:	f04f 0b00 	movcc.w	fp, #0
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	d903      	bls.n	8000e1c <__udivmoddi4+0x1b8>
 8000e14:	f1bb 0f00 	cmp.w	fp, #0
 8000e18:	f000 8093 	beq.w	8000f42 <__udivmoddi4+0x2de>
 8000e1c:	4650      	mov	r0, sl
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e2a:	fb08 4413 	mls	r4, r8, r3, r4
 8000e2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d906      	bls.n	8000e48 <__udivmoddi4+0x1e4>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x1e2>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d87a      	bhi.n	8000f3c <__udivmoddi4+0x2d8>
 8000e46:	4643      	mov	r3, r8
 8000e48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4c:	eba4 040c 	sub.w	r4, r4, ip
 8000e50:	fba0 9802 	umull	r9, r8, r0, r2
 8000e54:	4544      	cmp	r4, r8
 8000e56:	46cc      	mov	ip, r9
 8000e58:	4643      	mov	r3, r8
 8000e5a:	d302      	bcc.n	8000e62 <__udivmoddi4+0x1fe>
 8000e5c:	d106      	bne.n	8000e6c <__udivmoddi4+0x208>
 8000e5e:	45ce      	cmp	lr, r9
 8000e60:	d204      	bcs.n	8000e6c <__udivmoddi4+0x208>
 8000e62:	3801      	subs	r0, #1
 8000e64:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e68:	eb68 0307 	sbc.w	r3, r8, r7
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x222>
 8000e6e:	ebbe 020c 	subs.w	r2, lr, ip
 8000e72:	eb64 0403 	sbc.w	r4, r4, r3
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e73e      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000e8a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e8e:	f1c3 0120 	rsb	r1, r3, #32
 8000e92:	fa04 f203 	lsl.w	r2, r4, r3
 8000e96:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ea0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ea4:	fa1f f68e 	uxth.w	r6, lr
 8000ea8:	fbb4 f0f7 	udiv	r0, r4, r7
 8000eac:	430a      	orrs	r2, r1
 8000eae:	fb07 4410 	mls	r4, r7, r0, r4
 8000eb2:	0c11      	lsrs	r1, r2, #16
 8000eb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eb8:	fb00 f406 	mul.w	r4, r0, r6
 8000ebc:	428c      	cmp	r4, r1
 8000ebe:	d90e      	bls.n	8000ede <__udivmoddi4+0x27a>
 8000ec0:	eb1e 0101 	adds.w	r1, lr, r1
 8000ec4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec8:	bf2c      	ite	cs
 8000eca:	f04f 0901 	movcs.w	r9, #1
 8000ece:	f04f 0900 	movcc.w	r9, #0
 8000ed2:	428c      	cmp	r4, r1
 8000ed4:	d902      	bls.n	8000edc <__udivmoddi4+0x278>
 8000ed6:	f1b9 0f00 	cmp.w	r9, #0
 8000eda:	d02c      	beq.n	8000f36 <__udivmoddi4+0x2d2>
 8000edc:	4640      	mov	r0, r8
 8000ede:	1b09      	subs	r1, r1, r4
 8000ee0:	b292      	uxth	r2, r2
 8000ee2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ee6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eee:	fb04 f106 	mul.w	r1, r4, r6
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x2a2>
 8000ef6:	eb1e 0202 	adds.w	r2, lr, r2
 8000efa:	f104 38ff 	add.w	r8, r4, #4294967295
 8000efe:	d201      	bcs.n	8000f04 <__udivmoddi4+0x2a0>
 8000f00:	4291      	cmp	r1, r2
 8000f02:	d815      	bhi.n	8000f30 <__udivmoddi4+0x2cc>
 8000f04:	4644      	mov	r4, r8
 8000f06:	1a52      	subs	r2, r2, r1
 8000f08:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f0c:	e721      	b.n	8000d52 <__udivmoddi4+0xee>
 8000f0e:	1a86      	subs	r6, r0, r2
 8000f10:	eb64 0303 	sbc.w	r3, r4, r3
 8000f14:	2001      	movs	r0, #1
 8000f16:	e70e      	b.n	8000d36 <__udivmoddi4+0xd2>
 8000f18:	3c02      	subs	r4, #2
 8000f1a:	4472      	add	r2, lr
 8000f1c:	e735      	b.n	8000d8a <__udivmoddi4+0x126>
 8000f1e:	3902      	subs	r1, #2
 8000f20:	4472      	add	r2, lr
 8000f22:	e6d0      	b.n	8000cc6 <__udivmoddi4+0x62>
 8000f24:	44f4      	add	ip, lr
 8000f26:	3802      	subs	r0, #2
 8000f28:	e6e3      	b.n	8000cf2 <__udivmoddi4+0x8e>
 8000f2a:	44f4      	add	ip, lr
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x152>
 8000f30:	3c02      	subs	r4, #2
 8000f32:	4472      	add	r2, lr
 8000f34:	e7e7      	b.n	8000f06 <__udivmoddi4+0x2a2>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4471      	add	r1, lr
 8000f3a:	e7d0      	b.n	8000ede <__udivmoddi4+0x27a>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	443c      	add	r4, r7
 8000f40:	e782      	b.n	8000e48 <__udivmoddi4+0x1e4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	e76a      	b.n	8000e1e <__udivmoddi4+0x1ba>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f52:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f54:	4a30      	ldr	r2, [pc, #192]	@ (8001018 <MX_FDCAN1_Init+0xcc>)
 8000f56:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f58:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f8a:	220b      	movs	r2, #11
 8000f8c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fc0:	f003 fb58 	bl	8004674 <HAL_FDCAN_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fca:	f001 faa3 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000fde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fe2:	617b      	str	r3, [r7, #20]


	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480a      	ldr	r0, [pc, #40]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fea:	f003 fc9d 	bl	8004928 <HAL_FDCAN_ConfigFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <MX_FDCAN1_Init+0xae>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <MX_FDCAN1_Init+0xd0>)
 8000ff6:	f00b ff31 	bl	800ce5c <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000ffc:	f003 fcee 	bl	80049dc <HAL_FDCAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8001006:	f001 fa85 	bl	8002514 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000160 	.word	0x20000160
 8001018:	4000a400 	.word	0x4000a400
 800101c:	0800db60 	.word	0x0800db60

08001020 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0be      	sub	sp, #248	@ 0xf8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22d0      	movs	r2, #208	@ 0xd0
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f00b ffeb 	bl	800d01c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <HAL_FDCAN_MspInit+0xe8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d156      	bne.n	80010fe <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0304 	mov.w	r3, #4
 8001058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f005 f9fc 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001072:	f001 fa4f 	bl	8002514 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800107c:	4a23      	ldr	r2, [pc, #140]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001082:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800108c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109a:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 80010a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010cc:	2309      	movs	r3, #9
 80010ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010d6:	4619      	mov	r1, r3
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <HAL_FDCAN_MspInit+0xf0>)
 80010da:	f003 ff63 	bl	8004fa4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2027      	movs	r0, #39	@ 0x27
 80010e4:	f002 fab2 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80010e8:	2027      	movs	r0, #39	@ 0x27
 80010ea:	f002 fac9 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2028      	movs	r0, #40	@ 0x28
 80010f4:	f002 faaa 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f002 fac1 	bl	8003680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80010fe:	bf00      	nop
 8001100:	37f8      	adds	r7, #248	@ 0xf8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	4000a400 	.word	0x4000a400
 800110c:	44020c00 	.word	0x44020c00
 8001110:	42020000 	.word	0x42020000

08001114 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e041      	b.n	80011a4 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001120:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <InitCANFrames+0xa4>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	212c      	movs	r1, #44	@ 0x2c
 8001126:	fb01 f303 	mul.w	r3, r1, r3
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001132:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <InitCANFrames+0xa4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	212c      	movs	r1, #44	@ 0x2c
 8001138:	fb01 f303 	mul.w	r3, r1, r3
 800113c:	4413      	add	r3, r2
 800113e:	3308      	adds	r3, #8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <InitCANFrames+0xa4>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	212c      	movs	r1, #44	@ 0x2c
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4413      	add	r3, r2
 8001150:	330c      	adds	r3, #12
 8001152:	2208      	movs	r2, #8
 8001154:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001156:	4a18      	ldr	r2, [pc, #96]	@ (80011b8 <InitCANFrames+0xa4>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	212c      	movs	r1, #44	@ 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3310      	adds	r3, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001168:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <InitCANFrames+0xa4>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	212c      	movs	r1, #44	@ 0x2c
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	3314      	adds	r3, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <InitCANFrames+0xa4>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	212c      	movs	r1, #44	@ 0x2c
 8001180:	fb01 f303 	mul.w	r3, r1, r3
 8001184:	4413      	add	r3, r2
 8001186:	3318      	adds	r3, #24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <InitCANFrames+0xa4>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	212c      	movs	r1, #44	@ 0x2c
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	331c      	adds	r3, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3301      	adds	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	ddba      	ble.n	8001120 <InitCANFrames+0xc>
    }
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000000 	.word	0x20000000

080011bc <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d903      	bls.n	80011d4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <SendCANFrame+0x44>)
 80011ce:	f00b fddd 	bl	800cd8c <iprintf>
        return; // todo add error
 80011d2:	e011      	b.n	80011f8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	222c      	movs	r2, #44	@ 0x2c
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <SendCANFrame+0x48>)
 80011de:	1899      	adds	r1, r3, r2
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	222c      	movs	r2, #44	@ 0x2c
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	3320      	adds	r3, #32
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <SendCANFrame+0x48>)
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	461a      	mov	r2, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <SendCANFrame+0x4c>)
 80011f4:	f003 fc1a 	bl	8004a2c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800db7c 	.word	0x0800db7c
 8001204:	20000000 	.word	0x20000000
 8001208:	20000160 	.word	0x20000160

0800120c <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	460b      	mov	r3, r1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d903      	bls.n	800122c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <modify_can_frame_byte+0x4c>)
 8001226:	f00b fdb1 	bl	800cd8c <iprintf>
		return; // todo add error
 800122a:	e011      	b.n	8001250 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d903      	bls.n	800123a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001232:	480a      	ldr	r0, [pc, #40]	@ (800125c <modify_can_frame_byte+0x50>)
 8001234:	f00b fdaa 	bl	800cd8c <iprintf>
       return;
 8001238:	e00a      	b.n	8001250 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <modify_can_frame_byte+0x54>)
 8001240:	202c      	movs	r0, #44	@ 0x2c
 8001242:	fb00 f202 	mul.w	r2, r0, r2
 8001246:	440a      	add	r2, r1
 8001248:	4413      	add	r3, r2
 800124a:	3324      	adds	r3, #36	@ 0x24
 800124c:	797a      	ldrb	r2, [r7, #5]
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800db7c 	.word	0x0800db7c
 800125c:	0800db94 	.word	0x0800db94
 8001260:	20000000 	.word	0x20000000

08001264 <modify_can_frame_bit>:

void modify_can_frame_bit(uint8_t frameIndex, uint8_t byte_num, uint8_t bit_num, bool state)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	717b      	strb	r3, [r7, #5]
 800127e:	4613      	mov	r3, r2
 8001280:	713b      	strb	r3, [r7, #4]
	   if (frameIndex >= FRAME_COUNT) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d903      	bls.n	8001290 <modify_can_frame_bit+0x2c>
			printf("Over can frames index");
 8001288:	482b      	ldr	r0, [pc, #172]	@ (8001338 <modify_can_frame_bit+0xd4>)
 800128a:	f00b fd7f 	bl	800cd8c <iprintf>
			return; // todo add error
 800128e:	e04f      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }
	   if (byte_num > 8) {
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d903      	bls.n	800129e <modify_can_frame_bit+0x3a>
		   printf("Wrong byte index");
 8001296:	4829      	ldr	r0, [pc, #164]	@ (800133c <modify_can_frame_bit+0xd8>)
 8001298:	f00b fd78 	bl	800cd8c <iprintf>
	       return;
 800129c:	e048      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }
	   if (bit_num > 8) {
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d903      	bls.n	80012ac <modify_can_frame_bit+0x48>
		   printf("Wrong bit index");
 80012a4:	4826      	ldr	r0, [pc, #152]	@ (8001340 <modify_can_frame_bit+0xdc>)
 80012a6:	f00b fd71 	bl	800cd8c <iprintf>
		   return;
 80012aa:	e041      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }

	   if(state)
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01e      	beq.n	80012f0 <modify_can_frame_bit+0x8c>
		   frames[frameIndex].data[byte_num] |= (1 << bit_num);  // bit set by OR
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4923      	ldr	r1, [pc, #140]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012b8:	202c      	movs	r0, #44	@ 0x2c
 80012ba:	fb00 f202 	mul.w	r2, r0, r2
 80012be:	440a      	add	r2, r1
 80012c0:	4413      	add	r3, r2
 80012c2:	3324      	adds	r3, #36	@ 0x24
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b259      	sxtb	r1, r3
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	b2cc      	uxtb	r4, r1
 80012dc:	4919      	ldr	r1, [pc, #100]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012de:	202c      	movs	r0, #44	@ 0x2c
 80012e0:	fb00 f202 	mul.w	r2, r0, r2
 80012e4:	440a      	add	r2, r1
 80012e6:	4413      	add	r3, r2
 80012e8:	3324      	adds	r3, #36	@ 0x24
 80012ea:	4622      	mov	r2, r4
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e01f      	b.n	8001330 <modify_can_frame_bit+0xcc>
		else
		   frames[frameIndex].data[byte_num] &= ~(1 << bit_num); // bit unset BY AND
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4913      	ldr	r1, [pc, #76]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012f6:	202c      	movs	r0, #44	@ 0x2c
 80012f8:	fb00 f202 	mul.w	r2, r0, r2
 80012fc:	440a      	add	r2, r1
 80012fe:	4413      	add	r3, r2
 8001300:	3324      	adds	r3, #36	@ 0x24
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25a      	sxtb	r2, r3
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4013      	ands	r3, r2
 8001316:	b259      	sxtb	r1, r3
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	b2cc      	uxtb	r4, r1
 800131e:	4909      	ldr	r1, [pc, #36]	@ (8001344 <modify_can_frame_bit+0xe0>)
 8001320:	202c      	movs	r0, #44	@ 0x2c
 8001322:	fb00 f202 	mul.w	r2, r0, r2
 8001326:	440a      	add	r2, r1
 8001328:	4413      	add	r3, r2
 800132a:	3324      	adds	r3, #36	@ 0x24
 800132c:	4622      	mov	r2, r4
 800132e:	701a      	strb	r2, [r3, #0]
}
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	0800db7c 	.word	0x0800db7c
 800133c:	0800db94 	.word	0x0800db94
 8001340:	0800dba8 	.word	0x0800dba8
 8001344:	20000000 	.word	0x20000000

08001348 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	201b      	movs	r0, #27
 8001372:	f002 f96b 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001376:	201b      	movs	r0, #27
 8001378:	f002 f982 	bl	8003680 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	44020c00 	.word	0x44020c00

08001388 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a4:	4a46      	ldr	r2, [pc, #280]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ae:	4b44      	ldr	r3, [pc, #272]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013bc:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013cc:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e0:	4a37      	ldr	r2, [pc, #220]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ea:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <MX_GPIO_Init+0x138>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <MX_GPIO_Init+0x138>)
 800140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800141c:	4829      	ldr	r0, [pc, #164]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 800141e:	f003 ff13 	bl	8005248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 8001422:	2200      	movs	r2, #0
 8001424:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001428:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <MX_GPIO_Init+0x140>)
 800142a:	f003 ff0d 	bl	8005248 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f243 411e 	movw	r1, #13342	@ 0x341e
 8001434:	4825      	ldr	r0, [pc, #148]	@ (80014cc <MX_GPIO_Init+0x144>)
 8001436:	f003 ff07 	bl	8005248 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fuel_HVC_GPIO_Port, Fuel_HVC_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2120      	movs	r1, #32
 800143e:	4823      	ldr	r0, [pc, #140]	@ (80014cc <MX_GPIO_Init+0x144>)
 8001440:	f003 ff02 	bl	8005248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	481a      	ldr	r0, [pc, #104]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 800145a:	f003 fda3 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 800145e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 8001478:	f003 fd94 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800147c:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001480:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <MX_GPIO_Init+0x140>)
 8001496:	f003 fd85 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800149a:	f243 433e 	movw	r3, #13374	@ 0x343e
 800149e:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_GPIO_Init+0x144>)
 80014b4:	f003 fd76 	bl	8004fa4 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	44020c00 	.word	0x44020c00
 80014c4:	42020800 	.word	0x42020800
 80014c8:	42020000 	.word	0x42020000
 80014cc:	42020400 	.word	0x42020400

080014d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f003 fece 	bl	80052ac <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 fffd 	bl	8002514 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f003 ff60 	bl	80053e2 <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 fff4 	bl	8002514 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f003 ffa2 	bl	8005478 <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 ffeb 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001c4 	.word	0x200001c4
 8001548:	40005400 	.word	0x40005400
 800154c:	60808cd3 	.word	0x60808cd3

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0be      	sub	sp, #248	@ 0xf8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22d0      	movs	r2, #208	@ 0xd0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00b fd53 	bl	800d01c <memset>
  if(i2cHandle->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <HAL_I2C_MspInit+0xc8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d146      	bne.n	800160e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4618      	mov	r0, r3
 8001598:	f004 ff64 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015a2:	f000 ffb7 	bl	8002514 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015de:	2304      	movs	r3, #4
 80015e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <HAL_I2C_MspInit+0xd0>)
 80015ec:	f003 fcda 	bl	8004fa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 8001602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	37f8      	adds	r7, #248	@ 0xf8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40005400 	.word	0x40005400
 800161c:	44020c00 	.word	0x44020c00
 8001620:	42020400 	.word	0x42020400

08001624 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001628:	2000      	movs	r0, #0
 800162a:	f003 ff71 	bl	8005510 <HAL_ICACHE_ConfigAssociativityMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001634:	f000 ff6e 	bl	8002514 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001638:	f003 ff8a 	bl	8005550 <HAL_ICACHE_Enable>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001642:	f000 ff67 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <Servo_SetAngle>:
    // Połączenie danych (TCON ma 9 bitów, więc maskujemy)
    uint16_t tcon_value = ((data[0] << 8) | data[1]) & 0x01FF;

    return tcon_value;
}
void Servo_SetAngle(Servo_t *servo, uint8_t angle) {
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
    if (angle > 180) angle = 180;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2bb4      	cmp	r3, #180	@ 0xb4
 800165c:	d901      	bls.n	8001662 <Servo_SetAngle+0x16>
 800165e:	23b4      	movs	r3, #180	@ 0xb4
 8001660:	70fb      	strb	r3, [r7, #3]

    uint32_t range = servo->max_pulse - servo->min_pulse;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	895b      	ldrh	r3, [r3, #10]
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	891b      	ldrh	r3, [r3, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = servo->min_pulse + ((uint32_t)angle * range) / 180;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	891b      	ldrh	r3, [r3, #8]
 8001674:	4619      	mov	r1, r3
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <Servo_SetAngle+0xbc>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <Servo_SetAngle+0x54>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800169e:	e02c      	b.n	80016fa <Servo_SetAngle+0xae>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d105      	bne.n	80016b4 <Servo_SetAngle+0x68>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016b2:	e022      	b.n	80016fa <Servo_SetAngle+0xae>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d105      	bne.n	80016c8 <Servo_SetAngle+0x7c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80016c6:	e018      	b.n	80016fa <Servo_SetAngle+0xae>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d105      	bne.n	80016dc <Servo_SetAngle+0x90>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016da:	e00e      	b.n	80016fa <Servo_SetAngle+0xae>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d105      	bne.n	80016f0 <Servo_SetAngle+0xa4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80016ee:	e004      	b.n	80016fa <Servo_SetAngle+0xae>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	16c16c17 	.word	0x16c16c17

0800170c <Servo_Init>:


void Servo_Init(Servo_t *servo, TIM_HandleTypeDef *htim, uint32_t channel) {
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
    servo->htim = htim;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	605a      	str	r2, [r3, #4]

    // Typowe wartości dla serwa: 1ms - 2ms w trybie PWM 20ms (50Hz)
    servo->min_pulse = 500;   // w mikrosekundach (np. 0 stopni)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800172a:	811a      	strh	r2, [r3, #8]
    servo->max_pulse = 2500;  // w mikrosekundach (np. 180 stopni)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001732:	815a      	strh	r2, [r3, #10]

}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <__io_putchar>:
int __io_putchar(int ch) //function used to print() in usart
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b0a      	cmp	r3, #10
 800174c:	d102      	bne.n	8001754 <__io_putchar+0x14>
    __io_putchar('\r');
 800174e:	200d      	movs	r0, #13
 8001750:	f7ff fff6 	bl	8001740 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001754:	1d39      	adds	r1, r7, #4
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	2201      	movs	r2, #1
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <__io_putchar+0x2c>)
 800175e:	f009 ff0d 	bl	800b57c <HAL_UART_Transmit>

  return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000500 	.word	0x20000500

08001770 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4a22      	ldr	r2, [pc, #136]	@ (8001810 <Set_PWM_Frequency+0xa0>)
 8001786:	fb82 1203 	smull	r1, r2, r2, r3
 800178a:	441a      	add	r2, r3
 800178c:	1212      	asrs	r2, r2, #8
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	3319      	adds	r3, #25
 8001794:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f640 62d7 	movw	r2, #3799	@ 0xed7
 800179c:	4293      	cmp	r3, r2
 800179e:	d817      	bhi.n	80017d0 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <Set_PWM_Frequency+0xa4>)
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b2:	d302      	bcc.n	80017ba <Set_PWM_Frequency+0x4a>
 80017b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b8:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3301      	adds	r3, #1
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4a13      	ldr	r2, [pc, #76]	@ (8001814 <Set_PWM_Frequency+0xa4>)
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e007      	b.n	80017e0 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 80017d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <Set_PWM_Frequency+0xa4>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e6:	d302      	bcc.n	80017ee <Set_PWM_Frequency+0x7e>
 80017e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ec:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <Set_PWM_Frequency+0xa8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <Set_PWM_Frequency+0xa8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <Set_PWM_Frequency+0xa8>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	f2b9d649 	.word	0xf2b9d649
 8001814:	0ee6b280 	.word	0x0ee6b280
 8001818:	20000384 	.word	0x20000384

0800181c <ESP32_SendCommand>:

void ESP32_SendCommand(const char* command) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7fe fd37 	bl	8000298 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4808      	ldr	r0, [pc, #32]	@ (8001858 <ESP32_SendCommand+0x3c>)
 8001836:	f009 fea1 	bl	800b57c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2202      	movs	r2, #2
 8001840:	4906      	ldr	r1, [pc, #24]	@ (800185c <ESP32_SendCommand+0x40>)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <ESP32_SendCommand+0x3c>)
 8001844:	f009 fe9a 	bl	800b57c <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f001 fe23 	bl	8003494 <HAL_Delay>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000500 	.word	0x20000500
 800185c:	0800dbd8 	.word	0x0800dbd8

08001860 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800186a:	486a      	ldr	r0, [pc, #424]	@ (8001a14 <InitAnalogIndicators+0x1b4>)
 800186c:	f003 fcec 	bl	8005248 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001876:	4868      	ldr	r0, [pc, #416]	@ (8001a18 <InitAnalogIndicators+0x1b8>)
 8001878:	f003 fce6 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001882:	4865      	ldr	r0, [pc, #404]	@ (8001a18 <InitAnalogIndicators+0x1b8>)
 8001884:	f003 fce0 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800188e:	4862      	ldr	r0, [pc, #392]	@ (8001a18 <InitAnalogIndicators+0x1b8>)
 8001890:	f003 fcda 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001894:	2200      	movs	r2, #0
 8001896:	2104      	movs	r1, #4
 8001898:	485f      	ldr	r0, [pc, #380]	@ (8001a18 <InitAnalogIndicators+0x1b8>)
 800189a:	f003 fcd5 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 800189e:	2201      	movs	r2, #1
 80018a0:	2102      	movs	r1, #2
 80018a2:	485d      	ldr	r0, [pc, #372]	@ (8001a18 <InitAnalogIndicators+0x1b8>)
 80018a4:	f003 fcd0 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 80018a8:	2201      	movs	r2, #1
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	485b      	ldr	r0, [pc, #364]	@ (8001a1c <InitAnalogIndicators+0x1bc>)
 80018ae:	f003 fccb 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 80018b2:	2200      	movs	r2, #0
 80018b4:	2140      	movs	r1, #64	@ 0x40
 80018b6:	4859      	ldr	r0, [pc, #356]	@ (8001a1c <InitAnalogIndicators+0x1bc>)
 80018b8:	f003 fcc6 	bl	8005248 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 80018bc:	2200      	movs	r2, #0
 80018be:	2120      	movs	r1, #32
 80018c0:	4856      	ldr	r0, [pc, #344]	@ (8001a1c <InitAnalogIndicators+0x1bc>)
 80018c2:	f003 fcc1 	bl	8005248 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x05);
 80018c6:	2205      	movs	r2, #5
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fc9e 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0x14);
 80018d0:	2214      	movs	r2, #20
 80018d2:	2101      	movs	r1, #1
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fc99 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 4, 0x14);
 80018da:	2214      	movs	r2, #20
 80018dc:	2104      	movs	r1, #4
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fc94 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 5, 0x17);
 80018e4:	2217      	movs	r2, #23
 80018e6:	2105      	movs	r1, #5
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fc8f 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 6, 0x0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2106      	movs	r1, #6
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fc8a 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 7, 0x16);
 80018f8:	2216      	movs	r2, #22
 80018fa:	2107      	movs	r1, #7
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fc85 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2003      	movs	r0, #3
 8001908:	f7ff fc80 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	2003      	movs	r0, #3
 8001912:	f7ff fc7b 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 2, 0x00); // zero flag
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	2003      	movs	r0, #3
 800191c:	f7ff fc76 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 3, 0x00); // zero błędów
 8001920:	2200      	movs	r2, #0
 8001922:	2103      	movs	r1, #3
 8001924:	2003      	movs	r0, #3
 8001926:	f7ff fc71 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 4, 0x00); // zero
 800192a:	2200      	movs	r2, #0
 800192c:	2104      	movs	r1, #4
 800192e:	2003      	movs	r0, #3
 8001930:	f7ff fc6c 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 5, 0x00); // zero
 8001934:	2200      	movs	r2, #0
 8001936:	2105      	movs	r1, #5
 8001938:	2003      	movs	r0, #3
 800193a:	f7ff fc67 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 6, 0x00); // brak błędu
 800193e:	2200      	movs	r2, #0
 8001940:	2106      	movs	r1, #6
 8001942:	2003      	movs	r0, #3
 8001944:	f7ff fc62 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 7, 0x00); // suma kontrolna lub pusty
 8001948:	2200      	movs	r2, #0
 800194a:	2107      	movs	r1, #7
 800194c:	2003      	movs	r0, #3
 800194e:	f7ff fc5d 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_545, 4, 0x7E);  // Unused byte
 8001952:	227e      	movs	r2, #126	@ 0x7e
 8001954:	2104      	movs	r1, #4
 8001956:	2002      	movs	r0, #2
 8001958:	f7ff fc58 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 5, 0x10);  // Unused byte
 800195c:	2210      	movs	r2, #16
 800195e:	2105      	movs	r1, #5
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff fc53 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 6, 0x00);  // Unused byte
 8001966:	2200      	movs	r2, #0
 8001968:	2106      	movs	r1, #6
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fc4e 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 7, 0x18);  // Unused byte
 8001970:	2218      	movs	r2, #24
 8001972:	2107      	movs	r1, #7
 8001974:	2002      	movs	r0, #2
 8001976:	f7ff fc49 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_329, 0, 0x07);  // Unused byte
 800197a:	2207      	movs	r2, #7
 800197c:	2100      	movs	r1, #0
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fc44 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 2, 0xB2);  // Unused byte
 8001984:	22b2      	movs	r2, #178	@ 0xb2
 8001986:	2102      	movs	r1, #2
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fc3f 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 3, 0x19);  // Unused byte
 800198e:	2219      	movs	r2, #25
 8001990:	2103      	movs	r1, #3
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fc3a 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 4, 0x00);  // Unused byte
 8001998:	2200      	movs	r2, #0
 800199a:	2104      	movs	r1, #4
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fc35 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 5, 0xEE);  // Unused byte
 80019a2:	22ee      	movs	r2, #238	@ 0xee
 80019a4:	2105      	movs	r1, #5
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fc30 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 6, 0x00);  // Unused byte
 80019ac:	2200      	movs	r2, #0
 80019ae:	2106      	movs	r1, #6
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fc2b 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 7, 0x00);  // Unused byte
 80019b6:	2200      	movs	r2, #0
 80019b8:	2107      	movs	r1, #7
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fc26 	bl	800120c <modify_can_frame_byte>

	 modify_can_frame_byte(FRAME_1F3, 0, 0x00);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2004      	movs	r0, #4
 80019c6:	f7ff fc21 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 1, 0x00);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2101      	movs	r1, #1
 80019ce:	2004      	movs	r0, #4
 80019d0:	f7ff fc1c 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 2, 0x00);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2102      	movs	r1, #2
 80019d8:	2004      	movs	r0, #4
 80019da:	f7ff fc17 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 3, 0x00);
 80019de:	2200      	movs	r2, #0
 80019e0:	2103      	movs	r1, #3
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7ff fc12 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 4, 0x00);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2104      	movs	r1, #4
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff fc0d 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 5, 0x00);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	2004      	movs	r0, #4
 80019f8:	f7ff fc08 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 6, 0x00);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2106      	movs	r1, #6
 8001a00:	2004      	movs	r0, #4
 8001a02:	f7ff fc03 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 7, 0x00);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2107      	movs	r1, #7
 8001a0a:	2004      	movs	r0, #4
 8001a0c:	f7ff fbfe 	bl	800120c <modify_can_frame_byte>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	42020800 	.word	0x42020800
 8001a18:	42020400 	.word	0x42020400
 8001a1c:	42020000 	.word	0x42020000

08001a20 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uint8_t offset = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4baa      	ldr	r3, [pc, #680]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a38:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a4c:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3304      	adds	r3, #4
 8001a52:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a60:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	3302      	adds	r3, #2
 8001a66:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b9b      	ldr	r3, [pc, #620]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a72:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3301      	adds	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	4b97      	ldr	r3, [pc, #604]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a84:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b92      	ldr	r3, [pc, #584]	@ (8001ce0 <parse_frame+0x2c0>)
 8001a98:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8001ce0 <parse_frame+0x2c0>)
 8001aac:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b88      	ldr	r3, [pc, #544]	@ (8001ce0 <parse_frame+0x2c0>)
 8001ac0:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b83      	ldr	r3, [pc, #524]	@ (8001ce0 <parse_frame+0x2c0>)
 8001ad4:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce0 <parse_frame+0x2c0>)
 8001ae8:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3304      	adds	r3, #4
 8001aee:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b79      	ldr	r3, [pc, #484]	@ (8001ce0 <parse_frame+0x2c0>)
 8001afc:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3304      	adds	r3, #4
 8001b02:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b74      	ldr	r3, [pc, #464]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3304      	adds	r3, #4
 8001b16:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b65      	ldr	r3, [pc, #404]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	3304      	adds	r3, #4
 8001b52:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b60      	ldr	r3, [pc, #384]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3304      	adds	r3, #4
 8001b66:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b74:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	441a      	add	r2, r3
 8001b82:	4b57      	ldr	r3, [pc, #348]	@ (8001ce0 <parse_frame+0x2c0>)
 8001b84:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8001b88:	4613      	mov	r3, r2
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3310      	adds	r3, #16
 8001b98:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	441a      	add	r2, r3
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce0 <parse_frame+0x2c0>)
 8001ba2:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ce0 <parse_frame+0x2c0>)
 8001bc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    isTurboActive = frame.flags & OG_TURBO;
 8001bc6:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <parse_frame+0x2c0>)
 8001bc8:	891b      	ldrh	r3, [r3, #8]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ce4 <parse_frame+0x2c4>)
 8001bda:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 8001bdc:	4b40      	ldr	r3, [pc, #256]	@ (8001ce0 <parse_frame+0x2c0>)
 8001bde:	891b      	ldrh	r3, [r3, #8]
 8001be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <parse_frame+0x2c8>)
 8001bf0:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <parse_frame+0x2c0>)
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bf14      	ite	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	2300      	moveq	r3, #0
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <parse_frame+0x2cc>)
 8001c06:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <parse_frame+0x2d0>)
 8001c1c:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001c1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <parse_frame+0x2d4>)
 8001c32:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 8001c34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <parse_frame+0x2d8>)
 8001c48:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <parse_frame+0x2dc>)
 8001c5e:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <parse_frame+0x2e0>)
 8001c74:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <parse_frame+0x2e4>)
 8001c8a:	701a      	strb	r2, [r3, #0]
    isBatteryWarning = frame.showLights & DL_BATTERY;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <parse_frame+0x2c0>)
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <parse_frame+0x2e8>)
 8001ca0:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <parse_frame+0x2c0>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <parse_frame+0x2ec>)
 8001cb6:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <parse_frame+0x2c0>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <parse_frame+0x2f0>)
 8001ccc:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);  // Diagnostyka
 8001cce:	2110      	movs	r1, #16
 8001cd0:	4810      	ldr	r0, [pc, #64]	@ (8001d14 <parse_frame+0x2f4>)
 8001cd2:	f003 fad1 	bl	8005278 <HAL_GPIO_TogglePin>
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002fc 	.word	0x200002fc
 8001ce4:	2000036c 	.word	0x2000036c
 8001ce8:	2000036d 	.word	0x2000036d
 8001cec:	2000036e 	.word	0x2000036e
 8001cf0:	2000036f 	.word	0x2000036f
 8001cf4:	20000370 	.word	0x20000370
 8001cf8:	20000371 	.word	0x20000371
 8001cfc:	20000372 	.word	0x20000372
 8001d00:	20000373 	.word	0x20000373
 8001d04:	20000374 	.word	0x20000374
 8001d08:	20000375 	.word	0x20000375
 8001d0c:	20000376 	.word	0x20000376
 8001d10:	20000377 	.word	0x20000377
 8001d14:	42020400 	.word	0x42020400

08001d18 <Modify_Speed_RPM>:
void Modify_Speed_RPM(){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
speed = frame.speed * 3.6;
 8001d1e:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <Modify_Speed_RPM+0xe0>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc24 	bl	8000570 <__aeabi_f2d>
 8001d28:	a331      	add	r3, pc, #196	@ (adr r3, 8001df0 <Modify_Speed_RPM+0xd8>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc77 	bl	8000620 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff2b 	bl	8000b94 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a2e      	ldr	r2, [pc, #184]	@ (8001dfc <Modify_Speed_RPM+0xe4>)
 8001d42:	6013      	str	r3, [r2, #0]
    Set_PWM_Frequency(speed);
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <Modify_Speed_RPM+0xe4>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd0b 	bl	8001770 <Set_PWM_Frequency>

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 8001d5a:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <Modify_Speed_RPM+0xe0>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc06 	bl	8000570 <__aeabi_f2d>
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <Modify_Speed_RPM+0xe8>)
 8001d6a:	f7fe fd83 	bl	8000874 <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe feed 	bl	8000b54 <__aeabi_d2uiz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	717b      	strb	r3, [r7, #5]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	713b      	strb	r3, [r7, #4]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <Modify_Speed_RPM+0xe0>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbee 	bl	8000570 <__aeabi_f2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <Modify_Speed_RPM+0xec>)
 8001d9a:	f7fe fa8b 	bl	80002b4 <__adddf3>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <Modify_Speed_RPM+0xf0>)
 8001dac:	f7fe fd62 	bl	8000874 <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fecc 	bl	8000b54 <__aeabi_d2uiz>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	70fb      	strb	r3, [r7, #3]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001dc0:	797b      	ldrb	r3, [r7, #5]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fa20 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 8001dcc:	793b      	ldrb	r3, [r7, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fa1a 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2101      	movs	r1, #1
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff fa14 	bl	800120c <modify_can_frame_byte>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	cccccccd 	.word	0xcccccccd
 8001df4:	400ccccc 	.word	0x400ccccc
 8001df8:	200002fc 	.word	0x200002fc
 8001dfc:	20000368 	.word	0x20000368
 8001e00:	3fc40000 	.word	0x3fc40000
 8001e04:	40480000 	.word	0x40480000
 8001e08:	3fe80000 	.word	0x3fe80000
 8001e0c:	00000000 	.word	0x00000000

08001e10 <Modify_Values>:
void Modify_Values(){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0


    if(frame.engTemp >= 129)
 8001e16:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd0 <Modify_Values+0x1c0>)
 8001e18:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e1c:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001fd4 <Modify_Values+0x1c4>
 8001e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	db06      	blt.n	8001e38 <Modify_Values+0x28>
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 1);
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	2103      	movs	r1, #3
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7ff fa17 	bl	8001264 <modify_can_frame_bit>
 8001e36:	e005      	b.n	8001e44 <Modify_Values+0x34>
    }
    else
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 0);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f7ff fa10 	bl	8001264 <modify_can_frame_bit>
    }

    if (mpgloop == 0xFFFF) {
 8001e44:	4b64      	ldr	r3, [pc, #400]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <Modify_Values+0x48>
        mpgloop = 0x0;
 8001e50:	4b61      	ldr	r3, [pc, #388]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	e055      	b.n	8001f04 <Modify_Values+0xf4>
    } else {
        // Oblicz zmianę RPM (pochodną)
        int16_t rpm_delta = frame.rpm - prev_rpm;
 8001e58:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd0 <Modify_Values+0x1c0>)
 8001e5a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fdc <Modify_Values+0x1cc>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e72:	ee17 3a90 	vmov	r3, s15
 8001e76:	827b      	strh	r3, [r7, #18]

        // Część dynamiczna - reaguje na zmiany obrotów
        int16_t dynamic_component = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	83fb      	strh	r3, [r7, #30]
        if (rpm_delta > 0) {
 8001e7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dd06      	ble.n	8001e92 <Modify_Values+0x82>
            dynamic_component = rpm_delta * 3; // Silna reakcja na przyspieszenie
 8001e84:	8a7b      	ldrh	r3, [r7, #18]
 8001e86:	461a      	mov	r2, r3
 8001e88:	0052      	lsls	r2, r2, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	83fb      	strh	r3, [r7, #30]
 8001e90:	e005      	b.n	8001e9e <Modify_Values+0x8e>
        } else if (rpm_delta < 0) {
 8001e92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da01      	bge.n	8001e9e <Modify_Values+0x8e>
            dynamic_component = rpm_delta; // Słabsza reakcja na zwalnianie
 8001e9a:	8a7b      	ldrh	r3, [r7, #18]
 8001e9c:	83fb      	strh	r3, [r7, #30]
        }

        // Część statyczna - zależy od aktualnych obrotów
        uint16_t static_component = frame.rpm / 50; // Dostosuj dzielnik
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <Modify_Values+0x1c0>)
 8001ea0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ea4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001fe0 <Modify_Values+0x1d0>
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb0:	ee17 3a90 	vmov	r3, s15
 8001eb4:	823b      	strh	r3, [r7, #16]

        // Suma obu komponentów
        int32_t new_mpgloop = mpgloop + dynamic_component + static_component;
 8001eb6:	4b48      	ldr	r3, [pc, #288]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	8a3b      	ldrh	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]

        // Jeśli pedał gazu puszczony - szybkie zmniejszanie
        if (frame.throttle <= 0.2) {
 8001ec8:	4b41      	ldr	r3, [pc, #260]	@ (8001fd0 <Modify_Values+0x1c0>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb4f 	bl	8000570 <__aeabi_f2d>
 8001ed2:	a33d      	add	r3, pc, #244	@ (adr r3, 8001fc8 <Modify_Values+0x1b8>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fe1e 	bl	8000b18 <__aeabi_dcmple>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <Modify_Values+0xd6>
            new_mpgloop = 0; // Szybkie zmniejszanie new_mpgloop * 0.7
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
        }

        // Ograniczenia wartości
        new_mpgloop = (new_mpgloop < 0) ? 0 : new_mpgloop;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eec:	61bb      	str	r3, [r7, #24]
        mpgloop = (new_mpgloop > 0xFFFF) ? 0xFFFF : (uint16_t)new_mpgloop;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef4:	da02      	bge.n	8001efc <Modify_Values+0xec>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	e001      	b.n	8001f00 <Modify_Values+0xf0>
 8001efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f00:	4a35      	ldr	r2, [pc, #212]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001f02:	8013      	strh	r3, [r2, #0]

    }

    modify_can_frame_byte(FRAME_545, 1, mpgloop & 0xFF);//bootleneck - it slows RPM gauge a lot
 8001f04:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7ff f97c 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_545, 2, mpgloop >> 8);
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <Modify_Values+0x1c8>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2102      	movs	r1, #2
 8001f22:	2002      	movs	r0, #2
 8001f24:	f7ff f972 	bl	800120c <modify_can_frame_byte>

    if(isTractionCtrl)
 8001f28:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <Modify_Values+0x1d4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <Modify_Values+0x136>
    {
	 modify_can_frame_byte(FRAME_153, 0, 0x06); // brak błędu //06 //ff to turn on
 8001f30:	2206      	movs	r2, #6
 8001f32:	2100      	movs	r1, #0
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7ff f969 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0xff); // brak aktywnej interwencji DSC
 8001f3a:	22ff      	movs	r2, #255	@ 0xff
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f7ff f964 	bl	800120c <modify_can_frame_byte>
 8001f44:	e009      	b.n	8001f5a <Modify_Values+0x14a>
    }
    else
    {
   	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f7ff f95e 	bl	800120c <modify_can_frame_byte>
   	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 8001f50:	2200      	movs	r2, #0
 8001f52:	2101      	movs	r1, #1
 8001f54:	2003      	movs	r0, #3
 8001f56:	f7ff f959 	bl	800120c <modify_can_frame_byte>
    }

	// Zakładamy: frame.fuel ∈ [0.0, 1.0]
	   float fuel = frame.fuel;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <Modify_Values+0x1c0>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	617b      	str	r3, [r7, #20]

	   // Ogranicz na wszelki wypadek (gdyby coś wyszło poza zakres)
	   if (fuel < 0.0f) fuel = 0.0f;
 8001f60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d502      	bpl.n	8001f74 <Modify_Values+0x164>
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
	   if (fuel > 1.0f) fuel = 1.0f;
 8001f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	dd02      	ble.n	8001f8c <Modify_Values+0x17c>
 8001f86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f8a:	617b      	str	r3, [r7, #20]

	   // Przelicz fuel na kąt z zakresu 45–115
	   float angle = 45.0f + fuel * (115.0f - 45.0f);  // czyli 45 + fuel * 70
 8001f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f90:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001fe8 <Modify_Values+0x1d8>
 8001f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f98:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001fec <Modify_Values+0x1dc>
 8001f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa0:	edc7 7a03 	vstr	s15, [r7, #12]

	   Servo_SetAngle(&servo1, angle);
 8001fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fac:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fb0:	793b      	ldrb	r3, [r7, #4]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480e      	ldr	r0, [pc, #56]	@ (8001ff0 <Modify_Values+0x1e0>)
 8001fb8:	f7ff fb48 	bl	800164c <Servo_SetAngle>
//
//	    if (fabs(angle - lastAngle) >= angleDelta) {
//	        Servo_SetAngle(&servo1, angle);
//	        lastAngle = angle;
//	    }
}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	9999999a 	.word	0x9999999a
 8001fcc:	3fc99999 	.word	0x3fc99999
 8001fd0:	200002fc 	.word	0x200002fc
 8001fd4:	43010000 	.word	0x43010000
 8001fd8:	2000037a 	.word	0x2000037a
 8001fdc:	2000037c 	.word	0x2000037c
 8001fe0:	42480000 	.word	0x42480000
 8001fe4:	20000372 	.word	0x20000372
 8001fe8:	428c0000 	.word	0x428c0000
 8001fec:	42340000 	.word	0x42340000
 8001ff0:	2000035c 	.word	0x2000035c

08001ff4 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	73bb      	strb	r3, [r7, #14]
 8002008:	e009      	b.n	800201e <calculate_checksum+0x2a>
        checksum ^= data[i];
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	4053      	eors	r3, r2
 8002016:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	3301      	adds	r3, #1
 800201c:	73bb      	strb	r3, [r7, #14]
 800201e:	7bba      	ldrb	r2, [r7, #14]
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3f1      	bcc.n	800200a <calculate_checksum+0x16>
    }
    return checksum;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	4603      	mov	r3, r0
 8002048:	71bb      	strb	r3, [r7, #6]
 800204a:	460b      	mov	r3, r1
 800204c:	717b      	strb	r3, [r7, #5]
 800204e:	4613      	mov	r3, r2
 8002050:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 800205a:	797b      	ldrb	r3, [r7, #5]
 800205c:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 800205e:	793b      	ldrb	r3, [r7, #4]
 8002060:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8002062:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002066:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 8002068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800206c:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 800206e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002072:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 8002078:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800207c:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 800207e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002082:	3301      	adds	r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ffb1 	bl	8001ff4 <calculate_checksum>
 8002092:	4603      	mov	r3, r0
 8002094:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8002096:	230a      	movs	r3, #10
 8002098:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 800209a:	f107 010c 	add.w	r1, r7, #12
 800209e:	2364      	movs	r3, #100	@ 0x64
 80020a0:	220a      	movs	r2, #10
 80020a2:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <Send_KBUS_frame+0x7c>)
 80020a4:	f009 fa6a 	bl	800b57c <HAL_UART_Transmit>
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	20000594 	.word	0x20000594

080020b4 <process_frame>:


void process_frame(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
    if (frameReady) {
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <process_frame+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <process_frame+0x18>
        parse_frame(FrameBuffer);
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <process_frame+0x20>)
 80020c2:	f7ff fcad 	bl	8001a20 <parse_frame>
        frameReady = false;
 80020c6:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <process_frame+0x1c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    }
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200002fa 	.word	0x200002fa
 80020d4:	20000298 	.word	0x20000298

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f001 f91c 	bl	8003318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e0:	f000 f868 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e4:	f7ff f950 	bl	8001388 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80020e8:	f7ff f92e 	bl	8001348 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 80020ec:	f000 ff48 	bl	8002f80 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80020f0:	f000 fbe0 	bl	80028b4 <MX_TIM1_Init>
  MX_ICACHE_Init();
 80020f4:	f7ff fa96 	bl	8001624 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 80020f8:	f7fe ff28 	bl	8000f4c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80020fc:	f000 fc8c 	bl	8002a18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002100:	f000 ff8a 	bl	8003018 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002104:	f000 fcfc 	bl	8002b00 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002108:	f7ff f9e2 	bl	80014d0 <MX_I2C1_Init>
  MX_TIM4_Init();
 800210c:	f000 fd48 	bl	8002ba0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002110:	f000 fdba 	bl	8002c88 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002114:	2104      	movs	r1, #4
 8002116:	481d      	ldr	r0, [pc, #116]	@ (800218c <main+0xb4>)
 8002118:	f007 fde6 	bl	8009ce8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800211c:	2100      	movs	r1, #0
 800211e:	481c      	ldr	r0, [pc, #112]	@ (8002190 <main+0xb8>)
 8002120:	f007 fde2 	bl	8009ce8 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8002124:	481b      	ldr	r0, [pc, #108]	@ (8002194 <main+0xbc>)
 8002126:	f7ff fb79 	bl	800181c <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Wi-Fi //AT+CWJAP="PLAY_Swiatlowod_19A1","t8Xv9auf7Z#D" - if connection lost/MCU replaced
  HAL_Delay(5000);
 800212a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800212e:	f001 f9b1 	bl	8003494 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8002132:	4819      	ldr	r0, [pc, #100]	@ (8002198 <main+0xc0>)
 8002134:	f7ff fb72 	bl	800181c <ESP32_SendCommand>
  HAL_Delay(1000);
 8002138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800213c:	f001 f9aa 	bl	8003494 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	4916      	ldr	r1, [pc, #88]	@ (800219c <main+0xc4>)
 8002144:	4816      	ldr	r0, [pc, #88]	@ (80021a0 <main+0xc8>)
 8002146:	f009 fab7 	bl	800b6b8 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800214a:	4816      	ldr	r0, [pc, #88]	@ (80021a4 <main+0xcc>)
 800214c:	f007 fc66 	bl	8009a1c <HAL_TIM_Base_Start_IT>
  HAL_Delay(5);
 8002150:	2005      	movs	r0, #5
 8002152:	f001 f99f 	bl	8003494 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 8002156:	4814      	ldr	r0, [pc, #80]	@ (80021a8 <main+0xd0>)
 8002158:	f007 fc60 	bl	8009a1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800215c:	4813      	ldr	r0, [pc, #76]	@ (80021ac <main+0xd4>)
 800215e:	f007 fc5d 	bl	8009a1c <HAL_TIM_Base_Start_IT>
  Servo_Init(&servo1, &htim5, TIM_CHANNEL_1);
 8002162:	2200      	movs	r2, #0
 8002164:	490a      	ldr	r1, [pc, #40]	@ (8002190 <main+0xb8>)
 8002166:	4812      	ldr	r0, [pc, #72]	@ (80021b0 <main+0xd8>)
 8002168:	f7ff fad0 	bl	800170c <Servo_Init>
  InitCANFrames();
 800216c:	f7fe ffd2 	bl	8001114 <InitCANFrames>
  InitAnalogIndicators();
 8002170:	f7ff fb76 	bl	8001860 <InitAnalogIndicators>
  Servo_SetAngle(&servo1, 0);
 8002174:	2100      	movs	r1, #0
 8002176:	480e      	ldr	r0, [pc, #56]	@ (80021b0 <main+0xd8>)
 8002178:	f7ff fa68 	bl	800164c <Servo_SetAngle>
//	          } else if (angle <= 0) {
//	              angle = 0;
//	              direction = 1;
//	          }
//	          HAL_Delay(50);
	 process_frame();
 800217c:	f7ff ff9a 	bl	80020b4 <process_frame>
	 Modify_Speed_RPM();
 8002180:	f7ff fdca 	bl	8001d18 <Modify_Speed_RPM>
	 Modify_Values();
 8002184:	f7ff fe44 	bl	8001e10 <Modify_Values>
	 process_frame();
 8002188:	bf00      	nop
 800218a:	e7f7      	b.n	800217c <main+0xa4>
 800218c:	20000384 	.word	0x20000384
 8002190:	200004b4 	.word	0x200004b4
 8002194:	0800dc1c 	.word	0x0800dc1c
 8002198:	0800dc24 	.word	0x0800dc24
 800219c:	20000218 	.word	0x20000218
 80021a0:	20000500 	.word	0x20000500
 80021a4:	200003d0 	.word	0x200003d0
 80021a8:	20000468 	.word	0x20000468
 80021ac:	2000041c 	.word	0x2000041c
 80021b0:	2000035c 	.word	0x2000035c

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b09c      	sub	sp, #112	@ 0x70
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2250      	movs	r2, #80	@ 0x50
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00a ff2a 	bl	800d01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <SystemClock_Config+0xdc>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <SystemClock_Config+0xdc>)
 80021e0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80021e4:	6113      	str	r3, [r2, #16]
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <SystemClock_Config+0xdc>)
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021f2:	bf00      	nop
 80021f4:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <SystemClock_Config+0xdc>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d1f9      	bne.n	80021f4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800220e:	2303      	movs	r3, #3
 8002210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002212:	2301      	movs	r3, #1
 8002214:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8002216:	233e      	movs	r3, #62	@ 0x3e
 8002218:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800221a:	2302      	movs	r3, #2
 800221c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800221e:	2302      	movs	r3, #2
 8002220:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002222:	2302      	movs	r3, #2
 8002224:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8002226:	230c      	movs	r3, #12
 8002228:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800222a:	2300      	movs	r3, #0
 800222c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800222e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002232:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4618      	mov	r0, r3
 800223a:	f003 f999 	bl	8005570 <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002244:	f000 f966 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	231f      	movs	r3, #31
 800224a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2303      	movs	r3, #3
 800224e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fdba 	bl	8005de0 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002272:	f000 f94f 	bl	8002514 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <SystemClock_Config+0xe0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <SystemClock_Config+0xe0>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	3770      	adds	r7, #112	@ 0x70
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	44020800 	.word	0x44020800
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80022a0:	2108      	movs	r1, #8
 80022a2:	482e      	ldr	r0, [pc, #184]	@ (800235c <HAL_UART_RxCpltCallback+0xc4>)
 80022a4:	f002 ffe8 	bl	8005278 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_UART_RxCpltCallback+0xc8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d150      	bne.n	8002354 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <HAL_UART_RxCpltCallback+0xcc>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_UART_RxCpltCallback+0xd0>)
 80022b8:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 80022ba:	4b2c      	ldr	r3, [pc, #176]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d813      	bhi.n	80022ea <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b29      	ldr	r3, [pc, #164]	@ (8002370 <HAL_UART_RxCpltCallback+0xd8>)
 80022ca:	5c9a      	ldrb	r2, [r3, r2]
 80022cc:	4b26      	ldr	r3, [pc, #152]	@ (8002368 <HAL_UART_RxCpltCallback+0xd0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e033      	b.n	800234a <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e02f      	b.n	800234a <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d10d      	bne.n	800230e <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <HAL_UART_RxCpltCallback+0xd0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80022f8:	d127      	bne.n	800234a <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 8002304:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e01d      	b.n	800234a <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b5f      	cmp	r3, #95	@ 0x5f
 8002314:	d80a      	bhi.n	800232c <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	b2d1      	uxtb	r1, r2
 800231e:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 8002320:	7011      	strb	r1, [r2, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_UART_RxCpltCallback+0xd0>)
 8002326:	7819      	ldrb	r1, [r3, #0]
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_UART_RxCpltCallback+0xe0>)
 800232a:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b5f      	cmp	r3, #95	@ 0x5f
 8002332:	d90a      	bls.n	800234a <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_UART_RxCpltCallback+0xe4>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
                process_frame();
 800233a:	f7ff febb 	bl	80020b4 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 800233e:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_UART_RxCpltCallback+0xd4>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_UART_RxCpltCallback+0xdc>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 800234a:	2201      	movs	r2, #1
 800234c:	4905      	ldr	r1, [pc, #20]	@ (8002364 <HAL_UART_RxCpltCallback+0xcc>)
 800234e:	480c      	ldr	r0, [pc, #48]	@ (8002380 <HAL_UART_RxCpltCallback+0xe8>)
 8002350:	f009 f9b2 	bl	800b6b8 <HAL_UART_Receive_DMA>
    }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	42020400 	.word	0x42020400
 8002360:	40013800 	.word	0x40013800
 8002364:	20000218 	.word	0x20000218
 8002368:	2000037e 	.word	0x2000037e
 800236c:	200002f8 	.word	0x200002f8
 8002370:	0800dc50 	.word	0x0800dc50
 8002374:	200002f9 	.word	0x200002f9
 8002378:	20000298 	.word	0x20000298
 800237c:	200002fa 	.word	0x200002fa
 8002380:	20000500 	.word	0x20000500

08002384 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af04      	add	r7, sp, #16
 800238a:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a54      	ldr	r2, [pc, #336]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe ff11 	bl	80011bc <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 800239a:	2001      	movs	r0, #1
 800239c:	f7fe ff0e 	bl	80011bc <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7fe ff0b 	bl	80011bc <SendCANFrame>
	 }
	 if (htim == &htim4)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d112      	bne.n	80023d4 <HAL_TIM_PeriodElapsedCallback+0x50>
	 {
	     SendCANFrame(FRAME_153);
 80023ae:	2003      	movs	r0, #3
 80023b0:	f7fe ff04 	bl	80011bc <SendCANFrame>

	     frame1F3_counter++;
 80023b4:	4b4c      	ldr	r3, [pc, #304]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023be:	701a      	strb	r2, [r3, #0]
	     if (frame1F3_counter >= 2) {
 80023c0:	4b49      	ldr	r3, [pc, #292]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d905      	bls.n	80023d4 <HAL_TIM_PeriodElapsedCallback+0x50>
	         SendCANFrame(FRAME_1F3);
 80023c8:	2004      	movs	r0, #4
 80023ca:	f7fe fef7 	bl	80011bc <SendCANFrame>
	         frame1F3_counter = 0;
 80023ce:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
	     }
	 }
	 if (htim == &htim3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a45      	ldr	r2, [pc, #276]	@ (80024ec <HAL_TIM_PeriodElapsedCallback+0x168>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d17d      	bne.n	80024d8 <HAL_TIM_PeriodElapsedCallback+0x154>
	 {
		bool anyConditionMet = false;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 80023e0:	2300      	movs	r3, #0
 80023e2:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_TIM_PeriodElapsedCallback+0x70>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 80023ec:	2307      	movs	r3, #7
 80023ee:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 80023f4:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_TIM_PeriodElapsedCallback+0x84>
			command = command | TURN_LEFT;
 80023fc:	7bbb      	ldrb	r3, [r7, #14]
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_TIM_PeriodElapsedCallback+0x98>
			command = command | TURN_RIGHT;
 8002410:	7bbb      	ldrb	r3, [r7, #14]
 8002412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002416:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <HAL_TIM_PeriodElapsedCallback+0xc0>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 8002428:	2307      	movs	r3, #7
 800242a:	9303      	str	r3, [sp, #12]
 800242c:	2300      	movs	r3, #0
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2300      	movs	r3, #0
 800243a:	225b      	movs	r2, #91	@ 0x5b
 800243c:	21bf      	movs	r1, #191	@ 0xbf
 800243e:	20d0      	movs	r0, #208	@ 0xd0
 8002440:	f7ff fdf8 	bl	8002034 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	2207      	movs	r2, #7
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	9202      	str	r2, [sp, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	9201      	str	r2, [sp, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	9200      	str	r2, [sp, #0]
 8002456:	225b      	movs	r2, #91	@ 0x5b
 8002458:	21bf      	movs	r1, #191	@ 0xbf
 800245a:	20d0      	movs	r0, #208	@ 0xd0
 800245c:	f7ff fdea 	bl	8002034 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 8002460:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_TIM_PeriodElapsedCallback+0xf0>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 8002468:	2201      	movs	r2, #1
 800246a:	2104      	movs	r1, #4
 800246c:	4824      	ldr	r0, [pc, #144]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800246e:	f002 feeb 	bl	8005248 <HAL_GPIO_WritePin>
 8002472:	e004      	b.n	800247e <HAL_TIM_PeriodElapsedCallback+0xfa>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8002474:	2200      	movs	r2, #0
 8002476:	2104      	movs	r1, #4
 8002478:	4821      	ldr	r0, [pc, #132]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800247a:	f002 fee5 	bl	8005248 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 800247e:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x10e>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 8002486:	2201      	movs	r2, #1
 8002488:	2140      	movs	r1, #64	@ 0x40
 800248a:	481f      	ldr	r0, [pc, #124]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800248c:	f002 fedc 	bl	8005248 <HAL_GPIO_WritePin>
 8002490:	e004      	b.n	800249c <HAL_TIM_PeriodElapsedCallback+0x118>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 8002492:	2200      	movs	r2, #0
 8002494:	2140      	movs	r1, #64	@ 0x40
 8002496:	481c      	ldr	r0, [pc, #112]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002498:	f002 fed6 	bl	8005248 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_TIM_PeriodElapsedCallback+0x12c>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2120      	movs	r1, #32
 80024a8:	4817      	ldr	r0, [pc, #92]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80024aa:	f002 fecd 	bl	8005248 <HAL_GPIO_WritePin>
 80024ae:	e004      	b.n	80024ba <HAL_TIM_PeriodElapsedCallback+0x136>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	4814      	ldr	r0, [pc, #80]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80024b6:	f002 fec7 	bl	8005248 <HAL_GPIO_WritePin>
		if (isABSActive) {
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x14a>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2102      	movs	r1, #2
 80024c6:	480e      	ldr	r0, [pc, #56]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80024c8:	f002 febe 	bl	8005248 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 80024cc:	e004      	b.n	80024d8 <HAL_TIM_PeriodElapsedCallback+0x154>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	2102      	movs	r1, #2
 80024d2:	480b      	ldr	r0, [pc, #44]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80024d4:	f002 feb8 	bl	8005248 <HAL_GPIO_WritePin>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200003d0 	.word	0x200003d0
 80024e4:	20000468 	.word	0x20000468
 80024e8:	20000378 	.word	0x20000378
 80024ec:	2000041c 	.word	0x2000041c
 80024f0:	20000370 	.word	0x20000370
 80024f4:	20000376 	.word	0x20000376
 80024f8:	20000377 	.word	0x20000377
 80024fc:	20000371 	.word	0x20000371
 8002500:	42020400 	.word	0x42020400
 8002504:	20000374 	.word	0x20000374
 8002508:	42020000 	.word	0x42020000
 800250c:	20000375 	.word	0x20000375
 8002510:	20000373 	.word	0x20000373

08002514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 800251c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002520:	4801      	ldr	r0, [pc, #4]	@ (8002528 <Error_Handler+0x14>)
 8002522:	f002 fea9 	bl	8005278 <HAL_GPIO_TogglePin>
 8002526:	e7f9      	b.n	800251c <Error_Handler+0x8>
 8002528:	42020000 	.word	0x42020000

0800252c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800253e:	bf00      	nop
 8002540:	e7fd      	b.n	800253e <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	bf00      	nop
 8002548:	e7fd      	b.n	8002546 <HardFault_Handler+0x4>

0800254a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254e:	bf00      	nop
 8002550:	e7fd      	b.n	800254e <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	bf00      	nop
 8002558:	e7fd      	b.n	8002556 <BusFault_Handler+0x4>

0800255a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255e:	bf00      	nop
 8002560:	e7fd      	b.n	800255e <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 ff60 	bl	8003454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <GPDMA1_Channel0_IRQHandler+0x10>)
 800259e:	f001 fb5e 	bl	8003c5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000628 	.word	0x20000628

080025ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <FDCAN1_IT0_IRQHandler+0x10>)
 80025b2:	f002 fa7f 	bl	8004ab4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000160 	.word	0x20000160

080025c0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <FDCAN1_IT1_IRQHandler+0x10>)
 80025c6:	f002 fa75 	bl	8004ab4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000160 	.word	0x20000160

080025d4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <TIM1_BRK_IRQHandler+0x10>)
 80025da:	f007 fcc9 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000384 	.word	0x20000384

080025e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <TIM1_UP_IRQHandler+0x10>)
 80025ee:	f007 fcbf 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000384 	.word	0x20000384

080025fc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002602:	f007 fcb5 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000384 	.word	0x20000384

08002610 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <TIM1_CC_IRQHandler+0x10>)
 8002616:	f007 fcab 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000384 	.word	0x20000384

08002624 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <TIM2_IRQHandler+0x10>)
 800262a:	f007 fca1 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200003d0 	.word	0x200003d0

08002638 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <TIM3_IRQHandler+0x10>)
 800263e:	f007 fc97 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000041c 	.word	0x2000041c

0800264c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <TIM4_IRQHandler+0x10>)
 8002652:	f007 fc8d 	bl	8009f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000468 	.word	0x20000468

08002660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <USART1_IRQHandler+0x10>)
 8002666:	f009 f879 	bl	800b75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000500 	.word	0x20000500

08002674 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e00a      	b.n	800269c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002686:	f3af 8000 	nop.w
 800268a:	4601      	mov	r1, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	b2ca      	uxtb	r2, r1
 8002694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbf0      	blt.n	8002686 <_read+0x12>
  }

  return len;
 80026a4:	687b      	ldr	r3, [r7, #4]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e009      	b.n	80026d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f839 	bl	8001740 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf1      	blt.n	80026c0 <_write+0x12>
  }
  return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_close>:

int _close(int file)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800270e:	605a      	str	r2, [r3, #4]
  return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_isatty>:

int _isatty(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f00a fc9a 	bl	800d0b8 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20044000 	.word	0x20044000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	20000380 	.word	0x20000380
 80027b8:	200007f0 	.word	0x200007f0

080027bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027c2:	4b35      	ldr	r3, [pc, #212]	@ (8002898 <SystemInit+0xdc>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <SystemInit+0xdc>)
 80027ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80027d2:	4b32      	ldr	r3, [pc, #200]	@ (800289c <SystemInit+0xe0>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80027d8:	4b30      	ldr	r3, [pc, #192]	@ (800289c <SystemInit+0xe0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80027de:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <SystemInit+0xe0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80027e4:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <SystemInit+0xe0>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	492c      	ldr	r1, [pc, #176]	@ (800289c <SystemInit+0xe0>)
 80027ea:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <SystemInit+0xe4>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <SystemInit+0xe0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <SystemInit+0xe0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <SystemInit+0xe0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002802:	4b26      	ldr	r3, [pc, #152]	@ (800289c <SystemInit+0xe0>)
 8002804:	4a27      	ldr	r2, [pc, #156]	@ (80028a4 <SystemInit+0xe8>)
 8002806:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002808:	4b24      	ldr	r3, [pc, #144]	@ (800289c <SystemInit+0xe0>)
 800280a:	2200      	movs	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800280e:	4b23      	ldr	r3, [pc, #140]	@ (800289c <SystemInit+0xe0>)
 8002810:	4a24      	ldr	r2, [pc, #144]	@ (80028a4 <SystemInit+0xe8>)
 8002812:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002814:	4b21      	ldr	r3, [pc, #132]	@ (800289c <SystemInit+0xe0>)
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <SystemInit+0xe0>)
 800281c:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <SystemInit+0xe8>)
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <SystemInit+0xe0>)
 8002822:	2200      	movs	r2, #0
 8002824:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <SystemInit+0xe0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <SystemInit+0xe0>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <SystemInit+0xe0>)
 8002834:	2200      	movs	r2, #0
 8002836:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002838:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <SystemInit+0xdc>)
 800283a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800283e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <SystemInit+0xec>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002848:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002850:	d003      	beq.n	800285a <SystemInit+0x9e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002858:	d117      	bne.n	800288a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <SystemInit+0xec>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <SystemInit+0xec>)
 8002868:	4a10      	ldr	r2, [pc, #64]	@ (80028ac <SystemInit+0xf0>)
 800286a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800286c:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <SystemInit+0xec>)
 800286e:	4a10      	ldr	r2, [pc, #64]	@ (80028b0 <SystemInit+0xf4>)
 8002870:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <SystemInit+0xec>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <SystemInit+0xec>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <SystemInit+0xec>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <SystemInit+0xec>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	61d3      	str	r3, [r2, #28]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00
 800289c:	44020c00 	.word	0x44020c00
 80028a0:	eae2eae3 	.word	0xeae2eae3
 80028a4:	01010280 	.word	0x01010280
 80028a8:	40022000 	.word	0x40022000
 80028ac:	08192a3b 	.word	0x08192a3b
 80028b0:	4c5d6e7f 	.word	0x4c5d6e7f

080028b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b09c      	sub	sp, #112	@ 0x70
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2234      	movs	r2, #52	@ 0x34
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f00a fb94 	bl	800d01c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028f4:	4b46      	ldr	r3, [pc, #280]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 80028f6:	4a47      	ldr	r2, [pc, #284]	@ (8002a14 <MX_TIM1_Init+0x160>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80028fa:	4b45      	ldr	r3, [pc, #276]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 80028fc:	2231      	movs	r2, #49	@ 0x31
 80028fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002906:	4b42      	ldr	r3, [pc, #264]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002908:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290e:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002914:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800291a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 800291c:	2280      	movs	r2, #128	@ 0x80
 800291e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002920:	483b      	ldr	r0, [pc, #236]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002922:	f007 f823 	bl	800996c <HAL_TIM_Base_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800292c:	f7ff fdf2 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002934:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002936:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800293a:	4619      	mov	r1, r3
 800293c:	4834      	ldr	r0, [pc, #208]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 800293e:	f007 fdf5 	bl	800a52c <HAL_TIM_ConfigClockSource>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002948:	f7ff fde4 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800294c:	4830      	ldr	r0, [pc, #192]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 800294e:	f007 f974 	bl	8009c3a <HAL_TIM_PWM_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002958:	f7ff fddc 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002968:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800296c:	4619      	mov	r1, r3
 800296e:	4828      	ldr	r0, [pc, #160]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002970:	f008 fc04 	bl	800b17c <HAL_TIMEx_MasterConfigSynchronization>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800297a:	f7ff fdcb 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297e:	2360      	movs	r3, #96	@ 0x60
 8002980:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8002982:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002988:	2300      	movs	r3, #0
 800298a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800298c:	2300      	movs	r3, #0
 800298e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800299c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029a0:	2204      	movs	r2, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	481a      	ldr	r0, [pc, #104]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 80029a6:	f007 fcad 	bl	800a304 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80029b0:	f7ff fdb0 	bl	8002514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029e4:	2300      	movs	r3, #0
 80029e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4807      	ldr	r0, [pc, #28]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 80029f2:	f008 fc93 	bl	800b31c <HAL_TIMEx_ConfigBreakDeadTime>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80029fc:	f7ff fd8a 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a00:	4803      	ldr	r0, [pc, #12]	@ (8002a10 <MX_TIM1_Init+0x15c>)
 8002a02:	f000 fa5b 	bl	8002ebc <HAL_TIM_MspPostInit>

}
 8002a06:	bf00      	nop
 8002a08:	3770      	adds	r7, #112	@ 0x70
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000384 	.word	0x20000384
 8002a14:	40012c00 	.word	0x40012c00

08002a18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	@ 0x38
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	615a      	str	r2, [r3, #20]
 8002a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a54:	2231      	movs	r2, #49	@ 0x31
 8002a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a60:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a72:	4822      	ldr	r0, [pc, #136]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a74:	f006 ff7a 	bl	800996c <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a7e:	f7ff fd49 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	481b      	ldr	r0, [pc, #108]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002a90:	f007 fd4c 	bl	800a52c <HAL_TIM_ConfigClockSource>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a9a:	f7ff fd3b 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002a9e:	4817      	ldr	r0, [pc, #92]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002aa0:	f007 f86a 	bl	8009b78 <HAL_TIM_OC_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002aaa:	f7ff fd33 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	4619      	mov	r1, r3
 8002abc:	480f      	ldr	r0, [pc, #60]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002abe:	f008 fb5d 	bl	800b17c <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002ac8:	f7ff fd24 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002acc:	2300      	movs	r3, #0
 8002ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4806      	ldr	r0, [pc, #24]	@ (8002afc <MX_TIM2_Init+0xe4>)
 8002ae4:	f007 fb94 	bl	800a210 <HAL_TIM_OC_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002aee:	f7ff fd11 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	3738      	adds	r7, #56	@ 0x38
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003d0 	.word	0x200003d0

08002b00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b20:	4a1e      	ldr	r2, [pc, #120]	@ (8002b9c <MX_TIM3_Init+0x9c>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002b32:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b34:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002b38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b46:	4814      	ldr	r0, [pc, #80]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b48:	f006 ff10 	bl	800996c <HAL_TIM_Base_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002b52:	f7ff fcdf 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b64:	f007 fce2 	bl	800a52c <HAL_TIM_ConfigClockSource>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b6e:	f7ff fcd1 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <MX_TIM3_Init+0x98>)
 8002b80:	f008 fafc 	bl	800b17c <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002b8a:	f7ff fcc3 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000041c 	.word	0x2000041c
 8002b9c:	40000400 	.word	0x40000400

08002ba0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	@ 0x38
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <MX_TIM4_Init+0xe4>)
 8002bd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 8002bd8:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002bda:	2231      	movs	r2, #49	@ 0x31
 8002bdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8002be4:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002be6:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bec:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf2:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bf8:	4821      	ldr	r0, [pc, #132]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002bfa:	f006 feb7 	bl	800996c <HAL_TIM_Base_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002c04:	f7ff fc86 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c12:	4619      	mov	r1, r3
 8002c14:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002c16:	f007 fc89 	bl	800a52c <HAL_TIM_ConfigClockSource>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002c20:	f7ff fc78 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002c24:	4816      	ldr	r0, [pc, #88]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002c26:	f006 ffa7 	bl	8009b78 <HAL_TIM_OC_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002c30:	f7ff fc70 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	480f      	ldr	r0, [pc, #60]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002c44:	f008 fa9a 	bl	800b17c <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002c4e:	f7ff fc61 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c62:	463b      	mov	r3, r7
 8002c64:	2204      	movs	r2, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <MX_TIM4_Init+0xe0>)
 8002c6a:	f007 fad1 	bl	800a210 <HAL_TIM_OC_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002c74:	f7ff fc4e 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	3738      	adds	r7, #56	@ 0x38
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000468 	.word	0x20000468
 8002c84:	40000800 	.word	0x40000800

08002c88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cac:	4b22      	ldr	r3, [pc, #136]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cae:	4a23      	ldr	r2, [pc, #140]	@ (8002d3c <MX_TIM5_Init+0xb4>)
 8002cb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cb4:	22f9      	movs	r2, #249	@ 0xf9
 8002cb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cc0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002cd2:	4819      	ldr	r0, [pc, #100]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cd4:	f006 ffb1 	bl	8009c3a <HAL_TIM_PWM_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002cde:	f7ff fc19 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4811      	ldr	r0, [pc, #68]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002cf2:	f008 fa43 	bl	800b17c <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002cfc:	f7ff fc0a 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d00:	2360      	movs	r3, #96	@ 0x60
 8002d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002d04:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002d08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4807      	ldr	r0, [pc, #28]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002d1a:	f007 faf3 	bl	800a304 <HAL_TIM_PWM_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002d24:	f7ff fbf6 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002d28:	4803      	ldr	r0, [pc, #12]	@ (8002d38 <MX_TIM5_Init+0xb0>)
 8002d2a:	f000 f8c7 	bl	8002ebc <HAL_TIM_MspPostInit>

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	@ 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200004b4 	.word	0x200004b4
 8002d3c:	40000c00 	.word	0x40000c00

08002d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <HAL_TIM_Base_MspInit+0x128>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d12f      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d52:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002d54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d58:	4a44      	ldr	r2, [pc, #272]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002d5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d5e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002d62:	4b42      	ldr	r3, [pc, #264]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2029      	movs	r0, #41	@ 0x29
 8002d76:	f000 fc69 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002d7a:	2029      	movs	r0, #41	@ 0x29
 8002d7c:	f000 fc80 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2102      	movs	r1, #2
 8002d84:	202a      	movs	r0, #42	@ 0x2a
 8002d86:	f000 fc61 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d8a:	202a      	movs	r0, #42	@ 0x2a
 8002d8c:	f000 fc78 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2102      	movs	r1, #2
 8002d94:	202b      	movs	r0, #43	@ 0x2b
 8002d96:	f000 fc59 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002d9a:	202b      	movs	r0, #43	@ 0x2b
 8002d9c:	f000 fc70 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2102      	movs	r1, #2
 8002da4:	202c      	movs	r0, #44	@ 0x2c
 8002da6:	f000 fc51 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002daa:	202c      	movs	r0, #44	@ 0x2c
 8002dac:	f000 fc68 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002db0:	e055      	b.n	8002e5e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dba:	d117      	bne.n	8002dec <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002dcc:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2103      	movs	r1, #3
 8002dde:	202d      	movs	r0, #45	@ 0x2d
 8002de0:	f000 fc34 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de4:	202d      	movs	r0, #45	@ 0x2d
 8002de6:	f000 fc4b 	bl	8003680 <HAL_NVIC_EnableIRQ>
}
 8002dea:	e038      	b.n	8002e5e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <HAL_TIM_Base_MspInit+0x130>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d117      	bne.n	8002e26 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2106      	movs	r1, #6
 8002e18:	202e      	movs	r0, #46	@ 0x2e
 8002e1a:	f000 fc17 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e1e:	202e      	movs	r0, #46	@ 0x2e
 8002e20:	f000 fc2e 	bl	8003680 <HAL_NVIC_EnableIRQ>
}
 8002e24:	e01b      	b.n	8002e5e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <HAL_TIM_Base_MspInit+0x134>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d116      	bne.n	8002e5e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e30:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e36:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_TIM_Base_MspInit+0x12c>)
 8002e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2102      	movs	r1, #2
 8002e52:	202f      	movs	r0, #47	@ 0x2f
 8002e54:	f000 fbfa 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e58:	202f      	movs	r0, #47	@ 0x2f
 8002e5a:	f000 fc11 	bl	8003680 <HAL_NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	44020c00 	.word	0x44020c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800

08002e78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e90:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	44020c00 	.word	0x44020c00

08002ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a25      	ldr	r2, [pc, #148]	@ (8002f70 <HAL_TIM_MspPostInit+0xb4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d120      	bne.n	8002f20 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee4:	4a23      	ldr	r2, [pc, #140]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002eee:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	4817      	ldr	r0, [pc, #92]	@ (8002f78 <HAL_TIM_MspPostInit+0xbc>)
 8002f1a:	f002 f843 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f1e:	e023      	b.n	8002f68 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM5)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_TIM_MspPostInit+0xc0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d11e      	bne.n	8002f68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f30:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <HAL_TIM_MspPostInit+0xb8>)
 8002f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	4805      	ldr	r0, [pc, #20]	@ (8002f78 <HAL_TIM_MspPostInit+0xbc>)
 8002f64:	f002 f81e 	bl	8004fa4 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	@ 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	44020c00 	.word	0x44020c00
 8002f78:	42020000 	.word	0x42020000
 8002f7c:	40000c00 	.word	0x40000c00

08002f80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f84:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002f86:	4a23      	ldr	r2, [pc, #140]	@ (8003014 <MX_USART1_UART_Init+0x94>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fb6:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fc8:	4811      	ldr	r0, [pc, #68]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fca:	f008 fa87 	bl	800b4dc <HAL_UART_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fd4:	f7ff fa9e 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	480d      	ldr	r0, [pc, #52]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fdc:	f009 fd49 	bl	800ca72 <HAL_UARTEx_SetTxFifoThreshold>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fe6:	f7ff fa95 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fea:	2100      	movs	r1, #0
 8002fec:	4808      	ldr	r0, [pc, #32]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002fee:	f009 fd7e 	bl	800caee <HAL_UARTEx_SetRxFifoThreshold>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ff8:	f7ff fa8c 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ffc:	4804      	ldr	r0, [pc, #16]	@ (8003010 <MX_USART1_UART_Init+0x90>)
 8002ffe:	f009 fcff 	bl	800ca00 <HAL_UARTEx_DisableFifoMode>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003008:	f7ff fa84 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000500 	.word	0x20000500
 8003014:	40013800 	.word	0x40013800

08003018 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800301c:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800301e:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <MX_USART2_UART_Init+0x98>)
 8003020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003024:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800302c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003030:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800303a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800303e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003058:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800305e:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003060:	2200      	movs	r2, #0
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003064:	4811      	ldr	r0, [pc, #68]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003066:	f008 fa39 	bl	800b4dc <HAL_UART_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003070:	f7ff fa50 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003074:	2100      	movs	r1, #0
 8003076:	480d      	ldr	r0, [pc, #52]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 8003078:	f009 fcfb 	bl	800ca72 <HAL_UARTEx_SetTxFifoThreshold>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003082:	f7ff fa47 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003086:	2100      	movs	r1, #0
 8003088:	4808      	ldr	r0, [pc, #32]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800308a:	f009 fd30 	bl	800caee <HAL_UARTEx_SetRxFifoThreshold>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003094:	f7ff fa3e 	bl	8002514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003098:	4804      	ldr	r0, [pc, #16]	@ (80030ac <MX_USART2_UART_Init+0x94>)
 800309a:	f009 fcb1 	bl	800ca00 <HAL_UARTEx_DisableFifoMode>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80030a4:	f7ff fa36 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000594 	.word	0x20000594
 80030b0:	40004400 	.word	0x40004400

080030b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0c0      	sub	sp, #256	@ 0x100
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030cc:	f107 0318 	add.w	r3, r7, #24
 80030d0:	22d0      	movs	r2, #208	@ 0xd0
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 ffa1 	bl	800d01c <memset>
  if(uartHandle->Instance==USART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a72      	ldr	r2, [pc, #456]	@ (80032a8 <HAL_UART_MspInit+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f040 8091 	bne.w	8003208 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030e6:	f04f 0201 	mov.w	r2, #1
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030f2:	2300      	movs	r3, #0
 80030f4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f9b2 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003106:	f7ff fa05 	bl	8002514 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800310a:	4b68      	ldr	r3, [pc, #416]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800310c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003110:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003116:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800311a:	4b64      	ldr	r3, [pc, #400]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800311c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003128:	4b60      	ldr	r3, [pc, #384]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800312e:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003138:	4b5c      	ldr	r3, [pc, #368]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003146:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800314a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003160:	2304      	movs	r3, #4
 8003162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800316a:	4619      	mov	r1, r3
 800316c:	4850      	ldr	r0, [pc, #320]	@ (80032b0 <HAL_UART_MspInit+0x1fc>)
 800316e:	f001 ff19 	bl	8004fa4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003172:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 8003174:	4a50      	ldr	r2, [pc, #320]	@ (80032b8 <HAL_UART_MspInit+0x204>)
 8003176:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8003178:	4b4e      	ldr	r3, [pc, #312]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 800317a:	2215      	movs	r2, #21
 800317c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800317e:	4b4d      	ldr	r3, [pc, #308]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003184:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800318a:	4b4a      	ldr	r3, [pc, #296]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8003190:	4b48      	ldr	r3, [pc, #288]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 8003192:	2200      	movs	r2, #0
 8003194:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003196:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800319c:	4b45      	ldr	r3, [pc, #276]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80031a2:	4b44      	ldr	r3, [pc, #272]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80031a8:	4b42      	ldr	r3, [pc, #264]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80031b4:	4b3f      	ldr	r3, [pc, #252]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80031ba:	4b3e      	ldr	r3, [pc, #248]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80031c0:	4b3c      	ldr	r3, [pc, #240]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80031c6:	483b      	ldr	r0, [pc, #236]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031c8:	f000 fb18 	bl	80037fc <HAL_DMA_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80031d2:	f7ff f99f 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a36      	ldr	r2, [pc, #216]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80031de:	4a35      	ldr	r2, [pc, #212]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031e4:	2110      	movs	r1, #16
 80031e6:	4833      	ldr	r0, [pc, #204]	@ (80032b4 <HAL_UART_MspInit+0x200>)
 80031e8:	f000 fe9a 	bl	8003f20 <HAL_DMA_ConfigChannelAttributes>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80031f2:	f7ff f98f 	bl	8002514 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2101      	movs	r1, #1
 80031fa:	203a      	movs	r0, #58	@ 0x3a
 80031fc:	f000 fa26 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003200:	203a      	movs	r0, #58	@ 0x3a
 8003202:	f000 fa3d 	bl	8003680 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003206:	e049      	b.n	800329c <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2b      	ldr	r2, [pc, #172]	@ (80032bc <HAL_UART_MspInit+0x208>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d144      	bne.n	800329c <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003212:	f04f 0202 	mov.w	r2, #2
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800321e:	2300      	movs	r3, #0
 8003220:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003222:	f107 0318 	add.w	r3, r7, #24
 8003226:	4618      	mov	r0, r3
 8003228:	f003 f91c 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003232:	f7ff f96f 	bl	8002514 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003238:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800323e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003242:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003246:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800325a:	4a14      	ldr	r2, [pc, #80]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_UART_MspInit+0x1f8>)
 8003266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003272:	230c      	movs	r3, #12
 8003274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800328a:	2307      	movs	r3, #7
 800328c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003290:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003294:	4619      	mov	r1, r3
 8003296:	480a      	ldr	r0, [pc, #40]	@ (80032c0 <HAL_UART_MspInit+0x20c>)
 8003298:	f001 fe84 	bl	8004fa4 <HAL_GPIO_Init>
}
 800329c:	bf00      	nop
 800329e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40013800 	.word	0x40013800
 80032ac:	44020c00 	.word	0x44020c00
 80032b0:	42020400 	.word	0x42020400
 80032b4:	20000628 	.word	0x20000628
 80032b8:	40020050 	.word	0x40020050
 80032bc:	40004400 	.word	0x40004400
 80032c0:	42020000 	.word	0x42020000

080032c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032c4:	480d      	ldr	r0, [pc, #52]	@ (80032fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff fa78 	bl	80027bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032cc:	480c      	ldr	r0, [pc, #48]	@ (8003300 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ce:	490d      	ldr	r1, [pc, #52]	@ (8003304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <LoopForever+0xe>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003310 <LoopForever+0x16>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032f2:	f009 fee7 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032f6:	f7fe feef 	bl	80020d8 <main>

080032fa <LoopForever>:

LoopForever:
    b LoopForever
 80032fa:	e7fe      	b.n	80032fa <LoopForever>
  ldr   r0, =_estack
 80032fc:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8003300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003304:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8003308:	0800dcec 	.word	0x0800dcec
  ldr r2, =_sbss
 800330c:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8003310:	200007f0 	.word	0x200007f0

08003314 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC1_IRQHandler>
	...

08003318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 f98a 	bl	8003636 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003322:	f002 ff15 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_Init+0x44>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	490b      	ldr	r1, [pc, #44]	@ (8003360 <HAL_Init+0x48>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <HAL_Init+0x4c>)
 800333a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800333c:	2004      	movs	r0, #4
 800333e:	f000 f9cf 	bl	80036e0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003342:	2000      	movs	r0, #0
 8003344:	f000 f810 	bl	8003368 <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e002      	b.n	8003358 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003352:	f7ff f8eb 	bl	800252c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	44020c00 	.word	0x44020c00
 8003360:	0800dc58 	.word	0x0800dc58
 8003364:	200000dc 	.word	0x200000dc

08003368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003374:	4b33      	ldr	r3, [pc, #204]	@ (8003444 <HAL_InitTick+0xdc>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e05c      	b.n	800343a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003380:	4b31      	ldr	r3, [pc, #196]	@ (8003448 <HAL_InitTick+0xe0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b04      	cmp	r3, #4
 800338a:	d10c      	bne.n	80033a6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <HAL_InitTick+0xe4>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b2c      	ldr	r3, [pc, #176]	@ (8003444 <HAL_InitTick+0xdc>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	4619      	mov	r1, r3
 8003396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800339a:	fbb3 f3f1 	udiv	r3, r3, r1
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e037      	b.n	8003416 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80033a6:	f000 f9f3 	bl	8003790 <HAL_SYSTICK_GetCLKSourceConfig>
 80033aa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d023      	beq.n	80033fa <HAL_InitTick+0x92>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d82d      	bhi.n	8003414 <HAL_InitTick+0xac>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_InitTick+0x5e>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d00d      	beq.n	80033e0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80033c4:	e026      	b.n	8003414 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80033c6:	4b21      	ldr	r3, [pc, #132]	@ (800344c <HAL_InitTick+0xe4>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <HAL_InitTick+0xdc>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80033d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e01a      	b.n	8003416 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80033e0:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <HAL_InitTick+0xdc>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	60fb      	str	r3, [r7, #12]
        break;
 80033f8:	e00d      	b.n	8003416 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80033fa:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <HAL_InitTick+0xdc>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003404:	fbb3 f3f2 	udiv	r3, r3, r2
 8003408:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	60fb      	str	r3, [r7, #12]
        break;
 8003412:	e000      	b.n	8003416 <HAL_InitTick+0xae>
        break;
 8003414:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f940 	bl	800369c <HAL_SYSTICK_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e009      	b.n	800343a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003426:	2200      	movs	r2, #0
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	f000 f90d 	bl	800364c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003432:	4a07      	ldr	r2, [pc, #28]	@ (8003450 <HAL_InitTick+0xe8>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200000e4 	.word	0x200000e4
 8003448:	e000e010 	.word	0xe000e010
 800344c:	200000dc 	.word	0x200000dc
 8003450:	200000e0 	.word	0x200000e0

08003454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_IncTick+0x20>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_IncTick+0x24>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_IncTick+0x24>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	200000e4 	.word	0x200000e4
 8003478:	200006a0 	.word	0x200006a0

0800347c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_GetTick+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	200006a0 	.word	0x200006a0

08003494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff ffee 	bl	800347c <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d005      	beq.n	80034ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_Delay+0x44>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ba:	bf00      	nop
 80034bc:	f7ff ffde 	bl	800347c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d8f7      	bhi.n	80034bc <HAL_Delay+0x28>
  {
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200000e4 	.word	0x200000e4

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	@ (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	@ (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	@ (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	@ 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff4c 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365a:	f7ff ff63 	bl	8003524 <__NVIC_GetPriorityGrouping>
 800365e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f7ff ffb3 	bl	80035d0 <NVIC_EncodePriority>
 800366a:	4602      	mov	r2, r0
 800366c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff82 	bl	800357c <__NVIC_SetPriority>
}
 8003678:	bf00      	nop
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff56 	bl	8003540 <__NVIC_EnableIRQ>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00d      	b.n	80036ce <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <HAL_SYSTICK_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80036ba:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_SYSTICK_Config+0x40>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_SYSTICK_Config+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a05      	ldr	r2, [pc, #20]	@ (80036dc <HAL_SYSTICK_Config+0x40>)
 80036c6:	f043 0303 	orr.w	r3, r3, #3
 80036ca:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d844      	bhi.n	8003778 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003717 	.word	0x08003717
 80036f8:	08003735 	.word	0x08003735
 80036fc:	08003757 	.word	0x08003757
 8003700:	08003779 	.word	0x08003779
 8003704:	08003709 	.word	0x08003709
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1e      	ldr	r2, [pc, #120]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6013      	str	r3, [r2, #0]
      break;
 8003714:	e031      	b.n	800377a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003716:	4b1c      	ldr	r3, [pc, #112]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800372a:	f023 030c 	bic.w	r3, r3, #12
 800372e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003732:	e022      	b.n	800377a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003734:	4b14      	ldr	r3, [pc, #80]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003742:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003746:	f023 030c 	bic.w	r3, r3, #12
 800374a:	4a10      	ldr	r2, [pc, #64]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003754:	e011      	b.n	800377a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0b      	ldr	r2, [pc, #44]	@ (8003788 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003768:	f023 030c 	bic.w	r3, r3, #12
 800376c:	4a07      	ldr	r2, [pc, #28]	@ (800378c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003776:	e000      	b.n	800377a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003778:	bf00      	nop
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e010 	.word	0xe000e010
 800378c:	44020c00 	.word	0x44020c00

08003790 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80037a2:	2304      	movs	r3, #4
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	e01e      	b.n	80037e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80037a8:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80037aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d00f      	beq.n	80037da <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d80f      	bhi.n	80037e0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d003      	beq.n	80037d4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80037cc:	e008      	b.n	80037e0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
        break;
 80037d2:	e008      	b.n	80037e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80037d4:	2301      	movs	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
        break;
 80037d8:	e005      	b.n	80037e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80037da:	2302      	movs	r3, #2
 80037dc:	607b      	str	r3, [r7, #4]
        break;
 80037de:	e002      	b.n	80037e6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
        break;
 80037e4:	bf00      	nop
    }
  }
  return systick_source;
 80037e6:	687b      	ldr	r3, [r7, #4]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e010 	.word	0xe000e010
 80037f8:	44020c00 	.word	0x44020c00

080037fc <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff fe3a 	bl	800347c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0db      	b.n	80039cc <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_DMA_Init+0x1d8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f000 809f 	beq.w	800395e <HAL_DMA_Init+0x162>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6c      	ldr	r2, [pc, #432]	@ (80039d8 <HAL_DMA_Init+0x1dc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f000 8099 	beq.w	800395e <HAL_DMA_Init+0x162>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6a      	ldr	r2, [pc, #424]	@ (80039dc <HAL_DMA_Init+0x1e0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f000 8093 	beq.w	800395e <HAL_DMA_Init+0x162>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a68      	ldr	r2, [pc, #416]	@ (80039e0 <HAL_DMA_Init+0x1e4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f000 808d 	beq.w	800395e <HAL_DMA_Init+0x162>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a66      	ldr	r2, [pc, #408]	@ (80039e4 <HAL_DMA_Init+0x1e8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f000 8087 	beq.w	800395e <HAL_DMA_Init+0x162>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a64      	ldr	r2, [pc, #400]	@ (80039e8 <HAL_DMA_Init+0x1ec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	f000 8081 	beq.w	800395e <HAL_DMA_Init+0x162>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a62      	ldr	r2, [pc, #392]	@ (80039ec <HAL_DMA_Init+0x1f0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d07b      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a61      	ldr	r2, [pc, #388]	@ (80039f0 <HAL_DMA_Init+0x1f4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d076      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5f      	ldr	r2, [pc, #380]	@ (80039f4 <HAL_DMA_Init+0x1f8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d071      	beq.n	800395e <HAL_DMA_Init+0x162>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5e      	ldr	r2, [pc, #376]	@ (80039f8 <HAL_DMA_Init+0x1fc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d06c      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5c      	ldr	r2, [pc, #368]	@ (80039fc <HAL_DMA_Init+0x200>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d067      	beq.n	800395e <HAL_DMA_Init+0x162>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5b      	ldr	r2, [pc, #364]	@ (8003a00 <HAL_DMA_Init+0x204>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d062      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a59      	ldr	r2, [pc, #356]	@ (8003a04 <HAL_DMA_Init+0x208>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d05d      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a58      	ldr	r2, [pc, #352]	@ (8003a08 <HAL_DMA_Init+0x20c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d058      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a56      	ldr	r2, [pc, #344]	@ (8003a0c <HAL_DMA_Init+0x210>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d053      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a55      	ldr	r2, [pc, #340]	@ (8003a10 <HAL_DMA_Init+0x214>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04e      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a53      	ldr	r2, [pc, #332]	@ (8003a14 <HAL_DMA_Init+0x218>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d049      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a52      	ldr	r2, [pc, #328]	@ (8003a18 <HAL_DMA_Init+0x21c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d044      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a50      	ldr	r2, [pc, #320]	@ (8003a1c <HAL_DMA_Init+0x220>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d03f      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_DMA_Init+0x224>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d03a      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003a24 <HAL_DMA_Init+0x228>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d035      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003a28 <HAL_DMA_Init+0x22c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d030      	beq.n	800395e <HAL_DMA_Init+0x162>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a4a      	ldr	r2, [pc, #296]	@ (8003a2c <HAL_DMA_Init+0x230>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02b      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a49      	ldr	r2, [pc, #292]	@ (8003a30 <HAL_DMA_Init+0x234>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d026      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a47      	ldr	r2, [pc, #284]	@ (8003a34 <HAL_DMA_Init+0x238>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d021      	beq.n	800395e <HAL_DMA_Init+0x162>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a46      	ldr	r2, [pc, #280]	@ (8003a38 <HAL_DMA_Init+0x23c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01c      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a44      	ldr	r2, [pc, #272]	@ (8003a3c <HAL_DMA_Init+0x240>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d017      	beq.n	800395e <HAL_DMA_Init+0x162>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a43      	ldr	r2, [pc, #268]	@ (8003a40 <HAL_DMA_Init+0x244>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d012      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a41      	ldr	r2, [pc, #260]	@ (8003a44 <HAL_DMA_Init+0x248>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a40      	ldr	r2, [pc, #256]	@ (8003a48 <HAL_DMA_Init+0x24c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d008      	beq.n	800395e <HAL_DMA_Init+0x162>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3e      	ldr	r2, [pc, #248]	@ (8003a4c <HAL_DMA_Init+0x250>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <HAL_DMA_Init+0x162>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a50 <HAL_DMA_Init+0x254>)
 800395c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0206 	orr.w	r2, r2, #6
 800397c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800397e:	e00f      	b.n	80039a0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003980:	f7ff fd7c 	bl	800347c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b05      	cmp	r3, #5
 800398c:	d908      	bls.n	80039a0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2210      	movs	r2, #16
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2203      	movs	r2, #3
 8003998:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e015      	b.n	80039cc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e8      	bne.n	8003980 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb18 	bl	8003fe4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40020050 	.word	0x40020050
 80039d8:	50020050 	.word	0x50020050
 80039dc:	400200d0 	.word	0x400200d0
 80039e0:	500200d0 	.word	0x500200d0
 80039e4:	40020150 	.word	0x40020150
 80039e8:	50020150 	.word	0x50020150
 80039ec:	400201d0 	.word	0x400201d0
 80039f0:	500201d0 	.word	0x500201d0
 80039f4:	40020250 	.word	0x40020250
 80039f8:	50020250 	.word	0x50020250
 80039fc:	400202d0 	.word	0x400202d0
 8003a00:	500202d0 	.word	0x500202d0
 8003a04:	40020350 	.word	0x40020350
 8003a08:	50020350 	.word	0x50020350
 8003a0c:	400203d0 	.word	0x400203d0
 8003a10:	500203d0 	.word	0x500203d0
 8003a14:	40021050 	.word	0x40021050
 8003a18:	50021050 	.word	0x50021050
 8003a1c:	400210d0 	.word	0x400210d0
 8003a20:	500210d0 	.word	0x500210d0
 8003a24:	40021150 	.word	0x40021150
 8003a28:	50021150 	.word	0x50021150
 8003a2c:	400211d0 	.word	0x400211d0
 8003a30:	500211d0 	.word	0x500211d0
 8003a34:	40021250 	.word	0x40021250
 8003a38:	50021250 	.word	0x50021250
 8003a3c:	400212d0 	.word	0x400212d0
 8003a40:	500212d0 	.word	0x500212d0
 8003a44:	40021350 	.word	0x40021350
 8003a48:	50021350 	.word	0x50021350
 8003a4c:	400213d0 	.word	0x400213d0
 8003a50:	500213d0 	.word	0x500213d0

08003a54 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e04f      	b.n	8003b0c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_Start_IT+0x26>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e048      	b.n	8003b0c <HAL_DMA_Start_IT+0xb8>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d136      	bne.n	8003afc <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fa78 	bl	8003f98 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003ab6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ace:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e007      	b.n	8003b0c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003b1c:	f7ff fcae 	bl	800347c <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e06b      	b.n	8003c04 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d008      	beq.n	8003b4a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e05c      	b.n	8003c04 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0204 	orr.w	r2, r2, #4
 8003b58:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003b62:	e020      	b.n	8003ba6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003b64:	f7ff fc8a 	bl	800347c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d919      	bls.n	8003ba6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b96:	2201      	movs	r2, #1
 8003b98:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e02e      	b.n	8003c04 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0d7      	beq.n	8003b64 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0202 	orr.w	r2, r2, #2
 8003bc2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003bd4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	2201      	movs	r2, #1
 8003bf0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e019      	b.n	8003c52 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e00e      	b.n	8003c52 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003c6e:	f023 030f 	bic.w	r3, r3, #15
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	3b50      	subs	r3, #80	@ 0x50
 8003c7e:	09db      	lsrs	r3, r3, #7
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 813b 	beq.w	8003f14 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d011      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d26:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d58:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f043 0208 	orr.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04c      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d045      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d12e      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ddc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0202 	orr.w	r2, r2, #2
 8003dec:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e06:	2201      	movs	r2, #1
 8003e08:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d07a      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
        }

        return;
 8003e2a:	e075      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2205      	movs	r2, #5
 8003e30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d039      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d032      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d111      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	731a      	strb	r2, [r3, #12]
 8003e90:	e008      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003eac:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d025      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0202 	orr.w	r2, r2, #2
 8003edc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
 8003f12:	e002      	b.n	8003f1a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003f18:	bf00      	nop
    }
  }
}
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e02b      	b.n	8003f8c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003f3c:	f023 030f 	bic.w	r3, r3, #15
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	3b50      	subs	r3, #80	@ 0x50
 8003f4c:	09db      	lsrs	r3, r3, #7
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f003 0311 	and.w	r3, r3, #17
 8003f6a:	2b11      	cmp	r3, #17
 8003f6c:	d106      	bne.n	8003f7c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	e006      	b.n	8003f8a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	401a      	ands	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b291      	uxth	r1, r2
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003fc4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	430a      	orrs	r2, r1
 8004004:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a53      	ldr	r2, [pc, #332]	@ (8004170 <DMA_Init+0x18c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f000 80a0 	beq.w	800416a <DMA_Init+0x186>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a51      	ldr	r2, [pc, #324]	@ (8004174 <DMA_Init+0x190>)
 8004030:	4293      	cmp	r3, r2
 8004032:	f000 809a 	beq.w	800416a <DMA_Init+0x186>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4f      	ldr	r2, [pc, #316]	@ (8004178 <DMA_Init+0x194>)
 800403c:	4293      	cmp	r3, r2
 800403e:	f000 8094 	beq.w	800416a <DMA_Init+0x186>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4d      	ldr	r2, [pc, #308]	@ (800417c <DMA_Init+0x198>)
 8004048:	4293      	cmp	r3, r2
 800404a:	f000 808e 	beq.w	800416a <DMA_Init+0x186>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4b      	ldr	r2, [pc, #300]	@ (8004180 <DMA_Init+0x19c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f000 8088 	beq.w	800416a <DMA_Init+0x186>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a49      	ldr	r2, [pc, #292]	@ (8004184 <DMA_Init+0x1a0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	f000 8082 	beq.w	800416a <DMA_Init+0x186>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a47      	ldr	r2, [pc, #284]	@ (8004188 <DMA_Init+0x1a4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d07c      	beq.n	800416a <DMA_Init+0x186>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a45      	ldr	r2, [pc, #276]	@ (800418c <DMA_Init+0x1a8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d077      	beq.n	800416a <DMA_Init+0x186>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a44      	ldr	r2, [pc, #272]	@ (8004190 <DMA_Init+0x1ac>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d072      	beq.n	800416a <DMA_Init+0x186>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a42      	ldr	r2, [pc, #264]	@ (8004194 <DMA_Init+0x1b0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d06d      	beq.n	800416a <DMA_Init+0x186>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a41      	ldr	r2, [pc, #260]	@ (8004198 <DMA_Init+0x1b4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d068      	beq.n	800416a <DMA_Init+0x186>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <DMA_Init+0x1b8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d063      	beq.n	800416a <DMA_Init+0x186>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	@ (80041a0 <DMA_Init+0x1bc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d05e      	beq.n	800416a <DMA_Init+0x186>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	@ (80041a4 <DMA_Init+0x1c0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d059      	beq.n	800416a <DMA_Init+0x186>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3b      	ldr	r2, [pc, #236]	@ (80041a8 <DMA_Init+0x1c4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d054      	beq.n	800416a <DMA_Init+0x186>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a39      	ldr	r2, [pc, #228]	@ (80041ac <DMA_Init+0x1c8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04f      	beq.n	800416a <DMA_Init+0x186>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a38      	ldr	r2, [pc, #224]	@ (80041b0 <DMA_Init+0x1cc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <DMA_Init+0x186>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a36      	ldr	r2, [pc, #216]	@ (80041b4 <DMA_Init+0x1d0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <DMA_Init+0x186>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a35      	ldr	r2, [pc, #212]	@ (80041b8 <DMA_Init+0x1d4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <DMA_Init+0x186>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a33      	ldr	r2, [pc, #204]	@ (80041bc <DMA_Init+0x1d8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <DMA_Init+0x186>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a32      	ldr	r2, [pc, #200]	@ (80041c0 <DMA_Init+0x1dc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <DMA_Init+0x186>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a30      	ldr	r2, [pc, #192]	@ (80041c4 <DMA_Init+0x1e0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <DMA_Init+0x186>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2f      	ldr	r2, [pc, #188]	@ (80041c8 <DMA_Init+0x1e4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <DMA_Init+0x186>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2d      	ldr	r2, [pc, #180]	@ (80041cc <DMA_Init+0x1e8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <DMA_Init+0x186>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <DMA_Init+0x1ec>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <DMA_Init+0x186>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <DMA_Init+0x1f0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <DMA_Init+0x186>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <DMA_Init+0x1f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <DMA_Init+0x186>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <DMA_Init+0x1f8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <DMA_Init+0x186>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <DMA_Init+0x1fc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <DMA_Init+0x186>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a24      	ldr	r2, [pc, #144]	@ (80041e4 <DMA_Init+0x200>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <DMA_Init+0x186>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <DMA_Init+0x204>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <DMA_Init+0x186>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a21      	ldr	r2, [pc, #132]	@ (80041ec <DMA_Init+0x208>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d142      	bne.n	80041f0 <DMA_Init+0x20c>
 800416a:	2301      	movs	r3, #1
 800416c:	e041      	b.n	80041f2 <DMA_Init+0x20e>
 800416e:	bf00      	nop
 8004170:	40020050 	.word	0x40020050
 8004174:	50020050 	.word	0x50020050
 8004178:	400200d0 	.word	0x400200d0
 800417c:	500200d0 	.word	0x500200d0
 8004180:	40020150 	.word	0x40020150
 8004184:	50020150 	.word	0x50020150
 8004188:	400201d0 	.word	0x400201d0
 800418c:	500201d0 	.word	0x500201d0
 8004190:	40020250 	.word	0x40020250
 8004194:	50020250 	.word	0x50020250
 8004198:	400202d0 	.word	0x400202d0
 800419c:	500202d0 	.word	0x500202d0
 80041a0:	40020350 	.word	0x40020350
 80041a4:	50020350 	.word	0x50020350
 80041a8:	400203d0 	.word	0x400203d0
 80041ac:	500203d0 	.word	0x500203d0
 80041b0:	40021050 	.word	0x40021050
 80041b4:	50021050 	.word	0x50021050
 80041b8:	400210d0 	.word	0x400210d0
 80041bc:	500210d0 	.word	0x500210d0
 80041c0:	40021150 	.word	0x40021150
 80041c4:	50021150 	.word	0x50021150
 80041c8:	400211d0 	.word	0x400211d0
 80041cc:	500211d0 	.word	0x500211d0
 80041d0:	40021250 	.word	0x40021250
 80041d4:	50021250 	.word	0x50021250
 80041d8:	400212d0 	.word	0x400212d0
 80041dc:	500212d0 	.word	0x500212d0
 80041e0:	40021350 	.word	0x40021350
 80041e4:	50021350 	.word	0x50021350
 80041e8:	400213d0 	.word	0x400213d0
 80041ec:	500213d0 	.word	0x500213d0
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	051b      	lsls	r3, r3, #20
 8004202:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004206:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	3b01      	subs	r3, #1
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004214:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	430a      	orrs	r2, r1
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	f040 80b0 	bne.w	80043b0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a84      	ldr	r2, [pc, #528]	@ (8004468 <DMA_Init+0x484>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f000 80a0 	beq.w	800439c <DMA_Init+0x3b8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a82      	ldr	r2, [pc, #520]	@ (800446c <DMA_Init+0x488>)
 8004262:	4293      	cmp	r3, r2
 8004264:	f000 809a 	beq.w	800439c <DMA_Init+0x3b8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a80      	ldr	r2, [pc, #512]	@ (8004470 <DMA_Init+0x48c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f000 8094 	beq.w	800439c <DMA_Init+0x3b8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7e      	ldr	r2, [pc, #504]	@ (8004474 <DMA_Init+0x490>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f000 808e 	beq.w	800439c <DMA_Init+0x3b8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7c      	ldr	r2, [pc, #496]	@ (8004478 <DMA_Init+0x494>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 8088 	beq.w	800439c <DMA_Init+0x3b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a7a      	ldr	r2, [pc, #488]	@ (800447c <DMA_Init+0x498>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f000 8082 	beq.w	800439c <DMA_Init+0x3b8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a78      	ldr	r2, [pc, #480]	@ (8004480 <DMA_Init+0x49c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d07c      	beq.n	800439c <DMA_Init+0x3b8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a77      	ldr	r2, [pc, #476]	@ (8004484 <DMA_Init+0x4a0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d077      	beq.n	800439c <DMA_Init+0x3b8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a75      	ldr	r2, [pc, #468]	@ (8004488 <DMA_Init+0x4a4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d072      	beq.n	800439c <DMA_Init+0x3b8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a74      	ldr	r2, [pc, #464]	@ (800448c <DMA_Init+0x4a8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d06d      	beq.n	800439c <DMA_Init+0x3b8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a72      	ldr	r2, [pc, #456]	@ (8004490 <DMA_Init+0x4ac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d068      	beq.n	800439c <DMA_Init+0x3b8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a71      	ldr	r2, [pc, #452]	@ (8004494 <DMA_Init+0x4b0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d063      	beq.n	800439c <DMA_Init+0x3b8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6f      	ldr	r2, [pc, #444]	@ (8004498 <DMA_Init+0x4b4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d05e      	beq.n	800439c <DMA_Init+0x3b8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6e      	ldr	r2, [pc, #440]	@ (800449c <DMA_Init+0x4b8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d059      	beq.n	800439c <DMA_Init+0x3b8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6c      	ldr	r2, [pc, #432]	@ (80044a0 <DMA_Init+0x4bc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d054      	beq.n	800439c <DMA_Init+0x3b8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6b      	ldr	r2, [pc, #428]	@ (80044a4 <DMA_Init+0x4c0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04f      	beq.n	800439c <DMA_Init+0x3b8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a69      	ldr	r2, [pc, #420]	@ (80044a8 <DMA_Init+0x4c4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <DMA_Init+0x3b8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a68      	ldr	r2, [pc, #416]	@ (80044ac <DMA_Init+0x4c8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <DMA_Init+0x3b8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a66      	ldr	r2, [pc, #408]	@ (80044b0 <DMA_Init+0x4cc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <DMA_Init+0x3b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a65      	ldr	r2, [pc, #404]	@ (80044b4 <DMA_Init+0x4d0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <DMA_Init+0x3b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a63      	ldr	r2, [pc, #396]	@ (80044b8 <DMA_Init+0x4d4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <DMA_Init+0x3b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a62      	ldr	r2, [pc, #392]	@ (80044bc <DMA_Init+0x4d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <DMA_Init+0x3b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a60      	ldr	r2, [pc, #384]	@ (80044c0 <DMA_Init+0x4dc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <DMA_Init+0x3b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5f      	ldr	r2, [pc, #380]	@ (80044c4 <DMA_Init+0x4e0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <DMA_Init+0x3b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5d      	ldr	r2, [pc, #372]	@ (80044c8 <DMA_Init+0x4e4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <DMA_Init+0x3b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5c      	ldr	r2, [pc, #368]	@ (80044cc <DMA_Init+0x4e8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <DMA_Init+0x3b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5a      	ldr	r2, [pc, #360]	@ (80044d0 <DMA_Init+0x4ec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <DMA_Init+0x3b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a59      	ldr	r2, [pc, #356]	@ (80044d4 <DMA_Init+0x4f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <DMA_Init+0x3b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a57      	ldr	r2, [pc, #348]	@ (80044d8 <DMA_Init+0x4f4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <DMA_Init+0x3b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a56      	ldr	r2, [pc, #344]	@ (80044dc <DMA_Init+0x4f8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <DMA_Init+0x3b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a54      	ldr	r2, [pc, #336]	@ (80044e0 <DMA_Init+0x4fc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <DMA_Init+0x3b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a53      	ldr	r2, [pc, #332]	@ (80044e4 <DMA_Init+0x500>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <DMA_Init+0x3bc>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <DMA_Init+0x3be>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e008      	b.n	80043c2 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b8:	d103      	bne.n	80043c2 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d2:	4b45      	ldr	r3, [pc, #276]	@ (80044e8 <DMA_Init+0x504>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	430b      	orrs	r3, r1
 80043de:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <DMA_Init+0x4b4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d022      	beq.n	8004438 <DMA_Init+0x454>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a29      	ldr	r2, [pc, #164]	@ (800449c <DMA_Init+0x4b8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d01d      	beq.n	8004438 <DMA_Init+0x454>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <DMA_Init+0x4bc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d018      	beq.n	8004438 <DMA_Init+0x454>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <DMA_Init+0x4c0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <DMA_Init+0x454>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <DMA_Init+0x4f4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00e      	beq.n	8004438 <DMA_Init+0x454>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2f      	ldr	r2, [pc, #188]	@ (80044dc <DMA_Init+0x4f8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <DMA_Init+0x454>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <DMA_Init+0x4fc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <DMA_Init+0x454>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <DMA_Init+0x500>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <DMA_Init+0x458>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <DMA_Init+0x45a>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40020050 	.word	0x40020050
 800446c:	50020050 	.word	0x50020050
 8004470:	400200d0 	.word	0x400200d0
 8004474:	500200d0 	.word	0x500200d0
 8004478:	40020150 	.word	0x40020150
 800447c:	50020150 	.word	0x50020150
 8004480:	400201d0 	.word	0x400201d0
 8004484:	500201d0 	.word	0x500201d0
 8004488:	40020250 	.word	0x40020250
 800448c:	50020250 	.word	0x50020250
 8004490:	400202d0 	.word	0x400202d0
 8004494:	500202d0 	.word	0x500202d0
 8004498:	40020350 	.word	0x40020350
 800449c:	50020350 	.word	0x50020350
 80044a0:	400203d0 	.word	0x400203d0
 80044a4:	500203d0 	.word	0x500203d0
 80044a8:	40021050 	.word	0x40021050
 80044ac:	50021050 	.word	0x50021050
 80044b0:	400210d0 	.word	0x400210d0
 80044b4:	500210d0 	.word	0x500210d0
 80044b8:	40021150 	.word	0x40021150
 80044bc:	50021150 	.word	0x50021150
 80044c0:	400211d0 	.word	0x400211d0
 80044c4:	500211d0 	.word	0x500211d0
 80044c8:	40021250 	.word	0x40021250
 80044cc:	50021250 	.word	0x50021250
 80044d0:	400212d0 	.word	0x400212d0
 80044d4:	500212d0 	.word	0x500212d0
 80044d8:	40021350 	.word	0x40021350
 80044dc:	50021350 	.word	0x50021350
 80044e0:	400213d0 	.word	0x400213d0
 80044e4:	500213d0 	.word	0x500213d0
 80044e8:	3cc02100 	.word	0x3cc02100

080044ec <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_DMAEx_List_Start_IT+0x16>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e082      	b.n	800460c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800450c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004518:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d005      	beq.n	800452c <HAL_DMAEx_List_Start_IT+0x40>
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d16a      	bne.n	80045fc <HAL_DMAEx_List_Start_IT+0x110>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d067      	beq.n	80045fc <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d157      	bne.n	80045e8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_DMAEx_List_Start_IT+0x5a>
 8004542:	2302      	movs	r3, #2
 8004544:	e062      	b.n	800460c <HAL_DMAEx_List_Start_IT+0x120>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455a:	2202      	movs	r2, #2
 800455c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800457a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004592:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045aa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f107 010c 	add.w	r1, r7, #12
 80045b6:	2200      	movs	r2, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f82b 	bl	8004614 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	0c0b      	lsrs	r3, r1, #16
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80045dc:	4013      	ands	r3, r2
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e007      	b.n	800460c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	@ 0x40
 8004600:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a0d      	ldr	r2, [pc, #52]	@ (800466c <DMA_List_GetCLLRNodeInfo+0x58>)
 8004636:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004644:	e00b      	b.n	800465e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004650:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2205      	movs	r2, #5
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	fe010000 	.word	0xfe010000
 8004670:	f8010000 	.word	0xf8010000

08004674 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e147      	b.n	8004916 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fcc0 	bl	8001020 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0210 	bic.w	r2, r2, #16
 80046ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046b0:	f7fe fee4 	bl	800347c <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046b6:	e012      	b.n	80046de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046b8:	f7fe fee0 	bl	800347c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b0a      	cmp	r3, #10
 80046c4:	d90b      	bls.n	80046de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e11b      	b.n	8004916 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d0e5      	beq.n	80046b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046fc:	f7fe febe 	bl	800347c <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004702:	e012      	b.n	800472a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004704:	f7fe feba 	bl	800347c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b0a      	cmp	r3, #10
 8004710:	d90b      	bls.n	800472a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0f5      	b.n	8004916 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0e5      	beq.n	8004704 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0202 	orr.w	r2, r2, #2
 8004746:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a74      	ldr	r2, [pc, #464]	@ (8004920 <HAL_FDCAN_Init+0x2ac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d103      	bne.n	800475a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004752:	4a74      	ldr	r2, [pc, #464]	@ (8004924 <HAL_FDCAN_Init+0x2b0>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7c1b      	ldrb	r3, [r3, #16]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d108      	bne.n	8004774 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004770:	619a      	str	r2, [r3, #24]
 8004772:	e007      	b.n	8004784 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004782:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7c5b      	ldrb	r3, [r3, #17]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d108      	bne.n	800479e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479a:	619a      	str	r2, [r3, #24]
 800479c:	e007      	b.n	80047ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	7c9b      	ldrb	r3, [r3, #18]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d108      	bne.n	80047c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047c4:	619a      	str	r2, [r3, #24]
 80047c6:	e007      	b.n	80047d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80047fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0210 	bic.w	r2, r2, #16
 800480c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0204 	orr.w	r2, r2, #4
 8004824:	619a      	str	r2, [r3, #24]
 8004826:	e02c      	b.n	8004882 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d028      	beq.n	8004882 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d01c      	beq.n	8004872 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004846:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0210 	orr.w	r2, r2, #16
 8004856:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d110      	bne.n	8004882 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	619a      	str	r2, [r3, #24]
 8004870:	e007      	b.n	8004882 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0220 	orr.w	r2, r2, #32
 8004880:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	3b01      	subs	r3, #1
 8004888:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	3b01      	subs	r3, #1
 8004890:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004892:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800489a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b6:	d115      	bne.n	80048e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	3b01      	subs	r3, #1
 80048c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	3b01      	subs	r3, #1
 80048ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	3b01      	subs	r3, #1
 80048da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa74 	bl	8004de8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	4000a400 	.word	0x4000a400
 8004924:	4000a500 	.word	0x4000a500

08004928 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004938:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d002      	beq.n	8004946 <HAL_FDCAN_ConfigFilter+0x1e>
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d13d      	bne.n	80049c2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d119      	bne.n	8004982 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800495a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004962:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e01d      	b.n	80049be <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	075a      	lsls	r2, r3, #29
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	079a      	lsls	r2, r3, #30
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4413      	add	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3304      	adds	r3, #4
 80049b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e006      	b.n	80049d0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
  }
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d110      	bne.n	8004a12 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e006      	b.n	8004a20 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a16:	f043 0204 	orr.w	r2, r3, #4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d12c      	bne.n	8004a9e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e023      	b.n	8004aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa16 	bl	8004eac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	fa01 f202 	lsl.w	r2, r1, r2
 8004a8c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004a90:	2201      	movs	r2, #1
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	409a      	lsls	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e006      	b.n	8004aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f043 0208 	orr.w	r2, r3, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	@ 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae8:	4013      	ands	r3, r2
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	4013      	ands	r3, r2
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004b0e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b22:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004b26:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b42:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2240      	movs	r2, #64	@ 0x40
 8004b5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f921 	bl	8004da8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d019      	beq.n	8004ba4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d014      	beq.n	8004ba4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8e3 	bl	8004d6a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8a2 	bl	8004cfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bc6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8a2 	bl	8004d14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8a2 	bl	8004d2a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f89b 	bl	8004d40 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d018      	beq.n	8004c46 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d013      	beq.n	8004c46 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004c26:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2280      	movs	r2, #128	@ 0x80
 8004c3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f887 	bl	8004d54 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f88b 	bl	8004d80 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c86:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f883 	bl	8004d94 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00f      	beq.n	8004cb8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004caa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f881 	bl	8004dd0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f863 	bl	8004dbc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3730      	adds	r7, #48	@ 0x30
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004df0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004df2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d103      	bne.n	8004e06 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e04:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e14:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	041a      	lsls	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e005      	b.n	8004e88 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3304      	adds	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3f3      	bcc.n	8004e7c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	4000ac00 	.word	0x4000ac00
 8004ea8:	4000a800 	.word	0x4000a800

08004eac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004eca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e00a      	b.n	8004eee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004ee0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004ee6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ef8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004efe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004f04:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	3304      	adds	r3, #4
 8004f38:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e020      	b.n	8004f82 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3303      	adds	r3, #3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3302      	adds	r3, #2
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	440b      	add	r3, r1
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f58:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	440b      	add	r3, r1
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f66:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f70:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4a06      	ldr	r2, [pc, #24]	@ (8004fa0 <FDCAN_CopyMessageToRAM+0xf4>)
 8004f88:	5cd3      	ldrb	r3, [r2, r3]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d3d6      	bcc.n	8004f40 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	3724      	adds	r7, #36	@ 0x24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	0800dc70 	.word	0x0800dc70

08004fa4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004fb2:	e136      	b.n	8005222 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2101      	movs	r1, #1
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8128 	beq.w	800521c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x38>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b12      	cmp	r3, #18
 8004fda:	d125      	bne.n	8005028 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	08da      	lsrs	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3208      	adds	r2, #8
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	220f      	movs	r2, #15
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	6979      	ldr	r1, [r7, #20]
 8005024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4013      	ands	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0203 	and.w	r2, r3, #3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d00b      	beq.n	800507c <HAL_GPIO_Init+0xd8>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d007      	beq.n	800507c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005070:	2b11      	cmp	r3, #17
 8005072:	d003      	beq.n	800507c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b12      	cmp	r3, #18
 800507a:	d130      	bne.n	80050de <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4013      	ands	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050b2:	2201      	movs	r2, #1
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4013      	ands	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0201 	and.w	r2, r3, #1
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d017      	beq.n	8005116 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4013      	ands	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d07c      	beq.n	800521c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005122:	4a47      	ldr	r2, [pc, #284]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3318      	adds	r3, #24
 800512a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	220f      	movs	r2, #15
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4013      	ands	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0a9a      	lsrs	r2, r3, #10
 800514a:	4b3e      	ldr	r3, [pc, #248]	@ (8005244 <HAL_GPIO_Init+0x2a0>)
 800514c:	4013      	ands	r3, r2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	f002 0203 	and.w	r2, r2, #3
 8005154:	00d2      	lsls	r2, r2, #3
 8005156:	4093      	lsls	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800515e:	4938      	ldr	r1, [pc, #224]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	3318      	adds	r3, #24
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800516c:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4013      	ands	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005190:	4a2b      	ldr	r2, [pc, #172]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005196:	4b2a      	ldr	r3, [pc, #168]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4013      	ands	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80051ba:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80051c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	43db      	mvns	r3, r3
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4013      	ands	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80051e6:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80051ee:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4013      	ands	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005214:	4a0a      	ldr	r2, [pc, #40]	@ (8005240 <HAL_GPIO_Init+0x29c>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3301      	adds	r3, #1
 8005220:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	f47f aec1 	bne.w	8004fb4 <HAL_GPIO_Init+0x10>
  }
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	44022000 	.word	0x44022000
 8005244:	002f7f7f 	.word	0x002f7f7f

08005248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
 8005254:	4613      	mov	r3, r2
 8005256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005258:	787b      	ldrb	r3, [r7, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800525e:	887a      	ldrh	r2, [r7, #2]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005264:	e002      	b.n	800526c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005266:	887a      	ldrh	r2, [r7, #2]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4013      	ands	r3, r2
 8005290:	041a      	lsls	r2, r3, #16
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43d9      	mvns	r1, r3
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	400b      	ands	r3, r1
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	619a      	str	r2, [r3, #24]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e08d      	b.n	80053da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc f93c 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	@ 0x24
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800530c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	e006      	b.n	8005334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d108      	bne.n	800534e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	e007      	b.n	800535e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800535c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005370:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005380:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d138      	bne.n	800546a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005402:	2302      	movs	r3, #2
 8005404:	e032      	b.n	800546c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2224      	movs	r2, #36	@ 0x24
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005434:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	e000      	b.n	800546c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
  }
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b20      	cmp	r3, #32
 800548c:	d139      	bne.n	8005502 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005498:	2302      	movs	r3, #2
 800549a:	e033      	b.n	8005504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	@ 0x24
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800551c:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e007      	b.n	800553e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0204 	bic.w	r2, r3, #4
 8005536:	4905      	ldr	r1, [pc, #20]	@ (800554c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40030400 	.word	0x40030400

08005550 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_ICACHE_Enable+0x1c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a04      	ldr	r2, [pc, #16]	@ (800556c <HAL_ICACHE_Enable+0x1c>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40030400 	.word	0x40030400

08005570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f000 bc28 	b.w	8005dd4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005584:	4b94      	ldr	r3, [pc, #592]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 0318 	and.w	r3, r3, #24
 800558c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800558e:	4b92      	ldr	r3, [pc, #584]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05b      	beq.n	800565c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x46>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b18      	cmp	r3, #24
 80055ae:	d114      	bne.n	80055da <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d111      	bne.n	80055da <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f000 bc08 	b.w	8005dd4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80055c4:	4b84      	ldr	r3, [pc, #528]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	4981      	ldr	r1, [pc, #516]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80055d8:	e040      	b.n	800565c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d023      	beq.n	800562a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055e2:	4b7d      	ldr	r3, [pc, #500]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7c      	ldr	r2, [pc, #496]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fd ff45 	bl	800347c <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80055f6:	f7fd ff41 	bl	800347c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e3e5      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005608:	4b73      	ldr	r3, [pc, #460]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005614:	4b70      	ldr	r3, [pc, #448]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	496d      	ldr	r1, [pc, #436]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005624:	4313      	orrs	r3, r2
 8005626:	618b      	str	r3, [r1, #24]
 8005628:	e018      	b.n	800565c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800562a:	4b6b      	ldr	r3, [pc, #428]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a6a      	ldr	r2, [pc, #424]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fd ff21 	bl	800347c <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800563e:	f7fd ff1d 	bl	800347c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e3c1      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005650:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a0 	beq.w	80057aa <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b10      	cmp	r3, #16
 800566e:	d005      	beq.n	800567c <HAL_RCC_OscConfig+0x10c>
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b18      	cmp	r3, #24
 8005674:	d109      	bne.n	800568a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d106      	bne.n	800568a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 8092 	bne.w	80057aa <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e3a4      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005692:	d106      	bne.n	80056a2 <HAL_RCC_OscConfig+0x132>
 8005694:	4b50      	ldr	r3, [pc, #320]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a4f      	ldr	r2, [pc, #316]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800569a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e058      	b.n	8005754 <HAL_RCC_OscConfig+0x1e4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d112      	bne.n	80056d0 <HAL_RCC_OscConfig+0x160>
 80056aa:	4b4b      	ldr	r3, [pc, #300]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4a      	ldr	r2, [pc, #296]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b48      	ldr	r3, [pc, #288]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a47      	ldr	r2, [pc, #284]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a44      	ldr	r2, [pc, #272]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e041      	b.n	8005754 <HAL_RCC_OscConfig+0x1e4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056d8:	d112      	bne.n	8005700 <HAL_RCC_OscConfig+0x190>
 80056da:	4b3f      	ldr	r3, [pc, #252]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a3e      	ldr	r2, [pc, #248]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b3c      	ldr	r3, [pc, #240]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b39      	ldr	r3, [pc, #228]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a38      	ldr	r2, [pc, #224]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e029      	b.n	8005754 <HAL_RCC_OscConfig+0x1e4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005708:	d112      	bne.n	8005730 <HAL_RCC_OscConfig+0x1c0>
 800570a:	4b33      	ldr	r3, [pc, #204]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a32      	ldr	r2, [pc, #200]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2f      	ldr	r2, [pc, #188]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800571c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4b2d      	ldr	r3, [pc, #180]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2c      	ldr	r2, [pc, #176]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e011      	b.n	8005754 <HAL_RCC_OscConfig+0x1e4>
 8005730:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a28      	ldr	r2, [pc, #160]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4b26      	ldr	r3, [pc, #152]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a25      	ldr	r2, [pc, #148]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 800574e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd fe8e 	bl	800347c <HAL_GetTick>
 8005760:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005764:	f7fd fe8a 	bl	800347c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	@ 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e32e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005776:	4b18      	ldr	r3, [pc, #96]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x1f4>
 8005782:	e012      	b.n	80057aa <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fd fe7a 	bl	800347c <HAL_GetTick>
 8005788:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800578c:	f7fd fe76 	bl	800347c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	@ 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e31a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <HAL_RCC_OscConfig+0x268>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 809a 	beq.w	80058ec <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_RCC_OscConfig+0x25a>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2b18      	cmp	r3, #24
 80057c2:	d149      	bne.n	8005858 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d146      	bne.n	8005858 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e2fe      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
 80057d6:	bf00      	nop
 80057d8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80057e2:	4b9a      	ldr	r3, [pc, #616]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0218 	and.w	r2, r3, #24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d014      	beq.n	800581c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80057f2:	4b96      	ldr	r3, [pc, #600]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 0218 	bic.w	r2, r3, #24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4993      	ldr	r1, [pc, #588]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005804:	f000 fdd0 	bl	80063a8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005808:	4b91      	ldr	r3, [pc, #580]	@ (8005a50 <HAL_RCC_OscConfig+0x4e0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fd fdab 	bl	8003368 <HAL_InitTick>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e2db      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fd fe2e 	bl	800347c <HAL_GetTick>
 8005820:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005824:	f7fd fe2a 	bl	800347c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e2ce      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005836:	4b85      	ldr	r3, [pc, #532]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005842:	4b82      	ldr	r3, [pc, #520]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	497e      	ldr	r1, [pc, #504]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005856:	e049      	b.n	80058ec <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02c      	beq.n	80058ba <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005860:	4b7a      	ldr	r3, [pc, #488]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 0218 	bic.w	r2, r3, #24
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	4977      	ldr	r1, [pc, #476]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005872:	4b76      	ldr	r3, [pc, #472]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a75      	ldr	r2, [pc, #468]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587e:	f7fd fdfd 	bl	800347c <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005886:	f7fd fdf9 	bl	800347c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e29d      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005898:	4b6c      	ldr	r3, [pc, #432]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80058a4:	4b69      	ldr	r3, [pc, #420]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	4966      	ldr	r1, [pc, #408]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
 80058b8:	e018      	b.n	80058ec <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ba:	4b64      	ldr	r3, [pc, #400]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a63      	ldr	r2, [pc, #396]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fd fdd9 	bl	800347c <HAL_GetTick>
 80058ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80058ce:	f7fd fdd5 	bl	800347c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e279      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d03c      	beq.n	8005972 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01c      	beq.n	800593a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005900:	4b52      	ldr	r3, [pc, #328]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005906:	4a51      	ldr	r2, [pc, #324]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005908:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800590c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fd fdb4 	bl	800347c <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005918:	f7fd fdb0 	bl	800347c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e254      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800592a:	4b48      	ldr	r3, [pc, #288]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 800592c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ef      	beq.n	8005918 <HAL_RCC_OscConfig+0x3a8>
 8005938:	e01b      	b.n	8005972 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593a:	4b44      	ldr	r3, [pc, #272]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 800593c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005940:	4a42      	ldr	r2, [pc, #264]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fd fd97 	bl	800347c <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005952:	f7fd fd93 	bl	800347c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e237      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005964:	4b39      	ldr	r3, [pc, #228]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800596a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ef      	bne.n	8005952 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80d2 	beq.w	8005b24 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005980:	4b34      	ldr	r3, [pc, #208]	@ (8005a54 <HAL_RCC_OscConfig+0x4e4>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d118      	bne.n	80059be <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800598c:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <HAL_RCC_OscConfig+0x4e4>)
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	4a30      	ldr	r2, [pc, #192]	@ (8005a54 <HAL_RCC_OscConfig+0x4e4>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005998:	f7fd fd70 	bl	800347c <HAL_GetTick>
 800599c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a0:	f7fd fd6c 	bl	800347c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e210      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059b2:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <HAL_RCC_OscConfig+0x4e4>)
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d108      	bne.n	80059d8 <HAL_RCC_OscConfig+0x468>
 80059c6:	4b21      	ldr	r3, [pc, #132]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059cc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059d6:	e074      	b.n	8005ac2 <HAL_RCC_OscConfig+0x552>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d118      	bne.n	8005a12 <HAL_RCC_OscConfig+0x4a2>
 80059e0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e6:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f6:	4a15      	ldr	r2, [pc, #84]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 80059f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a00:	4b12      	ldr	r3, [pc, #72]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a06:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a10:	e057      	b.n	8005ac2 <HAL_RCC_OscConfig+0x552>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	d11e      	bne.n	8005a58 <HAL_RCC_OscConfig+0x4e8>
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a20:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a22:	f043 0304 	orr.w	r3, r3, #4
 8005a26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a2a:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a30:	4a06      	ldr	r2, [pc, #24]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a3a:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a40:	4a02      	ldr	r2, [pc, #8]	@ (8005a4c <HAL_RCC_OscConfig+0x4dc>)
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a4a:	e03a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x552>
 8005a4c:	44020c00 	.word	0x44020c00
 8005a50:	200000e0 	.word	0x200000e0
 8005a54:	44020800 	.word	0x44020800
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b85      	cmp	r3, #133	@ 0x85
 8005a5e:	d118      	bne.n	8005a92 <HAL_RCC_OscConfig+0x522>
 8005a60:	4ba2      	ldr	r3, [pc, #648]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a66:	4aa1      	ldr	r2, [pc, #644]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a68:	f043 0304 	orr.w	r3, r3, #4
 8005a6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a70:	4b9e      	ldr	r3, [pc, #632]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a76:	4a9d      	ldr	r2, [pc, #628]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a80:	4b9a      	ldr	r3, [pc, #616]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a86:	4a99      	ldr	r2, [pc, #612]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a90:	e017      	b.n	8005ac2 <HAL_RCC_OscConfig+0x552>
 8005a92:	4b96      	ldr	r3, [pc, #600]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a98:	4a94      	ldr	r2, [pc, #592]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005aa2:	4b92      	ldr	r3, [pc, #584]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aa8:	4a90      	ldr	r2, [pc, #576]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005aaa:	f023 0304 	bic.w	r3, r3, #4
 8005aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ab2:	4b8e      	ldr	r3, [pc, #568]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab8:	4a8c      	ldr	r2, [pc, #560]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005abe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fd fcd7 	bl	800347c <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fd fcd3 	bl	800347c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e175      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae8:	4b80      	ldr	r3, [pc, #512]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ed      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x562>
 8005af6:	e015      	b.n	8005b24 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fd fcc0 	bl	800347c <HAL_GetTick>
 8005afc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fd fcbc 	bl	800347c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e15e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b16:	4b75      	ldr	r3, [pc, #468]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ed      	bne.n	8005b00 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d036      	beq.n	8005b9e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d019      	beq.n	8005b6c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b38:	4b6c      	ldr	r3, [pc, #432]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fd fc9a 	bl	800347c <HAL_GetTick>
 8005b48:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005b4c:	f7fd fc96 	bl	800347c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e13a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b5e:	4b63      	ldr	r3, [pc, #396]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x5dc>
 8005b6a:	e018      	b.n	8005b9e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5e      	ldr	r2, [pc, #376]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fd fc80 	bl	800347c <HAL_GetTick>
 8005b7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005b80:	f7fd fc7c 	bl	800347c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e120      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b92:	4b56      	ldr	r3, [pc, #344]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8115 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b18      	cmp	r3, #24
 8005bac:	f000 80af 	beq.w	8005d0e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f040 8086 	bne.w	8005cc6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005bba:	4b4c      	ldr	r3, [pc, #304]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a4b      	ldr	r2, [pc, #300]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005bc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fd fc59 	bl	800347c <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005bce:	f7fd fc55 	bl	800347c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e0f9      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005be0:	4b42      	ldr	r3, [pc, #264]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005bec:	4b3f      	ldr	r3, [pc, #252]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bf4:	f023 0303 	bic.w	r3, r3, #3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c00:	0212      	lsls	r2, r2, #8
 8005c02:	430a      	orrs	r2, r1
 8005c04:	4939      	ldr	r1, [pc, #228]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	025b      	lsls	r3, r3, #9
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	3b01      	subs	r3, #1
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	3b01      	subs	r3, #1
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c3a:	492c      	ldr	r1, [pc, #176]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005c40:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	4a29      	ldr	r2, [pc, #164]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c46:	f023 0310 	bic.w	r3, r3, #16
 8005c4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c50:	4a26      	ldr	r2, [pc, #152]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005c56:	4b25      	ldr	r3, [pc, #148]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c5c:	f043 0310 	orr.w	r3, r3, #16
 8005c60:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	f023 020c 	bic.w	r2, r3, #12
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	491f      	ldr	r1, [pc, #124]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005c74:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f023 0220 	bic.w	r2, r3, #32
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c80:	491a      	ldr	r1, [pc, #104]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c86:	4b19      	ldr	r3, [pc, #100]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8a:	4a18      	ldr	r2, [pc, #96]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005c92:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a15      	ldr	r2, [pc, #84]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005c98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fd fbed 	bl	800347c <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005ca6:	f7fd fbe9 	bl	800347c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e08d      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x736>
 8005cc4:	e085      	b.n	8005dd2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005cc6:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a08      	ldr	r2, [pc, #32]	@ (8005cec <HAL_RCC_OscConfig+0x77c>)
 8005ccc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fd fbd3 	bl	800347c <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005cda:	f7fd fbcf 	bl	800347c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d903      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e073      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
 8005cec:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ee      	bne.n	8005cda <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005cfc:	4b37      	ldr	r3, [pc, #220]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	4a36      	ldr	r2, [pc, #216]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005d02:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	6293      	str	r3, [r2, #40]	@ 0x28
 8005d0c:	e061      	b.n	8005dd2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005d0e:	4b33      	ldr	r3, [pc, #204]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d18:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d031      	beq.n	8005d86 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0203 	and.w	r2, r3, #3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d12a      	bne.n	8005d86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d122      	bne.n	8005d86 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d11a      	bne.n	8005d86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	0a5b      	lsrs	r3, r3, #9
 8005d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d111      	bne.n	8005d86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d108      	bne.n	8005d86 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	0e1b      	lsrs	r3, r3, #24
 8005d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e024      	b.n	8005dd4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d8a:	4b14      	ldr	r3, [pc, #80]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d01a      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	4a0e      	ldr	r2, [pc, #56]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd fb68 	bl	800347c <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005dae:	bf00      	nop
 8005db0:	f7fd fb64 	bl	800347c <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d0f9      	beq.n	8005db0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc0:	4a06      	ldr	r2, [pc, #24]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005dc6:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	4a04      	ldr	r2, [pc, #16]	@ (8005ddc <HAL_RCC_OscConfig+0x86c>)
 8005dcc:	f043 0310 	orr.w	r3, r3, #16
 8005dd0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	44020c00 	.word	0x44020c00

08005de0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e19e      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df4:	4b83      	ldr	r3, [pc, #524]	@ (8006004 <HAL_RCC_ClockConfig+0x224>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d910      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b80      	ldr	r3, [pc, #512]	@ (8006004 <HAL_RCC_ClockConfig+0x224>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	497e      	ldr	r1, [pc, #504]	@ (8006004 <HAL_RCC_ClockConfig+0x224>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b7c      	ldr	r3, [pc, #496]	@ (8006004 <HAL_RCC_ClockConfig+0x224>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e186      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	4b74      	ldr	r3, [pc, #464]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d909      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005e42:	4b71      	ldr	r3, [pc, #452]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	496d      	ldr	r1, [pc, #436]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d012      	beq.n	8005e88 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	4b68      	ldr	r3, [pc, #416]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d909      	bls.n	8005e88 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005e74:	4b64      	ldr	r3, [pc, #400]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	4961      	ldr	r1, [pc, #388]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d010      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	4b5b      	ldr	r3, [pc, #364]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d908      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005ea4:	4b58      	ldr	r3, [pc, #352]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4955      	ldr	r1, [pc, #340]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d010      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	4b50      	ldr	r3, [pc, #320]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d908      	bls.n	8005ee4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f023 020f 	bic.w	r2, r3, #15
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	494a      	ldr	r1, [pc, #296]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8093 	beq.w	8006018 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005efa:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d121      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e113      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d107      	bne.n	8005f22 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f12:	4b3d      	ldr	r3, [pc, #244]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d115      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e107      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d107      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005f2a:	4b37      	ldr	r3, [pc, #220]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0fb      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3a:	4b33      	ldr	r3, [pc, #204]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e0f3      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f023 0203 	bic.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	492c      	ldr	r1, [pc, #176]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5c:	f7fd fa8e 	bl	800347c <HAL_GetTick>
 8005f60:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d112      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005f6c:	f7fd fa86 	bl	800347c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0d7      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f82:	4b21      	ldr	r3, [pc, #132]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0318 	and.w	r3, r3, #24
 8005f8a:	2b18      	cmp	r3, #24
 8005f8c:	d1ee      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x18c>
 8005f8e:	e043      	b.n	8006018 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d112      	bne.n	8005fbe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9a:	f7fd fa6f 	bl	800347c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0c0      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fb0:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f003 0318 	and.w	r3, r3, #24
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d1ee      	bne.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>
 8005fbc:	e02c      	b.n	8006018 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d122      	bne.n	800600c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc8:	f7fd fa58 	bl	800347c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0a9      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005fde:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <HAL_RCC_ClockConfig+0x228>)
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0318 	and.w	r3, r3, #24
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d1ee      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x1e8>
 8005fea:	e015      	b.n	8006018 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fec:	f7fd fa46 	bl	800347c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d906      	bls.n	800600c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e097      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
 8006002:	bf00      	nop
 8006004:	40022000 	.word	0x40022000
 8006008:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800600c:	4b4b      	ldr	r3, [pc, #300]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0318 	and.w	r3, r3, #24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e9      	bne.n	8005fec <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	4b44      	ldr	r3, [pc, #272]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	429a      	cmp	r2, r3
 8006032:	d208      	bcs.n	8006046 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006034:	4b41      	ldr	r3, [pc, #260]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f023 020f 	bic.w	r2, r3, #15
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	493e      	ldr	r1, [pc, #248]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006046:	4b3e      	ldr	r3, [pc, #248]	@ (8006140 <HAL_RCC_ClockConfig+0x360>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d210      	bcs.n	8006076 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006054:	4b3a      	ldr	r3, [pc, #232]	@ (8006140 <HAL_RCC_ClockConfig+0x360>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f023 020f 	bic.w	r2, r3, #15
 800605c:	4938      	ldr	r1, [pc, #224]	@ (8006140 <HAL_RCC_ClockConfig+0x360>)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006064:	4b36      	ldr	r3, [pc, #216]	@ (8006140 <HAL_RCC_ClockConfig+0x360>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d001      	beq.n	8006076 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e05d      	b.n	8006132 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d010      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	4b2d      	ldr	r3, [pc, #180]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800608e:	429a      	cmp	r2, r3
 8006090:	d208      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006092:	4b2a      	ldr	r3, [pc, #168]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	4927      	ldr	r1, [pc, #156]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	4b21      	ldr	r3, [pc, #132]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060be:	429a      	cmp	r2, r3
 80060c0:	d209      	bcs.n	80060d6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80060c2:	4b1e      	ldr	r3, [pc, #120]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	491a      	ldr	r1, [pc, #104]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d012      	beq.n	8006108 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	4b15      	ldr	r3, [pc, #84]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d209      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80060f4:	4b11      	ldr	r3, [pc, #68]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	490e      	ldr	r1, [pc, #56]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006104:	4313      	orrs	r3, r2
 8006106:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006108:	f000 f822 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	490b      	ldr	r1, [pc, #44]	@ (8006144 <HAL_RCC_ClockConfig+0x364>)
 8006118:	5ccb      	ldrb	r3, [r1, r3]
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	4a0a      	ldr	r2, [pc, #40]	@ (8006148 <HAL_RCC_ClockConfig+0x368>)
 8006120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006122:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <HAL_RCC_ClockConfig+0x36c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fd f91e 	bl	8003368 <HAL_InitTick>
 800612c:	4603      	mov	r3, r0
 800612e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006130:	7afb      	ldrb	r3, [r7, #11]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	44020c00 	.word	0x44020c00
 8006140:	40022000 	.word	0x40022000
 8006144:	0800dc58 	.word	0x0800dc58
 8006148:	200000dc 	.word	0x200000dc
 800614c:	200000e0 	.word	0x200000e0

08006150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	@ 0x24
 8006154:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006156:	4b8c      	ldr	r3, [pc, #560]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 0318 	and.w	r3, r3, #24
 800615e:	2b08      	cmp	r3, #8
 8006160:	d102      	bne.n	8006168 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006162:	4b8a      	ldr	r3, [pc, #552]	@ (800638c <HAL_RCC_GetSysClockFreq+0x23c>)
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	e107      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006168:	4b87      	ldr	r3, [pc, #540]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f003 0318 	and.w	r3, r3, #24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d112      	bne.n	800619a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006174:	4b84      	ldr	r3, [pc, #528]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006180:	4b81      	ldr	r3, [pc, #516]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	08db      	lsrs	r3, r3, #3
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	4a81      	ldr	r2, [pc, #516]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x240>)
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	e0f1      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006194:	4b7e      	ldr	r3, [pc, #504]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x240>)
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e0ee      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800619a:	4b7b      	ldr	r3, [pc, #492]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f003 0318 	and.w	r3, r3, #24
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d102      	bne.n	80061ac <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x244>)
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	e0e5      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ac:	4b76      	ldr	r3, [pc, #472]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f003 0318 	and.w	r3, r3, #24
 80061b4:	2b18      	cmp	r3, #24
 80061b6:	f040 80dd 	bne.w	8006374 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061ba:	4b73      	ldr	r3, [pc, #460]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80061c4:	4b70      	ldr	r3, [pc, #448]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061d0:	4b6d      	ldr	r3, [pc, #436]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80061dc:	4b6a      	ldr	r3, [pc, #424]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80061e0:	08db      	lsrs	r3, r3, #3
 80061e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80b7 	beq.w	800636e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d003      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0xbe>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d056      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x16a>
 800620c:	e077      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800620e:	4b5e      	ldr	r3, [pc, #376]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d02d      	beq.n	8006276 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800621a:	4b5b      	ldr	r3, [pc, #364]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	08db      	lsrs	r3, r3, #3
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	4a5a      	ldr	r2, [pc, #360]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x240>)
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006244:	4b50      	ldr	r3, [pc, #320]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006254:	ed97 6a02 	vldr	s12, [r7, #8]
 8006258:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006398 <HAL_RCC_GetSysClockFreq+0x248>
 800625c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006260:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006268:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800626c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006270:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006274:	e065      	b.n	8006342 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006280:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800639c <HAL_RCC_GetSysClockFreq+0x24c>
 8006284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006288:	4b3f      	ldr	r3, [pc, #252]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006298:	ed97 6a02 	vldr	s12, [r7, #8]
 800629c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006398 <HAL_RCC_GetSysClockFreq+0x248>
 80062a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80062b8:	e043      	b.n	8006342 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80063a0 <HAL_RCC_GetSysClockFreq+0x250>
 80062c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 80062ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006398 <HAL_RCC_GetSysClockFreq+0x248>
 80062e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80062fc:	e021      	b.n	8006342 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063a4 <HAL_RCC_GetSysClockFreq+0x254>
 800630c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006320:	ed97 6a02 	vldr	s12, [r7, #8]
 8006324:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006398 <HAL_RCC_GetSysClockFreq+0x248>
 8006328:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800632c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006334:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006340:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006342:	4b11      	ldr	r3, [pc, #68]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x238>)
 8006344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006346:	0a5b      	lsrs	r3, r3, #9
 8006348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800634c:	3301      	adds	r3, #1
 800634e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800635a:	edd7 6a06 	vldr	s13, [r7, #24]
 800635e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006366:	ee17 3a90 	vmov	r3, s15
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e004      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e001      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x240>)
 8006376:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006378:	69fb      	ldr	r3, [r7, #28]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3724      	adds	r7, #36	@ 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	44020c00 	.word	0x44020c00
 800638c:	003d0900 	.word	0x003d0900
 8006390:	03d09000 	.word	0x03d09000
 8006394:	007a1200 	.word	0x007a1200
 8006398:	46000000 	.word	0x46000000
 800639c:	4c742400 	.word	0x4c742400
 80063a0:	4af42400 	.word	0x4af42400
 80063a4:	4a742400 	.word	0x4a742400

080063a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063ac:	f7ff fed0 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b08      	ldr	r3, [pc, #32]	@ (80063d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80063b6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063ba:	4907      	ldr	r1, [pc, #28]	@ (80063d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80063be:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	4a05      	ldr	r2, [pc, #20]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x34>)
 80063c8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80063ca:	4b04      	ldr	r3, [pc, #16]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x34>)
 80063cc:	681b      	ldr	r3, [r3, #0]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	44020c00 	.word	0x44020c00
 80063d8:	0800dc58 	.word	0x0800dc58
 80063dc:	200000dc 	.word	0x200000dc

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80063e4:	f7ff ffe0 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4904      	ldr	r1, [pc, #16]	@ (8006408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	44020c00 	.word	0x44020c00
 8006408:	0800dc68 	.word	0x0800dc68

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006410:	f7ff ffca 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4904      	ldr	r1, [pc, #16]	@ (8006434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	44020c00 	.word	0x44020c00
 8006434:	0800dc68 	.word	0x0800dc68

08006438 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800643c:	f7ff ffb4 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <HAL_RCC_GetPCLK3Freq+0x24>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	0b1b      	lsrs	r3, r3, #12
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4904      	ldr	r1, [pc, #16]	@ (8006460 <HAL_RCC_GetPCLK3Freq+0x28>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	bd80      	pop	{r7, pc}
 800645c:	44020c00 	.word	0x44020c00
 8006460:	0800dc68 	.word	0x0800dc68

08006464 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b0ba      	sub	sp, #232	@ 0xe8
 800646a:	af00      	add	r7, sp, #0
 800646c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006470:	2300      	movs	r3, #0
 8006472:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006476:	2300      	movs	r3, #0
 8006478:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800647c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006488:	2500      	movs	r5, #0
 800648a:	ea54 0305 	orrs.w	r3, r4, r5
 800648e:	d00b      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006490:	4bcd      	ldr	r3, [pc, #820]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006496:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800649a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	4ac9      	ldr	r2, [pc, #804]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f002 0801 	and.w	r8, r2, #1
 80064b4:	f04f 0900 	mov.w	r9, #0
 80064b8:	ea58 0309 	orrs.w	r3, r8, r9
 80064bc:	d042      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80064be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d823      	bhi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80064c8:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	08006519 	.word	0x08006519
 80064d4:	080064e9 	.word	0x080064e9
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006519 	.word	0x08006519
 80064e0:	08006519 	.word	0x08006519
 80064e4:	08006519 	.word	0x08006519
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ec:	3308      	adds	r3, #8
 80064ee:	4618      	mov	r0, r3
 80064f0:	f003 f90c 	bl	800970c <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80064fa:	e00e      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006500:	3330      	adds	r3, #48	@ 0x30
 8006502:	4618      	mov	r0, r3
 8006504:	f003 f99a 	bl	800983c <RCCEx_PLL3_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800650e:	e004      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006516:	e000      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006522:	4ba9      	ldr	r3, [pc, #676]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006528:	f023 0107 	bic.w	r1, r3, #7
 800652c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006532:	4aa5      	ldr	r2, [pc, #660]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006534:	430b      	orrs	r3, r1
 8006536:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800653a:	e003      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006540:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f002 0a02 	and.w	sl, r2, #2
 8006550:	f04f 0b00 	mov.w	fp, #0
 8006554:	ea5a 030b 	orrs.w	r3, sl, fp
 8006558:	f000 8088 	beq.w	800666c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800655c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006562:	2b28      	cmp	r3, #40	@ 0x28
 8006564:	d868      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006641 	.word	0x08006641
 8006570:	08006639 	.word	0x08006639
 8006574:	08006639 	.word	0x08006639
 8006578:	08006639 	.word	0x08006639
 800657c:	08006639 	.word	0x08006639
 8006580:	08006639 	.word	0x08006639
 8006584:	08006639 	.word	0x08006639
 8006588:	08006639 	.word	0x08006639
 800658c:	08006611 	.word	0x08006611
 8006590:	08006639 	.word	0x08006639
 8006594:	08006639 	.word	0x08006639
 8006598:	08006639 	.word	0x08006639
 800659c:	08006639 	.word	0x08006639
 80065a0:	08006639 	.word	0x08006639
 80065a4:	08006639 	.word	0x08006639
 80065a8:	08006639 	.word	0x08006639
 80065ac:	08006625 	.word	0x08006625
 80065b0:	08006639 	.word	0x08006639
 80065b4:	08006639 	.word	0x08006639
 80065b8:	08006639 	.word	0x08006639
 80065bc:	08006639 	.word	0x08006639
 80065c0:	08006639 	.word	0x08006639
 80065c4:	08006639 	.word	0x08006639
 80065c8:	08006639 	.word	0x08006639
 80065cc:	08006641 	.word	0x08006641
 80065d0:	08006639 	.word	0x08006639
 80065d4:	08006639 	.word	0x08006639
 80065d8:	08006639 	.word	0x08006639
 80065dc:	08006639 	.word	0x08006639
 80065e0:	08006639 	.word	0x08006639
 80065e4:	08006639 	.word	0x08006639
 80065e8:	08006639 	.word	0x08006639
 80065ec:	08006641 	.word	0x08006641
 80065f0:	08006639 	.word	0x08006639
 80065f4:	08006639 	.word	0x08006639
 80065f8:	08006639 	.word	0x08006639
 80065fc:	08006639 	.word	0x08006639
 8006600:	08006639 	.word	0x08006639
 8006604:	08006639 	.word	0x08006639
 8006608:	08006639 	.word	0x08006639
 800660c:	08006641 	.word	0x08006641
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006614:	3308      	adds	r3, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f003 f878 	bl	800970c <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006622:	e00e      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006628:	3330      	adds	r3, #48	@ 0x30
 800662a:	4618      	mov	r0, r3
 800662c:	f003 f906 	bl	800983c <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006636:	e004      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006642:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10c      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800664a:	4b5f      	ldr	r3, [pc, #380]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800664c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006650:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800665a:	4a5b      	ldr	r2, [pc, #364]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800665c:	430b      	orrs	r3, r1
 800665e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006662:	e003      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006668:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800666c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f002 0304 	and.w	r3, r2, #4
 8006678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006682:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d04e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800668c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006692:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006696:	d02c      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006698:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800669c:	d825      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 800669e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a2:	d028      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80066a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a8:	d81f      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80066ac:	d025      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x296>
 80066ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b0:	d81b      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066b2:	2b80      	cmp	r3, #128	@ 0x80
 80066b4:	d00f      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80066b6:	2b80      	cmp	r3, #128	@ 0x80
 80066b8:	d817      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01f      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d113      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c6:	3308      	adds	r3, #8
 80066c8:	4618      	mov	r0, r3
 80066ca:	f003 f81f 	bl	800970c <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80066d4:	e014      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066da:	3330      	adds	r3, #48	@ 0x30
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 f8ad 	bl	800983c <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80066e8:	e00a      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066f2:	bf00      	nop
 80066f4:	e004      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006700:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006708:	4b2f      	ldr	r3, [pc, #188]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800670a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800670e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006718:	4a2b      	ldr	r2, [pc, #172]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800671a:	430b      	orrs	r3, r1
 800671c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006720:	e003      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006726:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f002 0308 	and.w	r3, r2, #8
 8006736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006744:	460b      	mov	r3, r1
 8006746:	4313      	orrs	r3, r2
 8006748:	d056      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800674a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800674e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006750:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006754:	d031      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006756:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800675a:	d82a      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006760:	d02d      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006766:	d824      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006768:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800676c:	d029      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800676e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006772:	d81e      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006778:	d011      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677e:	d818      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d023      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006788:	d113      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800678a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800678e:	3308      	adds	r3, #8
 8006790:	4618      	mov	r0, r3
 8006792:	f002 ffbb 	bl	800970c <RCCEx_PLL2_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800679c:	e017      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800679e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a2:	3330      	adds	r3, #48	@ 0x30
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 f849 	bl	800983c <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80067b0:	e00d      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80067b8:	e009      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067ba:	bf00      	nop
 80067bc:	e007      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067be:	bf00      	nop
 80067c0:	e005      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067c2:	bf00      	nop
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80067c6:	bf00      	nop
 80067c8:	44020c00 	.word	0x44020c00
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80067d6:	4bb9      	ldr	r3, [pc, #740]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067dc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80067e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067e6:	4ab5      	ldr	r2, [pc, #724]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f002 0310 	and.w	r3, r2, #16
 8006804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006808:	2300      	movs	r3, #0
 800680a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800680e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006812:	460b      	mov	r3, r1
 8006814:	4313      	orrs	r3, r2
 8006816:	d053      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800681c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006822:	d031      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006824:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006828:	d82a      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800682a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800682e:	d02d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006834:	d824      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006836:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800683a:	d029      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800683c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006840:	d81e      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006846:	d011      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684c:	d818      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d020      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006856:	d113      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800685c:	3308      	adds	r3, #8
 800685e:	4618      	mov	r0, r3
 8006860:	f002 ff54 	bl	800970c <RCCEx_PLL2_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800686a:	e014      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800686c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006870:	3330      	adds	r3, #48	@ 0x30
 8006872:	4618      	mov	r0, r3
 8006874:	f002 ffe2 	bl	800983c <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800687e:	e00a      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006886:	e006      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006888:	bf00      	nop
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800688c:	bf00      	nop
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10c      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800689e:	4b87      	ldr	r3, [pc, #540]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ae:	4a83      	ldr	r2, [pc, #524]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f002 0320 	and.w	r3, r2, #32
 80068cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80068da:	460b      	mov	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	d053      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80068e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068ea:	d031      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80068ec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068f0:	d82a      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f6:	d02d      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068fc:	d824      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80068fe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006902:	d029      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006904:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006908:	d81e      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800690a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690e:	d011      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006914:	d818      	bhi.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800691a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800691e:	d113      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006924:	3308      	adds	r3, #8
 8006926:	4618      	mov	r0, r3
 8006928:	f002 fef0 	bl	800970c <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006932:	e014      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006938:	3330      	adds	r3, #48	@ 0x30
 800693a:	4618      	mov	r0, r3
 800693c:	f002 ff7e 	bl	800983c <RCCEx_PLL3_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006946:	e00a      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800694e:	e006      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006950:	bf00      	nop
 8006952:	e004      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006954:	bf00      	nop
 8006956:	e002      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800695c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006966:	4b55      	ldr	r3, [pc, #340]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800696c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006976:	4a51      	ldr	r2, [pc, #324]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006978:	430b      	orrs	r3, r1
 800697a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006980:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006984:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800699e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d053      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80069a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80069b2:	d031      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80069b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80069b8:	d82a      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069be:	d02d      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80069c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069c4:	d824      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069ca:	d029      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069d0:	d81e      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069d6:	d011      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80069d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069dc:	d818      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d020      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80069e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069e6:	d113      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ec:	3308      	adds	r3, #8
 80069ee:	4618      	mov	r0, r3
 80069f0:	f002 fe8c 	bl	800970c <RCCEx_PLL2_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80069fa:	e014      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a00:	3330      	adds	r3, #48	@ 0x30
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 ff1a 	bl	800983c <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006a0e:	e00a      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a16:	e006      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a18:	bf00      	nop
 8006a1a:	e004      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006a2e:	4b23      	ldr	r3, [pc, #140]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a40:	430b      	orrs	r3, r1
 8006a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a46:	e003      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a60:	2300      	movs	r3, #0
 8006a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a66:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	d03d      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a80:	d814      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a86:	d017      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8006a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a8c:	d80e      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a96:	d109      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9c:	3330      	adds	r3, #48	@ 0x30
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 fecc 	bl	800983c <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006aaa:	e00a      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006ab2:	e006      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006ab4:	bf00      	nop
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006abc:	44020c00 	.word	0x44020c00
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006aca:	4b99      	ldr	r3, [pc, #612]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ad0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ada:	4a95      	ldr	r2, [pc, #596]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ae2:	e003      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ae8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006b06:	460b      	mov	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006b16:	d01b      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006b18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006b1c:	d814      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006b1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b22:	d017      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006b24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b28:	d80e      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d014      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8006b2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b32:	d109      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b38:	3330      	adds	r3, #48	@ 0x30
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 fe7e 	bl	800983c <RCCEx_PLL3_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006b46:	e008      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b4e:	e004      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006b62:	4b73      	ldr	r3, [pc, #460]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b68:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b72:	4a6f      	ldr	r2, [pc, #444]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b7a:	e003      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b80:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	d03d      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb0:	d01b      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x786>
 8006bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb6:	d814      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006bb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bbc:	d017      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8006bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bc2:	d80e      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d014      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8006bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd2:	3330      	adds	r3, #48	@ 0x30
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fe31 	bl	800983c <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006be0:	e008      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0e:	4a48      	ldr	r2, [pc, #288]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c16:	e003      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c1c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	d035      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4c:	d015      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c52:	d80e      	bhi.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c5c:	d109      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c62:	3330      	adds	r3, #48	@ 0x30
 8006c64:	4618      	mov	r0, r3
 8006c66:	f002 fde9 	bl	800983c <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006c70:	e006      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c78:	e002      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006c7a:	bf00      	nop
 8006c7c:	e000      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006c88:	4b29      	ldr	r3, [pc, #164]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c8e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c9a:	4a25      	ldr	r2, [pc, #148]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ca8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8006cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8006cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	d037      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8006ccc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cd8:	d015      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cde:	d80e      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d012      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ce8:	d109      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cee:	3330      	adds	r3, #48	@ 0x30
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fda3 	bl	800983c <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8006cfc:	e006      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006d0a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10f      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8006d14:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d26:	4a02      	ldr	r2, [pc, #8]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d2e:	e005      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8006d30:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	2100      	movs	r1, #0
 8006d46:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d4e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006d58:	4bb8      	ldr	r3, [pc, #736]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	4ab7      	ldr	r2, [pc, #732]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d62:	61d3      	str	r3, [r2, #28]
 8006d64:	4bb5      	ldr	r3, [pc, #724]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d66:	69d9      	ldr	r1, [r3, #28]
 8006d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006d70:	4ab2      	ldr	r2, [pc, #712]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006d72:	430b      	orrs	r3, r1
 8006d74:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d82:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d84:	2300      	movs	r3, #0
 8006d86:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d055      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006d9e:	d031      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006da0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006da4:	d82a      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006daa:	d02d      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8006dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db0:	d824      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006db6:	d029      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8006db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dbc:	d81e      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc2:	d011      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc8:	d818      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d020      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd2:	d113      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd8:	3308      	adds	r3, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 fc96 	bl	800970c <RCCEx_PLL2_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006de6:	e014      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dec:	3330      	adds	r3, #48	@ 0x30
 8006dee:	4618      	mov	r0, r3
 8006df0:	f002 fd24 	bl	800983c <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e02:	e006      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006e04:	bf00      	nop
 8006e06:	e004      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e002      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006e0c:	bf00      	nop
 8006e0e:	e000      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10d      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006e1a:	4b88      	ldr	r3, [pc, #544]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006e1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e20:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e2c:	4a83      	ldr	r2, [pc, #524]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006e34:	e003      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d055      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e66:	d031      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8006e68:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e6c:	d82a      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e72:	d02d      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e78:	d824      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006e7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e7e:	d029      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e84:	d81e      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8a:	d011      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e90:	d818      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d020      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9a:	d113      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f002 fc32 	bl	800970c <RCCEx_PLL2_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006eae:	e014      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb4:	3330      	adds	r3, #48	@ 0x30
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f002 fcc0 	bl	800983c <RCCEx_PLL3_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006ec2:	e00a      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006eca:	e006      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006ee2:	4b56      	ldr	r3, [pc, #344]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006ee4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ee8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef4:	4a51      	ldr	r2, [pc, #324]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006efc:	e003      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f02:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f14:	2300      	movs	r3, #0
 8006f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d032      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d80f      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d211      	bcs.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d911      	bls.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d109      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f3e:	3308      	adds	r3, #8
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 fbe3 	bl	800970c <RCCEx_PLL2_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f4c:	e006      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f54:	e002      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006f64:	4b35      	ldr	r3, [pc, #212]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f6a:	f023 0107 	bic.w	r1, r3, #7
 8006f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f76:	4a31      	ldr	r2, [pc, #196]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f7e:	e003      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	2100      	movs	r1, #0
 8006f92:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	d024      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006fba:	e002      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006fca:	4b1c      	ldr	r3, [pc, #112]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fd0:	f023 0108 	bic.w	r1, r3, #8
 8006fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fdc:	4a17      	ldr	r2, [pc, #92]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007000:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007004:	460b      	mov	r3, r1
 8007006:	4313      	orrs	r3, r2
 8007008:	f000 80b9 	beq.w	800717e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800700c:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	4a0b      	ldr	r2, [pc, #44]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007018:	f7fc fa30 	bl	800347c <HAL_GetTick>
 800701c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007020:	e010      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007022:	f7fc fa2b 	bl	800347c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d908      	bls.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007038:	e00a      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800703a:	bf00      	nop
 800703c:	44020c00 	.word	0x44020c00
 8007040:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007044:	4bba      	ldr	r3, [pc, #744]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0e8      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8007050:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 808e 	bne.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800705a:	4bb6      	ldr	r3, [pc, #728]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800705c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007064:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d023      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007074:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707c:	4293      	cmp	r3, r2
 800707e:	d01b      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007080:	4bac      	ldr	r3, [pc, #688]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800708e:	4ba9      	ldr	r3, [pc, #676]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007094:	4aa7      	ldr	r2, [pc, #668]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800709e:	4ba5      	ldr	r3, [pc, #660]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a4:	4aa3      	ldr	r2, [pc, #652]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070ae:	4aa1      	ldr	r2, [pc, #644]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d019      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fc f9da 	bl	800347c <HAL_GetTick>
 80070c8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070cc:	e00d      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ce:	f7fc f9d5 	bl	800347c <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070d8:	1ad2      	subs	r2, r2, r3
 80070da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070de:	429a      	cmp	r2, r3
 80070e0:	d903      	bls.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80070e8:	e006      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ea:	4b92      	ldr	r3, [pc, #584]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80070ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0ea      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80070f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d135      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007104:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800710c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007110:	d110      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8007112:	4b88      	ldr	r3, [pc, #544]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800711a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800711e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007128:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800712c:	4a81      	ldr	r2, [pc, #516]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800712e:	430b      	orrs	r3, r1
 8007130:	61d3      	str	r3, [r2, #28]
 8007132:	e005      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007134:	4b7f      	ldr	r3, [pc, #508]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4a7e      	ldr	r2, [pc, #504]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800713a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800713e:	61d3      	str	r3, [r2, #28]
 8007140:	4b7c      	ldr	r3, [pc, #496]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007146:	4a7b      	ldr	r2, [pc, #492]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800714c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007150:	4b78      	ldr	r3, [pc, #480]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007152:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800715e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007162:	4a74      	ldr	r2, [pc, #464]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007164:	430b      	orrs	r3, r1
 8007166:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800716a:	e008      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800716c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007170:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800717a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800717e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800718a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800718c:	2300      	movs	r3, #0
 800718e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007190:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d035      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800719a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d014      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80071a6:	2b30      	cmp	r3, #48	@ 0x30
 80071a8:	d80e      	bhi.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d012      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d80a      	bhi.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d010      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d106      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ba:	4b5e      	ldr	r3, [pc, #376]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80071bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071be:	4a5d      	ldr	r2, [pc, #372]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80071c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80071d0:	bf00      	nop
 80071d2:	e002      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80071d4:	bf00      	nop
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80071d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10d      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80071e2:	4b54      	ldr	r3, [pc, #336]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80071e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071f4:	4a4f      	ldr	r2, [pc, #316]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80071f6:	430b      	orrs	r3, r1
 80071f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80071fc:	e003      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007202:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007212:	643b      	str	r3, [r7, #64]	@ 0x40
 8007214:	2300      	movs	r3, #0
 8007216:	647b      	str	r3, [r7, #68]	@ 0x44
 8007218:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800721c:	460b      	mov	r3, r1
 800721e:	4313      	orrs	r3, r2
 8007220:	d033      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d007      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007232:	e010      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4b3f      	ldr	r3, [pc, #252]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	4a3e      	ldr	r2, [pc, #248]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007240:	e00d      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007246:	3308      	adds	r3, #8
 8007248:	4618      	mov	r0, r3
 800724a:	f002 fa5f 	bl	800970c <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007254:	e003      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800725c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007266:	4b33      	ldr	r3, [pc, #204]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800726c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007278:	4a2e      	ldr	r2, [pc, #184]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800727a:	430b      	orrs	r3, r1
 800727c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007280:	e003      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007282:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007286:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800728a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800729c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d04c      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80072a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d827      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072cd 	.word	0x080072cd
 80072bc:	080072db 	.word	0x080072db
 80072c0:	080072ef 	.word	0x080072ef
 80072c4:	0800730b 	.word	0x0800730b
 80072c8:	0800730b 	.word	0x0800730b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072cc:	4b19      	ldr	r3, [pc, #100]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d0:	4a18      	ldr	r2, [pc, #96]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80072d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80072d8:	e018      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072de:	3308      	adds	r3, #8
 80072e0:	4618      	mov	r0, r3
 80072e2:	f002 fa13 	bl	800970c <RCCEx_PLL2_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80072ec:	e00e      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072f2:	3330      	adds	r3, #48	@ 0x30
 80072f4:	4618      	mov	r0, r3
 80072f6:	f002 faa1 	bl	800983c <RCCEx_PLL3_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007300:	e004      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800730a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800730c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d111      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007314:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800731a:	f023 0107 	bic.w	r1, r3, #7
 800731e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007326:	4a03      	ldr	r2, [pc, #12]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007328:	430b      	orrs	r3, r1
 800732a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800732e:	e007      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007330:	44020800 	.word	0x44020800
 8007334:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007338:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800733c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800734c:	633b      	str	r3, [r7, #48]	@ 0x30
 800734e:	2300      	movs	r3, #0
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
 8007352:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	f000 8081 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800735e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007366:	2b20      	cmp	r3, #32
 8007368:	d85f      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800736a:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	080073f5 	.word	0x080073f5
 8007374:	0800742b 	.word	0x0800742b
 8007378:	0800742b 	.word	0x0800742b
 800737c:	0800742b 	.word	0x0800742b
 8007380:	0800742b 	.word	0x0800742b
 8007384:	0800742b 	.word	0x0800742b
 8007388:	0800742b 	.word	0x0800742b
 800738c:	0800742b 	.word	0x0800742b
 8007390:	08007403 	.word	0x08007403
 8007394:	0800742b 	.word	0x0800742b
 8007398:	0800742b 	.word	0x0800742b
 800739c:	0800742b 	.word	0x0800742b
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800742b 	.word	0x0800742b
 80073a8:	0800742b 	.word	0x0800742b
 80073ac:	0800742b 	.word	0x0800742b
 80073b0:	08007417 	.word	0x08007417
 80073b4:	0800742b 	.word	0x0800742b
 80073b8:	0800742b 	.word	0x0800742b
 80073bc:	0800742b 	.word	0x0800742b
 80073c0:	0800742b 	.word	0x0800742b
 80073c4:	0800742b 	.word	0x0800742b
 80073c8:	0800742b 	.word	0x0800742b
 80073cc:	0800742b 	.word	0x0800742b
 80073d0:	08007433 	.word	0x08007433
 80073d4:	0800742b 	.word	0x0800742b
 80073d8:	0800742b 	.word	0x0800742b
 80073dc:	0800742b 	.word	0x0800742b
 80073e0:	0800742b 	.word	0x0800742b
 80073e4:	0800742b 	.word	0x0800742b
 80073e8:	0800742b 	.word	0x0800742b
 80073ec:	0800742b 	.word	0x0800742b
 80073f0:	08007433 	.word	0x08007433
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f4:	4bb9      	ldr	r3, [pc, #740]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	4ab8      	ldr	r2, [pc, #736]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007400:	e018      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007406:	3308      	adds	r3, #8
 8007408:	4618      	mov	r0, r3
 800740a:	f002 f97f 	bl	800970c <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007414:	e00e      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800741a:	3330      	adds	r3, #48	@ 0x30
 800741c:	4618      	mov	r0, r3
 800741e:	f002 fa0d 	bl	800983c <RCCEx_PLL3_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007428:	e004      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007430:	e000      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007434:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800743c:	4ba7      	ldr	r3, [pc, #668]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800743e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007442:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800744a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800744e:	4aa3      	ldr	r2, [pc, #652]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007450:	430b      	orrs	r3, r1
 8007452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800745c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800746e:	2300      	movs	r3, #0
 8007470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007472:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	d04e      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800747c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007488:	d02e      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800748a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800748e:	d827      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007490:	2bc0      	cmp	r3, #192	@ 0xc0
 8007492:	d02b      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007494:	2bc0      	cmp	r3, #192	@ 0xc0
 8007496:	d823      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007498:	2b80      	cmp	r3, #128	@ 0x80
 800749a:	d017      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1068>
 800749c:	2b80      	cmp	r3, #128	@ 0x80
 800749e:	d81f      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80074a4:	2b40      	cmp	r3, #64	@ 0x40
 80074a6:	d007      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80074a8:	e01a      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074aa:	4b8c      	ldr	r3, [pc, #560]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	4a8b      	ldr	r2, [pc, #556]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80074b6:	e01a      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	3308      	adds	r3, #8
 80074be:	4618      	mov	r0, r3
 80074c0:	f002 f924 	bl	800970c <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80074ca:	e010      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074d0:	3330      	adds	r3, #48	@ 0x30
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 f9b2 	bl	800983c <RCCEx_PLL3_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80074de:	e006      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80074e6:	e002      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80074ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10d      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80074f6:	4b79      	ldr	r3, [pc, #484]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80074f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074fc:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007508:	4974      	ldr	r1, [pc, #464]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007510:	e003      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007512:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007516:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007526:	623b      	str	r3, [r7, #32]
 8007528:	2300      	movs	r3, #0
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
 800752c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007530:	460b      	mov	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	d055      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800753a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800753e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007542:	d031      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007544:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007548:	d82a      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754e:	d02d      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007554:	d824      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007556:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800755a:	d029      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800755c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007560:	d81e      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007566:	d011      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756c:	d818      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d020      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007576:	d113      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800757c:	3308      	adds	r3, #8
 800757e:	4618      	mov	r0, r3
 8007580:	f002 f8c4 	bl	800970c <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800758a:	e014      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800758c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007590:	3330      	adds	r3, #48	@ 0x30
 8007592:	4618      	mov	r0, r3
 8007594:	f002 f952 	bl	800983c <RCCEx_PLL3_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800759e:	e00a      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80075a6:	e006      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80075a8:	bf00      	nop
 80075aa:	e004      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80075ac:	bf00      	nop
 80075ae:	e002      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80075b0:	bf00      	nop
 80075b2:	e000      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80075b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10d      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80075be:	4b47      	ldr	r3, [pc, #284]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80075c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075c4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80075c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80075d0:	4942      	ldr	r1, [pc, #264]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80075d8:	e003      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075de:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	2100      	movs	r1, #0
 80075ec:	61b9      	str	r1, [r7, #24]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d03c      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80075fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007606:	2b03      	cmp	r3, #3
 8007608:	d81b      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	0800764b 	.word	0x0800764b
 8007614:	08007621 	.word	0x08007621
 8007618:	0800762f 	.word	0x0800762f
 800761c:	0800764b 	.word	0x0800764b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007620:	4b2e      	ldr	r3, [pc, #184]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	4a2d      	ldr	r2, [pc, #180]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800762c:	e00e      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800762e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007632:	3308      	adds	r3, #8
 8007634:	4618      	mov	r0, r3
 8007636:	f002 f869 	bl	800970c <RCCEx_PLL2_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007640:	e004      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800764a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10d      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007654:	4b21      	ldr	r3, [pc, #132]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007666:	491d      	ldr	r1, [pc, #116]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007670:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007674:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	2100      	movs	r1, #0
 8007682:	6139      	str	r1, [r7, #16]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800768e:	460b      	mov	r3, r1
 8007690:	4313      	orrs	r3, r2
 8007692:	d03c      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800769c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a0:	d00e      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80076a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a6:	d815      	bhi.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d019      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80076ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b0:	d110      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	4a09      	ldr	r2, [pc, #36]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80076b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076be:	e010      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c4:	3308      	adds	r3, #8
 80076c6:	4618      	mov	r0, r3
 80076c8:	f002 f820 	bl	800970c <RCCEx_PLL2_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076d2:	e006      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80076dc:	44020c00 	.word	0x44020c00
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80076ea:	4b3d      	ldr	r3, [pc, #244]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80076ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076fc:	4938      	ldr	r1, [pc, #224]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007704:	e003      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007706:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800770a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800770e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	2100      	movs	r1, #0
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007724:	460b      	mov	r3, r1
 8007726:	4313      	orrs	r3, r2
 8007728:	d038      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800772a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800772e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007732:	2b30      	cmp	r3, #48	@ 0x30
 8007734:	d01b      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007736:	2b30      	cmp	r3, #48	@ 0x30
 8007738:	d815      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800773a:	2b10      	cmp	r3, #16
 800773c:	d002      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800773e:	2b20      	cmp	r3, #32
 8007740:	d007      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007742:	e010      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007744:	4b26      	ldr	r3, [pc, #152]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	4a25      	ldr	r2, [pc, #148]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800774a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800774e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007750:	e00e      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007756:	3330      	adds	r3, #48	@ 0x30
 8007758:	4618      	mov	r0, r3
 800775a:	f002 f86f 	bl	800983c <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007764:	e004      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800776e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007770:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10d      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007778:	4b19      	ldr	r3, [pc, #100]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800777a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800777e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007786:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800778a:	4915      	ldr	r1, [pc, #84]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007798:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800779c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	2100      	movs	r1, #0
 80077a6:	6039      	str	r1, [r7, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077b2:	460b      	mov	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	d00c      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80077b8:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80077ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80077ca:	4905      	ldr	r1, [pc, #20]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80077d2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	37e8      	adds	r7, #232	@ 0xe8
 80077da:	46bd      	mov	sp, r7
 80077dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e0:	44020c00 	.word	0x44020c00

080077e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b08b      	sub	sp, #44	@ 0x2c
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80077ec:	4bae      	ldr	r3, [pc, #696]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077f6:	4bac      	ldr	r3, [pc, #688]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007800:	4ba9      	ldr	r3, [pc, #676]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	0a1b      	lsrs	r3, r3, #8
 8007806:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800780a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800780c:	4ba6      	ldr	r3, [pc, #664]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007818:	4ba3      	ldr	r3, [pc, #652]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800781a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781c:	08db      	lsrs	r3, r3, #3
 800781e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8126 	beq.w	8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d053      	beq.n	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d86f      	bhi.n	8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d02b      	beq.n	80078ac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007854:	e068      	b.n	8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007856:	4b94      	ldr	r3, [pc, #592]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	08db      	lsrs	r3, r3, #3
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	4a92      	ldr	r2, [pc, #584]	@ (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007862:	fa22 f303 	lsr.w	r3, r2, r3
 8007866:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a04 	vldr	s12, [r7, #16]
 800788e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80078aa:	e068      	b.n	800797e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80078cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80078d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80078e8:	e049      	b.n	800797e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80078f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	ed97 6a04 	vldr	s12, [r7, #16]
 800790a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800790e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007922:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007926:	e02a      	b.n	800797e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007928:	4b5f      	ldr	r3, [pc, #380]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	08db      	lsrs	r3, r3, #3
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	4a5e      	ldr	r2, [pc, #376]	@ (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
 8007938:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007960:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007978:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800797c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800797e:	4b4a      	ldr	r3, [pc, #296]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800798a:	d121      	bne.n	80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800798c:	4b46      	ldr	r3, [pc, #280]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007998:	4b43      	ldr	r3, [pc, #268]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800799a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799c:	0a5b      	lsrs	r3, r3, #9
 800799e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80079aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80079b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e006      	b.n	80079d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e002      	b.n	80079d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079d6:	4b34      	ldr	r3, [pc, #208]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079e2:	d121      	bne.n	8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80079e4:	4b30      	ldr	r3, [pc, #192]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d017      	beq.n	8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079f0:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f4:	0c1b      	lsrs	r3, r3, #16
 80079f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007a02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a06:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a0a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a16:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	e006      	b.n	8007a2e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	605a      	str	r2, [r3, #4]
 8007a26:	e002      	b.n	8007a2e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a3a:	d121      	bne.n	8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d017      	beq.n	8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a48:	4b17      	ldr	r3, [pc, #92]	@ (8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4c:	0e1b      	lsrs	r3, r3, #24
 8007a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007a5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a62:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a76:	e010      	b.n	8007a9a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
}
 8007a7e:	e00c      	b.n	8007a9a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	609a      	str	r2, [r3, #8]
}
 8007a86:	e008      	b.n	8007a9a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	372c      	adds	r7, #44	@ 0x2c
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	44020c00 	.word	0x44020c00
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	46000000 	.word	0x46000000
 8007ab4:	4a742400 	.word	0x4a742400
 8007ab8:	4af42400 	.word	0x4af42400

08007abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b08b      	sub	sp, #44	@ 0x2c
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007ac4:	4bae      	ldr	r3, [pc, #696]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007acc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007ace:	4bac      	ldr	r3, [pc, #688]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007ad8:	4ba9      	ldr	r3, [pc, #676]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ae2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007ae4:	4ba6      	ldr	r3, [pc, #664]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007af0:	4ba3      	ldr	r3, [pc, #652]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af4:	08db      	lsrs	r3, r3, #3
 8007af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	ee07 3a90 	vmov	s15, r3
 8007b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b08:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8126 	beq.w	8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d053      	beq.n	8007bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d86f      	bhi.n	8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d003      	beq.n	8007b2e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d02b      	beq.n	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007b2c:	e068      	b.n	8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b2e:	4b94      	ldr	r3, [pc, #592]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	08db      	lsrs	r3, r3, #3
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	4a92      	ldr	r2, [pc, #584]	@ (8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b66:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b82:	e068      	b.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ba4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bc0:	e049      	b.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bcc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	ed97 6a04 	vldr	s12, [r7, #16]
 8007be2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bfe:	e02a      	b.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c00:	4b5f      	ldr	r3, [pc, #380]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	ee07 3a90 	vmov	s15, r3
 8007c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c38:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c54:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c56:	4b4a      	ldr	r3, [pc, #296]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c62:	d121      	bne.n	8007ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c64:	4b46      	ldr	r3, [pc, #280]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d017      	beq.n	8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c70:	4b43      	ldr	r3, [pc, #268]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c74:	0a5b      	lsrs	r3, r3, #9
 8007c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c86:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c8a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c96:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e006      	b.n	8007cae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e002      	b.n	8007cae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cae:	4b34      	ldr	r3, [pc, #208]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cba:	d121      	bne.n	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007cbc:	4b30      	ldr	r3, [pc, #192]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d017      	beq.n	8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cde:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007ce2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	e006      	b.n	8007d06 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	e002      	b.n	8007d06 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d06:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d12:	d121      	bne.n	8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007d14:	4b1a      	ldr	r3, [pc, #104]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d017      	beq.n	8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007d20:	4b17      	ldr	r3, [pc, #92]	@ (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d24:	0e1b      	lsrs	r3, r3, #24
 8007d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d46:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d4e:	e010      	b.n	8007d72 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	609a      	str	r2, [r3, #8]
}
 8007d56:	e00c      	b.n	8007d72 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	609a      	str	r2, [r3, #8]
}
 8007d5e:	e008      	b.n	8007d72 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	609a      	str	r2, [r3, #8]
}
 8007d72:	bf00      	nop
 8007d74:	372c      	adds	r7, #44	@ 0x2c
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	44020c00 	.word	0x44020c00
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	46000000 	.word	0x46000000
 8007d8c:	4a742400 	.word	0x4a742400
 8007d90:	4af42400 	.word	0x4af42400

08007d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b08b      	sub	sp, #44	@ 0x2c
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d9c:	4bae      	ldr	r3, [pc, #696]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007da6:	4bac      	ldr	r3, [pc, #688]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007db0:	4ba9      	ldr	r3, [pc, #676]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dba:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007dc8:	4ba3      	ldr	r3, [pc, #652]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 8126 	beq.w	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d053      	beq.n	8007e9a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d86f      	bhi.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d02b      	beq.n	8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007e04:	e068      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e06:	4b94      	ldr	r3, [pc, #592]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	08db      	lsrs	r3, r3, #3
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	4a92      	ldr	r2, [pc, #584]	@ (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007e12:	fa22 f303 	lsr.w	r3, r2, r3
 8007e16:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e3e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007e5a:	e068      	b.n	8007f2e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e78:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e7c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007e98:	e049      	b.n	8007f2e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007eba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007ed6:	e02a      	b.n	8007f2e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ed8:	4b5f      	ldr	r3, [pc, #380]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	4a5e      	ldr	r2, [pc, #376]	@ (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	ee07 3a90 	vmov	s15, r3
 8007ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	ee07 3a90 	vmov	s15, r3
 8007f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f10:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007f2c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3a:	d121      	bne.n	8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007f3c:	4b46      	ldr	r3, [pc, #280]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d017      	beq.n	8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f48:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4c:	0a5b      	lsrs	r3, r3, #9
 8007f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f62:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e006      	b.n	8007f86 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f86:	4b34      	ldr	r3, [pc, #208]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f92:	d121      	bne.n	8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f94:	4b30      	ldr	r3, [pc, #192]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d017      	beq.n	8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007fb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007fba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	e006      	b.n	8007fde <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	605a      	str	r2, [r3, #4]
 8007fd6:	e002      	b.n	8007fde <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fde:	4b1e      	ldr	r3, [pc, #120]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fea:	d121      	bne.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007fec:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d017      	beq.n	8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ff8:	4b17      	ldr	r3, [pc, #92]	@ (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800800a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008012:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008026:	e010      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	609a      	str	r2, [r3, #8]
}
 800802e:	e00c      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
}
 8008036:	e008      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
}
 800804a:	bf00      	nop
 800804c:	372c      	adds	r7, #44	@ 0x2c
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	44020c00 	.word	0x44020c00
 800805c:	03d09000 	.word	0x03d09000
 8008060:	46000000 	.word	0x46000000
 8008064:	4a742400 	.word	0x4a742400
 8008068:	4af42400 	.word	0x4af42400

0800806c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800806c:	b590      	push	{r4, r7, lr}
 800806e:	b08f      	sub	sp, #60	@ 0x3c
 8008070:	af00      	add	r7, sp, #0
 8008072:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800807a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800807e:	4321      	orrs	r1, r4
 8008080:	d150      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008082:	4b26      	ldr	r3, [pc, #152]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800808c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800808e:	4b23      	ldr	r3, [pc, #140]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b02      	cmp	r3, #2
 800809a:	d108      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a2:	d104      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80080a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080aa:	f001 bb20 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80080ae:	4b1b      	ldr	r3, [pc, #108]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080bc:	d108      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c4:	d104      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80080c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80080cc:	f001 bb0f 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80080d0:	4b12      	ldr	r3, [pc, #72]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080dc:	d119      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e4:	d115      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80080ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f2:	d30a      	bcc.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80080f4:	4b09      	ldr	r3, [pc, #36]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	0a1b      	lsrs	r3, r3, #8
 80080fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080fe:	4a08      	ldr	r2, [pc, #32]	@ (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008106:	f001 baf2 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800810e:	f001 baee 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
 8008116:	f001 baea 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800811a:	bf00      	nop
 800811c:	44020c00 	.word	0x44020c00
 8008120:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008128:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 800812c:	ea50 0104 	orrs.w	r1, r0, r4
 8008130:	f000 8615 	beq.w	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8008134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008138:	2801      	cmp	r0, #1
 800813a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800813e:	f081 82d3 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008146:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800814a:	ea50 0104 	orrs.w	r1, r0, r4
 800814e:	f000 84d8 	beq.w	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008156:	2801      	cmp	r0, #1
 8008158:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800815c:	f081 82c4 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008164:	f1a1 0410 	sub.w	r4, r1, #16
 8008168:	ea50 0104 	orrs.w	r1, r0, r4
 800816c:	f001 8288 	beq.w	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8008170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008174:	2801      	cmp	r0, #1
 8008176:	f171 0110 	sbcs.w	r1, r1, #16
 800817a:	f081 82b5 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800817e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008182:	f1a1 0408 	sub.w	r4, r1, #8
 8008186:	ea50 0104 	orrs.w	r1, r0, r4
 800818a:	f001 81fe 	beq.w	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800818e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008192:	2801      	cmp	r0, #1
 8008194:	f171 0108 	sbcs.w	r1, r1, #8
 8008198:	f081 82a6 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800819c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a0:	1f0c      	subs	r4, r1, #4
 80081a2:	ea50 0104 	orrs.w	r1, r0, r4
 80081a6:	f000 8753 	beq.w	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80081aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ae:	2801      	cmp	r0, #1
 80081b0:	f171 0104 	sbcs.w	r1, r1, #4
 80081b4:	f081 8298 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80081b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081bc:	1e8c      	subs	r4, r1, #2
 80081be:	ea50 0104 	orrs.w	r1, r0, r4
 80081c2:	f001 8173 	beq.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80081c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ca:	2801      	cmp	r0, #1
 80081cc:	f171 0102 	sbcs.w	r1, r1, #2
 80081d0:	f081 828a 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80081d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d8:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80081dc:	4321      	orrs	r1, r4
 80081de:	f001 80fe 	beq.w	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80081e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e6:	4ccb      	ldr	r4, [pc, #812]	@ (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80081e8:	42a0      	cmp	r0, r4
 80081ea:	f171 0100 	sbcs.w	r1, r1, #0
 80081ee:	f081 827b 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80081f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f6:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80081fa:	4321      	orrs	r1, r4
 80081fc:	f001 8076 	beq.w	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008204:	4cc4      	ldr	r4, [pc, #784]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008206:	42a0      	cmp	r0, r4
 8008208:	f171 0100 	sbcs.w	r1, r1, #0
 800820c:	f081 826c 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008214:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008218:	4321      	orrs	r1, r4
 800821a:	f000 87b5 	beq.w	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800821e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008222:	4cbe      	ldr	r4, [pc, #760]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008224:	42a0      	cmp	r0, r4
 8008226:	f171 0100 	sbcs.w	r1, r1, #0
 800822a:	f081 825d 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800822e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008232:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008236:	4321      	orrs	r1, r4
 8008238:	f000 8738 	beq.w	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800823c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008240:	4cb7      	ldr	r4, [pc, #732]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008242:	42a0      	cmp	r0, r4
 8008244:	f171 0100 	sbcs.w	r1, r1, #0
 8008248:	f081 824e 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800824c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008250:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008254:	4321      	orrs	r1, r4
 8008256:	f001 81cd 	beq.w	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800825a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800825e:	4cb1      	ldr	r4, [pc, #708]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008260:	42a0      	cmp	r0, r4
 8008262:	f171 0100 	sbcs.w	r1, r1, #0
 8008266:	f081 823f 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800826a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800826e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008272:	4321      	orrs	r1, r4
 8008274:	f000 80d9 	beq.w	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800827c:	4caa      	ldr	r4, [pc, #680]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800827e:	42a0      	cmp	r0, r4
 8008280:	f171 0100 	sbcs.w	r1, r1, #0
 8008284:	f081 8230 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800828c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008290:	4321      	orrs	r1, r4
 8008292:	f000 83da 	beq.w	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829a:	4ca4      	ldr	r4, [pc, #656]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 800829c:	42a0      	cmp	r0, r4
 800829e:	f171 0100 	sbcs.w	r1, r1, #0
 80082a2:	f081 8221 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80082a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082aa:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80082ae:	4321      	orrs	r1, r4
 80082b0:	f000 8627 	beq.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80082b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b8:	4c9d      	ldr	r4, [pc, #628]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80082ba:	42a0      	cmp	r0, r4
 80082bc:	f171 0100 	sbcs.w	r1, r1, #0
 80082c0:	f081 8212 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80082c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082c8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80082cc:	4321      	orrs	r1, r4
 80082ce:	f000 857a 	beq.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80082d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082d6:	4c97      	ldr	r4, [pc, #604]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80082d8:	42a0      	cmp	r0, r4
 80082da:	f171 0100 	sbcs.w	r1, r1, #0
 80082de:	f081 8203 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80082e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082e6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80082ea:	4321      	orrs	r1, r4
 80082ec:	f000 84fb 	beq.w	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80082f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082f4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80082f8:	f171 0100 	sbcs.w	r1, r1, #0
 80082fc:	f081 81f4 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008304:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008308:	4321      	orrs	r1, r4
 800830a:	f000 84a9 	beq.w	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800830e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008312:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008316:	42a0      	cmp	r0, r4
 8008318:	f171 0100 	sbcs.w	r1, r1, #0
 800831c:	f081 81e4 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008324:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008328:	4321      	orrs	r1, r4
 800832a:	f000 8456 	beq.w	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800832e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008332:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008336:	42a0      	cmp	r0, r4
 8008338:	f171 0100 	sbcs.w	r1, r1, #0
 800833c:	f081 81d4 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008344:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008348:	4321      	orrs	r1, r4
 800834a:	f000 8403 	beq.w	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800834e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008352:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008356:	42a0      	cmp	r0, r4
 8008358:	f171 0100 	sbcs.w	r1, r1, #0
 800835c:	f081 81c4 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008364:	2821      	cmp	r0, #33	@ 0x21
 8008366:	f171 0100 	sbcs.w	r1, r1, #0
 800836a:	d255      	bcs.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800836c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008370:	4301      	orrs	r1, r0
 8008372:	f001 81b9 	beq.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800837a:	1e42      	subs	r2, r0, #1
 800837c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008380:	2a20      	cmp	r2, #32
 8008382:	f173 0100 	sbcs.w	r1, r3, #0
 8008386:	f081 81af 	bcs.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800838a:	2a1f      	cmp	r2, #31
 800838c:	f201 81ac 	bhi.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008390:	a101      	add	r1, pc, #4	@ (adr r1, 8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8008392:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008396:	bf00      	nop
 8008398:	0800846f 	.word	0x0800846f
 800839c:	0800856d 	.word	0x0800856d
 80083a0:	080096e9 	.word	0x080096e9
 80083a4:	0800862d 	.word	0x0800862d
 80083a8:	080096e9 	.word	0x080096e9
 80083ac:	080096e9 	.word	0x080096e9
 80083b0:	080096e9 	.word	0x080096e9
 80083b4:	080086fd 	.word	0x080086fd
 80083b8:	080096e9 	.word	0x080096e9
 80083bc:	080096e9 	.word	0x080096e9
 80083c0:	080096e9 	.word	0x080096e9
 80083c4:	080096e9 	.word	0x080096e9
 80083c8:	080096e9 	.word	0x080096e9
 80083cc:	080096e9 	.word	0x080096e9
 80083d0:	080096e9 	.word	0x080096e9
 80083d4:	080087e1 	.word	0x080087e1
 80083d8:	080096e9 	.word	0x080096e9
 80083dc:	080096e9 	.word	0x080096e9
 80083e0:	080096e9 	.word	0x080096e9
 80083e4:	080096e9 	.word	0x080096e9
 80083e8:	080096e9 	.word	0x080096e9
 80083ec:	080096e9 	.word	0x080096e9
 80083f0:	080096e9 	.word	0x080096e9
 80083f4:	080096e9 	.word	0x080096e9
 80083f8:	080096e9 	.word	0x080096e9
 80083fc:	080096e9 	.word	0x080096e9
 8008400:	080096e9 	.word	0x080096e9
 8008404:	080096e9 	.word	0x080096e9
 8008408:	080096e9 	.word	0x080096e9
 800840c:	080096e9 	.word	0x080096e9
 8008410:	080096e9 	.word	0x080096e9
 8008414:	080088b7 	.word	0x080088b7
 8008418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008420:	430b      	orrs	r3, r1
 8008422:	f000 82b3 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008426:	f001 b95f 	b.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800842a:	4b43      	ldr	r3, [pc, #268]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800842c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008434:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	2b00      	cmp	r3, #0
 800843a:	d108      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800843c:	f107 0320 	add.w	r3, r7, #32
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff f9cf 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800844a:	f001 b950 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b40      	cmp	r3, #64	@ 0x40
 8008452:	d108      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fb2f 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008462:	f001 b944 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800846a:	f001 b940 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800846e:	4b32      	ldr	r3, [pc, #200]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008480:	f7fd ffc4 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8008484:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008486:	f001 b932 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800848a:	4b2b      	ldr	r3, [pc, #172]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008496:	d10a      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849e:	f107 0314 	add.w	r3, r7, #20
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fb0a 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ac:	e05c      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80084ae:	4b22      	ldr	r3, [pc, #136]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ba:	d10a      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d107      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c2:	f107 0308 	add.w	r3, r7, #8
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fc64 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d0:	e04a      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80084d2:	4b19      	ldr	r3, [pc, #100]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d10c      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d109      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084e4:	4b14      	ldr	r3, [pc, #80]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	4a13      	ldr	r2, [pc, #76]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f6:	e037      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80084f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	d11e      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	2b04      	cmp	r3, #4
 800850a:	d11b      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800850c:	4b0c      	ldr	r3, [pc, #48]	@ (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008510:	e02a      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008512:	bf00      	nop
 8008514:	40000001 	.word	0x40000001
 8008518:	20000001 	.word	0x20000001
 800851c:	10000001 	.word	0x10000001
 8008520:	08000001 	.word	0x08000001
 8008524:	04000001 	.word	0x04000001
 8008528:	00400001 	.word	0x00400001
 800852c:	00200001 	.word	0x00200001
 8008530:	00040001 	.word	0x00040001
 8008534:	00020001 	.word	0x00020001
 8008538:	44020c00 	.word	0x44020c00
 800853c:	03d09000 	.word	0x03d09000
 8008540:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008544:	4ba3      	ldr	r3, [pc, #652]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d106      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	2b05      	cmp	r3, #5
 8008556:	d103      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
 800855e:	e003      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008564:	f001 b8c3 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008568:	f001 b8c1 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800856c:	4b99      	ldr	r3, [pc, #612]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800856e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008576:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800857e:	f7fd ff2f 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008582:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008584:	f001 b8b3 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008588:	4b92      	ldr	r3, [pc, #584]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008594:	d10a      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2b08      	cmp	r3, #8
 800859a:	d107      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859c:	f107 0314 	add.w	r3, r7, #20
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff fa8b 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085aa:	e03d      	b.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80085ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ae:	2b10      	cmp	r3, #16
 80085b0:	d108      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fbec 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085c0:	f001 b895 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80085c4:	4b83      	ldr	r3, [pc, #524]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d10c      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	2b18      	cmp	r3, #24
 80085d4:	d109      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085d6:	4b7f      	ldr	r3, [pc, #508]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	08db      	lsrs	r3, r3, #3
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	4a7d      	ldr	r2, [pc, #500]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80085e2:	fa22 f303 	lsr.w	r3, r2, r3
 80085e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e8:	e01e      	b.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80085ea:	4b7a      	ldr	r3, [pc, #488]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f6:	d105      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d102      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80085fe:	4b77      	ldr	r3, [pc, #476]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
 8008602:	e011      	b.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008604:	4b73      	ldr	r3, [pc, #460]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b02      	cmp	r3, #2
 8008610:	d106      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	2b28      	cmp	r3, #40	@ 0x28
 8008616:	d103      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
 800861e:	e003      	b.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008624:	f001 b863 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008628:	f001 b861 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800862c:	4b69      	ldr	r3, [pc, #420]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800862e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008632:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008636:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d104      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800863e:	f7fd fecf 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008642:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008644:	f001 b853 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008648:	4b62      	ldr	r3, [pc, #392]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008654:	d10a      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	2b40      	cmp	r3, #64	@ 0x40
 800865a:	d107      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fa2b 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
 800866a:	e045      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800866c:	4b59      	ldr	r3, [pc, #356]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008678:	d10a      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b80      	cmp	r3, #128	@ 0x80
 800867e:	d107      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008680:	f107 0308 	add.w	r3, r7, #8
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fb85 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
 800868e:	e033      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008690:	4b50      	ldr	r3, [pc, #320]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b02      	cmp	r3, #2
 800869a:	d10c      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2bc0      	cmp	r3, #192	@ 0xc0
 80086a0:	d109      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086a2:	4b4c      	ldr	r3, [pc, #304]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	08db      	lsrs	r3, r3, #3
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	4a4a      	ldr	r2, [pc, #296]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80086ae:	fa22 f303 	lsr.w	r3, r2, r3
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	e020      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80086b6:	4b47      	ldr	r3, [pc, #284]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c2:	d106      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ca:	d102      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80086cc:	4b43      	ldr	r3, [pc, #268]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d0:	e012      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80086d2:	4b40      	ldr	r3, [pc, #256]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80086d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d107      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80086e6:	d103      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80086e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ee:	e003      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f4:	f000 bffb 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80086f8:	f000 bff9 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80086fc:	4b35      	ldr	r3, [pc, #212]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80086fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008702:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008706:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800870e:	f7fd fe67 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008712:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008714:	f000 bfeb 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008718:	4b2e      	ldr	r3, [pc, #184]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008724:	d10b      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800872c:	d107      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872e:	f107 0314 	add.w	r3, r7, #20
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff f9c2 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
 800873c:	e047      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800873e:	4b25      	ldr	r3, [pc, #148]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874a:	d10b      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008752:	d107      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008754:	f107 0308 	add.w	r3, r7, #8
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fb1b 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
 8008762:	e034      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008764:	4b1b      	ldr	r3, [pc, #108]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d10d      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008776:	d109      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008778:	4b16      	ldr	r3, [pc, #88]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	08db      	lsrs	r3, r3, #3
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	4a15      	ldr	r2, [pc, #84]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008784:	fa22 f303 	lsr.w	r3, r2, r3
 8008788:	637b      	str	r3, [r7, #52]	@ 0x34
 800878a:	e020      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008798:	d106      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087a0:	d102      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80087a2:	4b0e      	ldr	r3, [pc, #56]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a6:	e012      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80087a8:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80087aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d107      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80087bc:	d103      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c4:	e003      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ca:	f000 bf90 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80087ce:	f000 bf8e 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80087d2:	bf00      	nop
 80087d4:	44020c00 	.word	0x44020c00
 80087d8:	03d09000 	.word	0x03d09000
 80087dc:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80087e0:	4ba5      	ldr	r3, [pc, #660]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80087e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087e6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087f2:	f7fd fdf5 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 80087f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80087f8:	f000 bf79 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80087fc:	4b9e      	ldr	r3, [pc, #632]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008808:	d10b      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008810:	d107      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f950 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008820:	e047      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008822:	4b95      	ldr	r3, [pc, #596]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800882a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882e:	d10b      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008836:	d107      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008838:	f107 0308 	add.w	r3, r7, #8
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff faa9 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
 8008846:	e034      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008848:	4b8b      	ldr	r3, [pc, #556]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b02      	cmp	r3, #2
 8008852:	d10d      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800885a:	d109      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800885c:	4b86      	ldr	r3, [pc, #536]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	08db      	lsrs	r3, r3, #3
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	4a85      	ldr	r2, [pc, #532]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
 800886e:	e020      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008870:	4b81      	ldr	r3, [pc, #516]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887c:	d106      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008884:	d102      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8008886:	4b7e      	ldr	r3, [pc, #504]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
 800888a:	e012      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800888c:	4b7a      	ldr	r3, [pc, #488]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	d107      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088a0:	d103      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80088a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ae:	f000 bf1e 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80088b2:	f000 bf1c 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80088b6:	4b70      	ldr	r3, [pc, #448]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80088b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088bc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80088c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088c8:	f7fd fd8a 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 80088cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80088ce:	f000 bf0e 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80088d2:	4b69      	ldr	r3, [pc, #420]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088de:	d10b      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e6:	d107      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff f8e5 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f6:	e047      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80088f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008904:	d10b      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890c:	d107      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800890e:	f107 0308 	add.w	r3, r7, #8
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fa3e 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
 800891c:	e034      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800891e:	4b56      	ldr	r3, [pc, #344]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b02      	cmp	r3, #2
 8008928:	d10d      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008930:	d109      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008932:	4b51      	ldr	r3, [pc, #324]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	08db      	lsrs	r3, r3, #3
 8008938:	f003 0303 	and.w	r3, r3, #3
 800893c:	4a4f      	ldr	r2, [pc, #316]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
 8008944:	e020      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008946:	4b4c      	ldr	r3, [pc, #304]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800894e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008952:	d106      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800895a:	d102      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 800895c:	4b48      	ldr	r3, [pc, #288]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008960:	e012      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008962:	4b45      	ldr	r3, [pc, #276]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b02      	cmp	r3, #2
 800896e:	d107      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008976:	d103      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008984:	f000 beb3 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008988:	f000 beb1 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800898c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800898e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008992:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008996:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800899e:	f7fd fd4b 	bl	8006438 <HAL_RCC_GetPCLK3Freq>
 80089a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80089a4:	f000 bea3 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ae:	d108      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff f881 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089be:	f000 be96 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089c8:	d108      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ca:	f107 0308 	add.w	r3, r7, #8
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff f9e0 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089d8:	f000 be89 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80089dc:	4b26      	ldr	r3, [pc, #152]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d10d      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089ee:	d109      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089f0:	4b21      	ldr	r3, [pc, #132]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	4a20      	ldr	r2, [pc, #128]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a02:	e020      	b.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008a04:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a10:	d106      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a18:	d102      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8008a1a:	4b19      	ldr	r3, [pc, #100]	@ (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1e:	e012      	b.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008a20:	4b15      	ldr	r3, [pc, #84]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008a34:	d103      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8008a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a42:	f000 be54 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a46:	f000 be52 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008a5c:	f7fd fca4 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 8008a60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008a62:	f000 be44 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d10b      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a6c:	f7fd fb70 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8008a70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a72:	f000 be3c 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a76:	bf00      	nop
 8008a78:	44020c00 	.word	0x44020c00
 8008a7c:	03d09000 	.word	0x03d09000
 8008a80:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d108      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8a:	f107 0314 	add.w	r3, r7, #20
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff f814 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a98:	f000 be29 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008a9c:	4b9f      	ldr	r3, [pc, #636]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa8:	d105      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d102      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8008ab0:	4b9b      	ldr	r3, [pc, #620]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab4:	e023      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008ab6:	4b99      	ldr	r3, [pc, #612]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d109      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ac8:	4b94      	ldr	r3, [pc, #592]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a94      	ldr	r2, [pc, #592]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ada:	e010      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008adc:	4b8f      	ldr	r3, [pc, #572]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae8:	d105      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d102      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8008af0:	4b8d      	ldr	r3, [pc, #564]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	e003      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008afa:	f000 bdf8 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008afe:	f000 bdf6 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008b02:	4b86      	ldr	r3, [pc, #536]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008b0e:	4b83      	ldr	r3, [pc, #524]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d106      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d103      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8008b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b28:	e012      	b.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b38:	d106      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d103      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8008b40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b46:	e003      	b.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008b4c:	f000 bdcf 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008b50:	f000 bdcd 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008b54:	4b71      	ldr	r3, [pc, #452]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008b56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b5e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b66:	f7fd fc3b 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008b6a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b6c:	f000 bdbf 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b76:	d108      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff f909 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b86:	f000 bdb2 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008b8a:	4b64      	ldr	r3, [pc, #400]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d10d      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b9c:	d109      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008baa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb0:	e011      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008bb2:	4b5a      	ldr	r3, [pc, #360]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bc6:	d102      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8008bc8:	4b57      	ldr	r3, [pc, #348]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bcc:	e003      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd2:	f000 bd8c 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008bd6:	f000 bd8a 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008bda:	4b50      	ldr	r3, [pc, #320]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008bdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008be0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008be4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7fd fbf8 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bf2:	f000 bd7c 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bfc:	d108      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff f8c6 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c0c:	f000 bd6f 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008c10:	4b42      	ldr	r3, [pc, #264]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d10d      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008c22:	d109      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c24:	4b3d      	ldr	r3, [pc, #244]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	08db      	lsrs	r3, r3, #3
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
 8008c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c36:	e011      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008c38:	4b38      	ldr	r3, [pc, #224]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c44:	d106      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008c4c:	d102      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8008c4e:	4b36      	ldr	r3, [pc, #216]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c58:	f000 bd49 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008c5c:	f000 bd47 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008c60:	4b2e      	ldr	r3, [pc, #184]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c66:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008c6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008c72:	f7fd fbe1 	bl	8006438 <HAL_RCC_GetPCLK3Freq>
 8008c76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c78:	f000 bd39 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c82:	d108      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c84:	f107 0308 	add.w	r3, r7, #8
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff f883 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c92:	f000 bd2c 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008c96:	4b21      	ldr	r3, [pc, #132]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d10d      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ca8:	d109      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008caa:	4b1c      	ldr	r3, [pc, #112]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	08db      	lsrs	r3, r3, #3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e011      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008cbe:	4b17      	ldr	r3, [pc, #92]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cca:	d106      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cd2:	d102      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8008cd4:	4b14      	ldr	r3, [pc, #80]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd8:	e003      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cde:	f000 bd06 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008ce2:	f000 bd04 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cec:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008cf0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d104      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cf8:	f7fd fb72 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008cfc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cfe:	f000 bcf6 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d08:	d110      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff f840 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d18:	f000 bce9 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008d1c:	44020c00 	.word	0x44020c00
 8008d20:	007a1200 	.word	0x007a1200
 8008d24:	03d09000 	.word	0x03d09000
 8008d28:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008d2c:	4ba4      	ldr	r3, [pc, #656]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d10e      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d3e:	d10a      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d40:	4b9f      	ldr	r3, [pc, #636]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	4a9e      	ldr	r2, [pc, #632]	@ (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d52:	f000 bccc 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d5a:	f000 bcc8 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8008d5e:	4b98      	ldr	r3, [pc, #608]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d64:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008d70:	f7fd fb62 	bl	8006438 <HAL_RCC_GetPCLK3Freq>
 8008d74:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d76:	f000 bcba 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d80:	d108      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff f804 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d90:	f000 bcad 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8008d94:	4b8a      	ldr	r3, [pc, #552]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d10e      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008da6:	d10a      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da8:	4b85      	ldr	r3, [pc, #532]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	08db      	lsrs	r3, r3, #3
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	4a84      	ldr	r2, [pc, #528]	@ (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008db4:	fa22 f303 	lsr.w	r3, r2, r3
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dba:	f000 bc98 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc2:	f000 bc94 	b.w	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008dc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008dd8:	d056      	beq.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008de0:	f200 808b 	bhi.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dea:	d03e      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008df2:	f200 8082 	bhi.w	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dfc:	d027      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e04:	d879      	bhi.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e0c:	d017      	beq.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e14:	d871      	bhi.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e22:	d004      	beq.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8008e24:	e069      	b.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008e26:	f7fd fb07 	bl	8006438 <HAL_RCC_GetPCLK3Freq>
 8008e2a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008e2c:	e068      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fe42 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e3c:	e060      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe ffa6 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e4c:	e058      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d103      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8008e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e62:	e04d      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e68:	e04a      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008e6a:	4b55      	ldr	r3, [pc, #340]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e78:	d103      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8008e7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e80:	e03e      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e86:	e03b      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e88:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e94:	4b4a      	ldr	r3, [pc, #296]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d10c      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8008ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ea6:	4b46      	ldr	r3, [pc, #280]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	08db      	lsrs	r3, r3, #3
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	4a44      	ldr	r2, [pc, #272]	@ (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eb8:	e01e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eba:	4b41      	ldr	r3, [pc, #260]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ec6:	d106      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ece:	d102      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8008ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed4:	e010      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008eec:	4b37      	ldr	r3, [pc, #220]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef0:	e002      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ef6:	e003      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008efe:	bf00      	nop
          }
        }
        break;
 8008f00:	e3f5      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f02:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008f04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f08:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008f14:	d05f      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008f1c:	f200 8094 	bhi.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f26:	d03f      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f2e:	f200 808b 	bhi.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f38:	d028      	beq.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f40:	f200 8082 	bhi.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f4a:	d017      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f52:	d879      	bhi.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f60:	d004      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8008f62:	e071      	b.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008f64:	f7fd fa3c 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008f68:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008f6a:	e070      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f6c:	f107 0314 	add.w	r3, r7, #20
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fda3 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f7a:	e068      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7c:	f107 0308 	add.w	r3, r7, #8
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe ff07 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f8a:	e060      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d103      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8008f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008fa0:	e055      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fa6:	e052      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008fa8:	4b05      	ldr	r3, [pc, #20]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb6:	d10b      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008fb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008fbc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008fbe:	e046      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008fc0:	44020c00 	.word	0x44020c00
 8008fc4:	03d09000 	.word	0x03d09000
 8008fc8:	003d0900 	.word	0x003d0900
 8008fcc:	007a1200 	.word	0x007a1200
              frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fd4:	e03b      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fd6:	4bae      	ldr	r3, [pc, #696]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fdc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fe2:	4bab      	ldr	r3, [pc, #684]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d10c      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8008fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ff4:	4ba6      	ldr	r3, [pc, #664]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	08db      	lsrs	r3, r3, #3
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	4aa5      	ldr	r2, [pc, #660]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
 8009006:	e01e      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009008:	4ba1      	ldr	r3, [pc, #644]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009014:	d106      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800901c:	d102      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800901e:	4b9e      	ldr	r3, [pc, #632]	@ (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	e010      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009024:	4b9a      	ldr	r3, [pc, #616]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800902c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009030:	d106      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8009032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009038:	d102      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800903a:	4b98      	ldr	r3, [pc, #608]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e002      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009044:	e003      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009046:	e002      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800904c:	bf00      	nop
          }
        }
        break;
 800904e:	e34e      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009050:	4b8f      	ldr	r3, [pc, #572]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800905a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800905c:	4b8c      	ldr	r3, [pc, #560]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009068:	d105      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8009070:	4b8a      	ldr	r3, [pc, #552]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009074:	e33b      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907c:	d107      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800907e:	f107 0320 	add.w	r3, r7, #32
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fbae 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800908c:	e32f      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009094:	d107      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009096:	f107 0314 	add.w	r3, r7, #20
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fd0e 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a4:	e323      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090aa:	e320      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80090ac:	4b78      	ldr	r3, [pc, #480]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80090ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d860      	bhi.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080090d9 	.word	0x080090d9
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	08009109 	.word	0x08009109
 80090d4:	0800910f 	.word	0x0800910f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090d8:	f107 0320 	add.w	r3, r7, #32
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fb81 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090e6:	e04e      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fce5 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090f6:	e046      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fe49 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009106:	e03e      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009108:	4b65      	ldr	r3, [pc, #404]	@ (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800910c:	e03b      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800910e:	4b60      	ldr	r3, [pc, #384]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009114:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009118:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800911a:	4b5d      	ldr	r3, [pc, #372]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d10c      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800912c:	4b58      	ldr	r3, [pc, #352]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	08db      	lsrs	r3, r3, #3
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	4a57      	ldr	r2, [pc, #348]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009138:	fa22 f303 	lsr.w	r3, r2, r3
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
 800913e:	e01e      	b.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009140:	4b53      	ldr	r3, [pc, #332]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914c:	d106      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800914e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009154:	d102      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009156:	4b50      	ldr	r3, [pc, #320]	@ (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
 800915a:	e010      	b.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800915c:	4b4c      	ldr	r3, [pc, #304]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009168:	d106      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 800916a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009170:	d102      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009172:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
 8009176:	e002      	b.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800917c:	e003      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800917e:	e002      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009184:	bf00      	nop
          }
        }
        break;
 8009186:	e2b2      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009188:	4b41      	ldr	r3, [pc, #260]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800918a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800918e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009192:	633b      	str	r3, [r7, #48]	@ 0x30
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	2b20      	cmp	r3, #32
 8009198:	f200 80a4 	bhi.w	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 800919c:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800919e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a2:	bf00      	nop
 80091a4:	08009229 	.word	0x08009229
 80091a8:	080092e5 	.word	0x080092e5
 80091ac:	080092e5 	.word	0x080092e5
 80091b0:	080092e5 	.word	0x080092e5
 80091b4:	080092e5 	.word	0x080092e5
 80091b8:	080092e5 	.word	0x080092e5
 80091bc:	080092e5 	.word	0x080092e5
 80091c0:	080092e5 	.word	0x080092e5
 80091c4:	08009239 	.word	0x08009239
 80091c8:	080092e5 	.word	0x080092e5
 80091cc:	080092e5 	.word	0x080092e5
 80091d0:	080092e5 	.word	0x080092e5
 80091d4:	080092e5 	.word	0x080092e5
 80091d8:	080092e5 	.word	0x080092e5
 80091dc:	080092e5 	.word	0x080092e5
 80091e0:	080092e5 	.word	0x080092e5
 80091e4:	08009249 	.word	0x08009249
 80091e8:	080092e5 	.word	0x080092e5
 80091ec:	080092e5 	.word	0x080092e5
 80091f0:	080092e5 	.word	0x080092e5
 80091f4:	080092e5 	.word	0x080092e5
 80091f8:	080092e5 	.word	0x080092e5
 80091fc:	080092e5 	.word	0x080092e5
 8009200:	080092e5 	.word	0x080092e5
 8009204:	08009259 	.word	0x08009259
 8009208:	080092e5 	.word	0x080092e5
 800920c:	080092e5 	.word	0x080092e5
 8009210:	080092e5 	.word	0x080092e5
 8009214:	080092e5 	.word	0x080092e5
 8009218:	080092e5 	.word	0x080092e5
 800921c:	080092e5 	.word	0x080092e5
 8009220:	080092e5 	.word	0x080092e5
 8009224:	0800925f 	.word	0x0800925f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009228:	f107 0320 	add.w	r3, r7, #32
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fad9 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009236:	e058      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009238:	f107 0314 	add.w	r3, r7, #20
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fc3d 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009246:	e050      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009248:	f107 0308 	add.w	r3, r7, #8
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fda1 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009256:	e048      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009258:	4b11      	ldr	r3, [pc, #68]	@ (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800925c:	e045      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800925e:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009264:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009268:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800926a:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b02      	cmp	r3, #2
 8009274:	d116      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8009276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d113      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	4a03      	ldr	r2, [pc, #12]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
 800928e:	e028      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009290:	44020c00 	.word	0x44020c00
 8009294:	03d09000 	.word	0x03d09000
 8009298:	003d0900 	.word	0x003d0900
 800929c:	007a1200 	.word	0x007a1200
 80092a0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092a4:	4b95      	ldr	r3, [pc, #596]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b0:	d106      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80092b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b8:	d102      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80092ba:	4b91      	ldr	r3, [pc, #580]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80092bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092be:	e010      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092c0:	4b8e      	ldr	r3, [pc, #568]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092cc:	d106      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80092ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092d4:	d102      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80092d6:	4b8b      	ldr	r3, [pc, #556]	@ (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092da:	e002      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80092e2:	e002      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e8:	bf00      	nop
          }
        }
        break;
 80092ea:	e200      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80092ec:	4b83      	ldr	r3, [pc, #524]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80092ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80092f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092fe:	d031      	beq.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009306:	d866      	bhi.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	2bc0      	cmp	r3, #192	@ 0xc0
 800930c:	d027      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2bc0      	cmp	r3, #192	@ 0xc0
 8009312:	d860      	bhi.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	2b80      	cmp	r3, #128	@ 0x80
 8009318:	d019      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	2b80      	cmp	r3, #128	@ 0x80
 800931e:	d85a      	bhi.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	2b40      	cmp	r3, #64	@ 0x40
 800932a:	d008      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 800932c:	e053      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800932e:	f107 0320 	add.w	r3, r7, #32
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fa56 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933c:	e04e      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800933e:	f107 0314 	add.w	r3, r7, #20
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fbba 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800934c:	e046      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934e:	f107 0308 	add.w	r3, r7, #8
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fd1e 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800935c:	e03e      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800935e:	4b6a      	ldr	r3, [pc, #424]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009362:	e03b      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009364:	4b65      	ldr	r3, [pc, #404]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800936a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800936e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009370:	4b62      	ldr	r3, [pc, #392]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b02      	cmp	r3, #2
 800937a:	d10c      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800937c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009382:	4b5e      	ldr	r3, [pc, #376]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	08db      	lsrs	r3, r3, #3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	4a5f      	ldr	r2, [pc, #380]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800938e:	fa22 f303 	lsr.w	r3, r2, r3
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34
 8009394:	e01e      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009396:	4b59      	ldr	r3, [pc, #356]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800939e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a2:	d106      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80093a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093aa:	d102      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093ac:	4b54      	ldr	r3, [pc, #336]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b0:	e010      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b2:	4b52      	ldr	r3, [pc, #328]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093be:	d106      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c6:	d102      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093d2:	e003      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80093d4:	e002      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093da:	bf00      	nop
          }
        }
        break;
 80093dc:	e187      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80093de:	4b47      	ldr	r3, [pc, #284]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80093e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80093e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80093f0:	f7fd f80c 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 80093f4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80093f6:	e17a      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80093f8:	4b40      	ldr	r3, [pc, #256]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009404:	d10b      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d107      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940e:	f107 0314 	add.w	r3, r7, #20
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fb52 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
 800941c:	e045      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800941e:	4b37      	ldr	r3, [pc, #220]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942a:	d10b      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009432:	d107      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009434:	f107 0308 	add.w	r3, r7, #8
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fcab 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
 8009442:	e032      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009444:	4b2d      	ldr	r3, [pc, #180]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b02      	cmp	r3, #2
 800944e:	d10d      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009456:	d109      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009458:	4b28      	ldr	r3, [pc, #160]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	08db      	lsrs	r3, r3, #3
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	4a2a      	ldr	r2, [pc, #168]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	e01e      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800946c:	4b23      	ldr	r3, [pc, #140]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009478:	d106      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009480:	d102      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8009482:	4b1f      	ldr	r3, [pc, #124]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
 8009486:	e010      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009488:	4b1c      	ldr	r3, [pc, #112]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009494:	d106      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800949c:	d102      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800949e:	4b19      	ldr	r3, [pc, #100]	@ (8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a2:	e002      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094a8:	e121      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80094aa:	e120      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80094ac:	4b13      	ldr	r3, [pc, #76]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80094ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d861      	bhi.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80094be:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	08009511 	.word	0x08009511

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80094d4:	f7fc ff68 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 80094d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80094da:	e055      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094dc:	f107 0320 	add.w	r3, r7, #32
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe f97f 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094ea:	e04d      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe fae3 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094fa:	e045      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80094fc:	44020c00 	.word	0x44020c00
 8009500:	003d0900 	.word	0x003d0900
 8009504:	007a1200 	.word	0x007a1200
 8009508:	00bb8000 	.word	0x00bb8000
 800950c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009510:	4b79      	ldr	r3, [pc, #484]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009516:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800951a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800951c:	4b76      	ldr	r3, [pc, #472]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d10c      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800952e:	4b72      	ldr	r3, [pc, #456]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a70      	ldr	r2, [pc, #448]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009540:	e01e      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009542:	4b6d      	ldr	r3, [pc, #436]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800954a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800954e:	d106      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009556:	d102      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009558:	4b69      	ldr	r3, [pc, #420]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800955a:	637b      	str	r3, [r7, #52]	@ 0x34
 800955c:	e010      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800955e:	4b66      	ldr	r3, [pc, #408]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800956a:	d106      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009572:	d102      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009574:	4b63      	ldr	r3, [pc, #396]	@ (8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
 8009578:	e002      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800957e:	e003      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009580:	e002      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009586:	bf00      	nop
          }
        }
        break;
 8009588:	e0b1      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800958a:	4b5b      	ldr	r3, [pc, #364]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800958c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009590:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009594:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009596:	4b58      	ldr	r3, [pc, #352]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d106      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80095a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80095aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b0:	e01f      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80095b2:	4b51      	ldr	r3, [pc, #324]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80095b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c0:	d106      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80095c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c4:	2b40      	cmp	r3, #64	@ 0x40
 80095c6:	d103      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80095c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ce:	e010      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80095d0:	4b49      	ldr	r3, [pc, #292]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095dc:	d106      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	2b80      	cmp	r3, #128	@ 0x80
 80095e2:	d103      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80095e4:	f248 0312 	movw	r3, #32786	@ 0x8012
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ea:	e002      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80095f0:	e07d      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80095f2:	e07c      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80095f4:	4b40      	ldr	r3, [pc, #256]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80095f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009600:	4b3d      	ldr	r3, [pc, #244]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800960c:	d105      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009614:	4b3c      	ldr	r3, [pc, #240]	@ (8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e031      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800961a:	4b37      	ldr	r3, [pc, #220]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009626:	d10a      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	2b10      	cmp	r3, #16
 800962c:	d107      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800962e:	f107 0320 	add.w	r3, r7, #32
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe f8d6 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
 800963c:	e01f      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800963e:	4b2e      	ldr	r3, [pc, #184]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d106      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	2b20      	cmp	r3, #32
 8009650:	d103      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
 8009658:	e011      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800965a:	4b27      	ldr	r3, [pc, #156]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800965c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009668:	d106      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	2b30      	cmp	r3, #48	@ 0x30
 800966e:	d103      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009670:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	e002      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800967c:	e037      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800967e:	e036      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009680:	4b1d      	ldr	r3, [pc, #116]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009686:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800968a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	2b10      	cmp	r3, #16
 8009690:	d107      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009692:	f107 0320 	add.w	r3, r7, #32
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe f8a4 	bl	80077e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80096a0:	e025      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80096a2:	4b15      	ldr	r3, [pc, #84]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ae:	d10a      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d107      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b6:	f107 0308 	add.w	r3, r7, #8
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fb6a 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c4:	e00f      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80096c6:	4b0c      	ldr	r3, [pc, #48]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096d2:	d105      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	2b30      	cmp	r3, #48	@ 0x30
 80096d8:	d102      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80096da:	4b0b      	ldr	r3, [pc, #44]	@ (8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80096dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096de:	e002      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80096e4:	e003      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80096e6:	e002      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ec:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80096ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	373c      	adds	r7, #60	@ 0x3c
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd90      	pop	{r4, r7, pc}
 80096f8:	44020c00 	.word	0x44020c00
 80096fc:	03d09000 	.word	0x03d09000
 8009700:	003d0900 	.word	0x003d0900
 8009704:	007a1200 	.word	0x007a1200
 8009708:	02dc6c00 	.word	0x02dc6c00

0800970c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009714:	4b48      	ldr	r3, [pc, #288]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a47      	ldr	r2, [pc, #284]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 800971a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800971e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009720:	f7f9 feac 	bl	800347c <HAL_GetTick>
 8009724:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009726:	e008      	b.n	800973a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009728:	f7f9 fea8 	bl	800347c <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d901      	bls.n	800973a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e07a      	b.n	8009830 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800973a:	4b3f      	ldr	r3, [pc, #252]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f0      	bne.n	8009728 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009746:	4b3c      	ldr	r3, [pc, #240]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6811      	ldr	r1, [r2, #0]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6852      	ldr	r2, [r2, #4]
 800975a:	0212      	lsls	r2, r2, #8
 800975c:	430a      	orrs	r2, r1
 800975e:	4936      	ldr	r1, [pc, #216]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009760:	4313      	orrs	r3, r2
 8009762:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	3b01      	subs	r3, #1
 800976a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	3b01      	subs	r3, #1
 8009774:	025b      	lsls	r3, r3, #9
 8009776:	b29b      	uxth	r3, r3
 8009778:	431a      	orrs	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	3b01      	subs	r3, #1
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	3b01      	subs	r3, #1
 800978e:	061b      	lsls	r3, r3, #24
 8009790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009794:	4928      	ldr	r1, [pc, #160]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800979a:	4b27      	ldr	r3, [pc, #156]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	f023 020c 	bic.w	r2, r3, #12
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	4924      	ldr	r1, [pc, #144]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80097ac:	4b22      	ldr	r3, [pc, #136]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	f023 0220 	bic.w	r2, r3, #32
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	491f      	ldr	r1, [pc, #124]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80097be:	4b1e      	ldr	r3, [pc, #120]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c6:	491c      	ldr	r1, [pc, #112]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80097cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	4a19      	ldr	r2, [pc, #100]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097d2:	f023 0310 	bic.w	r3, r3, #16
 80097d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80097d8:	4b17      	ldr	r3, [pc, #92]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6a12      	ldr	r2, [r2, #32]
 80097e8:	00d2      	lsls	r2, r2, #3
 80097ea:	4913      	ldr	r1, [pc, #76]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80097f0:	4b11      	ldr	r3, [pc, #68]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	4a10      	ldr	r2, [pc, #64]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097f6:	f043 0310 	orr.w	r3, r3, #16
 80097fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80097fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0d      	ldr	r2, [pc, #52]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009802:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009806:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009808:	f7f9 fe38 	bl	800347c <HAL_GetTick>
 800980c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800980e:	e008      	b.n	8009822 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009810:	f7f9 fe34 	bl	800347c <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b02      	cmp	r3, #2
 800981c:	d901      	bls.n	8009822 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e006      	b.n	8009830 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009822:	4b05      	ldr	r3, [pc, #20]	@ (8009838 <RCCEx_PLL2_Config+0x12c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0f0      	beq.n	8009810 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800982e:	2300      	movs	r3, #0

}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	44020c00 	.word	0x44020c00

0800983c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009844:	4b48      	ldr	r3, [pc, #288]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a47      	ldr	r2, [pc, #284]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 800984a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800984e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009850:	f7f9 fe14 	bl	800347c <HAL_GetTick>
 8009854:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009856:	e008      	b.n	800986a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009858:	f7f9 fe10 	bl	800347c <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d901      	bls.n	800986a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e07a      	b.n	8009960 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800986a:	4b3f      	ldr	r3, [pc, #252]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f0      	bne.n	8009858 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009876:	4b3c      	ldr	r3, [pc, #240]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800987e:	f023 0303 	bic.w	r3, r3, #3
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6811      	ldr	r1, [r2, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	6852      	ldr	r2, [r2, #4]
 800988a:	0212      	lsls	r2, r2, #8
 800988c:	430a      	orrs	r2, r1
 800988e:	4936      	ldr	r1, [pc, #216]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	630b      	str	r3, [r1, #48]	@ 0x30
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	3b01      	subs	r3, #1
 800989a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	025b      	lsls	r3, r3, #9
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	041b      	lsls	r3, r3, #16
 80098b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	3b01      	subs	r3, #1
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c4:	4928      	ldr	r1, [pc, #160]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098ca:	4b27      	ldr	r3, [pc, #156]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ce:	f023 020c 	bic.w	r2, r3, #12
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	4924      	ldr	r1, [pc, #144]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80098dc:	4b22      	ldr	r3, [pc, #136]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e0:	f023 0220 	bic.w	r2, r3, #32
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	491f      	ldr	r1, [pc, #124]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80098ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f6:	491c      	ldr	r1, [pc, #112]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80098fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009902:	f023 0310 	bic.w	r3, r3, #16
 8009906:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009908:	4b17      	ldr	r3, [pc, #92]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 800990a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800990c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009910:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	6a12      	ldr	r2, [r2, #32]
 8009918:	00d2      	lsls	r2, r2, #3
 800991a:	4913      	ldr	r1, [pc, #76]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 800991c:	4313      	orrs	r3, r2
 800991e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009920:	4b11      	ldr	r3, [pc, #68]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009924:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009926:	f043 0310 	orr.w	r3, r3, #16
 800992a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800992c:	4b0e      	ldr	r3, [pc, #56]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a0d      	ldr	r2, [pc, #52]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009936:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009938:	f7f9 fda0 	bl	800347c <HAL_GetTick>
 800993c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800993e:	e008      	b.n	8009952 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009940:	f7f9 fd9c 	bl	800347c <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d901      	bls.n	8009952 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e006      	b.n	8009960 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009952:	4b05      	ldr	r3, [pc, #20]	@ (8009968 <RCCEx_PLL3_Config+0x12c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0f0      	beq.n	8009940 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	44020c00 	.word	0x44020c00

0800996c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e049      	b.n	8009a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7f9 f9d4 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f000 ff04 	bl	800a7b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d001      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e07c      	b.n	8009b2e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0201 	orr.w	r2, r2, #1
 8009a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a3a      	ldr	r2, [pc, #232]	@ (8009b3c <HAL_TIM_Base_Start_IT+0x120>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d04a      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a39      	ldr	r2, [pc, #228]	@ (8009b40 <HAL_TIM_Base_Start_IT+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d045      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a68:	d040      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a72:	d03b      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a32      	ldr	r2, [pc, #200]	@ (8009b44 <HAL_TIM_Base_Start_IT+0x128>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d036      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a31      	ldr	r2, [pc, #196]	@ (8009b48 <HAL_TIM_Base_Start_IT+0x12c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d031      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8009b4c <HAL_TIM_Base_Start_IT+0x130>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d02c      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2e      	ldr	r2, [pc, #184]	@ (8009b50 <HAL_TIM_Base_Start_IT+0x134>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d027      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8009b54 <HAL_TIM_Base_Start_IT+0x138>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d022      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8009b58 <HAL_TIM_Base_Start_IT+0x13c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d01d      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a29      	ldr	r2, [pc, #164]	@ (8009b5c <HAL_TIM_Base_Start_IT+0x140>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d018      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a28      	ldr	r2, [pc, #160]	@ (8009b60 <HAL_TIM_Base_Start_IT+0x144>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d013      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a26      	ldr	r2, [pc, #152]	@ (8009b64 <HAL_TIM_Base_Start_IT+0x148>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00e      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a25      	ldr	r2, [pc, #148]	@ (8009b68 <HAL_TIM_Base_Start_IT+0x14c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d009      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a23      	ldr	r2, [pc, #140]	@ (8009b6c <HAL_TIM_Base_Start_IT+0x150>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d004      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0xd0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a22      	ldr	r2, [pc, #136]	@ (8009b70 <HAL_TIM_Base_Start_IT+0x154>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d115      	bne.n	8009b18 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689a      	ldr	r2, [r3, #8]
 8009af2:	4b20      	ldr	r3, [pc, #128]	@ (8009b74 <HAL_TIM_Base_Start_IT+0x158>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b06      	cmp	r3, #6
 8009afc:	d015      	beq.n	8009b2a <HAL_TIM_Base_Start_IT+0x10e>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b04:	d011      	beq.n	8009b2a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f042 0201 	orr.w	r2, r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b16:	e008      	b.n	8009b2a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e000      	b.n	8009b2c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40012c00 	.word	0x40012c00
 8009b40:	50012c00 	.word	0x50012c00
 8009b44:	40000400 	.word	0x40000400
 8009b48:	50000400 	.word	0x50000400
 8009b4c:	40000800 	.word	0x40000800
 8009b50:	50000800 	.word	0x50000800
 8009b54:	40000c00 	.word	0x40000c00
 8009b58:	50000c00 	.word	0x50000c00
 8009b5c:	40013400 	.word	0x40013400
 8009b60:	50013400 	.word	0x50013400
 8009b64:	40001800 	.word	0x40001800
 8009b68:	50001800 	.word	0x50001800
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	50014000 	.word	0x50014000
 8009b74:	00010007 	.word	0x00010007

08009b78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e049      	b.n	8009c1e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f841 	bl	8009c26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f000 fdfe 	bl	800a7b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e049      	b.n	8009ce0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7f9 f909 	bl	8002e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f000 fd9d 	bl	800a7b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <HAL_TIM_PWM_Start+0x24>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	e03c      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d109      	bne.n	8009d26 <HAL_TIM_PWM_Start+0x3e>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	bf14      	ite	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	2300      	moveq	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	e02f      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d109      	bne.n	8009d40 <HAL_TIM_PWM_Start+0x58>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	bf14      	ite	ne
 8009d38:	2301      	movne	r3, #1
 8009d3a:	2300      	moveq	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	e022      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b0c      	cmp	r3, #12
 8009d44:	d109      	bne.n	8009d5a <HAL_TIM_PWM_Start+0x72>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e015      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b10      	cmp	r3, #16
 8009d5e:	d109      	bne.n	8009d74 <HAL_TIM_PWM_Start+0x8c>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	e008      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	bf14      	ite	ne
 8009d80:	2301      	movne	r3, #1
 8009d82:	2300      	moveq	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e0ce      	b.n	8009f2c <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <HAL_TIM_PWM_Start+0xb6>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d9c:	e023      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d104      	bne.n	8009dae <HAL_TIM_PWM_Start+0xc6>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dac:	e01b      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d104      	bne.n	8009dbe <HAL_TIM_PWM_Start+0xd6>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009dbc:	e013      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b0c      	cmp	r3, #12
 8009dc2:	d104      	bne.n	8009dce <HAL_TIM_PWM_Start+0xe6>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dcc:	e00b      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d104      	bne.n	8009dde <HAL_TIM_PWM_Start+0xf6>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ddc:	e003      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f99e 	bl	800b130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a4e      	ldr	r2, [pc, #312]	@ (8009f34 <HAL_TIM_PWM_Start+0x24c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d018      	beq.n	8009e30 <HAL_TIM_PWM_Start+0x148>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4d      	ldr	r2, [pc, #308]	@ (8009f38 <HAL_TIM_PWM_Start+0x250>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d013      	beq.n	8009e30 <HAL_TIM_PWM_Start+0x148>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8009f3c <HAL_TIM_PWM_Start+0x254>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00e      	beq.n	8009e30 <HAL_TIM_PWM_Start+0x148>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a4a      	ldr	r2, [pc, #296]	@ (8009f40 <HAL_TIM_PWM_Start+0x258>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d009      	beq.n	8009e30 <HAL_TIM_PWM_Start+0x148>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a48      	ldr	r2, [pc, #288]	@ (8009f44 <HAL_TIM_PWM_Start+0x25c>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d004      	beq.n	8009e30 <HAL_TIM_PWM_Start+0x148>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a47      	ldr	r2, [pc, #284]	@ (8009f48 <HAL_TIM_PWM_Start+0x260>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d101      	bne.n	8009e34 <HAL_TIM_PWM_Start+0x14c>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e000      	b.n	8009e36 <HAL_TIM_PWM_Start+0x14e>
 8009e34:	2300      	movs	r3, #0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a39      	ldr	r2, [pc, #228]	@ (8009f34 <HAL_TIM_PWM_Start+0x24c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d04a      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a37      	ldr	r2, [pc, #220]	@ (8009f38 <HAL_TIM_PWM_Start+0x250>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d045      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e66:	d040      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e70:	d03b      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a35      	ldr	r2, [pc, #212]	@ (8009f4c <HAL_TIM_PWM_Start+0x264>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d036      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a33      	ldr	r2, [pc, #204]	@ (8009f50 <HAL_TIM_PWM_Start+0x268>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d031      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a32      	ldr	r2, [pc, #200]	@ (8009f54 <HAL_TIM_PWM_Start+0x26c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d02c      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a30      	ldr	r2, [pc, #192]	@ (8009f58 <HAL_TIM_PWM_Start+0x270>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d027      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8009f5c <HAL_TIM_PWM_Start+0x274>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d022      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8009f60 <HAL_TIM_PWM_Start+0x278>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01d      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <HAL_TIM_PWM_Start+0x254>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d018      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a20      	ldr	r2, [pc, #128]	@ (8009f40 <HAL_TIM_PWM_Start+0x258>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d013      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a27      	ldr	r2, [pc, #156]	@ (8009f64 <HAL_TIM_PWM_Start+0x27c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00e      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a25      	ldr	r2, [pc, #148]	@ (8009f68 <HAL_TIM_PWM_Start+0x280>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d009      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a1a      	ldr	r2, [pc, #104]	@ (8009f44 <HAL_TIM_PWM_Start+0x25c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d004      	beq.n	8009eea <HAL_TIM_PWM_Start+0x202>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a18      	ldr	r2, [pc, #96]	@ (8009f48 <HAL_TIM_PWM_Start+0x260>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d115      	bne.n	8009f16 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f6c <HAL_TIM_PWM_Start+0x284>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b06      	cmp	r3, #6
 8009efa:	d015      	beq.n	8009f28 <HAL_TIM_PWM_Start+0x240>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f02:	d011      	beq.n	8009f28 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f14:	e008      	b.n	8009f28 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 0201 	orr.w	r2, r2, #1
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	e000      	b.n	8009f2a <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	40012c00 	.word	0x40012c00
 8009f38:	50012c00 	.word	0x50012c00
 8009f3c:	40013400 	.word	0x40013400
 8009f40:	50013400 	.word	0x50013400
 8009f44:	40014000 	.word	0x40014000
 8009f48:	50014000 	.word	0x50014000
 8009f4c:	40000400 	.word	0x40000400
 8009f50:	50000400 	.word	0x50000400
 8009f54:	40000800 	.word	0x40000800
 8009f58:	50000800 	.word	0x50000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	50000c00 	.word	0x50000c00
 8009f64:	40001800 	.word	0x40001800
 8009f68:	50001800 	.word	0x50001800
 8009f6c:	00010007 	.word	0x00010007

08009f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d020      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f003 0302 	and.w	r3, r3, #2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d01b      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0202 	mvn.w	r2, #2
 8009fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fbde 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 8009fc0:	e005      	b.n	8009fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fbd0 	bl	800a768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fbe1 	bl	800a790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d020      	beq.n	800a020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01b      	beq.n	800a020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f06f 0204 	mvn.w	r2, #4
 8009ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fbb8 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a00c:	e005      	b.n	800a01a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fbaa 	bl	800a768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fbbb 	bl	800a790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d020      	beq.n	800a06c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f003 0308 	and.w	r3, r3, #8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01b      	beq.n	800a06c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f06f 0208 	mvn.w	r2, #8
 800a03c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2204      	movs	r2, #4
 800a042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fb92 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a058:	e005      	b.n	800a066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fb84 	bl	800a768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fb95 	bl	800a790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f003 0310 	and.w	r3, r3, #16
 800a072:	2b00      	cmp	r3, #0
 800a074:	d020      	beq.n	800a0b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0210 	mvn.w	r2, #16
 800a088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2208      	movs	r2, #8
 800a08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fb6c 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a0a4:	e005      	b.n	800a0b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fb5e 	bl	800a768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fb6f 	bl	800a790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00c      	beq.n	800a0dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0201 	mvn.w	r2, #1
 800a0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7f8 f954 	bl	8002384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d104      	bne.n	800a0f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00c      	beq.n	800a10a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f9ad 	bl	800b464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00c      	beq.n	800a12e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d007      	beq.n	800a12e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f9a5 	bl	800b478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00c      	beq.n	800a152 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fb29 	bl	800a7a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f003 0320 	and.w	r3, r3, #32
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00c      	beq.n	800a176 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	d007      	beq.n	800a176 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f06f 0220 	mvn.w	r2, #32
 800a16e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f001 f96d 	bl	800b450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00c      	beq.n	800a19a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f979 	bl	800b48c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00c      	beq.n	800a1be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f971 	bl	800b4a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00c      	beq.n	800a1e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f969 	bl	800b4b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 f961 	bl	800b4c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_TIM_OC_ConfigChannel+0x1e>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e066      	b.n	800a2fc <HAL_TIM_OC_ConfigChannel+0xec>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b14      	cmp	r3, #20
 800a23a:	d857      	bhi.n	800a2ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800a23c:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a299 	.word	0x0800a299
 800a248:	0800a2ed 	.word	0x0800a2ed
 800a24c:	0800a2ed 	.word	0x0800a2ed
 800a250:	0800a2ed 	.word	0x0800a2ed
 800a254:	0800a2a7 	.word	0x0800a2a7
 800a258:	0800a2ed 	.word	0x0800a2ed
 800a25c:	0800a2ed 	.word	0x0800a2ed
 800a260:	0800a2ed 	.word	0x0800a2ed
 800a264:	0800a2b5 	.word	0x0800a2b5
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a2ed 	.word	0x0800a2ed
 800a270:	0800a2ed 	.word	0x0800a2ed
 800a274:	0800a2c3 	.word	0x0800a2c3
 800a278:	0800a2ed 	.word	0x0800a2ed
 800a27c:	0800a2ed 	.word	0x0800a2ed
 800a280:	0800a2ed 	.word	0x0800a2ed
 800a284:	0800a2d1 	.word	0x0800a2d1
 800a288:	0800a2ed 	.word	0x0800a2ed
 800a28c:	0800a2ed 	.word	0x0800a2ed
 800a290:	0800a2ed 	.word	0x0800a2ed
 800a294:	0800a2df 	.word	0x0800a2df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fb74 	bl	800a98c <TIM_OC1_SetConfig>
      break;
 800a2a4:	e025      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fc07 	bl	800aac0 <TIM_OC2_SetConfig>
      break;
 800a2b2:	e01e      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fc98 	bl	800abf0 <TIM_OC3_SetConfig>
      break;
 800a2c0:	e017      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fd27 	bl	800ad1c <TIM_OC4_SetConfig>
      break;
 800a2ce:	e010      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fdb8 	bl	800ae4c <TIM_OC5_SetConfig>
      break;
 800a2dc:	e009      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fe1b 	bl	800af20 <TIM_OC6_SetConfig>
      break;
 800a2ea:	e002      	b.n	800a2f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a31e:	2302      	movs	r3, #2
 800a320:	e0ff      	b.n	800a522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b14      	cmp	r3, #20
 800a32e:	f200 80f0 	bhi.w	800a512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a332:	a201      	add	r2, pc, #4	@ (adr r2, 800a338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a513 	.word	0x0800a513
 800a340:	0800a513 	.word	0x0800a513
 800a344:	0800a513 	.word	0x0800a513
 800a348:	0800a3cd 	.word	0x0800a3cd
 800a34c:	0800a513 	.word	0x0800a513
 800a350:	0800a513 	.word	0x0800a513
 800a354:	0800a513 	.word	0x0800a513
 800a358:	0800a40f 	.word	0x0800a40f
 800a35c:	0800a513 	.word	0x0800a513
 800a360:	0800a513 	.word	0x0800a513
 800a364:	0800a513 	.word	0x0800a513
 800a368:	0800a44f 	.word	0x0800a44f
 800a36c:	0800a513 	.word	0x0800a513
 800a370:	0800a513 	.word	0x0800a513
 800a374:	0800a513 	.word	0x0800a513
 800a378:	0800a491 	.word	0x0800a491
 800a37c:	0800a513 	.word	0x0800a513
 800a380:	0800a513 	.word	0x0800a513
 800a384:	0800a513 	.word	0x0800a513
 800a388:	0800a4d1 	.word	0x0800a4d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fafa 	bl	800a98c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699a      	ldr	r2, [r3, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0208 	orr.w	r2, r2, #8
 800a3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0204 	bic.w	r2, r2, #4
 800a3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6999      	ldr	r1, [r3, #24]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	619a      	str	r2, [r3, #24]
      break;
 800a3ca:	e0a5      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68b9      	ldr	r1, [r7, #8]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fb74 	bl	800aac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699a      	ldr	r2, [r3, #24]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6999      	ldr	r1, [r3, #24]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	021a      	lsls	r2, r3, #8
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	430a      	orrs	r2, r1
 800a40a:	619a      	str	r2, [r3, #24]
      break;
 800a40c:	e084      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fbeb 	bl	800abf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0208 	orr.w	r2, r2, #8
 800a428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 0204 	bic.w	r2, r2, #4
 800a438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69d9      	ldr	r1, [r3, #28]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691a      	ldr	r2, [r3, #16]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	61da      	str	r2, [r3, #28]
      break;
 800a44c:	e064      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68b9      	ldr	r1, [r7, #8]
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fc61 	bl	800ad1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69da      	ldr	r2, [r3, #28]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69da      	ldr	r2, [r3, #28]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69d9      	ldr	r1, [r3, #28]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	021a      	lsls	r2, r3, #8
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	61da      	str	r2, [r3, #28]
      break;
 800a48e:	e043      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fcd8 	bl	800ae4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0208 	orr.w	r2, r2, #8
 800a4aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0204 	bic.w	r2, r2, #4
 800a4ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a4ce:	e023      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fd22 	bl	800af20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	021a      	lsls	r2, r3, #8
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a510:	e002      	b.n	800a518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	75fb      	strb	r3, [r7, #23]
      break;
 800a516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a540:	2b01      	cmp	r3, #1
 800a542:	d101      	bne.n	800a548 <HAL_TIM_ConfigClockSource+0x1c>
 800a544:	2302      	movs	r3, #2
 800a546:	e0fe      	b.n	800a746 <HAL_TIM_ConfigClockSource+0x21a>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a566:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a56a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a584:	f000 80c9 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a58c:	f200 80ce 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a590:	4a6f      	ldr	r2, [pc, #444]	@ (800a750 <HAL_TIM_ConfigClockSource+0x224>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f000 80c1 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a598:	4a6d      	ldr	r2, [pc, #436]	@ (800a750 <HAL_TIM_ConfigClockSource+0x224>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f200 80c6 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5a0:	4a6c      	ldr	r2, [pc, #432]	@ (800a754 <HAL_TIM_ConfigClockSource+0x228>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	f000 80b9 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5a8:	4a6a      	ldr	r2, [pc, #424]	@ (800a754 <HAL_TIM_ConfigClockSource+0x228>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	f200 80be 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5b0:	4a69      	ldr	r2, [pc, #420]	@ (800a758 <HAL_TIM_ConfigClockSource+0x22c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f000 80b1 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5b8:	4a67      	ldr	r2, [pc, #412]	@ (800a758 <HAL_TIM_ConfigClockSource+0x22c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f200 80b6 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5c0:	4a66      	ldr	r2, [pc, #408]	@ (800a75c <HAL_TIM_ConfigClockSource+0x230>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	f000 80a9 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5c8:	4a64      	ldr	r2, [pc, #400]	@ (800a75c <HAL_TIM_ConfigClockSource+0x230>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f200 80ae 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5d0:	4a63      	ldr	r2, [pc, #396]	@ (800a760 <HAL_TIM_ConfigClockSource+0x234>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	f000 80a1 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5d8:	4a61      	ldr	r2, [pc, #388]	@ (800a760 <HAL_TIM_ConfigClockSource+0x234>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	f200 80a6 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5e0:	4a60      	ldr	r2, [pc, #384]	@ (800a764 <HAL_TIM_ConfigClockSource+0x238>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	f000 8099 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5e8:	4a5e      	ldr	r2, [pc, #376]	@ (800a764 <HAL_TIM_ConfigClockSource+0x238>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	f200 809e 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a5f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a5f4:	f000 8091 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a5f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a5fc:	f200 8096 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a604:	f000 8089 	beq.w	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60c:	f200 808e 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a614:	d03e      	beq.n	800a694 <HAL_TIM_ConfigClockSource+0x168>
 800a616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a61a:	f200 8087 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a622:	f000 8086 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x206>
 800a626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a62a:	d87f      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a62c:	2b70      	cmp	r3, #112	@ 0x70
 800a62e:	d01a      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x13a>
 800a630:	2b70      	cmp	r3, #112	@ 0x70
 800a632:	d87b      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a634:	2b60      	cmp	r3, #96	@ 0x60
 800a636:	d050      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x1ae>
 800a638:	2b60      	cmp	r3, #96	@ 0x60
 800a63a:	d877      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a63c:	2b50      	cmp	r3, #80	@ 0x50
 800a63e:	d03c      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0x18e>
 800a640:	2b50      	cmp	r3, #80	@ 0x50
 800a642:	d873      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a644:	2b40      	cmp	r3, #64	@ 0x40
 800a646:	d058      	beq.n	800a6fa <HAL_TIM_ConfigClockSource+0x1ce>
 800a648:	2b40      	cmp	r3, #64	@ 0x40
 800a64a:	d86f      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a64c:	2b30      	cmp	r3, #48	@ 0x30
 800a64e:	d064      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a650:	2b30      	cmp	r3, #48	@ 0x30
 800a652:	d86b      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d060      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d867      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d05c      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a660:	2b10      	cmp	r3, #16
 800a662:	d05a      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x1ee>
 800a664:	e062      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a676:	f000 fd3b 	bl	800b0f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	609a      	str	r2, [r3, #8]
      break;
 800a692:	e04f      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6a4:	f000 fd24 	bl	800b0f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6b6:	609a      	str	r2, [r3, #8]
      break;
 800a6b8:	e03c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f000 fc96 	bl	800aff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2150      	movs	r1, #80	@ 0x50
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fcef 	bl	800b0b6 <TIM_ITRx_SetConfig>
      break;
 800a6d8:	e02c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f000 fcb5 	bl	800b056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2160      	movs	r1, #96	@ 0x60
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fcdf 	bl	800b0b6 <TIM_ITRx_SetConfig>
      break;
 800a6f8:	e01c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a706:	461a      	mov	r2, r3
 800a708:	f000 fc76 	bl	800aff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2140      	movs	r1, #64	@ 0x40
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fccf 	bl	800b0b6 <TIM_ITRx_SetConfig>
      break;
 800a718:	e00c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f000 fcc6 	bl	800b0b6 <TIM_ITRx_SetConfig>
      break;
 800a72a:	e003      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
      break;
 800a730:	e000      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	00100070 	.word	0x00100070
 800a754:	00100060 	.word	0x00100060
 800a758:	00100050 	.word	0x00100050
 800a75c:	00100040 	.word	0x00100040
 800a760:	00100030 	.word	0x00100030
 800a764:	00100020 	.word	0x00100020

0800a768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a62      	ldr	r2, [pc, #392]	@ (800a954 <TIM_Base_SetConfig+0x19c>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d02b      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a61      	ldr	r2, [pc, #388]	@ (800a958 <TIM_Base_SetConfig+0x1a0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d027      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7de:	d023      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7e6:	d01f      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a5c      	ldr	r2, [pc, #368]	@ (800a95c <TIM_Base_SetConfig+0x1a4>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d01b      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a5b      	ldr	r2, [pc, #364]	@ (800a960 <TIM_Base_SetConfig+0x1a8>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d017      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a5a      	ldr	r2, [pc, #360]	@ (800a964 <TIM_Base_SetConfig+0x1ac>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d013      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a59      	ldr	r2, [pc, #356]	@ (800a968 <TIM_Base_SetConfig+0x1b0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00f      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a58      	ldr	r2, [pc, #352]	@ (800a96c <TIM_Base_SetConfig+0x1b4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00b      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a57      	ldr	r2, [pc, #348]	@ (800a970 <TIM_Base_SetConfig+0x1b8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d007      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a56      	ldr	r2, [pc, #344]	@ (800a974 <TIM_Base_SetConfig+0x1bc>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_Base_SetConfig+0x70>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a55      	ldr	r2, [pc, #340]	@ (800a978 <TIM_Base_SetConfig+0x1c0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d108      	bne.n	800a83a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a82e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a45      	ldr	r2, [pc, #276]	@ (800a954 <TIM_Base_SetConfig+0x19c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d03b      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a44      	ldr	r2, [pc, #272]	@ (800a958 <TIM_Base_SetConfig+0x1a0>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d037      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a850:	d033      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a858:	d02f      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a3f      	ldr	r2, [pc, #252]	@ (800a95c <TIM_Base_SetConfig+0x1a4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d02b      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a3e      	ldr	r2, [pc, #248]	@ (800a960 <TIM_Base_SetConfig+0x1a8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d027      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a3d      	ldr	r2, [pc, #244]	@ (800a964 <TIM_Base_SetConfig+0x1ac>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d023      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a3c      	ldr	r2, [pc, #240]	@ (800a968 <TIM_Base_SetConfig+0x1b0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d01f      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a3b      	ldr	r2, [pc, #236]	@ (800a96c <TIM_Base_SetConfig+0x1b4>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d01b      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a3a      	ldr	r2, [pc, #232]	@ (800a970 <TIM_Base_SetConfig+0x1b8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d017      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a39      	ldr	r2, [pc, #228]	@ (800a974 <TIM_Base_SetConfig+0x1bc>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d013      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a38      	ldr	r2, [pc, #224]	@ (800a978 <TIM_Base_SetConfig+0x1c0>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00f      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a37      	ldr	r2, [pc, #220]	@ (800a97c <TIM_Base_SetConfig+0x1c4>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00b      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a36      	ldr	r2, [pc, #216]	@ (800a980 <TIM_Base_SetConfig+0x1c8>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d007      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a35      	ldr	r2, [pc, #212]	@ (800a984 <TIM_Base_SetConfig+0x1cc>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d003      	beq.n	800a8ba <TIM_Base_SetConfig+0x102>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a34      	ldr	r2, [pc, #208]	@ (800a988 <TIM_Base_SetConfig+0x1d0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d108      	bne.n	800a8cc <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a18      	ldr	r2, [pc, #96]	@ (800a954 <TIM_Base_SetConfig+0x19c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <TIM_Base_SetConfig+0x168>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a17      	ldr	r2, [pc, #92]	@ (800a958 <TIM_Base_SetConfig+0x1a0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00f      	beq.n	800a920 <TIM_Base_SetConfig+0x168>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a1c      	ldr	r2, [pc, #112]	@ (800a974 <TIM_Base_SetConfig+0x1bc>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00b      	beq.n	800a920 <TIM_Base_SetConfig+0x168>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a1b      	ldr	r2, [pc, #108]	@ (800a978 <TIM_Base_SetConfig+0x1c0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d007      	beq.n	800a920 <TIM_Base_SetConfig+0x168>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1c      	ldr	r2, [pc, #112]	@ (800a984 <TIM_Base_SetConfig+0x1cc>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_Base_SetConfig+0x168>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1b      	ldr	r2, [pc, #108]	@ (800a988 <TIM_Base_SetConfig+0x1d0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d103      	bne.n	800a928 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	691a      	ldr	r2, [r3, #16]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b01      	cmp	r3, #1
 800a938:	d105      	bne.n	800a946 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f023 0201 	bic.w	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	611a      	str	r2, [r3, #16]
  }
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	40012c00 	.word	0x40012c00
 800a958:	50012c00 	.word	0x50012c00
 800a95c:	40000400 	.word	0x40000400
 800a960:	50000400 	.word	0x50000400
 800a964:	40000800 	.word	0x40000800
 800a968:	50000800 	.word	0x50000800
 800a96c:	40000c00 	.word	0x40000c00
 800a970:	50000c00 	.word	0x50000c00
 800a974:	40013400 	.word	0x40013400
 800a978:	50013400 	.word	0x50013400
 800a97c:	40001800 	.word	0x40001800
 800a980:	50001800 	.word	0x50001800
 800a984:	40014000 	.word	0x40014000
 800a988:	50014000 	.word	0x50014000

0800a98c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	f023 0201 	bic.w	r2, r3, #1
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f023 0302 	bic.w	r3, r3, #2
 800a9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a30      	ldr	r2, [pc, #192]	@ (800aaa8 <TIM_OC1_SetConfig+0x11c>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d013      	beq.n	800aa14 <TIM_OC1_SetConfig+0x88>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a2f      	ldr	r2, [pc, #188]	@ (800aaac <TIM_OC1_SetConfig+0x120>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00f      	beq.n	800aa14 <TIM_OC1_SetConfig+0x88>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a2e      	ldr	r2, [pc, #184]	@ (800aab0 <TIM_OC1_SetConfig+0x124>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00b      	beq.n	800aa14 <TIM_OC1_SetConfig+0x88>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a2d      	ldr	r2, [pc, #180]	@ (800aab4 <TIM_OC1_SetConfig+0x128>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <TIM_OC1_SetConfig+0x88>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a2c      	ldr	r2, [pc, #176]	@ (800aab8 <TIM_OC1_SetConfig+0x12c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_OC1_SetConfig+0x88>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a2b      	ldr	r2, [pc, #172]	@ (800aabc <TIM_OC1_SetConfig+0x130>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d10c      	bne.n	800aa2e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0308 	bic.w	r3, r3, #8
 800aa1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa8 <TIM_OC1_SetConfig+0x11c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d013      	beq.n	800aa5e <TIM_OC1_SetConfig+0xd2>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a1c      	ldr	r2, [pc, #112]	@ (800aaac <TIM_OC1_SetConfig+0x120>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d00f      	beq.n	800aa5e <TIM_OC1_SetConfig+0xd2>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a1b      	ldr	r2, [pc, #108]	@ (800aab0 <TIM_OC1_SetConfig+0x124>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00b      	beq.n	800aa5e <TIM_OC1_SetConfig+0xd2>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1a      	ldr	r2, [pc, #104]	@ (800aab4 <TIM_OC1_SetConfig+0x128>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d007      	beq.n	800aa5e <TIM_OC1_SetConfig+0xd2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a19      	ldr	r2, [pc, #100]	@ (800aab8 <TIM_OC1_SetConfig+0x12c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d003      	beq.n	800aa5e <TIM_OC1_SetConfig+0xd2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a18      	ldr	r2, [pc, #96]	@ (800aabc <TIM_OC1_SetConfig+0x130>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d111      	bne.n	800aa82 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	621a      	str	r2, [r3, #32]
}
 800aa9c:	bf00      	nop
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	40012c00 	.word	0x40012c00
 800aaac:	50012c00 	.word	0x50012c00
 800aab0:	40013400 	.word	0x40013400
 800aab4:	50013400 	.word	0x50013400
 800aab8:	40014000 	.word	0x40014000
 800aabc:	50014000 	.word	0x50014000

0800aac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	f023 0210 	bic.w	r2, r3, #16
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f023 0320 	bic.w	r3, r3, #32
 800ab0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a2e      	ldr	r2, [pc, #184]	@ (800abd8 <TIM_OC2_SetConfig+0x118>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00b      	beq.n	800ab3c <TIM_OC2_SetConfig+0x7c>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a2d      	ldr	r2, [pc, #180]	@ (800abdc <TIM_OC2_SetConfig+0x11c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d007      	beq.n	800ab3c <TIM_OC2_SetConfig+0x7c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a2c      	ldr	r2, [pc, #176]	@ (800abe0 <TIM_OC2_SetConfig+0x120>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d003      	beq.n	800ab3c <TIM_OC2_SetConfig+0x7c>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a2b      	ldr	r2, [pc, #172]	@ (800abe4 <TIM_OC2_SetConfig+0x124>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d10d      	bne.n	800ab58 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	011b      	lsls	r3, r3, #4
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a1f      	ldr	r2, [pc, #124]	@ (800abd8 <TIM_OC2_SetConfig+0x118>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d013      	beq.n	800ab88 <TIM_OC2_SetConfig+0xc8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a1e      	ldr	r2, [pc, #120]	@ (800abdc <TIM_OC2_SetConfig+0x11c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00f      	beq.n	800ab88 <TIM_OC2_SetConfig+0xc8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a1d      	ldr	r2, [pc, #116]	@ (800abe0 <TIM_OC2_SetConfig+0x120>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00b      	beq.n	800ab88 <TIM_OC2_SetConfig+0xc8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a1c      	ldr	r2, [pc, #112]	@ (800abe4 <TIM_OC2_SetConfig+0x124>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_OC2_SetConfig+0xc8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a1b      	ldr	r2, [pc, #108]	@ (800abe8 <TIM_OC2_SetConfig+0x128>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_OC2_SetConfig+0xc8>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a1a      	ldr	r2, [pc, #104]	@ (800abec <TIM_OC2_SetConfig+0x12c>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d113      	bne.n	800abb0 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	4313      	orrs	r3, r2
 800abae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	621a      	str	r2, [r3, #32]
}
 800abca:	bf00      	nop
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40012c00 	.word	0x40012c00
 800abdc:	50012c00 	.word	0x50012c00
 800abe0:	40013400 	.word	0x40013400
 800abe4:	50013400 	.word	0x50013400
 800abe8:	40014000 	.word	0x40014000
 800abec:	50014000 	.word	0x50014000

0800abf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	@ (800ad04 <TIM_OC3_SetConfig+0x114>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d00b      	beq.n	800ac6a <TIM_OC3_SetConfig+0x7a>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a2c      	ldr	r2, [pc, #176]	@ (800ad08 <TIM_OC3_SetConfig+0x118>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d007      	beq.n	800ac6a <TIM_OC3_SetConfig+0x7a>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a2b      	ldr	r2, [pc, #172]	@ (800ad0c <TIM_OC3_SetConfig+0x11c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d003      	beq.n	800ac6a <TIM_OC3_SetConfig+0x7a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a2a      	ldr	r2, [pc, #168]	@ (800ad10 <TIM_OC3_SetConfig+0x120>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d10d      	bne.n	800ac86 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a1e      	ldr	r2, [pc, #120]	@ (800ad04 <TIM_OC3_SetConfig+0x114>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d013      	beq.n	800acb6 <TIM_OC3_SetConfig+0xc6>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a1d      	ldr	r2, [pc, #116]	@ (800ad08 <TIM_OC3_SetConfig+0x118>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00f      	beq.n	800acb6 <TIM_OC3_SetConfig+0xc6>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a1c      	ldr	r2, [pc, #112]	@ (800ad0c <TIM_OC3_SetConfig+0x11c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00b      	beq.n	800acb6 <TIM_OC3_SetConfig+0xc6>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad10 <TIM_OC3_SetConfig+0x120>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d007      	beq.n	800acb6 <TIM_OC3_SetConfig+0xc6>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a1a      	ldr	r2, [pc, #104]	@ (800ad14 <TIM_OC3_SetConfig+0x124>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d003      	beq.n	800acb6 <TIM_OC3_SetConfig+0xc6>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a19      	ldr	r2, [pc, #100]	@ (800ad18 <TIM_OC3_SetConfig+0x128>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d113      	bne.n	800acde <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	011b      	lsls	r3, r3, #4
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	4313      	orrs	r3, r2
 800acd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	621a      	str	r2, [r3, #32]
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	40012c00 	.word	0x40012c00
 800ad08:	50012c00 	.word	0x50012c00
 800ad0c:	40013400 	.word	0x40013400
 800ad10:	50013400 	.word	0x50013400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	50014000 	.word	0x50014000

0800ad1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	031b      	lsls	r3, r3, #12
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a2e      	ldr	r2, [pc, #184]	@ (800ae34 <TIM_OC4_SetConfig+0x118>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d00b      	beq.n	800ad98 <TIM_OC4_SetConfig+0x7c>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a2d      	ldr	r2, [pc, #180]	@ (800ae38 <TIM_OC4_SetConfig+0x11c>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d007      	beq.n	800ad98 <TIM_OC4_SetConfig+0x7c>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae3c <TIM_OC4_SetConfig+0x120>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d003      	beq.n	800ad98 <TIM_OC4_SetConfig+0x7c>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a2b      	ldr	r2, [pc, #172]	@ (800ae40 <TIM_OC4_SetConfig+0x124>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d10d      	bne.n	800adb4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	031b      	lsls	r3, r3, #12
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae34 <TIM_OC4_SetConfig+0x118>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d013      	beq.n	800ade4 <TIM_OC4_SetConfig+0xc8>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a1e      	ldr	r2, [pc, #120]	@ (800ae38 <TIM_OC4_SetConfig+0x11c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00f      	beq.n	800ade4 <TIM_OC4_SetConfig+0xc8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae3c <TIM_OC4_SetConfig+0x120>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00b      	beq.n	800ade4 <TIM_OC4_SetConfig+0xc8>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1c      	ldr	r2, [pc, #112]	@ (800ae40 <TIM_OC4_SetConfig+0x124>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d007      	beq.n	800ade4 <TIM_OC4_SetConfig+0xc8>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae44 <TIM_OC4_SetConfig+0x128>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d003      	beq.n	800ade4 <TIM_OC4_SetConfig+0xc8>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a1a      	ldr	r2, [pc, #104]	@ (800ae48 <TIM_OC4_SetConfig+0x12c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d113      	bne.n	800ae0c <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800adf2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	019b      	lsls	r3, r3, #6
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	019b      	lsls	r3, r3, #6
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40012c00 	.word	0x40012c00
 800ae38:	50012c00 	.word	0x50012c00
 800ae3c:	40013400 	.word	0x40013400
 800ae40:	50013400 	.word	0x50013400
 800ae44:	40014000 	.word	0x40014000
 800ae48:	50014000 	.word	0x50014000

0800ae4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ae90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	041b      	lsls	r3, r3, #16
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a19      	ldr	r2, [pc, #100]	@ (800af08 <TIM_OC5_SetConfig+0xbc>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d013      	beq.n	800aece <TIM_OC5_SetConfig+0x82>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a18      	ldr	r2, [pc, #96]	@ (800af0c <TIM_OC5_SetConfig+0xc0>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d00f      	beq.n	800aece <TIM_OC5_SetConfig+0x82>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a17      	ldr	r2, [pc, #92]	@ (800af10 <TIM_OC5_SetConfig+0xc4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d00b      	beq.n	800aece <TIM_OC5_SetConfig+0x82>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a16      	ldr	r2, [pc, #88]	@ (800af14 <TIM_OC5_SetConfig+0xc8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d007      	beq.n	800aece <TIM_OC5_SetConfig+0x82>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a15      	ldr	r2, [pc, #84]	@ (800af18 <TIM_OC5_SetConfig+0xcc>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d003      	beq.n	800aece <TIM_OC5_SetConfig+0x82>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a14      	ldr	r2, [pc, #80]	@ (800af1c <TIM_OC5_SetConfig+0xd0>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d109      	bne.n	800aee2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	4313      	orrs	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	621a      	str	r2, [r3, #32]
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	40012c00 	.word	0x40012c00
 800af0c:	50012c00 	.word	0x50012c00
 800af10:	40013400 	.word	0x40013400
 800af14:	50013400 	.word	0x50013400
 800af18:	40014000 	.word	0x40014000
 800af1c:	50014000 	.word	0x50014000

0800af20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	051b      	lsls	r3, r3, #20
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	4313      	orrs	r3, r2
 800af72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a1a      	ldr	r2, [pc, #104]	@ (800afe0 <TIM_OC6_SetConfig+0xc0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <TIM_OC6_SetConfig+0x84>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a19      	ldr	r2, [pc, #100]	@ (800afe4 <TIM_OC6_SetConfig+0xc4>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00f      	beq.n	800afa4 <TIM_OC6_SetConfig+0x84>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a18      	ldr	r2, [pc, #96]	@ (800afe8 <TIM_OC6_SetConfig+0xc8>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00b      	beq.n	800afa4 <TIM_OC6_SetConfig+0x84>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a17      	ldr	r2, [pc, #92]	@ (800afec <TIM_OC6_SetConfig+0xcc>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d007      	beq.n	800afa4 <TIM_OC6_SetConfig+0x84>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a16      	ldr	r2, [pc, #88]	@ (800aff0 <TIM_OC6_SetConfig+0xd0>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_OC6_SetConfig+0x84>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a15      	ldr	r2, [pc, #84]	@ (800aff4 <TIM_OC6_SetConfig+0xd4>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d109      	bne.n	800afb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	621a      	str	r2, [r3, #32]
}
 800afd2:	bf00      	nop
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40012c00 	.word	0x40012c00
 800afe4:	50012c00 	.word	0x50012c00
 800afe8:	40013400 	.word	0x40013400
 800afec:	50013400 	.word	0x50013400
 800aff0:	40014000 	.word	0x40014000
 800aff4:	50014000 	.word	0x50014000

0800aff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f023 0201 	bic.w	r2, r3, #1
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f023 030a 	bic.w	r3, r3, #10
 800b034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	621a      	str	r2, [r3, #32]
}
 800b04a:	bf00      	nop
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b056:	b480      	push	{r7}
 800b058:	b087      	sub	sp, #28
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	f023 0210 	bic.w	r2, r3, #16
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	031b      	lsls	r3, r3, #12
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	621a      	str	r2, [r3, #32]
}
 800b0aa:	bf00      	nop
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b0cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f043 0307 	orr.w	r3, r3, #7
 800b0dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	609a      	str	r2, [r3, #8]
}
 800b0e4:	bf00      	nop
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b10a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	021a      	lsls	r2, r3, #8
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	431a      	orrs	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4313      	orrs	r3, r2
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	609a      	str	r2, [r3, #8]
}
 800b124:	bf00      	nop
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f003 031f 	and.w	r3, r3, #31
 800b142:	2201      	movs	r2, #1
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a1a      	ldr	r2, [r3, #32]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	43db      	mvns	r3, r3
 800b152:	401a      	ands	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a1a      	ldr	r2, [r3, #32]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f003 031f 	and.w	r3, r3, #31
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	fa01 f303 	lsl.w	r3, r1, r3
 800b168:	431a      	orrs	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	621a      	str	r2, [r3, #32]
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
	...

0800b17c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b190:	2302      	movs	r3, #2
 800b192:	e0a1      	b.n	800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a4a      	ldr	r2, [pc, #296]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00e      	beq.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a49      	ldr	r2, [pc, #292]	@ (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d009      	beq.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a47      	ldr	r2, [pc, #284]	@ (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d004      	beq.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a46      	ldr	r2, [pc, #280]	@ (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d108      	bne.n	800b1ee <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b1f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a34      	ldr	r2, [pc, #208]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d04a      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a33      	ldr	r2, [pc, #204]	@ (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d045      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b228:	d040      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b232:	d03b      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a2e      	ldr	r2, [pc, #184]	@ (800b2f4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d036      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a2d      	ldr	r2, [pc, #180]	@ (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d031      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a2b      	ldr	r2, [pc, #172]	@ (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d02c      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a2a      	ldr	r2, [pc, #168]	@ (800b300 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d027      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a28      	ldr	r2, [pc, #160]	@ (800b304 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d022      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a27      	ldr	r2, [pc, #156]	@ (800b308 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d01d      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1d      	ldr	r2, [pc, #116]	@ (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d018      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d013      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a20      	ldr	r2, [pc, #128]	@ (800b30c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00e      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1f      	ldr	r2, [pc, #124]	@ (800b310 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d009      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1d      	ldr	r2, [pc, #116]	@ (800b314 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b318 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d10c      	bne.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	40012c00 	.word	0x40012c00
 800b2e8:	50012c00 	.word	0x50012c00
 800b2ec:	40013400 	.word	0x40013400
 800b2f0:	50013400 	.word	0x50013400
 800b2f4:	40000400 	.word	0x40000400
 800b2f8:	50000400 	.word	0x50000400
 800b2fc:	40000800 	.word	0x40000800
 800b300:	50000800 	.word	0x50000800
 800b304:	40000c00 	.word	0x40000c00
 800b308:	50000c00 	.word	0x50000c00
 800b30c:	40001800 	.word	0x40001800
 800b310:	50001800 	.word	0x50001800
 800b314:	40014000 	.word	0x40014000
 800b318:	50014000 	.word	0x50014000

0800b31c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b334:	2302      	movs	r3, #2
 800b336:	e07d      	b.n	800b434 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4313      	orrs	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	041b      	lsls	r3, r3, #16
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a1e      	ldr	r2, [pc, #120]	@ (800b440 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d00e      	beq.n	800b3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b444 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d009      	beq.n	800b3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a1b      	ldr	r2, [pc, #108]	@ (800b448 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d004      	beq.n	800b3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a1a      	ldr	r2, [pc, #104]	@ (800b44c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d11c      	bne.n	800b422 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	051b      	lsls	r3, r3, #20
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b410:	4313      	orrs	r3, r2
 800b412:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	40012c00 	.word	0x40012c00
 800b444:	50012c00 	.word	0x50012c00
 800b448:	40013400 	.word	0x40013400
 800b44c:	50013400 	.word	0x50013400

0800b450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e042      	b.n	800b574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7f7 fdd7 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2224      	movs	r2, #36	@ 0x24
 800b50a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f022 0201 	bic.w	r2, r2, #1
 800b51c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fdde 	bl	800c0e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fc2d 	bl	800bd8c <UART_SetConfig>
 800b532:	4603      	mov	r3, r0
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e01b      	b.n	800b574 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b54a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b55a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0201 	orr.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fe5d 	bl	800c22c <UART_CheckIdleState>
 800b572:	4603      	mov	r3, r0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	@ 0x28
 800b580:	af02      	add	r7, sp, #8
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	4613      	mov	r3, r2
 800b58a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b592:	2b20      	cmp	r3, #32
 800b594:	f040 808b 	bne.w	800b6ae <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <HAL_UART_Transmit+0x28>
 800b59e:	88fb      	ldrh	r3, [r7, #6]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e083      	b.n	800b6b0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5b2:	2b80      	cmp	r3, #128	@ 0x80
 800b5b4:	d107      	bne.n	800b5c6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5c4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2221      	movs	r2, #33	@ 0x21
 800b5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5d6:	f7f7 ff51 	bl	800347c <HAL_GetTick>
 800b5da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	88fa      	ldrh	r2, [r7, #6]
 800b5e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	88fa      	ldrh	r2, [r7, #6]
 800b5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5f4:	d108      	bne.n	800b608 <HAL_UART_Transmit+0x8c>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d104      	bne.n	800b608 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	61bb      	str	r3, [r7, #24]
 800b606:	e003      	b.n	800b610 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b60c:	2300      	movs	r3, #0
 800b60e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b610:	e030      	b.n	800b674 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2200      	movs	r2, #0
 800b61a:	2180      	movs	r1, #128	@ 0x80
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 feaf 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d005      	beq.n	800b634 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e03d      	b.n	800b6b0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b648:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	3302      	adds	r3, #2
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	e007      	b.n	800b662 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	3301      	adds	r3, #1
 800b660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b668:	b29b      	uxth	r3, r3
 800b66a:	3b01      	subs	r3, #1
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1c8      	bne.n	800b612 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	2200      	movs	r2, #0
 800b688:	2140      	movs	r1, #64	@ 0x40
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 fe78 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d005      	beq.n	800b6a2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	e006      	b.n	800b6b0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e000      	b.n	800b6b0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b6ae:	2302      	movs	r3, #2
  }
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	@ 0x28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	d13c      	bne.n	800b74a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <HAL_UART_Receive_DMA+0x24>
 800b6d6:	88fb      	ldrh	r3, [r7, #6]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e035      	b.n	800b74c <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a1a      	ldr	r2, [pc, #104]	@ (800b754 <HAL_UART_Receive_DMA+0x9c>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d024      	beq.n	800b73a <HAL_UART_Receive_DMA+0x82>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a18      	ldr	r2, [pc, #96]	@ (800b758 <HAL_UART_Receive_DMA+0xa0>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d01f      	beq.n	800b73a <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d018      	beq.n	800b73a <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	613b      	str	r3, [r7, #16]
   return(result);
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	623b      	str	r3, [r7, #32]
 800b728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	69f9      	ldr	r1, [r7, #28]
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	61bb      	str	r3, [r7, #24]
   return(result);
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e6      	bne.n	800b708 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b73a:	88fb      	ldrh	r3, [r7, #6]
 800b73c:	461a      	mov	r2, r3
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 fe8b 	bl	800c45c <UART_Start_Receive_DMA>
 800b746:	4603      	mov	r3, r0
 800b748:	e000      	b.n	800b74c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b74a:	2302      	movs	r3, #2
  }
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3728      	adds	r7, #40	@ 0x28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	44002400 	.word	0x44002400
 800b758:	54002400 	.word	0x54002400

0800b75c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b0ae      	sub	sp, #184	@ 0xb8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b78a:	4013      	ands	r3, r2
 800b78c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11b      	bne.n	800b7d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b79c:	f003 0320 	and.w	r3, r3, #32
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d015      	beq.n	800b7d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d105      	bne.n	800b7bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d009      	beq.n	800b7d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 82ac 	beq.w	800bd1e <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
      }
      return;
 800b7ce:	e2a6      	b.n	800bd1e <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80fd 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b7de:	4b7a      	ldr	r3, [pc, #488]	@ (800b9c8 <HAL_UART_IRQHandler+0x26c>)
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b7ea:	4b78      	ldr	r3, [pc, #480]	@ (800b9cc <HAL_UART_IRQHandler+0x270>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 80f0 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d011      	beq.n	800b824 <HAL_UART_IRQHandler+0xc8>
 800b800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2201      	movs	r2, #1
 800b812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b81a:	f043 0201 	orr.w	r2, r3, #1
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b828:	f003 0302 	and.w	r3, r3, #2
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d011      	beq.n	800b854 <HAL_UART_IRQHandler+0xf8>
 800b830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00b      	beq.n	800b854 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2202      	movs	r2, #2
 800b842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b84a:	f043 0204 	orr.w	r2, r3, #4
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d011      	beq.n	800b884 <HAL_UART_IRQHandler+0x128>
 800b860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2204      	movs	r2, #4
 800b872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b87a:	f043 0202 	orr.w	r2, r3, #2
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d017      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b894:	f003 0320 	and.w	r3, r3, #32
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d105      	bne.n	800b8a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b89c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b8a0:	4b49      	ldr	r3, [pc, #292]	@ (800b9c8 <HAL_UART_IRQHandler+0x26c>)
 800b8a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2208      	movs	r2, #8
 800b8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b6:	f043 0208 	orr.w	r2, r3, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d012      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x196>
 800b8cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b8d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00c      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8e8:	f043 0220 	orr.w	r2, r3, #32
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 8212 	beq.w	800bd22 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b902:	f003 0320 	and.w	r3, r3, #32
 800b906:	2b00      	cmp	r3, #0
 800b908:	d013      	beq.n	800b932 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b90a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b91a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d007      	beq.n	800b932 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b938:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b946:	2b40      	cmp	r3, #64	@ 0x40
 800b948:	d005      	beq.n	800b956 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b94a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b94e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b952:	2b00      	cmp	r3, #0
 800b954:	d02e      	beq.n	800b9b4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 feb9 	bl	800c6ce <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b966:	2b40      	cmp	r3, #64	@ 0x40
 800b968:	d120      	bne.n	800b9ac <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b970:	2b00      	cmp	r3, #0
 800b972:	d017      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b97a:	4a15      	ldr	r2, [pc, #84]	@ (800b9d0 <HAL_UART_IRQHandler+0x274>)
 800b97c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b984:	4618      	mov	r0, r3
 800b986:	f7f8 f941 	bl	8003c0c <HAL_DMA_Abort_IT>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d019      	beq.n	800b9c4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b99e:	4610      	mov	r0, r2
 800b9a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a2:	e00f      	b.n	800b9c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f9db 	bl	800bd60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9aa:	e00b      	b.n	800b9c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f9d7 	bl	800bd60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b2:	e007      	b.n	800b9c4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f9d3 	bl	800bd60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b9c2:	e1ae      	b.n	800bd22 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c4:	bf00      	nop
    return;
 800b9c6:	e1ac      	b.n	800bd22 <HAL_UART_IRQHandler+0x5c6>
 800b9c8:	10000001 	.word	0x10000001
 800b9cc:	04000120 	.word	0x04000120
 800b9d0:	0800c94b 	.word	0x0800c94b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	f040 8142 	bne.w	800bc62 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9e2:	f003 0310 	and.w	r3, r3, #16
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 813b 	beq.w	800bc62 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9f0:	f003 0310 	and.w	r3, r3, #16
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 8134 	beq.w	800bc62 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2210      	movs	r2, #16
 800ba00:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba0c:	2b40      	cmp	r3, #64	@ 0x40
 800ba0e:	f040 80aa 	bne.w	800bb66 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba1c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800ba20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8084 	beq.w	800bb32 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba30:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d27c      	bcs.n	800bb32 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ba3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba4a:	2b81      	cmp	r3, #129	@ 0x81
 800ba4c:	d060      	beq.n	800bb10 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba56:	e853 3f00 	ldrex	r3, [r3]
 800ba5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba74:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ba78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba7c:	e841 2300 	strex	r3, r2, [r1]
 800ba80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ba82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1e2      	bne.n	800ba4e <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba92:	e853 3f00 	ldrex	r3, [r3]
 800ba96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ba98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba9a:	f023 0301 	bic.w	r3, r3, #1
 800ba9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3308      	adds	r3, #8
 800baa8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800baac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800baae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bab2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800baba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e3      	bne.n	800ba88 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bad6:	e853 3f00 	ldrex	r3, [r3]
 800bada:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800badc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bade:	f023 0310 	bic.w	r3, r3, #16
 800bae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800baf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800baf2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800baf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bafe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e4      	bne.n	800bace <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f8 f802 	bl	8003b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f922 	bl	800bd74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bb30:	e0f9      	b.n	800bd26 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb38:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	f040 80f2 	bne.w	800bd26 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb4a:	2b81      	cmp	r3, #129	@ 0x81
 800bb4c:	f040 80eb 	bne.w	800bd26 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f908 	bl	800bd74 <HAL_UARTEx_RxEventCallback>
      return;
 800bb64:	e0df      	b.n	800bd26 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 80d1 	beq.w	800bd2a <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800bb88:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 80cc 	beq.w	800bd2a <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbbc:	e841 2300 	strex	r3, r2, [r1]
 800bbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1e4      	bne.n	800bb92 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	e853 3f00 	ldrex	r3, [r3]
 800bbd6:	623b      	str	r3, [r7, #32]
   return(result);
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbde:	f023 0301 	bic.w	r3, r3, #1
 800bbe2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3308      	adds	r3, #8
 800bbec:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bbf0:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf8:	e841 2300 	strex	r3, r2, [r1]
 800bbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e1      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f023 0310 	bic.w	r3, r3, #16
 800bc2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	461a      	mov	r2, r3
 800bc36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc3a:	61fb      	str	r3, [r7, #28]
 800bc3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3e:	69b9      	ldr	r1, [r7, #24]
 800bc40:	69fa      	ldr	r2, [r7, #28]
 800bc42:	e841 2300 	strex	r3, r2, [r1]
 800bc46:	617b      	str	r3, [r7, #20]
   return(result);
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e4      	bne.n	800bc18 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2202      	movs	r2, #2
 800bc52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc54:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f88a 	bl	800bd74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc60:	e063      	b.n	800bd2a <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00e      	beq.n	800bc8c <HAL_UART_IRQHandler+0x530>
 800bc6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bc82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fe9d 	bl	800c9c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc8a:	e051      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d014      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d105      	bne.n	800bcb0 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d008      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d03a      	beq.n	800bd2e <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
    }
    return;
 800bcc0:	e035      	b.n	800bd2e <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d009      	beq.n	800bce2 <HAL_UART_IRQHandler+0x586>
 800bcce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bcd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fe47 	bl	800c96e <UART_EndTransmit_IT>
    return;
 800bce0:	e026      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d009      	beq.n	800bd02 <HAL_UART_IRQHandler+0x5a6>
 800bcee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bcf2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fe76 	bl	800c9ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd00:	e016      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d010      	beq.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
 800bd0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	da0c      	bge.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fe5e 	bl	800c9d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1c:	e008      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
      return;
 800bd1e:	bf00      	nop
 800bd20:	e006      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
    return;
 800bd22:	bf00      	nop
 800bd24:	e004      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
      return;
 800bd26:	bf00      	nop
 800bd28:	e002      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
      return;
 800bd2a:	bf00      	nop
 800bd2c:	e000      	b.n	800bd30 <HAL_UART_IRQHandler+0x5d4>
    return;
 800bd2e:	bf00      	nop
  }
}
 800bd30:	37b8      	adds	r7, #184	@ 0xb8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop

0800bd38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd90:	b094      	sub	sp, #80	@ 0x50
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	4b83      	ldr	r3, [pc, #524]	@ (800bfb0 <UART_SetConfig+0x224>)
 800bda2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	497c      	ldr	r1, [pc, #496]	@ (800bfb4 <UART_SetConfig+0x228>)
 800bdc4:	4019      	ands	r1, r3
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdcc:	430b      	orrs	r3, r1
 800bdce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	68d9      	ldr	r1, [r3, #12]
 800bdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	ea40 0301 	orr.w	r3, r0, r1
 800bde6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	4b6f      	ldr	r3, [pc, #444]	@ (800bfb0 <UART_SetConfig+0x224>)
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d009      	beq.n	800be0c <UART_SetConfig+0x80>
 800bdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	4b6e      	ldr	r3, [pc, #440]	@ (800bfb8 <UART_SetConfig+0x22c>)
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d004      	beq.n	800be0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be04:	6a1a      	ldr	r2, [r3, #32]
 800be06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be08:	4313      	orrs	r3, r2
 800be0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800be16:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800be1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be20:	430b      	orrs	r3, r1
 800be22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	f023 000f 	bic.w	r0, r3, #15
 800be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800be32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	ea40 0301 	orr.w	r3, r0, r1
 800be3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	4b5e      	ldr	r3, [pc, #376]	@ (800bfbc <UART_SetConfig+0x230>)
 800be42:	429a      	cmp	r2, r3
 800be44:	d102      	bne.n	800be4c <UART_SetConfig+0xc0>
 800be46:	2301      	movs	r3, #1
 800be48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be4a:	e032      	b.n	800beb2 <UART_SetConfig+0x126>
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b5b      	ldr	r3, [pc, #364]	@ (800bfc0 <UART_SetConfig+0x234>)
 800be52:	429a      	cmp	r2, r3
 800be54:	d102      	bne.n	800be5c <UART_SetConfig+0xd0>
 800be56:	2302      	movs	r3, #2
 800be58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5a:	e02a      	b.n	800beb2 <UART_SetConfig+0x126>
 800be5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	4b58      	ldr	r3, [pc, #352]	@ (800bfc4 <UART_SetConfig+0x238>)
 800be62:	429a      	cmp	r2, r3
 800be64:	d102      	bne.n	800be6c <UART_SetConfig+0xe0>
 800be66:	2304      	movs	r3, #4
 800be68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be6a:	e022      	b.n	800beb2 <UART_SetConfig+0x126>
 800be6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b55      	ldr	r3, [pc, #340]	@ (800bfc8 <UART_SetConfig+0x23c>)
 800be72:	429a      	cmp	r2, r3
 800be74:	d102      	bne.n	800be7c <UART_SetConfig+0xf0>
 800be76:	2308      	movs	r3, #8
 800be78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be7a:	e01a      	b.n	800beb2 <UART_SetConfig+0x126>
 800be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	4b52      	ldr	r3, [pc, #328]	@ (800bfcc <UART_SetConfig+0x240>)
 800be82:	429a      	cmp	r2, r3
 800be84:	d102      	bne.n	800be8c <UART_SetConfig+0x100>
 800be86:	2310      	movs	r3, #16
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be8a:	e012      	b.n	800beb2 <UART_SetConfig+0x126>
 800be8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	4b4f      	ldr	r3, [pc, #316]	@ (800bfd0 <UART_SetConfig+0x244>)
 800be92:	429a      	cmp	r2, r3
 800be94:	d102      	bne.n	800be9c <UART_SetConfig+0x110>
 800be96:	2320      	movs	r3, #32
 800be98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be9a:	e00a      	b.n	800beb2 <UART_SetConfig+0x126>
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	4b43      	ldr	r3, [pc, #268]	@ (800bfb0 <UART_SetConfig+0x224>)
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d103      	bne.n	800beae <UART_SetConfig+0x122>
 800bea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800beaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beac:	e001      	b.n	800beb2 <UART_SetConfig+0x126>
 800beae:	2300      	movs	r3, #0
 800beb0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb0 <UART_SetConfig+0x224>)
 800beb8:	429a      	cmp	r2, r3
 800beba:	d005      	beq.n	800bec8 <UART_SetConfig+0x13c>
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	4b3d      	ldr	r3, [pc, #244]	@ (800bfb8 <UART_SetConfig+0x22c>)
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f040 8088 	bne.w	800bfd8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beca:	2200      	movs	r2, #0
 800becc:	623b      	str	r3, [r7, #32]
 800bece:	627a      	str	r2, [r7, #36]	@ 0x24
 800bed0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bed4:	f7fc f8ca 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 800bed8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800beda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80eb 	beq.w	800c0b8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee6:	4a3b      	ldr	r2, [pc, #236]	@ (800bfd4 <UART_SetConfig+0x248>)
 800bee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beec:	461a      	mov	r2, r3
 800beee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	4413      	add	r3, r2
 800bf00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d305      	bcc.n	800bf12 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d903      	bls.n	800bf1a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf18:	e048      	b.n	800bfac <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	61bb      	str	r3, [r7, #24]
 800bf20:	61fa      	str	r2, [r7, #28]
 800bf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf26:	4a2b      	ldr	r2, [pc, #172]	@ (800bfd4 <UART_SetConfig+0x248>)
 800bf28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	2200      	movs	r2, #0
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	617a      	str	r2, [r7, #20]
 800bf34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf3c:	f7f4 fe7a 	bl	8000c34 <__aeabi_uldivmod>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4610      	mov	r0, r2
 800bf46:	4619      	mov	r1, r3
 800bf48:	f04f 0200 	mov.w	r2, #0
 800bf4c:	f04f 0300 	mov.w	r3, #0
 800bf50:	020b      	lsls	r3, r1, #8
 800bf52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf56:	0202      	lsls	r2, r0, #8
 800bf58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf5a:	6849      	ldr	r1, [r1, #4]
 800bf5c:	0849      	lsrs	r1, r1, #1
 800bf5e:	2000      	movs	r0, #0
 800bf60:	460c      	mov	r4, r1
 800bf62:	4605      	mov	r5, r0
 800bf64:	eb12 0804 	adds.w	r8, r2, r4
 800bf68:	eb43 0905 	adc.w	r9, r3, r5
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	60bb      	str	r3, [r7, #8]
 800bf74:	60fa      	str	r2, [r7, #12]
 800bf76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 fe59 	bl	8000c34 <__aeabi_uldivmod>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4613      	mov	r3, r2
 800bf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf90:	d308      	bcc.n	800bfa4 <UART_SetConfig+0x218>
 800bf92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf98:	d204      	bcs.n	800bfa4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800bf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfa0:	60da      	str	r2, [r3, #12]
 800bfa2:	e003      	b.n	800bfac <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bfaa:	e085      	b.n	800c0b8 <UART_SetConfig+0x32c>
 800bfac:	e084      	b.n	800c0b8 <UART_SetConfig+0x32c>
 800bfae:	bf00      	nop
 800bfb0:	44002400 	.word	0x44002400
 800bfb4:	cfff69f3 	.word	0xcfff69f3
 800bfb8:	54002400 	.word	0x54002400
 800bfbc:	40013800 	.word	0x40013800
 800bfc0:	40004400 	.word	0x40004400
 800bfc4:	40004800 	.word	0x40004800
 800bfc8:	40004c00 	.word	0x40004c00
 800bfcc:	40005000 	.word	0x40005000
 800bfd0:	40006400 	.word	0x40006400
 800bfd4:	0800dc80 	.word	0x0800dc80
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfe0:	d13c      	bne.n	800c05c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bfe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfee:	f7fc f83d 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 800bff2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05e      	beq.n	800c0b8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	4a39      	ldr	r2, [pc, #228]	@ (800c0e4 <UART_SetConfig+0x358>)
 800c000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c004:	461a      	mov	r2, r3
 800c006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	005a      	lsls	r2, r3, #1
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	441a      	add	r2, r3
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c022:	2b0f      	cmp	r3, #15
 800c024:	d916      	bls.n	800c054 <UART_SetConfig+0x2c8>
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c02c:	d212      	bcs.n	800c054 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c030:	b29b      	uxth	r3, r3
 800c032:	f023 030f 	bic.w	r3, r3, #15
 800c036:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03a:	085b      	lsrs	r3, r3, #1
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	b29a      	uxth	r2, r3
 800c044:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c046:	4313      	orrs	r3, r2
 800c048:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e031      	b.n	800c0b8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c05a:	e02d      	b.n	800c0b8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c05c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c05e:	2200      	movs	r2, #0
 800c060:	469a      	mov	sl, r3
 800c062:	4693      	mov	fp, r2
 800c064:	4650      	mov	r0, sl
 800c066:	4659      	mov	r1, fp
 800c068:	f7fc f800 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 800c06c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c06e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d021      	beq.n	800c0b8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c078:	4a1a      	ldr	r2, [pc, #104]	@ (800c0e4 <UART_SetConfig+0x358>)
 800c07a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c07e:	461a      	mov	r2, r3
 800c080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c082:	fbb3 f2f2 	udiv	r2, r3, r2
 800c086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	085b      	lsrs	r3, r3, #1
 800c08c:	441a      	add	r2, r3
 800c08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	fbb2 f3f3 	udiv	r3, r2, r3
 800c096:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c09a:	2b0f      	cmp	r3, #15
 800c09c:	d909      	bls.n	800c0b2 <UART_SetConfig+0x326>
 800c09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0a4:	d205      	bcs.n	800c0b2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60da      	str	r2, [r3, #12]
 800c0b0:	e002      	b.n	800c0b8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c0d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3750      	adds	r7, #80	@ 0x50
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0e2:	bf00      	nop
 800c0e4:	0800dc80 	.word	0x0800dc80

0800c0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f4:	f003 0308 	and.w	r3, r3, #8
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00a      	beq.n	800c112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c15a:	f003 0304 	and.w	r3, r3, #4
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c17c:	f003 0310 	and.w	r3, r3, #16
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00a      	beq.n	800c19a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01a      	beq.n	800c1fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1e6:	d10a      	bne.n	800c1fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	430a      	orrs	r2, r1
 800c21e:	605a      	str	r2, [r3, #4]
  }
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b098      	sub	sp, #96	@ 0x60
 800c230:	af02      	add	r7, sp, #8
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c23c:	f7f7 f91e 	bl	800347c <HAL_GetTick>
 800c240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0308 	and.w	r3, r3, #8
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	d12f      	bne.n	800c2b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c258:	2200      	movs	r2, #0
 800c25a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f88e 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d022      	beq.n	800c2b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c27e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c288:	647b      	str	r3, [r7, #68]	@ 0x44
 800c28a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e6      	bne.n	800c26a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e063      	b.n	800c378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0304 	and.w	r3, r3, #4
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	d149      	bne.n	800c352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f857 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d03c      	beq.n	800c352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	e853 3f00 	ldrex	r3, [r3]
 800c2e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e6      	bne.n	800c2d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	60fb      	str	r3, [r7, #12]
   return(result);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3308      	adds	r3, #8
 800c328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c32a:	61fa      	str	r2, [r7, #28]
 800c32c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	69b9      	ldr	r1, [r7, #24]
 800c330:	69fa      	ldr	r2, [r7, #28]
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	617b      	str	r3, [r7, #20]
   return(result);
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e5      	bne.n	800c30a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e012      	b.n	800c378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2220      	movs	r2, #32
 800c356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2220      	movs	r2, #32
 800c35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3758      	adds	r7, #88	@ 0x58
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	4613      	mov	r3, r2
 800c38e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c390:	e04f      	b.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d04b      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c39a:	f7f7 f86f 	bl	800347c <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d302      	bcc.n	800c3b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e04e      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d037      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b80      	cmp	r3, #128	@ 0x80
 800c3c6:	d034      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b40      	cmp	r3, #64	@ 0x40
 800c3cc:	d031      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	f003 0308 	and.w	r3, r3, #8
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d110      	bne.n	800c3fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2208      	movs	r2, #8
 800c3e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f972 	bl	800c6ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2208      	movs	r2, #8
 800c3ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e029      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c40c:	d111      	bne.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 f958 	bl	800c6ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2220      	movs	r2, #32
 800c422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e00f      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69da      	ldr	r2, [r3, #28]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4013      	ands	r3, r2
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	429a      	cmp	r2, r3
 800c440:	bf0c      	ite	eq
 800c442:	2301      	moveq	r3, #1
 800c444:	2300      	movne	r3, #0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d0a0      	beq.n	800c392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b098      	sub	sp, #96	@ 0x60
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	4613      	mov	r3, r2
 800c468:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c46a:	88fb      	ldrh	r3, [r7, #6]
 800c46c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	88fa      	ldrh	r2, [r7, #6]
 800c47a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2222      	movs	r2, #34	@ 0x22
 800c48a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	d07c      	beq.n	800c592 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c49e:	4a68      	ldr	r2, [pc, #416]	@ (800c640 <UART_Start_Receive_DMA+0x1e4>)
 800c4a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a8:	4a66      	ldr	r2, [pc, #408]	@ (800c644 <UART_Start_Receive_DMA+0x1e8>)
 800c4aa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4b2:	4a65      	ldr	r2, [pc, #404]	@ (800c648 <UART_Start_Receive_DMA+0x1ec>)
 800c4b4:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4bc:	2200      	movs	r2, #0
 800c4be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4c8:	d107      	bne.n	800c4da <UART_Start_Receive_DMA+0x7e>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d103      	bne.n	800c4da <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c4d2:	88fb      	ldrh	r3, [r7, #6]
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d034      	beq.n	800c554 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d02a      	beq.n	800c54c <UART_Start_Receive_DMA+0xf0>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d023      	beq.n	800c54c <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c512:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f7 ffd4 	bl	80044ec <HAL_DMAEx_List_Start_IT>
 800c544:	4603      	mov	r3, r0
 800c546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c54a:	e014      	b.n	800c576 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c552:	e010      	b.n	800c576 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3324      	adds	r3, #36	@ 0x24
 800c560:	4619      	mov	r1, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c566:	461a      	mov	r2, r3
 800c568:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c56c:	f7f7 fa72 	bl	8003a54 <HAL_DMA_Start_IT>
 800c570:	4603      	mov	r3, r0
 800c572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c576:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2210      	movs	r2, #16
 800c582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2220      	movs	r2, #32
 800c58a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e051      	b.n	800c636 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d018      	beq.n	800c5cc <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ba:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c5be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e6      	bne.n	800c59a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5ec:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c5ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c5f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5f4:	e841 2300 	strex	r3, r2, [r1]
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e5      	bne.n	800c5cc <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3308      	adds	r3, #8
 800c606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	617b      	str	r3, [r7, #20]
   return(result);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c616:	653b      	str	r3, [r7, #80]	@ 0x50
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3308      	adds	r3, #8
 800c61e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c620:	627a      	str	r2, [r7, #36]	@ 0x24
 800c622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6a39      	ldr	r1, [r7, #32]
 800c626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e5      	bne.n	800c600 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3760      	adds	r7, #96	@ 0x60
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	0800c79b 	.word	0x0800c79b
 800c644:	0800c88d 	.word	0x0800c88d
 800c648:	0800c8cb 	.word	0x0800c8cb

0800c64c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b08f      	sub	sp, #60	@ 0x3c
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	e853 3f00 	ldrex	r3, [r3]
 800c660:	61fb      	str	r3, [r7, #28]
   return(result);
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c668:	637b      	str	r3, [r7, #52]	@ 0x34
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c674:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e6      	bne.n	800c654 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3308      	adds	r3, #8
 800c68c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	60bb      	str	r3, [r7, #8]
   return(result);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6a6:	61ba      	str	r2, [r7, #24]
 800c6a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6979      	ldr	r1, [r7, #20]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e5      	bne.n	800c686 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c6c2:	bf00      	nop
 800c6c4:	373c      	adds	r7, #60	@ 0x3c
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b095      	sub	sp, #84	@ 0x54
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6de:	e853 3f00 	ldrex	r3, [r3]
 800c6e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6fc:	e841 2300 	strex	r3, r2, [r1]
 800c700:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e6      	bne.n	800c6d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	61fb      	str	r3, [r7, #28]
   return(result);
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3308      	adds	r3, #8
 800c72a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c72c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e3      	bne.n	800c708 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c744:	2b01      	cmp	r3, #1
 800c746:	d118      	bne.n	800c77a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	60bb      	str	r3, [r7, #8]
   return(result);
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f023 0310 	bic.w	r3, r3, #16
 800c75c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c766:	61bb      	str	r3, [r7, #24]
 800c768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6979      	ldr	r1, [r7, #20]
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	613b      	str	r3, [r7, #16]
   return(result);
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e6      	bne.n	800c748 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2220      	movs	r2, #32
 800c77e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c78e:	bf00      	nop
 800c790:	3754      	adds	r7, #84	@ 0x54
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b096      	sub	sp, #88	@ 0x58
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7a6:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ac:	2b81      	cmp	r3, #129	@ 0x81
 800c7ae:	d057      	beq.n	800c860 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800c7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c0:	e853 3f00 	ldrex	r3, [r3]
 800c7c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7de:	e841 2300 	strex	r3, r2, [r1]
 800c7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1e6      	bne.n	800c7b8 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	e853 3f00 	ldrex	r3, [r3]
 800c7f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	f023 0301 	bic.w	r3, r3, #1
 800c800:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c80a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c812:	e841 2300 	strex	r3, r2, [r1]
 800c816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1e5      	bne.n	800c7ea <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c820:	2220      	movs	r2, #32
 800c822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d118      	bne.n	800c860 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	e853 3f00 	ldrex	r3, [r3]
 800c83a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 0310 	bic.w	r3, r3, #16
 800c842:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c84c:	61fb      	str	r3, [r7, #28]
 800c84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c850:	69b9      	ldr	r1, [r7, #24]
 800c852:	69fa      	ldr	r2, [r7, #28]
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	617b      	str	r3, [r7, #20]
   return(result);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e6      	bne.n	800c82e <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c862:	2200      	movs	r2, #0
 800c864:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d107      	bne.n	800c87e <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c874:	4619      	mov	r1, r3
 800c876:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c878:	f7ff fa7c 	bl	800bd74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c87c:	e002      	b.n	800c884 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800c87e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c880:	f7f5 fd0a 	bl	8002298 <HAL_UART_RxCpltCallback>
}
 800c884:	bf00      	nop
 800c886:	3758      	adds	r7, #88	@ 0x58
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2201      	movs	r2, #1
 800c89e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d109      	bne.n	800c8bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8ae:	085b      	lsrs	r3, r3, #1
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff fa5d 	bl	800bd74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8ba:	e002      	b.n	800c8c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff fa45 	bl	800bd4c <HAL_UART_RxHalfCpltCallback>
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8f2:	2b80      	cmp	r3, #128	@ 0x80
 800c8f4:	d109      	bne.n	800c90a <UART_DMAError+0x40>
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	2b21      	cmp	r3, #33	@ 0x21
 800c8fa:	d106      	bne.n	800c90a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c904:	6978      	ldr	r0, [r7, #20]
 800c906:	f7ff fea1 	bl	800c64c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c914:	2b40      	cmp	r3, #64	@ 0x40
 800c916:	d109      	bne.n	800c92c <UART_DMAError+0x62>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b22      	cmp	r3, #34	@ 0x22
 800c91c:	d106      	bne.n	800c92c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2200      	movs	r2, #0
 800c922:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c926:	6978      	ldr	r0, [r7, #20]
 800c928:	f7ff fed1 	bl	800c6ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c932:	f043 0210 	orr.w	r2, r3, #16
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c93c:	6978      	ldr	r0, [r7, #20]
 800c93e:	f7ff fa0f 	bl	800bd60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff f9fd 	bl	800bd60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b088      	sub	sp, #32
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	e853 3f00 	ldrex	r3, [r3]
 800c982:	60bb      	str	r3, [r7, #8]
   return(result);
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c98a:	61fb      	str	r3, [r7, #28]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	461a      	mov	r2, r3
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	61bb      	str	r3, [r7, #24]
 800c996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c998:	6979      	ldr	r1, [r7, #20]
 800c99a:	69ba      	ldr	r2, [r7, #24]
 800c99c:	e841 2300 	strex	r3, r2, [r1]
 800c9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e6      	bne.n	800c976 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff f9be 	bl	800bd38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9bc:	bf00      	nop
 800c9be:	3720      	adds	r7, #32
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca12:	2302      	movs	r3, #2
 800ca14:	e027      	b.n	800ca66 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2224      	movs	r2, #36	@ 0x24
 800ca22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0201 	bic.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2220      	movs	r2, #32
 800ca58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d101      	bne.n	800ca8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca86:	2302      	movs	r3, #2
 800ca88:	e02d      	b.n	800cae6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2224      	movs	r2, #36	@ 0x24
 800ca96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0201 	bic.w	r2, r2, #1
 800cab0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f850 	bl	800cb6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2220      	movs	r2, #32
 800cad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d101      	bne.n	800cb06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb02:	2302      	movs	r3, #2
 800cb04:	e02d      	b.n	800cb62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2224      	movs	r2, #36	@ 0x24
 800cb12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f022 0201 	bic.w	r2, r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f812 	bl	800cb6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
	...

0800cb6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d108      	bne.n	800cb8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb8c:	e031      	b.n	800cbf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb8e:	2308      	movs	r3, #8
 800cb90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb92:	2308      	movs	r3, #8
 800cb94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	0e5b      	lsrs	r3, r3, #25
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	f003 0307 	and.w	r3, r3, #7
 800cba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	0f5b      	lsrs	r3, r3, #29
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	f003 0307 	and.w	r3, r3, #7
 800cbb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	7b3a      	ldrb	r2, [r7, #12]
 800cbba:	4911      	ldr	r1, [pc, #68]	@ (800cc00 <UARTEx_SetNbDataToProcess+0x94>)
 800cbbc:	5c8a      	ldrb	r2, [r1, r2]
 800cbbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbc2:	7b3a      	ldrb	r2, [r7, #12]
 800cbc4:	490f      	ldr	r1, [pc, #60]	@ (800cc04 <UARTEx_SetNbDataToProcess+0x98>)
 800cbc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	7b7a      	ldrb	r2, [r7, #13]
 800cbd8:	4909      	ldr	r1, [pc, #36]	@ (800cc00 <UARTEx_SetNbDataToProcess+0x94>)
 800cbda:	5c8a      	ldrb	r2, [r1, r2]
 800cbdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbe0:	7b7a      	ldrb	r2, [r7, #13]
 800cbe2:	4908      	ldr	r1, [pc, #32]	@ (800cc04 <UARTEx_SetNbDataToProcess+0x98>)
 800cbe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbe6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cbf2:	bf00      	nop
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	0800dc98 	.word	0x0800dc98
 800cc04:	0800dca0 	.word	0x0800dca0

0800cc08 <std>:
 800cc08:	2300      	movs	r3, #0
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	6083      	str	r3, [r0, #8]
 800cc10:	8181      	strh	r1, [r0, #12]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc16:	81c2      	strh	r2, [r0, #14]
 800cc18:	2208      	movs	r2, #8
 800cc1a:	6183      	str	r3, [r0, #24]
 800cc1c:	e9c0 3300 	strd	r3, r3, [r0]
 800cc20:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc24:	305c      	adds	r0, #92	@ 0x5c
 800cc26:	f000 f9f9 	bl	800d01c <memset>
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <std+0x58>)
 800cc2c:	6224      	str	r4, [r4, #32]
 800cc2e:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc30:	4b0c      	ldr	r3, [pc, #48]	@ (800cc64 <std+0x5c>)
 800cc32:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc34:	4b0c      	ldr	r3, [pc, #48]	@ (800cc68 <std+0x60>)
 800cc36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc38:	4b0c      	ldr	r3, [pc, #48]	@ (800cc6c <std+0x64>)
 800cc3a:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cc70 <std+0x68>)
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d006      	beq.n	800cc50 <std+0x48>
 800cc42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc46:	4294      	cmp	r4, r2
 800cc48:	d002      	beq.n	800cc50 <std+0x48>
 800cc4a:	33d0      	adds	r3, #208	@ 0xd0
 800cc4c:	429c      	cmp	r4, r3
 800cc4e:	d105      	bne.n	800cc5c <std+0x54>
 800cc50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc58:	f000 ba58 	b.w	800d10c <__retarget_lock_init_recursive>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800ce6d 	.word	0x0800ce6d
 800cc64:	0800ce8f 	.word	0x0800ce8f
 800cc68:	0800cec7 	.word	0x0800cec7
 800cc6c:	0800ceeb 	.word	0x0800ceeb
 800cc70:	200006a4 	.word	0x200006a4

0800cc74 <stdio_exit_handler>:
 800cc74:	4a02      	ldr	r2, [pc, #8]	@ (800cc80 <stdio_exit_handler+0xc>)
 800cc76:	4903      	ldr	r1, [pc, #12]	@ (800cc84 <stdio_exit_handler+0x10>)
 800cc78:	4803      	ldr	r0, [pc, #12]	@ (800cc88 <stdio_exit_handler+0x14>)
 800cc7a:	f000 b869 	b.w	800cd50 <_fwalk_sglue>
 800cc7e:	bf00      	nop
 800cc80:	200000e8 	.word	0x200000e8
 800cc84:	0800d9b5 	.word	0x0800d9b5
 800cc88:	200000f8 	.word	0x200000f8

0800cc8c <cleanup_stdio>:
 800cc8c:	6841      	ldr	r1, [r0, #4]
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc0 <cleanup_stdio+0x34>)
 800cc90:	4299      	cmp	r1, r3
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	d001      	beq.n	800cc9c <cleanup_stdio+0x10>
 800cc98:	f000 fe8c 	bl	800d9b4 <_fflush_r>
 800cc9c:	68a1      	ldr	r1, [r4, #8]
 800cc9e:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <cleanup_stdio+0x38>)
 800cca0:	4299      	cmp	r1, r3
 800cca2:	d002      	beq.n	800ccaa <cleanup_stdio+0x1e>
 800cca4:	4620      	mov	r0, r4
 800cca6:	f000 fe85 	bl	800d9b4 <_fflush_r>
 800ccaa:	68e1      	ldr	r1, [r4, #12]
 800ccac:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <cleanup_stdio+0x3c>)
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	d004      	beq.n	800ccbc <cleanup_stdio+0x30>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb8:	f000 be7c 	b.w	800d9b4 <_fflush_r>
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200006a4 	.word	0x200006a4
 800ccc4:	2000070c 	.word	0x2000070c
 800ccc8:	20000774 	.word	0x20000774

0800cccc <global_stdio_init.part.0>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	4b0b      	ldr	r3, [pc, #44]	@ (800ccfc <global_stdio_init.part.0+0x30>)
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	4c0b      	ldr	r4, [pc, #44]	@ (800cd00 <global_stdio_init.part.0+0x34>)
 800ccd4:	4a0b      	ldr	r2, [pc, #44]	@ (800cd04 <global_stdio_init.part.0+0x38>)
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7ff ff94 	bl	800cc08 <std>
 800cce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cce4:	2201      	movs	r2, #1
 800cce6:	2109      	movs	r1, #9
 800cce8:	f7ff ff8e 	bl	800cc08 <std>
 800ccec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	2112      	movs	r1, #18
 800ccf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf8:	f7ff bf86 	b.w	800cc08 <std>
 800ccfc:	200007dc 	.word	0x200007dc
 800cd00:	200006a4 	.word	0x200006a4
 800cd04:	0800cc75 	.word	0x0800cc75

0800cd08 <__sfp_lock_acquire>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__sfp_lock_acquire+0x8>)
 800cd0a:	f000 ba00 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800cd0e:	bf00      	nop
 800cd10:	200007e5 	.word	0x200007e5

0800cd14 <__sfp_lock_release>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__sfp_lock_release+0x8>)
 800cd16:	f000 b9fb 	b.w	800d110 <__retarget_lock_release_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	200007e5 	.word	0x200007e5

0800cd20 <__sinit>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4604      	mov	r4, r0
 800cd24:	f7ff fff0 	bl	800cd08 <__sfp_lock_acquire>
 800cd28:	6a23      	ldr	r3, [r4, #32]
 800cd2a:	b11b      	cbz	r3, 800cd34 <__sinit+0x14>
 800cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd30:	f7ff bff0 	b.w	800cd14 <__sfp_lock_release>
 800cd34:	4b04      	ldr	r3, [pc, #16]	@ (800cd48 <__sinit+0x28>)
 800cd36:	6223      	str	r3, [r4, #32]
 800cd38:	4b04      	ldr	r3, [pc, #16]	@ (800cd4c <__sinit+0x2c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1f5      	bne.n	800cd2c <__sinit+0xc>
 800cd40:	f7ff ffc4 	bl	800cccc <global_stdio_init.part.0>
 800cd44:	e7f2      	b.n	800cd2c <__sinit+0xc>
 800cd46:	bf00      	nop
 800cd48:	0800cc8d 	.word	0x0800cc8d
 800cd4c:	200007dc 	.word	0x200007dc

0800cd50 <_fwalk_sglue>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	4607      	mov	r7, r0
 800cd56:	4688      	mov	r8, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd60:	f1b9 0901 	subs.w	r9, r9, #1
 800cd64:	d505      	bpl.n	800cd72 <_fwalk_sglue+0x22>
 800cd66:	6824      	ldr	r4, [r4, #0]
 800cd68:	2c00      	cmp	r4, #0
 800cd6a:	d1f7      	bne.n	800cd5c <_fwalk_sglue+0xc>
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd72:	89ab      	ldrh	r3, [r5, #12]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d907      	bls.n	800cd88 <_fwalk_sglue+0x38>
 800cd78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	d003      	beq.n	800cd88 <_fwalk_sglue+0x38>
 800cd80:	4629      	mov	r1, r5
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c0      	blx	r8
 800cd86:	4306      	orrs	r6, r0
 800cd88:	3568      	adds	r5, #104	@ 0x68
 800cd8a:	e7e9      	b.n	800cd60 <_fwalk_sglue+0x10>

0800cd8c <iprintf>:
 800cd8c:	b40f      	push	{r0, r1, r2, r3}
 800cd8e:	b507      	push	{r0, r1, r2, lr}
 800cd90:	4906      	ldr	r1, [pc, #24]	@ (800cdac <iprintf+0x20>)
 800cd92:	ab04      	add	r3, sp, #16
 800cd94:	6808      	ldr	r0, [r1, #0]
 800cd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd9a:	6881      	ldr	r1, [r0, #8]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	f000 fadb 	bl	800d358 <_vfiprintf_r>
 800cda2:	b003      	add	sp, #12
 800cda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda8:	b004      	add	sp, #16
 800cdaa:	4770      	bx	lr
 800cdac:	200000f4 	.word	0x200000f4

0800cdb0 <_puts_r>:
 800cdb0:	6a03      	ldr	r3, [r0, #32]
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	460e      	mov	r6, r1
 800cdb8:	6884      	ldr	r4, [r0, #8]
 800cdba:	b90b      	cbnz	r3, 800cdc0 <_puts_r+0x10>
 800cdbc:	f7ff ffb0 	bl	800cd20 <__sinit>
 800cdc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdc2:	07db      	lsls	r3, r3, #31
 800cdc4:	d405      	bmi.n	800cdd2 <_puts_r+0x22>
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	0598      	lsls	r0, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_puts_r+0x22>
 800cdcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdce:	f000 f99e 	bl	800d10e <__retarget_lock_acquire_recursive>
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	0719      	lsls	r1, r3, #28
 800cdd6:	d502      	bpl.n	800cdde <_puts_r+0x2e>
 800cdd8:	6923      	ldr	r3, [r4, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d135      	bne.n	800ce4a <_puts_r+0x9a>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 f8c5 	bl	800cf70 <__swsetup_r>
 800cde6:	b380      	cbz	r0, 800ce4a <_puts_r+0x9a>
 800cde8:	f04f 35ff 	mov.w	r5, #4294967295
 800cdec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdee:	07da      	lsls	r2, r3, #31
 800cdf0:	d405      	bmi.n	800cdfe <_puts_r+0x4e>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	059b      	lsls	r3, r3, #22
 800cdf6:	d402      	bmi.n	800cdfe <_puts_r+0x4e>
 800cdf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdfa:	f000 f989 	bl	800d110 <__retarget_lock_release_recursive>
 800cdfe:	4628      	mov	r0, r5
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da04      	bge.n	800ce10 <_puts_r+0x60>
 800ce06:	69a2      	ldr	r2, [r4, #24]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	dc17      	bgt.n	800ce3c <_puts_r+0x8c>
 800ce0c:	290a      	cmp	r1, #10
 800ce0e:	d015      	beq.n	800ce3c <_puts_r+0x8c>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	6022      	str	r2, [r4, #0]
 800ce16:	7019      	strb	r1, [r3, #0]
 800ce18:	68a3      	ldr	r3, [r4, #8]
 800ce1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	60a3      	str	r3, [r4, #8]
 800ce22:	2900      	cmp	r1, #0
 800ce24:	d1ed      	bne.n	800ce02 <_puts_r+0x52>
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	da11      	bge.n	800ce4e <_puts_r+0x9e>
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	210a      	movs	r1, #10
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f000 f85f 	bl	800cef2 <__swbuf_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d0d7      	beq.n	800cde8 <_puts_r+0x38>
 800ce38:	250a      	movs	r5, #10
 800ce3a:	e7d7      	b.n	800cdec <_puts_r+0x3c>
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4628      	mov	r0, r5
 800ce40:	f000 f857 	bl	800cef2 <__swbuf_r>
 800ce44:	3001      	adds	r0, #1
 800ce46:	d1e7      	bne.n	800ce18 <_puts_r+0x68>
 800ce48:	e7ce      	b.n	800cde8 <_puts_r+0x38>
 800ce4a:	3e01      	subs	r6, #1
 800ce4c:	e7e4      	b.n	800ce18 <_puts_r+0x68>
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	6022      	str	r2, [r4, #0]
 800ce54:	220a      	movs	r2, #10
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	e7ee      	b.n	800ce38 <_puts_r+0x88>
	...

0800ce5c <puts>:
 800ce5c:	4b02      	ldr	r3, [pc, #8]	@ (800ce68 <puts+0xc>)
 800ce5e:	4601      	mov	r1, r0
 800ce60:	6818      	ldr	r0, [r3, #0]
 800ce62:	f7ff bfa5 	b.w	800cdb0 <_puts_r>
 800ce66:	bf00      	nop
 800ce68:	200000f4 	.word	0x200000f4

0800ce6c <__sread>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	f000 f8fc 	bl	800d070 <_read_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	bfab      	itete	ge
 800ce7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce80:	181b      	addge	r3, r3, r0
 800ce82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce86:	bfac      	ite	ge
 800ce88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce8a:	81a3      	strhlt	r3, [r4, #12]
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <__swrite>:
 800ce8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	461f      	mov	r7, r3
 800ce94:	898b      	ldrh	r3, [r1, #12]
 800ce96:	4605      	mov	r5, r0
 800ce98:	460c      	mov	r4, r1
 800ce9a:	05db      	lsls	r3, r3, #23
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	d505      	bpl.n	800ceac <__swrite+0x1e>
 800cea0:	2302      	movs	r3, #2
 800cea2:	2200      	movs	r2, #0
 800cea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea8:	f000 f8d0 	bl	800d04c <_lseek_r>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	4632      	mov	r2, r6
 800ceb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ceba:	81a3      	strh	r3, [r4, #12]
 800cebc:	463b      	mov	r3, r7
 800cebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	f000 b8e7 	b.w	800d094 <_write_r>

0800cec6 <__sseek>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	f000 f8bd 	bl	800d04c <_lseek_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	bf15      	itete	ne
 800ced8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ceda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cede:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cee2:	81a3      	strheq	r3, [r4, #12]
 800cee4:	bf18      	it	ne
 800cee6:	81a3      	strhne	r3, [r4, #12]
 800cee8:	bd10      	pop	{r4, pc}

0800ceea <__sclose>:
 800ceea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceee:	f000 b89d 	b.w	800d02c <_close_r>

0800cef2 <__swbuf_r>:
 800cef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef4:	460e      	mov	r6, r1
 800cef6:	4614      	mov	r4, r2
 800cef8:	4605      	mov	r5, r0
 800cefa:	b118      	cbz	r0, 800cf04 <__swbuf_r+0x12>
 800cefc:	6a03      	ldr	r3, [r0, #32]
 800cefe:	b90b      	cbnz	r3, 800cf04 <__swbuf_r+0x12>
 800cf00:	f7ff ff0e 	bl	800cd20 <__sinit>
 800cf04:	69a3      	ldr	r3, [r4, #24]
 800cf06:	60a3      	str	r3, [r4, #8]
 800cf08:	89a3      	ldrh	r3, [r4, #12]
 800cf0a:	071a      	lsls	r2, r3, #28
 800cf0c:	d501      	bpl.n	800cf12 <__swbuf_r+0x20>
 800cf0e:	6923      	ldr	r3, [r4, #16]
 800cf10:	b943      	cbnz	r3, 800cf24 <__swbuf_r+0x32>
 800cf12:	4621      	mov	r1, r4
 800cf14:	4628      	mov	r0, r5
 800cf16:	f000 f82b 	bl	800cf70 <__swsetup_r>
 800cf1a:	b118      	cbz	r0, 800cf24 <__swbuf_r+0x32>
 800cf1c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf20:	4638      	mov	r0, r7
 800cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	b2f6      	uxtb	r6, r6
 800cf28:	6922      	ldr	r2, [r4, #16]
 800cf2a:	4637      	mov	r7, r6
 800cf2c:	1a98      	subs	r0, r3, r2
 800cf2e:	6963      	ldr	r3, [r4, #20]
 800cf30:	4283      	cmp	r3, r0
 800cf32:	dc05      	bgt.n	800cf40 <__swbuf_r+0x4e>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 fd3c 	bl	800d9b4 <_fflush_r>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d1ed      	bne.n	800cf1c <__swbuf_r+0x2a>
 800cf40:	68a3      	ldr	r3, [r4, #8]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	60a3      	str	r3, [r4, #8]
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	6022      	str	r2, [r4, #0]
 800cf4c:	701e      	strb	r6, [r3, #0]
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	6962      	ldr	r2, [r4, #20]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d004      	beq.n	800cf60 <__swbuf_r+0x6e>
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	07db      	lsls	r3, r3, #31
 800cf5a:	d5e1      	bpl.n	800cf20 <__swbuf_r+0x2e>
 800cf5c:	2e0a      	cmp	r6, #10
 800cf5e:	d1df      	bne.n	800cf20 <__swbuf_r+0x2e>
 800cf60:	4621      	mov	r1, r4
 800cf62:	4628      	mov	r0, r5
 800cf64:	f000 fd26 	bl	800d9b4 <_fflush_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0d9      	beq.n	800cf20 <__swbuf_r+0x2e>
 800cf6c:	e7d6      	b.n	800cf1c <__swbuf_r+0x2a>
	...

0800cf70 <__swsetup_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4b29      	ldr	r3, [pc, #164]	@ (800d018 <__swsetup_r+0xa8>)
 800cf74:	4605      	mov	r5, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	b118      	cbz	r0, 800cf84 <__swsetup_r+0x14>
 800cf7c:	6a03      	ldr	r3, [r0, #32]
 800cf7e:	b90b      	cbnz	r3, 800cf84 <__swsetup_r+0x14>
 800cf80:	f7ff fece 	bl	800cd20 <__sinit>
 800cf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf88:	0719      	lsls	r1, r3, #28
 800cf8a:	d422      	bmi.n	800cfd2 <__swsetup_r+0x62>
 800cf8c:	06da      	lsls	r2, r3, #27
 800cf8e:	d407      	bmi.n	800cfa0 <__swsetup_r+0x30>
 800cf90:	2209      	movs	r2, #9
 800cf92:	602a      	str	r2, [r5, #0]
 800cf94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	81a3      	strh	r3, [r4, #12]
 800cf9e:	e033      	b.n	800d008 <__swsetup_r+0x98>
 800cfa0:	0758      	lsls	r0, r3, #29
 800cfa2:	d512      	bpl.n	800cfca <__swsetup_r+0x5a>
 800cfa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfa6:	b141      	cbz	r1, 800cfba <__swsetup_r+0x4a>
 800cfa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfac:	4299      	cmp	r1, r3
 800cfae:	d002      	beq.n	800cfb6 <__swsetup_r+0x46>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f000 f8af 	bl	800d114 <_free_r>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfba:	89a3      	ldrh	r3, [r4, #12]
 800cfbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6063      	str	r3, [r4, #4]
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f043 0308 	orr.w	r3, r3, #8
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	b94b      	cbnz	r3, 800cfea <__swsetup_r+0x7a>
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfe0:	d003      	beq.n	800cfea <__swsetup_r+0x7a>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f000 fd32 	bl	800da4e <__smakebuf_r>
 800cfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfee:	f013 0201 	ands.w	r2, r3, #1
 800cff2:	d00a      	beq.n	800d00a <__swsetup_r+0x9a>
 800cff4:	2200      	movs	r2, #0
 800cff6:	60a2      	str	r2, [r4, #8]
 800cff8:	6962      	ldr	r2, [r4, #20]
 800cffa:	4252      	negs	r2, r2
 800cffc:	61a2      	str	r2, [r4, #24]
 800cffe:	6922      	ldr	r2, [r4, #16]
 800d000:	b942      	cbnz	r2, 800d014 <__swsetup_r+0xa4>
 800d002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d006:	d1c5      	bne.n	800cf94 <__swsetup_r+0x24>
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	0799      	lsls	r1, r3, #30
 800d00c:	bf58      	it	pl
 800d00e:	6962      	ldrpl	r2, [r4, #20]
 800d010:	60a2      	str	r2, [r4, #8]
 800d012:	e7f4      	b.n	800cffe <__swsetup_r+0x8e>
 800d014:	2000      	movs	r0, #0
 800d016:	e7f7      	b.n	800d008 <__swsetup_r+0x98>
 800d018:	200000f4 	.word	0x200000f4

0800d01c <memset>:
 800d01c:	4402      	add	r2, r0
 800d01e:	4603      	mov	r3, r0
 800d020:	4293      	cmp	r3, r2
 800d022:	d100      	bne.n	800d026 <memset+0xa>
 800d024:	4770      	bx	lr
 800d026:	f803 1b01 	strb.w	r1, [r3], #1
 800d02a:	e7f9      	b.n	800d020 <memset+0x4>

0800d02c <_close_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	2300      	movs	r3, #0
 800d030:	4d05      	ldr	r5, [pc, #20]	@ (800d048 <_close_r+0x1c>)
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7f5 fb55 	bl	80026e6 <_close>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_close_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_close_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	200007e0 	.word	0x200007e0

0800d04c <_lseek_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4604      	mov	r4, r0
 800d050:	4d06      	ldr	r5, [pc, #24]	@ (800d06c <_lseek_r+0x20>)
 800d052:	4608      	mov	r0, r1
 800d054:	4611      	mov	r1, r2
 800d056:	2200      	movs	r2, #0
 800d058:	602a      	str	r2, [r5, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	f7f5 fb6a 	bl	8002734 <_lseek>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_lseek_r+0x1e>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_lseek_r+0x1e>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	200007e0 	.word	0x200007e0

0800d070 <_read_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	4d06      	ldr	r5, [pc, #24]	@ (800d090 <_read_r+0x20>)
 800d076:	4608      	mov	r0, r1
 800d078:	4611      	mov	r1, r2
 800d07a:	2200      	movs	r2, #0
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	f7f5 faf8 	bl	8002674 <_read>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_read_r+0x1e>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_read_r+0x1e>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	200007e0 	.word	0x200007e0

0800d094 <_write_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4604      	mov	r4, r0
 800d098:	4d06      	ldr	r5, [pc, #24]	@ (800d0b4 <_write_r+0x20>)
 800d09a:	4608      	mov	r0, r1
 800d09c:	4611      	mov	r1, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	602a      	str	r2, [r5, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f5 fb03 	bl	80026ae <_write>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_write_r+0x1e>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_write_r+0x1e>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	200007e0 	.word	0x200007e0

0800d0b8 <__errno>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	@ (800d0c0 <__errno+0x8>)
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	200000f4 	.word	0x200000f4

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d0fc <__libc_init_array+0x38>)
 800d0c8:	2600      	movs	r6, #0
 800d0ca:	4c0d      	ldr	r4, [pc, #52]	@ (800d100 <__libc_init_array+0x3c>)
 800d0cc:	1b64      	subs	r4, r4, r5
 800d0ce:	10a4      	asrs	r4, r4, #2
 800d0d0:	42a6      	cmp	r6, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d104 <__libc_init_array+0x40>)
 800d0d6:	2600      	movs	r6, #0
 800d0d8:	4c0b      	ldr	r4, [pc, #44]	@ (800d108 <__libc_init_array+0x44>)
 800d0da:	f000 fd35 	bl	800db48 <_init>
 800d0de:	1b64      	subs	r4, r4, r5
 800d0e0:	10a4      	asrs	r4, r4, #2
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ec:	3601      	adds	r6, #1
 800d0ee:	4798      	blx	r3
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f6:	3601      	adds	r6, #1
 800d0f8:	4798      	blx	r3
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	0800dce4 	.word	0x0800dce4
 800d100:	0800dce4 	.word	0x0800dce4
 800d104:	0800dce4 	.word	0x0800dce4
 800d108:	0800dce8 	.word	0x0800dce8

0800d10c <__retarget_lock_init_recursive>:
 800d10c:	4770      	bx	lr

0800d10e <__retarget_lock_acquire_recursive>:
 800d10e:	4770      	bx	lr

0800d110 <__retarget_lock_release_recursive>:
 800d110:	4770      	bx	lr
	...

0800d114 <_free_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4605      	mov	r5, r0
 800d118:	2900      	cmp	r1, #0
 800d11a:	d041      	beq.n	800d1a0 <_free_r+0x8c>
 800d11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d120:	1f0c      	subs	r4, r1, #4
 800d122:	2b00      	cmp	r3, #0
 800d124:	bfb8      	it	lt
 800d126:	18e4      	addlt	r4, r4, r3
 800d128:	f000 f8e0 	bl	800d2ec <__malloc_lock>
 800d12c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a4 <_free_r+0x90>)
 800d12e:	6813      	ldr	r3, [r2, #0]
 800d130:	b933      	cbnz	r3, 800d140 <_free_r+0x2c>
 800d132:	6063      	str	r3, [r4, #4]
 800d134:	6014      	str	r4, [r2, #0]
 800d136:	4628      	mov	r0, r5
 800d138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d13c:	f000 b8dc 	b.w	800d2f8 <__malloc_unlock>
 800d140:	42a3      	cmp	r3, r4
 800d142:	d908      	bls.n	800d156 <_free_r+0x42>
 800d144:	6820      	ldr	r0, [r4, #0]
 800d146:	1821      	adds	r1, r4, r0
 800d148:	428b      	cmp	r3, r1
 800d14a:	bf01      	itttt	eq
 800d14c:	6819      	ldreq	r1, [r3, #0]
 800d14e:	685b      	ldreq	r3, [r3, #4]
 800d150:	1809      	addeq	r1, r1, r0
 800d152:	6021      	streq	r1, [r4, #0]
 800d154:	e7ed      	b.n	800d132 <_free_r+0x1e>
 800d156:	461a      	mov	r2, r3
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	b10b      	cbz	r3, 800d160 <_free_r+0x4c>
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d9fa      	bls.n	800d156 <_free_r+0x42>
 800d160:	6811      	ldr	r1, [r2, #0]
 800d162:	1850      	adds	r0, r2, r1
 800d164:	42a0      	cmp	r0, r4
 800d166:	d10b      	bne.n	800d180 <_free_r+0x6c>
 800d168:	6820      	ldr	r0, [r4, #0]
 800d16a:	4401      	add	r1, r0
 800d16c:	1850      	adds	r0, r2, r1
 800d16e:	6011      	str	r1, [r2, #0]
 800d170:	4283      	cmp	r3, r0
 800d172:	d1e0      	bne.n	800d136 <_free_r+0x22>
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	4408      	add	r0, r1
 800d17a:	6053      	str	r3, [r2, #4]
 800d17c:	6010      	str	r0, [r2, #0]
 800d17e:	e7da      	b.n	800d136 <_free_r+0x22>
 800d180:	d902      	bls.n	800d188 <_free_r+0x74>
 800d182:	230c      	movs	r3, #12
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	e7d6      	b.n	800d136 <_free_r+0x22>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	1821      	adds	r1, r4, r0
 800d18c:	428b      	cmp	r3, r1
 800d18e:	bf02      	ittt	eq
 800d190:	6819      	ldreq	r1, [r3, #0]
 800d192:	685b      	ldreq	r3, [r3, #4]
 800d194:	1809      	addeq	r1, r1, r0
 800d196:	6063      	str	r3, [r4, #4]
 800d198:	bf08      	it	eq
 800d19a:	6021      	streq	r1, [r4, #0]
 800d19c:	6054      	str	r4, [r2, #4]
 800d19e:	e7ca      	b.n	800d136 <_free_r+0x22>
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop
 800d1a4:	200007ec 	.word	0x200007ec

0800d1a8 <sbrk_aligned>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	4e0f      	ldr	r6, [pc, #60]	@ (800d1e8 <sbrk_aligned+0x40>)
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	6831      	ldr	r1, [r6, #0]
 800d1b2:	b911      	cbnz	r1, 800d1ba <sbrk_aligned+0x12>
 800d1b4:	f000 fcaa 	bl	800db0c <_sbrk_r>
 800d1b8:	6030      	str	r0, [r6, #0]
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f000 fca5 	bl	800db0c <_sbrk_r>
 800d1c2:	1c43      	adds	r3, r0, #1
 800d1c4:	d103      	bne.n	800d1ce <sbrk_aligned+0x26>
 800d1c6:	f04f 34ff 	mov.w	r4, #4294967295
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	1cc4      	adds	r4, r0, #3
 800d1d0:	f024 0403 	bic.w	r4, r4, #3
 800d1d4:	42a0      	cmp	r0, r4
 800d1d6:	d0f8      	beq.n	800d1ca <sbrk_aligned+0x22>
 800d1d8:	1a21      	subs	r1, r4, r0
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f000 fc96 	bl	800db0c <_sbrk_r>
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	d1f2      	bne.n	800d1ca <sbrk_aligned+0x22>
 800d1e4:	e7ef      	b.n	800d1c6 <sbrk_aligned+0x1e>
 800d1e6:	bf00      	nop
 800d1e8:	200007e8 	.word	0x200007e8

0800d1ec <_malloc_r>:
 800d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	1ccd      	adds	r5, r1, #3
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	f025 0503 	bic.w	r5, r5, #3
 800d1f8:	3508      	adds	r5, #8
 800d1fa:	2d0c      	cmp	r5, #12
 800d1fc:	bf38      	it	cc
 800d1fe:	250c      	movcc	r5, #12
 800d200:	2d00      	cmp	r5, #0
 800d202:	db01      	blt.n	800d208 <_malloc_r+0x1c>
 800d204:	42a9      	cmp	r1, r5
 800d206:	d904      	bls.n	800d212 <_malloc_r+0x26>
 800d208:	230c      	movs	r3, #12
 800d20a:	6033      	str	r3, [r6, #0]
 800d20c:	2000      	movs	r0, #0
 800d20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2e8 <_malloc_r+0xfc>
 800d216:	f000 f869 	bl	800d2ec <__malloc_lock>
 800d21a:	f8d8 3000 	ldr.w	r3, [r8]
 800d21e:	461c      	mov	r4, r3
 800d220:	bb44      	cbnz	r4, 800d274 <_malloc_r+0x88>
 800d222:	4629      	mov	r1, r5
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff ffbf 	bl	800d1a8 <sbrk_aligned>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	4604      	mov	r4, r0
 800d22e:	d158      	bne.n	800d2e2 <_malloc_r+0xf6>
 800d230:	f8d8 4000 	ldr.w	r4, [r8]
 800d234:	4627      	mov	r7, r4
 800d236:	2f00      	cmp	r7, #0
 800d238:	d143      	bne.n	800d2c2 <_malloc_r+0xd6>
 800d23a:	2c00      	cmp	r4, #0
 800d23c:	d04b      	beq.n	800d2d6 <_malloc_r+0xea>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	4639      	mov	r1, r7
 800d242:	4630      	mov	r0, r6
 800d244:	eb04 0903 	add.w	r9, r4, r3
 800d248:	f000 fc60 	bl	800db0c <_sbrk_r>
 800d24c:	4581      	cmp	r9, r0
 800d24e:	d142      	bne.n	800d2d6 <_malloc_r+0xea>
 800d250:	6821      	ldr	r1, [r4, #0]
 800d252:	4630      	mov	r0, r6
 800d254:	1a6d      	subs	r5, r5, r1
 800d256:	4629      	mov	r1, r5
 800d258:	f7ff ffa6 	bl	800d1a8 <sbrk_aligned>
 800d25c:	3001      	adds	r0, #1
 800d25e:	d03a      	beq.n	800d2d6 <_malloc_r+0xea>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	442b      	add	r3, r5
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	f8d8 3000 	ldr.w	r3, [r8]
 800d26a:	685a      	ldr	r2, [r3, #4]
 800d26c:	bb62      	cbnz	r2, 800d2c8 <_malloc_r+0xdc>
 800d26e:	f8c8 7000 	str.w	r7, [r8]
 800d272:	e00f      	b.n	800d294 <_malloc_r+0xa8>
 800d274:	6822      	ldr	r2, [r4, #0]
 800d276:	1b52      	subs	r2, r2, r5
 800d278:	d420      	bmi.n	800d2bc <_malloc_r+0xd0>
 800d27a:	2a0b      	cmp	r2, #11
 800d27c:	d917      	bls.n	800d2ae <_malloc_r+0xc2>
 800d27e:	1961      	adds	r1, r4, r5
 800d280:	42a3      	cmp	r3, r4
 800d282:	6025      	str	r5, [r4, #0]
 800d284:	bf18      	it	ne
 800d286:	6059      	strne	r1, [r3, #4]
 800d288:	6863      	ldr	r3, [r4, #4]
 800d28a:	bf08      	it	eq
 800d28c:	f8c8 1000 	streq.w	r1, [r8]
 800d290:	5162      	str	r2, [r4, r5]
 800d292:	604b      	str	r3, [r1, #4]
 800d294:	4630      	mov	r0, r6
 800d296:	f000 f82f 	bl	800d2f8 <__malloc_unlock>
 800d29a:	f104 000b 	add.w	r0, r4, #11
 800d29e:	1d23      	adds	r3, r4, #4
 800d2a0:	f020 0007 	bic.w	r0, r0, #7
 800d2a4:	1ac2      	subs	r2, r0, r3
 800d2a6:	bf1c      	itt	ne
 800d2a8:	1a1b      	subne	r3, r3, r0
 800d2aa:	50a3      	strne	r3, [r4, r2]
 800d2ac:	e7af      	b.n	800d20e <_malloc_r+0x22>
 800d2ae:	6862      	ldr	r2, [r4, #4]
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	bf0c      	ite	eq
 800d2b4:	f8c8 2000 	streq.w	r2, [r8]
 800d2b8:	605a      	strne	r2, [r3, #4]
 800d2ba:	e7eb      	b.n	800d294 <_malloc_r+0xa8>
 800d2bc:	4623      	mov	r3, r4
 800d2be:	6864      	ldr	r4, [r4, #4]
 800d2c0:	e7ae      	b.n	800d220 <_malloc_r+0x34>
 800d2c2:	463c      	mov	r4, r7
 800d2c4:	687f      	ldr	r7, [r7, #4]
 800d2c6:	e7b6      	b.n	800d236 <_malloc_r+0x4a>
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	42a3      	cmp	r3, r4
 800d2ce:	d1fb      	bne.n	800d2c8 <_malloc_r+0xdc>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6053      	str	r3, [r2, #4]
 800d2d4:	e7de      	b.n	800d294 <_malloc_r+0xa8>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	4630      	mov	r0, r6
 800d2da:	6033      	str	r3, [r6, #0]
 800d2dc:	f000 f80c 	bl	800d2f8 <__malloc_unlock>
 800d2e0:	e794      	b.n	800d20c <_malloc_r+0x20>
 800d2e2:	6005      	str	r5, [r0, #0]
 800d2e4:	e7d6      	b.n	800d294 <_malloc_r+0xa8>
 800d2e6:	bf00      	nop
 800d2e8:	200007ec 	.word	0x200007ec

0800d2ec <__malloc_lock>:
 800d2ec:	4801      	ldr	r0, [pc, #4]	@ (800d2f4 <__malloc_lock+0x8>)
 800d2ee:	f7ff bf0e 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800d2f2:	bf00      	nop
 800d2f4:	200007e4 	.word	0x200007e4

0800d2f8 <__malloc_unlock>:
 800d2f8:	4801      	ldr	r0, [pc, #4]	@ (800d300 <__malloc_unlock+0x8>)
 800d2fa:	f7ff bf09 	b.w	800d110 <__retarget_lock_release_recursive>
 800d2fe:	bf00      	nop
 800d300:	200007e4 	.word	0x200007e4

0800d304 <__sfputc_r>:
 800d304:	6893      	ldr	r3, [r2, #8]
 800d306:	3b01      	subs	r3, #1
 800d308:	2b00      	cmp	r3, #0
 800d30a:	6093      	str	r3, [r2, #8]
 800d30c:	b410      	push	{r4}
 800d30e:	da08      	bge.n	800d322 <__sfputc_r+0x1e>
 800d310:	6994      	ldr	r4, [r2, #24]
 800d312:	42a3      	cmp	r3, r4
 800d314:	db01      	blt.n	800d31a <__sfputc_r+0x16>
 800d316:	290a      	cmp	r1, #10
 800d318:	d103      	bne.n	800d322 <__sfputc_r+0x1e>
 800d31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d31e:	f7ff bde8 	b.w	800cef2 <__swbuf_r>
 800d322:	6813      	ldr	r3, [r2, #0]
 800d324:	1c58      	adds	r0, r3, #1
 800d326:	6010      	str	r0, [r2, #0]
 800d328:	4608      	mov	r0, r1
 800d32a:	7019      	strb	r1, [r3, #0]
 800d32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <__sfputs_r>:
 800d332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d334:	4606      	mov	r6, r0
 800d336:	460f      	mov	r7, r1
 800d338:	4614      	mov	r4, r2
 800d33a:	18d5      	adds	r5, r2, r3
 800d33c:	42ac      	cmp	r4, r5
 800d33e:	d101      	bne.n	800d344 <__sfputs_r+0x12>
 800d340:	2000      	movs	r0, #0
 800d342:	e007      	b.n	800d354 <__sfputs_r+0x22>
 800d344:	463a      	mov	r2, r7
 800d346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7ff ffda 	bl	800d304 <__sfputc_r>
 800d350:	1c43      	adds	r3, r0, #1
 800d352:	d1f3      	bne.n	800d33c <__sfputs_r+0xa>
 800d354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d358 <_vfiprintf_r>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	460d      	mov	r5, r1
 800d35e:	b09d      	sub	sp, #116	@ 0x74
 800d360:	4614      	mov	r4, r2
 800d362:	4698      	mov	r8, r3
 800d364:	4606      	mov	r6, r0
 800d366:	b118      	cbz	r0, 800d370 <_vfiprintf_r+0x18>
 800d368:	6a03      	ldr	r3, [r0, #32]
 800d36a:	b90b      	cbnz	r3, 800d370 <_vfiprintf_r+0x18>
 800d36c:	f7ff fcd8 	bl	800cd20 <__sinit>
 800d370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d372:	07d9      	lsls	r1, r3, #31
 800d374:	d405      	bmi.n	800d382 <_vfiprintf_r+0x2a>
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	059a      	lsls	r2, r3, #22
 800d37a:	d402      	bmi.n	800d382 <_vfiprintf_r+0x2a>
 800d37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d37e:	f7ff fec6 	bl	800d10e <__retarget_lock_acquire_recursive>
 800d382:	89ab      	ldrh	r3, [r5, #12]
 800d384:	071b      	lsls	r3, r3, #28
 800d386:	d501      	bpl.n	800d38c <_vfiprintf_r+0x34>
 800d388:	692b      	ldr	r3, [r5, #16]
 800d38a:	b99b      	cbnz	r3, 800d3b4 <_vfiprintf_r+0x5c>
 800d38c:	4629      	mov	r1, r5
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff fdee 	bl	800cf70 <__swsetup_r>
 800d394:	b170      	cbz	r0, 800d3b4 <_vfiprintf_r+0x5c>
 800d396:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d398:	07dc      	lsls	r4, r3, #31
 800d39a:	d504      	bpl.n	800d3a6 <_vfiprintf_r+0x4e>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	b01d      	add	sp, #116	@ 0x74
 800d3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a6:	89ab      	ldrh	r3, [r5, #12]
 800d3a8:	0598      	lsls	r0, r3, #22
 800d3aa:	d4f7      	bmi.n	800d39c <_vfiprintf_r+0x44>
 800d3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ae:	f7ff feaf 	bl	800d110 <__retarget_lock_release_recursive>
 800d3b2:	e7f3      	b.n	800d39c <_vfiprintf_r+0x44>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ba:	f04f 0901 	mov.w	r9, #1
 800d3be:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d574 <_vfiprintf_r+0x21c>
 800d3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c4:	2320      	movs	r3, #32
 800d3c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3ca:	2330      	movs	r3, #48	@ 0x30
 800d3cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	469a      	mov	sl, r3
 800d3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d8:	b10a      	cbz	r2, 800d3de <_vfiprintf_r+0x86>
 800d3da:	2a25      	cmp	r2, #37	@ 0x25
 800d3dc:	d1f9      	bne.n	800d3d2 <_vfiprintf_r+0x7a>
 800d3de:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e2:	d00b      	beq.n	800d3fc <_vfiprintf_r+0xa4>
 800d3e4:	465b      	mov	r3, fp
 800d3e6:	4622      	mov	r2, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7ff ffa1 	bl	800d332 <__sfputs_r>
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f000 80a7 	beq.w	800d544 <_vfiprintf_r+0x1ec>
 800d3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3f8:	445a      	add	r2, fp
 800d3fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 809f 	beq.w	800d544 <_vfiprintf_r+0x1ec>
 800d406:	2300      	movs	r3, #0
 800d408:	f04f 32ff 	mov.w	r2, #4294967295
 800d40c:	f10a 0a01 	add.w	sl, sl, #1
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	9307      	str	r3, [sp, #28]
 800d414:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d418:	931a      	str	r3, [sp, #104]	@ 0x68
 800d41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d41e:	4654      	mov	r4, sl
 800d420:	2205      	movs	r2, #5
 800d422:	4854      	ldr	r0, [pc, #336]	@ (800d574 <_vfiprintf_r+0x21c>)
 800d424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d428:	f000 fb80 	bl	800db2c <memchr>
 800d42c:	9a04      	ldr	r2, [sp, #16]
 800d42e:	b9d8      	cbnz	r0, 800d468 <_vfiprintf_r+0x110>
 800d430:	06d1      	lsls	r1, r2, #27
 800d432:	bf44      	itt	mi
 800d434:	2320      	movmi	r3, #32
 800d436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d43a:	0713      	lsls	r3, r2, #28
 800d43c:	bf44      	itt	mi
 800d43e:	232b      	movmi	r3, #43	@ 0x2b
 800d440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d444:	f89a 3000 	ldrb.w	r3, [sl]
 800d448:	2b2a      	cmp	r3, #42	@ 0x2a
 800d44a:	d015      	beq.n	800d478 <_vfiprintf_r+0x120>
 800d44c:	9a07      	ldr	r2, [sp, #28]
 800d44e:	4654      	mov	r4, sl
 800d450:	2000      	movs	r0, #0
 800d452:	f04f 0c0a 	mov.w	ip, #10
 800d456:	4621      	mov	r1, r4
 800d458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d45c:	3b30      	subs	r3, #48	@ 0x30
 800d45e:	2b09      	cmp	r3, #9
 800d460:	d94b      	bls.n	800d4fa <_vfiprintf_r+0x1a2>
 800d462:	b1b0      	cbz	r0, 800d492 <_vfiprintf_r+0x13a>
 800d464:	9207      	str	r2, [sp, #28]
 800d466:	e014      	b.n	800d492 <_vfiprintf_r+0x13a>
 800d468:	eba0 0308 	sub.w	r3, r0, r8
 800d46c:	46a2      	mov	sl, r4
 800d46e:	fa09 f303 	lsl.w	r3, r9, r3
 800d472:	4313      	orrs	r3, r2
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	e7d2      	b.n	800d41e <_vfiprintf_r+0xc6>
 800d478:	9b03      	ldr	r3, [sp, #12]
 800d47a:	1d19      	adds	r1, r3, #4
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	9103      	str	r1, [sp, #12]
 800d482:	bfbb      	ittet	lt
 800d484:	425b      	neglt	r3, r3
 800d486:	f042 0202 	orrlt.w	r2, r2, #2
 800d48a:	9307      	strge	r3, [sp, #28]
 800d48c:	9307      	strlt	r3, [sp, #28]
 800d48e:	bfb8      	it	lt
 800d490:	9204      	strlt	r2, [sp, #16]
 800d492:	7823      	ldrb	r3, [r4, #0]
 800d494:	2b2e      	cmp	r3, #46	@ 0x2e
 800d496:	d10a      	bne.n	800d4ae <_vfiprintf_r+0x156>
 800d498:	7863      	ldrb	r3, [r4, #1]
 800d49a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d49c:	d132      	bne.n	800d504 <_vfiprintf_r+0x1ac>
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	3402      	adds	r4, #2
 800d4a2:	1d1a      	adds	r2, r3, #4
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4aa:	9203      	str	r2, [sp, #12]
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d584 <_vfiprintf_r+0x22c>
 800d4b2:	2203      	movs	r2, #3
 800d4b4:	7821      	ldrb	r1, [r4, #0]
 800d4b6:	4650      	mov	r0, sl
 800d4b8:	f000 fb38 	bl	800db2c <memchr>
 800d4bc:	b138      	cbz	r0, 800d4ce <_vfiprintf_r+0x176>
 800d4be:	eba0 000a 	sub.w	r0, r0, sl
 800d4c2:	2240      	movs	r2, #64	@ 0x40
 800d4c4:	9b04      	ldr	r3, [sp, #16]
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	4082      	lsls	r2, r0
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	9304      	str	r3, [sp, #16]
 800d4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d2:	2206      	movs	r2, #6
 800d4d4:	4828      	ldr	r0, [pc, #160]	@ (800d578 <_vfiprintf_r+0x220>)
 800d4d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4da:	f000 fb27 	bl	800db2c <memchr>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d03f      	beq.n	800d562 <_vfiprintf_r+0x20a>
 800d4e2:	4b26      	ldr	r3, [pc, #152]	@ (800d57c <_vfiprintf_r+0x224>)
 800d4e4:	bb1b      	cbnz	r3, 800d52e <_vfiprintf_r+0x1d6>
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	3307      	adds	r3, #7
 800d4ea:	f023 0307 	bic.w	r3, r3, #7
 800d4ee:	3308      	adds	r3, #8
 800d4f0:	9303      	str	r3, [sp, #12]
 800d4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f4:	443b      	add	r3, r7
 800d4f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f8:	e76a      	b.n	800d3d0 <_vfiprintf_r+0x78>
 800d4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4fe:	460c      	mov	r4, r1
 800d500:	2001      	movs	r0, #1
 800d502:	e7a8      	b.n	800d456 <_vfiprintf_r+0xfe>
 800d504:	2300      	movs	r3, #0
 800d506:	3401      	adds	r4, #1
 800d508:	f04f 0c0a 	mov.w	ip, #10
 800d50c:	4619      	mov	r1, r3
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	4620      	mov	r0, r4
 800d512:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d516:	3a30      	subs	r2, #48	@ 0x30
 800d518:	2a09      	cmp	r2, #9
 800d51a:	d903      	bls.n	800d524 <_vfiprintf_r+0x1cc>
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d0c6      	beq.n	800d4ae <_vfiprintf_r+0x156>
 800d520:	9105      	str	r1, [sp, #20]
 800d522:	e7c4      	b.n	800d4ae <_vfiprintf_r+0x156>
 800d524:	fb0c 2101 	mla	r1, ip, r1, r2
 800d528:	4604      	mov	r4, r0
 800d52a:	2301      	movs	r3, #1
 800d52c:	e7f0      	b.n	800d510 <_vfiprintf_r+0x1b8>
 800d52e:	ab03      	add	r3, sp, #12
 800d530:	462a      	mov	r2, r5
 800d532:	a904      	add	r1, sp, #16
 800d534:	4630      	mov	r0, r6
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	4b11      	ldr	r3, [pc, #68]	@ (800d580 <_vfiprintf_r+0x228>)
 800d53a:	f3af 8000 	nop.w
 800d53e:	4607      	mov	r7, r0
 800d540:	1c78      	adds	r0, r7, #1
 800d542:	d1d6      	bne.n	800d4f2 <_vfiprintf_r+0x19a>
 800d544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d546:	07d9      	lsls	r1, r3, #31
 800d548:	d405      	bmi.n	800d556 <_vfiprintf_r+0x1fe>
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	059a      	lsls	r2, r3, #22
 800d54e:	d402      	bmi.n	800d556 <_vfiprintf_r+0x1fe>
 800d550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d552:	f7ff fddd 	bl	800d110 <__retarget_lock_release_recursive>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	065b      	lsls	r3, r3, #25
 800d55a:	f53f af1f 	bmi.w	800d39c <_vfiprintf_r+0x44>
 800d55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d560:	e71e      	b.n	800d3a0 <_vfiprintf_r+0x48>
 800d562:	ab03      	add	r3, sp, #12
 800d564:	462a      	mov	r2, r5
 800d566:	a904      	add	r1, sp, #16
 800d568:	4630      	mov	r0, r6
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4b04      	ldr	r3, [pc, #16]	@ (800d580 <_vfiprintf_r+0x228>)
 800d56e:	f000 f87d 	bl	800d66c <_printf_i>
 800d572:	e7e4      	b.n	800d53e <_vfiprintf_r+0x1e6>
 800d574:	0800dca8 	.word	0x0800dca8
 800d578:	0800dcb2 	.word	0x0800dcb2
 800d57c:	00000000 	.word	0x00000000
 800d580:	0800d333 	.word	0x0800d333
 800d584:	0800dcae 	.word	0x0800dcae

0800d588 <_printf_common>:
 800d588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d58c:	4616      	mov	r6, r2
 800d58e:	4698      	mov	r8, r3
 800d590:	688a      	ldr	r2, [r1, #8]
 800d592:	4607      	mov	r7, r0
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	460c      	mov	r4, r1
 800d598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d59c:	4293      	cmp	r3, r2
 800d59e:	bfb8      	it	lt
 800d5a0:	4613      	movlt	r3, r2
 800d5a2:	6033      	str	r3, [r6, #0]
 800d5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5a8:	b10a      	cbz	r2, 800d5ae <_printf_common+0x26>
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	6033      	str	r3, [r6, #0]
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	0699      	lsls	r1, r3, #26
 800d5b2:	bf42      	ittt	mi
 800d5b4:	6833      	ldrmi	r3, [r6, #0]
 800d5b6:	3302      	addmi	r3, #2
 800d5b8:	6033      	strmi	r3, [r6, #0]
 800d5ba:	6825      	ldr	r5, [r4, #0]
 800d5bc:	f015 0506 	ands.w	r5, r5, #6
 800d5c0:	d106      	bne.n	800d5d0 <_printf_common+0x48>
 800d5c2:	f104 0a19 	add.w	sl, r4, #25
 800d5c6:	68e3      	ldr	r3, [r4, #12]
 800d5c8:	6832      	ldr	r2, [r6, #0]
 800d5ca:	1a9b      	subs	r3, r3, r2
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dc2b      	bgt.n	800d628 <_printf_common+0xa0>
 800d5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5d4:	6822      	ldr	r2, [r4, #0]
 800d5d6:	3b00      	subs	r3, #0
 800d5d8:	bf18      	it	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	0692      	lsls	r2, r2, #26
 800d5de:	d430      	bmi.n	800d642 <_printf_common+0xba>
 800d5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5e4:	4641      	mov	r1, r8
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	47c8      	blx	r9
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	d023      	beq.n	800d636 <_printf_common+0xae>
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	341a      	adds	r4, #26
 800d5f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d5f6:	f003 0306 	and.w	r3, r3, #6
 800d5fa:	2b04      	cmp	r3, #4
 800d5fc:	bf0a      	itet	eq
 800d5fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d602:	2500      	movne	r5, #0
 800d604:	6833      	ldreq	r3, [r6, #0]
 800d606:	f04f 0600 	mov.w	r6, #0
 800d60a:	bf08      	it	eq
 800d60c:	1aed      	subeq	r5, r5, r3
 800d60e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d612:	bf08      	it	eq
 800d614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d618:	4293      	cmp	r3, r2
 800d61a:	bfc4      	itt	gt
 800d61c:	1a9b      	subgt	r3, r3, r2
 800d61e:	18ed      	addgt	r5, r5, r3
 800d620:	42b5      	cmp	r5, r6
 800d622:	d11a      	bne.n	800d65a <_printf_common+0xd2>
 800d624:	2000      	movs	r0, #0
 800d626:	e008      	b.n	800d63a <_printf_common+0xb2>
 800d628:	2301      	movs	r3, #1
 800d62a:	4652      	mov	r2, sl
 800d62c:	4641      	mov	r1, r8
 800d62e:	4638      	mov	r0, r7
 800d630:	47c8      	blx	r9
 800d632:	3001      	adds	r0, #1
 800d634:	d103      	bne.n	800d63e <_printf_common+0xb6>
 800d636:	f04f 30ff 	mov.w	r0, #4294967295
 800d63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63e:	3501      	adds	r5, #1
 800d640:	e7c1      	b.n	800d5c6 <_printf_common+0x3e>
 800d642:	18e1      	adds	r1, r4, r3
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	2030      	movs	r0, #48	@ 0x30
 800d648:	3302      	adds	r3, #2
 800d64a:	4422      	add	r2, r4
 800d64c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d658:	e7c2      	b.n	800d5e0 <_printf_common+0x58>
 800d65a:	2301      	movs	r3, #1
 800d65c:	4622      	mov	r2, r4
 800d65e:	4641      	mov	r1, r8
 800d660:	4638      	mov	r0, r7
 800d662:	47c8      	blx	r9
 800d664:	3001      	adds	r0, #1
 800d666:	d0e6      	beq.n	800d636 <_printf_common+0xae>
 800d668:	3601      	adds	r6, #1
 800d66a:	e7d9      	b.n	800d620 <_printf_common+0x98>

0800d66c <_printf_i>:
 800d66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d670:	7e0f      	ldrb	r7, [r1, #24]
 800d672:	4691      	mov	r9, r2
 800d674:	4680      	mov	r8, r0
 800d676:	460c      	mov	r4, r1
 800d678:	2f78      	cmp	r7, #120	@ 0x78
 800d67a:	469a      	mov	sl, r3
 800d67c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d67e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d682:	d807      	bhi.n	800d694 <_printf_i+0x28>
 800d684:	2f62      	cmp	r7, #98	@ 0x62
 800d686:	d80a      	bhi.n	800d69e <_printf_i+0x32>
 800d688:	2f00      	cmp	r7, #0
 800d68a:	f000 80d2 	beq.w	800d832 <_printf_i+0x1c6>
 800d68e:	2f58      	cmp	r7, #88	@ 0x58
 800d690:	f000 80b9 	beq.w	800d806 <_printf_i+0x19a>
 800d694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d69c:	e03a      	b.n	800d714 <_printf_i+0xa8>
 800d69e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6a2:	2b15      	cmp	r3, #21
 800d6a4:	d8f6      	bhi.n	800d694 <_printf_i+0x28>
 800d6a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d6ac <_printf_i+0x40>)
 800d6a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6ac:	0800d705 	.word	0x0800d705
 800d6b0:	0800d719 	.word	0x0800d719
 800d6b4:	0800d695 	.word	0x0800d695
 800d6b8:	0800d695 	.word	0x0800d695
 800d6bc:	0800d695 	.word	0x0800d695
 800d6c0:	0800d695 	.word	0x0800d695
 800d6c4:	0800d719 	.word	0x0800d719
 800d6c8:	0800d695 	.word	0x0800d695
 800d6cc:	0800d695 	.word	0x0800d695
 800d6d0:	0800d695 	.word	0x0800d695
 800d6d4:	0800d695 	.word	0x0800d695
 800d6d8:	0800d819 	.word	0x0800d819
 800d6dc:	0800d743 	.word	0x0800d743
 800d6e0:	0800d7d3 	.word	0x0800d7d3
 800d6e4:	0800d695 	.word	0x0800d695
 800d6e8:	0800d695 	.word	0x0800d695
 800d6ec:	0800d83b 	.word	0x0800d83b
 800d6f0:	0800d695 	.word	0x0800d695
 800d6f4:	0800d743 	.word	0x0800d743
 800d6f8:	0800d695 	.word	0x0800d695
 800d6fc:	0800d695 	.word	0x0800d695
 800d700:	0800d7db 	.word	0x0800d7db
 800d704:	6833      	ldr	r3, [r6, #0]
 800d706:	1d1a      	adds	r2, r3, #4
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6032      	str	r2, [r6, #0]
 800d70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d714:	2301      	movs	r3, #1
 800d716:	e09d      	b.n	800d854 <_printf_i+0x1e8>
 800d718:	6833      	ldr	r3, [r6, #0]
 800d71a:	6820      	ldr	r0, [r4, #0]
 800d71c:	1d19      	adds	r1, r3, #4
 800d71e:	6031      	str	r1, [r6, #0]
 800d720:	0606      	lsls	r6, r0, #24
 800d722:	d501      	bpl.n	800d728 <_printf_i+0xbc>
 800d724:	681d      	ldr	r5, [r3, #0]
 800d726:	e003      	b.n	800d730 <_printf_i+0xc4>
 800d728:	0645      	lsls	r5, r0, #25
 800d72a:	d5fb      	bpl.n	800d724 <_printf_i+0xb8>
 800d72c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d730:	2d00      	cmp	r5, #0
 800d732:	da03      	bge.n	800d73c <_printf_i+0xd0>
 800d734:	232d      	movs	r3, #45	@ 0x2d
 800d736:	426d      	negs	r5, r5
 800d738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d73c:	4859      	ldr	r0, [pc, #356]	@ (800d8a4 <_printf_i+0x238>)
 800d73e:	230a      	movs	r3, #10
 800d740:	e011      	b.n	800d766 <_printf_i+0xfa>
 800d742:	6821      	ldr	r1, [r4, #0]
 800d744:	6833      	ldr	r3, [r6, #0]
 800d746:	0608      	lsls	r0, r1, #24
 800d748:	f853 5b04 	ldr.w	r5, [r3], #4
 800d74c:	d402      	bmi.n	800d754 <_printf_i+0xe8>
 800d74e:	0649      	lsls	r1, r1, #25
 800d750:	bf48      	it	mi
 800d752:	b2ad      	uxthmi	r5, r5
 800d754:	2f6f      	cmp	r7, #111	@ 0x6f
 800d756:	6033      	str	r3, [r6, #0]
 800d758:	4852      	ldr	r0, [pc, #328]	@ (800d8a4 <_printf_i+0x238>)
 800d75a:	bf14      	ite	ne
 800d75c:	230a      	movne	r3, #10
 800d75e:	2308      	moveq	r3, #8
 800d760:	2100      	movs	r1, #0
 800d762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d766:	6866      	ldr	r6, [r4, #4]
 800d768:	2e00      	cmp	r6, #0
 800d76a:	60a6      	str	r6, [r4, #8]
 800d76c:	bfa2      	ittt	ge
 800d76e:	6821      	ldrge	r1, [r4, #0]
 800d770:	f021 0104 	bicge.w	r1, r1, #4
 800d774:	6021      	strge	r1, [r4, #0]
 800d776:	b90d      	cbnz	r5, 800d77c <_printf_i+0x110>
 800d778:	2e00      	cmp	r6, #0
 800d77a:	d04b      	beq.n	800d814 <_printf_i+0x1a8>
 800d77c:	4616      	mov	r6, r2
 800d77e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d782:	fb03 5711 	mls	r7, r3, r1, r5
 800d786:	5dc7      	ldrb	r7, [r0, r7]
 800d788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d78c:	462f      	mov	r7, r5
 800d78e:	460d      	mov	r5, r1
 800d790:	42bb      	cmp	r3, r7
 800d792:	d9f4      	bls.n	800d77e <_printf_i+0x112>
 800d794:	2b08      	cmp	r3, #8
 800d796:	d10b      	bne.n	800d7b0 <_printf_i+0x144>
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	07df      	lsls	r7, r3, #31
 800d79c:	d508      	bpl.n	800d7b0 <_printf_i+0x144>
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	6861      	ldr	r1, [r4, #4]
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	bfde      	ittt	le
 800d7a6:	2330      	movle	r3, #48	@ 0x30
 800d7a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7b0:	1b92      	subs	r2, r2, r6
 800d7b2:	6122      	str	r2, [r4, #16]
 800d7b4:	464b      	mov	r3, r9
 800d7b6:	aa03      	add	r2, sp, #12
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	f8cd a000 	str.w	sl, [sp]
 800d7c0:	f7ff fee2 	bl	800d588 <_printf_common>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d14a      	bne.n	800d85e <_printf_i+0x1f2>
 800d7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7cc:	b004      	add	sp, #16
 800d7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	f043 0320 	orr.w	r3, r3, #32
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	2778      	movs	r7, #120	@ 0x78
 800d7dc:	4832      	ldr	r0, [pc, #200]	@ (800d8a8 <_printf_i+0x23c>)
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7e4:	061f      	lsls	r7, r3, #24
 800d7e6:	6831      	ldr	r1, [r6, #0]
 800d7e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7ec:	d402      	bmi.n	800d7f4 <_printf_i+0x188>
 800d7ee:	065f      	lsls	r7, r3, #25
 800d7f0:	bf48      	it	mi
 800d7f2:	b2ad      	uxthmi	r5, r5
 800d7f4:	6031      	str	r1, [r6, #0]
 800d7f6:	07d9      	lsls	r1, r3, #31
 800d7f8:	bf44      	itt	mi
 800d7fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d7fe:	6023      	strmi	r3, [r4, #0]
 800d800:	b11d      	cbz	r5, 800d80a <_printf_i+0x19e>
 800d802:	2310      	movs	r3, #16
 800d804:	e7ac      	b.n	800d760 <_printf_i+0xf4>
 800d806:	4827      	ldr	r0, [pc, #156]	@ (800d8a4 <_printf_i+0x238>)
 800d808:	e7e9      	b.n	800d7de <_printf_i+0x172>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	f023 0320 	bic.w	r3, r3, #32
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	e7f6      	b.n	800d802 <_printf_i+0x196>
 800d814:	4616      	mov	r6, r2
 800d816:	e7bd      	b.n	800d794 <_printf_i+0x128>
 800d818:	6833      	ldr	r3, [r6, #0]
 800d81a:	6825      	ldr	r5, [r4, #0]
 800d81c:	1d18      	adds	r0, r3, #4
 800d81e:	6961      	ldr	r1, [r4, #20]
 800d820:	6030      	str	r0, [r6, #0]
 800d822:	062e      	lsls	r6, r5, #24
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	d501      	bpl.n	800d82c <_printf_i+0x1c0>
 800d828:	6019      	str	r1, [r3, #0]
 800d82a:	e002      	b.n	800d832 <_printf_i+0x1c6>
 800d82c:	0668      	lsls	r0, r5, #25
 800d82e:	d5fb      	bpl.n	800d828 <_printf_i+0x1bc>
 800d830:	8019      	strh	r1, [r3, #0]
 800d832:	2300      	movs	r3, #0
 800d834:	4616      	mov	r6, r2
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	e7bc      	b.n	800d7b4 <_printf_i+0x148>
 800d83a:	6833      	ldr	r3, [r6, #0]
 800d83c:	2100      	movs	r1, #0
 800d83e:	1d1a      	adds	r2, r3, #4
 800d840:	6032      	str	r2, [r6, #0]
 800d842:	681e      	ldr	r6, [r3, #0]
 800d844:	6862      	ldr	r2, [r4, #4]
 800d846:	4630      	mov	r0, r6
 800d848:	f000 f970 	bl	800db2c <memchr>
 800d84c:	b108      	cbz	r0, 800d852 <_printf_i+0x1e6>
 800d84e:	1b80      	subs	r0, r0, r6
 800d850:	6060      	str	r0, [r4, #4]
 800d852:	6863      	ldr	r3, [r4, #4]
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	2300      	movs	r3, #0
 800d858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d85c:	e7aa      	b.n	800d7b4 <_printf_i+0x148>
 800d85e:	6923      	ldr	r3, [r4, #16]
 800d860:	4632      	mov	r2, r6
 800d862:	4649      	mov	r1, r9
 800d864:	4640      	mov	r0, r8
 800d866:	47d0      	blx	sl
 800d868:	3001      	adds	r0, #1
 800d86a:	d0ad      	beq.n	800d7c8 <_printf_i+0x15c>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	079b      	lsls	r3, r3, #30
 800d870:	d413      	bmi.n	800d89a <_printf_i+0x22e>
 800d872:	68e0      	ldr	r0, [r4, #12]
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	4298      	cmp	r0, r3
 800d878:	bfb8      	it	lt
 800d87a:	4618      	movlt	r0, r3
 800d87c:	e7a6      	b.n	800d7cc <_printf_i+0x160>
 800d87e:	2301      	movs	r3, #1
 800d880:	4632      	mov	r2, r6
 800d882:	4649      	mov	r1, r9
 800d884:	4640      	mov	r0, r8
 800d886:	47d0      	blx	sl
 800d888:	3001      	adds	r0, #1
 800d88a:	d09d      	beq.n	800d7c8 <_printf_i+0x15c>
 800d88c:	3501      	adds	r5, #1
 800d88e:	68e3      	ldr	r3, [r4, #12]
 800d890:	9903      	ldr	r1, [sp, #12]
 800d892:	1a5b      	subs	r3, r3, r1
 800d894:	42ab      	cmp	r3, r5
 800d896:	dcf2      	bgt.n	800d87e <_printf_i+0x212>
 800d898:	e7eb      	b.n	800d872 <_printf_i+0x206>
 800d89a:	2500      	movs	r5, #0
 800d89c:	f104 0619 	add.w	r6, r4, #25
 800d8a0:	e7f5      	b.n	800d88e <_printf_i+0x222>
 800d8a2:	bf00      	nop
 800d8a4:	0800dcb9 	.word	0x0800dcb9
 800d8a8:	0800dcca 	.word	0x0800dcca

0800d8ac <__sflush_r>:
 800d8ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b4:	0716      	lsls	r6, r2, #28
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	d454      	bmi.n	800d966 <__sflush_r+0xba>
 800d8bc:	684b      	ldr	r3, [r1, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	dc02      	bgt.n	800d8c8 <__sflush_r+0x1c>
 800d8c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dd48      	ble.n	800d95a <__sflush_r+0xae>
 800d8c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8ca:	2e00      	cmp	r6, #0
 800d8cc:	d045      	beq.n	800d95a <__sflush_r+0xae>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8d4:	682f      	ldr	r7, [r5, #0]
 800d8d6:	6a21      	ldr	r1, [r4, #32]
 800d8d8:	602b      	str	r3, [r5, #0]
 800d8da:	d030      	beq.n	800d93e <__sflush_r+0x92>
 800d8dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	0759      	lsls	r1, r3, #29
 800d8e2:	d505      	bpl.n	800d8f0 <__sflush_r+0x44>
 800d8e4:	6863      	ldr	r3, [r4, #4]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8ea:	b10b      	cbz	r3, 800d8f0 <__sflush_r+0x44>
 800d8ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ee:	1ad2      	subs	r2, r2, r3
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8f4:	6a21      	ldr	r1, [r4, #32]
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	47b0      	blx	r6
 800d8fa:	1c43      	adds	r3, r0, #1
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	d106      	bne.n	800d90e <__sflush_r+0x62>
 800d900:	6829      	ldr	r1, [r5, #0]
 800d902:	291d      	cmp	r1, #29
 800d904:	d82b      	bhi.n	800d95e <__sflush_r+0xb2>
 800d906:	4a2a      	ldr	r2, [pc, #168]	@ (800d9b0 <__sflush_r+0x104>)
 800d908:	410a      	asrs	r2, r1
 800d90a:	07d6      	lsls	r6, r2, #31
 800d90c:	d427      	bmi.n	800d95e <__sflush_r+0xb2>
 800d90e:	2200      	movs	r2, #0
 800d910:	04d9      	lsls	r1, r3, #19
 800d912:	6062      	str	r2, [r4, #4]
 800d914:	6922      	ldr	r2, [r4, #16]
 800d916:	6022      	str	r2, [r4, #0]
 800d918:	d504      	bpl.n	800d924 <__sflush_r+0x78>
 800d91a:	1c42      	adds	r2, r0, #1
 800d91c:	d101      	bne.n	800d922 <__sflush_r+0x76>
 800d91e:	682b      	ldr	r3, [r5, #0]
 800d920:	b903      	cbnz	r3, 800d924 <__sflush_r+0x78>
 800d922:	6560      	str	r0, [r4, #84]	@ 0x54
 800d924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d926:	602f      	str	r7, [r5, #0]
 800d928:	b1b9      	cbz	r1, 800d95a <__sflush_r+0xae>
 800d92a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d92e:	4299      	cmp	r1, r3
 800d930:	d002      	beq.n	800d938 <__sflush_r+0x8c>
 800d932:	4628      	mov	r0, r5
 800d934:	f7ff fbee 	bl	800d114 <_free_r>
 800d938:	2300      	movs	r3, #0
 800d93a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d93c:	e00d      	b.n	800d95a <__sflush_r+0xae>
 800d93e:	2301      	movs	r3, #1
 800d940:	4628      	mov	r0, r5
 800d942:	47b0      	blx	r6
 800d944:	4602      	mov	r2, r0
 800d946:	1c50      	adds	r0, r2, #1
 800d948:	d1c9      	bne.n	800d8de <__sflush_r+0x32>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0c6      	beq.n	800d8de <__sflush_r+0x32>
 800d950:	2b1d      	cmp	r3, #29
 800d952:	d001      	beq.n	800d958 <__sflush_r+0xac>
 800d954:	2b16      	cmp	r3, #22
 800d956:	d11d      	bne.n	800d994 <__sflush_r+0xe8>
 800d958:	602f      	str	r7, [r5, #0]
 800d95a:	2000      	movs	r0, #0
 800d95c:	e021      	b.n	800d9a2 <__sflush_r+0xf6>
 800d95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d962:	b21b      	sxth	r3, r3
 800d964:	e01a      	b.n	800d99c <__sflush_r+0xf0>
 800d966:	690f      	ldr	r7, [r1, #16]
 800d968:	2f00      	cmp	r7, #0
 800d96a:	d0f6      	beq.n	800d95a <__sflush_r+0xae>
 800d96c:	0793      	lsls	r3, r2, #30
 800d96e:	680e      	ldr	r6, [r1, #0]
 800d970:	600f      	str	r7, [r1, #0]
 800d972:	bf0c      	ite	eq
 800d974:	694b      	ldreq	r3, [r1, #20]
 800d976:	2300      	movne	r3, #0
 800d978:	eba6 0807 	sub.w	r8, r6, r7
 800d97c:	608b      	str	r3, [r1, #8]
 800d97e:	f1b8 0f00 	cmp.w	r8, #0
 800d982:	ddea      	ble.n	800d95a <__sflush_r+0xae>
 800d984:	4643      	mov	r3, r8
 800d986:	463a      	mov	r2, r7
 800d988:	6a21      	ldr	r1, [r4, #32]
 800d98a:	4628      	mov	r0, r5
 800d98c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d98e:	47b0      	blx	r6
 800d990:	2800      	cmp	r0, #0
 800d992:	dc08      	bgt.n	800d9a6 <__sflush_r+0xfa>
 800d994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a6:	4407      	add	r7, r0
 800d9a8:	eba8 0800 	sub.w	r8, r8, r0
 800d9ac:	e7e7      	b.n	800d97e <__sflush_r+0xd2>
 800d9ae:	bf00      	nop
 800d9b0:	dfbffffe 	.word	0xdfbffffe

0800d9b4 <_fflush_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	690b      	ldr	r3, [r1, #16]
 800d9b8:	4605      	mov	r5, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	b913      	cbnz	r3, 800d9c4 <_fflush_r+0x10>
 800d9be:	2500      	movs	r5, #0
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	bd38      	pop	{r3, r4, r5, pc}
 800d9c4:	b118      	cbz	r0, 800d9ce <_fflush_r+0x1a>
 800d9c6:	6a03      	ldr	r3, [r0, #32]
 800d9c8:	b90b      	cbnz	r3, 800d9ce <_fflush_r+0x1a>
 800d9ca:	f7ff f9a9 	bl	800cd20 <__sinit>
 800d9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0f3      	beq.n	800d9be <_fflush_r+0xa>
 800d9d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9d8:	07d0      	lsls	r0, r2, #31
 800d9da:	d404      	bmi.n	800d9e6 <_fflush_r+0x32>
 800d9dc:	0599      	lsls	r1, r3, #22
 800d9de:	d402      	bmi.n	800d9e6 <_fflush_r+0x32>
 800d9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9e2:	f7ff fb94 	bl	800d10e <__retarget_lock_acquire_recursive>
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	f7ff ff5f 	bl	800d8ac <__sflush_r>
 800d9ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	07da      	lsls	r2, r3, #31
 800d9f4:	d4e4      	bmi.n	800d9c0 <_fflush_r+0xc>
 800d9f6:	89a3      	ldrh	r3, [r4, #12]
 800d9f8:	059b      	lsls	r3, r3, #22
 800d9fa:	d4e1      	bmi.n	800d9c0 <_fflush_r+0xc>
 800d9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9fe:	f7ff fb87 	bl	800d110 <__retarget_lock_release_recursive>
 800da02:	e7dd      	b.n	800d9c0 <_fflush_r+0xc>

0800da04 <__swhatbuf_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	460c      	mov	r4, r1
 800da08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0c:	b096      	sub	sp, #88	@ 0x58
 800da0e:	4615      	mov	r5, r2
 800da10:	2900      	cmp	r1, #0
 800da12:	461e      	mov	r6, r3
 800da14:	da0c      	bge.n	800da30 <__swhatbuf_r+0x2c>
 800da16:	89a3      	ldrh	r3, [r4, #12]
 800da18:	2100      	movs	r1, #0
 800da1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da1e:	bf14      	ite	ne
 800da20:	2340      	movne	r3, #64	@ 0x40
 800da22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da26:	2000      	movs	r0, #0
 800da28:	6031      	str	r1, [r6, #0]
 800da2a:	602b      	str	r3, [r5, #0]
 800da2c:	b016      	add	sp, #88	@ 0x58
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	466a      	mov	r2, sp
 800da32:	f000 f849 	bl	800dac8 <_fstat_r>
 800da36:	2800      	cmp	r0, #0
 800da38:	dbed      	blt.n	800da16 <__swhatbuf_r+0x12>
 800da3a:	9901      	ldr	r1, [sp, #4]
 800da3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da44:	4259      	negs	r1, r3
 800da46:	4159      	adcs	r1, r3
 800da48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da4c:	e7eb      	b.n	800da26 <__swhatbuf_r+0x22>

0800da4e <__smakebuf_r>:
 800da4e:	898b      	ldrh	r3, [r1, #12]
 800da50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da52:	079d      	lsls	r5, r3, #30
 800da54:	4606      	mov	r6, r0
 800da56:	460c      	mov	r4, r1
 800da58:	d507      	bpl.n	800da6a <__smakebuf_r+0x1c>
 800da5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da5e:	6023      	str	r3, [r4, #0]
 800da60:	6123      	str	r3, [r4, #16]
 800da62:	2301      	movs	r3, #1
 800da64:	6163      	str	r3, [r4, #20]
 800da66:	b003      	add	sp, #12
 800da68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6a:	ab01      	add	r3, sp, #4
 800da6c:	466a      	mov	r2, sp
 800da6e:	f7ff ffc9 	bl	800da04 <__swhatbuf_r>
 800da72:	9f00      	ldr	r7, [sp, #0]
 800da74:	4605      	mov	r5, r0
 800da76:	4630      	mov	r0, r6
 800da78:	4639      	mov	r1, r7
 800da7a:	f7ff fbb7 	bl	800d1ec <_malloc_r>
 800da7e:	b948      	cbnz	r0, 800da94 <__smakebuf_r+0x46>
 800da80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da84:	059a      	lsls	r2, r3, #22
 800da86:	d4ee      	bmi.n	800da66 <__smakebuf_r+0x18>
 800da88:	f023 0303 	bic.w	r3, r3, #3
 800da8c:	f043 0302 	orr.w	r3, r3, #2
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	e7e2      	b.n	800da5a <__smakebuf_r+0xc>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da9c:	81a3      	strh	r3, [r4, #12]
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800daa4:	b15b      	cbz	r3, 800dabe <__smakebuf_r+0x70>
 800daa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daaa:	4630      	mov	r0, r6
 800daac:	f000 f81e 	bl	800daec <_isatty_r>
 800dab0:	b128      	cbz	r0, 800dabe <__smakebuf_r+0x70>
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f023 0303 	bic.w	r3, r3, #3
 800dab8:	f043 0301 	orr.w	r3, r3, #1
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	431d      	orrs	r5, r3
 800dac2:	81a5      	strh	r5, [r4, #12]
 800dac4:	e7cf      	b.n	800da66 <__smakebuf_r+0x18>
	...

0800dac8 <_fstat_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	2300      	movs	r3, #0
 800dacc:	4d06      	ldr	r5, [pc, #24]	@ (800dae8 <_fstat_r+0x20>)
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f4 fe12 	bl	80026fe <_fstat>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_fstat_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_fstat_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	200007e0 	.word	0x200007e0

0800daec <_isatty_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	2300      	movs	r3, #0
 800daf0:	4d05      	ldr	r5, [pc, #20]	@ (800db08 <_isatty_r+0x1c>)
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	f7f4 fe11 	bl	800271e <_isatty>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d102      	bne.n	800db06 <_isatty_r+0x1a>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	b103      	cbz	r3, 800db06 <_isatty_r+0x1a>
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	200007e0 	.word	0x200007e0

0800db0c <_sbrk_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	2300      	movs	r3, #0
 800db10:	4d05      	ldr	r5, [pc, #20]	@ (800db28 <_sbrk_r+0x1c>)
 800db12:	4604      	mov	r4, r0
 800db14:	4608      	mov	r0, r1
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	f7f4 fe1a 	bl	8002750 <_sbrk>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_sbrk_r+0x1a>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_sbrk_r+0x1a>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	200007e0 	.word	0x200007e0

0800db2c <memchr>:
 800db2c:	b2c9      	uxtb	r1, r1
 800db2e:	4603      	mov	r3, r0
 800db30:	4402      	add	r2, r0
 800db32:	b510      	push	{r4, lr}
 800db34:	4293      	cmp	r3, r2
 800db36:	4618      	mov	r0, r3
 800db38:	d101      	bne.n	800db3e <memchr+0x12>
 800db3a:	2000      	movs	r0, #0
 800db3c:	e003      	b.n	800db46 <memchr+0x1a>
 800db3e:	7804      	ldrb	r4, [r0, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	428c      	cmp	r4, r1
 800db44:	d1f6      	bne.n	800db34 <memchr+0x8>
 800db46:	bd10      	pop	{r4, pc}

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
