
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd64  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800dfbc  0800dfbc  0000efbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e138  0800e138  000100ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e138  0800e138  0000f138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e140  0800e140  000100ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e140  0800e140  0000f140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e144  0800e144  0000f144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800e148  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200000ec  0800e234  000100ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800e234  000106f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a29  00000000  00000000  00010122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  00030b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001486  00000000  00000000  00036090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6c4  00000000  00000000  00037516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242ce  00000000  00000000  00065bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120c38  00000000  00000000  00089ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aaae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007950  00000000  00000000  001aab24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b2474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800dfa4 	.word	0x0800dfa4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800dfa4 	.word	0x0800dfa4

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f003 f972 	bl	8004198 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f001 f9ff 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f003 fab6 	bl	800444c <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00c f9e6 	bl	800d2b8 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f003 fb07 	bl	8004500 <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f001 f9e0 	bl	80022bc <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800dfbc 	.word	0x0800dfbc

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00c faa1 	bl	800d478 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 fca8 	bl	80068ac <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f001 f9ab 	bl	80022bc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fd7d 	bl	8004ac8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f002 f8cc 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f002 f8e3 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f002 f8c4 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f002 f8db 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00c f893 	bl	800d1e8 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f003 fa34 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800dfd8 	.word	0x0800dfd8
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00c f867 	bl	800d1e8 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00c f860 	bl	800d1e8 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800dfd8 	.word	0x0800dfd8
 800114c:	0800dff0 	.word	0x0800dff0
 8001150:	20000000 	.word	0x20000000

08001154 <modify_can_frame_bit>:

void modify_can_frame_bit(uint8_t frameIndex, uint8_t byte_num, uint8_t bit_num, bool state)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	4603      	mov	r3, r0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	717b      	strb	r3, [r7, #5]
 800116e:	4613      	mov	r3, r2
 8001170:	713b      	strb	r3, [r7, #4]
	   if (frameIndex >= FRAME_COUNT) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d903      	bls.n	8001180 <modify_can_frame_bit+0x2c>
			printf("Over can frames index");
 8001178:	482b      	ldr	r0, [pc, #172]	@ (8001228 <modify_can_frame_bit+0xd4>)
 800117a:	f00c f835 	bl	800d1e8 <iprintf>
			return; // todo add error
 800117e:	e04f      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }
	   if (byte_num > 8) {
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d903      	bls.n	800118e <modify_can_frame_bit+0x3a>
		   printf("Wrong byte index");
 8001186:	4829      	ldr	r0, [pc, #164]	@ (800122c <modify_can_frame_bit+0xd8>)
 8001188:	f00c f82e 	bl	800d1e8 <iprintf>
	       return;
 800118c:	e048      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }
	   if (bit_num > 8) {
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d903      	bls.n	800119c <modify_can_frame_bit+0x48>
		   printf("Wrong bit index");
 8001194:	4826      	ldr	r0, [pc, #152]	@ (8001230 <modify_can_frame_bit+0xdc>)
 8001196:	f00c f827 	bl	800d1e8 <iprintf>
		   return;
 800119a:	e041      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }

	   if(state)
 800119c:	793b      	ldrb	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01e      	beq.n	80011e0 <modify_can_frame_bit+0x8c>
		   frames[frameIndex].data[byte_num] |= (1 << bit_num);  // bit set by OR
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	4923      	ldr	r1, [pc, #140]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011a8:	202c      	movs	r0, #44	@ 0x2c
 80011aa:	fb00 f202 	mul.w	r2, r0, r2
 80011ae:	440a      	add	r2, r1
 80011b0:	4413      	add	r3, r2
 80011b2:	3324      	adds	r3, #36	@ 0x24
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	b2cc      	uxtb	r4, r1
 80011cc:	4919      	ldr	r1, [pc, #100]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011ce:	202c      	movs	r0, #44	@ 0x2c
 80011d0:	fb00 f202 	mul.w	r2, r0, r2
 80011d4:	440a      	add	r2, r1
 80011d6:	4413      	add	r3, r2
 80011d8:	3324      	adds	r3, #36	@ 0x24
 80011da:	4622      	mov	r2, r4
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e01f      	b.n	8001220 <modify_can_frame_bit+0xcc>
		else
		   frames[frameIndex].data[byte_num] &= ~(1 << bit_num); // bit unset BY AND
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	4913      	ldr	r1, [pc, #76]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011e6:	202c      	movs	r0, #44	@ 0x2c
 80011e8:	fb00 f202 	mul.w	r2, r0, r2
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	3324      	adds	r3, #36	@ 0x24
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	b25b      	sxtb	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	b259      	sxtb	r1, r3
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	b2cc      	uxtb	r4, r1
 800120e:	4909      	ldr	r1, [pc, #36]	@ (8001234 <modify_can_frame_bit+0xe0>)
 8001210:	202c      	movs	r0, #44	@ 0x2c
 8001212:	fb00 f202 	mul.w	r2, r0, r2
 8001216:	440a      	add	r2, r1
 8001218:	4413      	add	r3, r2
 800121a:	3324      	adds	r3, #36	@ 0x24
 800121c:	4622      	mov	r2, r4
 800121e:	701a      	strb	r2, [r3, #0]
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	0800dfd8 	.word	0x0800dfd8
 800122c:	0800dff0 	.word	0x0800dff0
 8001230:	0800e004 	.word	0x0800e004
 8001234:	20000000 	.word	0x20000000

08001238 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001244:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	201b      	movs	r0, #27
 8001262:	f001 ff85 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001266:	201b      	movs	r0, #27
 8001268:	f001 ff9c 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	44020c00 	.word	0x44020c00

08001278 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b48      	ldr	r3, [pc, #288]	@ (80013b0 <MX_GPIO_Init+0x138>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001294:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <MX_GPIO_Init+0x138>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129e:	4b44      	ldr	r3, [pc, #272]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ac:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b2:	4a3f      	ldr	r2, [pc, #252]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012bc:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d0:	4a37      	ldr	r2, [pc, #220]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ee:	4a30      	ldr	r2, [pc, #192]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800130c:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 800130e:	f003 fd2d 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001318:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <MX_GPIO_Init+0x140>)
 800131a:	f003 fd27 	bl	8004d6c <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800131e:	2200      	movs	r2, #0
 8001320:	f243 411e 	movw	r1, #13342	@ 0x341e
 8001324:	4825      	ldr	r0, [pc, #148]	@ (80013bc <MX_GPIO_Init+0x144>)
 8001326:	f003 fd21 	bl	8004d6c <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fuel_HVC_GPIO_Port, Fuel_HVC_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2120      	movs	r1, #32
 800132e:	4823      	ldr	r0, [pc, #140]	@ (80013bc <MX_GPIO_Init+0x144>)
 8001330:	f003 fd1c 	bl	8004d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 800134a:	f003 fbbd 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 800134e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 8001368:	f003 fbae 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800136c:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001370:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_GPIO_Init+0x140>)
 8001386:	f003 fb9f 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800138a:	f243 433e 	movw	r3, #13374	@ 0x343e
 800138e:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_GPIO_Init+0x144>)
 80013a4:	f003 fb90 	bl	8004ac8 <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	44020c00 	.word	0x44020c00
 80013b4:	42020800 	.word	0x42020800
 80013b8:	42020000 	.word	0x42020000
 80013bc:	42020400 	.word	0x42020400

080013c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <MX_I2C1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <MX_I2C1_Init+0x7c>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fa:	480e      	ldr	r0, [pc, #56]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013fc:	f003 fce8 	bl	8004dd0 <HAL_I2C_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001406:	f000 ff59 	bl	80022bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <MX_I2C1_Init+0x74>)
 800140e:	f004 fa0b 	bl	8005828 <HAL_I2CEx_ConfigAnalogFilter>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001418:	f000 ff50 	bl	80022bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_I2C1_Init+0x74>)
 8001420:	f004 fa4d 	bl	80058be <HAL_I2CEx_ConfigDigitalFilter>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800142a:	f000 ff47 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000016c 	.word	0x2000016c
 8001438:	40005400 	.word	0x40005400
 800143c:	60808cd3 	.word	0x60808cd3

08001440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0be      	sub	sp, #248	@ 0xf8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	22d0      	movs	r2, #208	@ 0xd0
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00c f809 	bl	800d478 <memset>
  if(i2cHandle->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <HAL_I2C_MspInit+0xc4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d145      	bne.n	80014fc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fa10 	bl	80068ac <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001492:	f000 ff13 	bl	80022bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	4a1a      	ldr	r2, [pc, #104]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b4:	23c0      	movs	r3, #192	@ 0xc0
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 80014da:	f003 faf5 	bl	8004ac8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 80014e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e4:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 80014f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014fc:	bf00      	nop
 80014fe:	37f8      	adds	r7, #248	@ 0xf8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005400 	.word	0x40005400
 8001508:	44020c00 	.word	0x44020c00
 800150c:	42020400 	.word	0x42020400

08001510 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001514:	2000      	movs	r0, #0
 8001516:	f004 fa1f 	bl	8005958 <HAL_ICACHE_ConfigAssociativityMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001520:	f000 fecc 	bl	80022bc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001524:	f004 fa38 	bl	8005998 <HAL_ICACHE_Enable>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800152e:	f000 fec5 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <SetTCON>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTCON(I2C_HandleTypeDef *hi2c, uint16_t value) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
    uint8_t data[3];

    // Rejestr TCON (0x04), Write = 00
    data[0] = (0x04 << 4) | 0x00;
 8001544:	2340      	movs	r3, #64	@ 0x40
 8001546:	733b      	strb	r3, [r7, #12]

    // 9-bitowa wartość TCON
    value &= 0x01FF;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154e:	807b      	strh	r3, [r7, #2]
    data[2] = (value >> 8) & 0x01; // MSB (1 bit)
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	73bb      	strb	r3, [r7, #14]
    data[1] = value & 0xFF;        // LSB (8 bitów)
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	737b      	strb	r3, [r7, #13]

    // Wysłanie komendy + 2 bajtów wartości
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2303      	movs	r3, #3
 8001572:	2158      	movs	r1, #88	@ 0x58
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f003 fcc7 	bl	8004f08 <HAL_I2C_Master_Transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <SetTCON+0x4e>
        printf("⚠️ Błąd zapisu do TCON!\n");
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <SetTCON+0x58>)
 8001582:	f00b fe99 	bl	800d2b8 <puts>
    }
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800e014 	.word	0x0800e014

08001594 <MCP4662_ReadTCON>:

uint16_t MCP4662_ReadTCON(I2C_HandleTypeDef *hi2c) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]
    uint8_t command_byte = (0x04 << 4) | 0x0C; // Rejestr TCON, CC = 11 (Read)
 800159c:	234c      	movs	r3, #76	@ 0x4c
 800159e:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 80015a0:	2300      	movs	r3, #0
 80015a2:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 80015a4:	f107 020d 	add.w	r2, r7, #13
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2301      	movs	r3, #1
 80015b0:	2158      	movs	r1, #88	@ 0x58
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f003 fca8 	bl	8004f08 <HAL_I2C_Master_Transmit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <MCP4662_ReadTCON+0x30>
        return 0xFFFF; // Kod błędu
 80015be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c2:	e01b      	b.n	80015fc <MCP4662_ReadTCON+0x68>
    }

    // Odczyt danych (9-bitowa wartość, ale zwracamy 16-bitową zmienną)
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80015c4:	f107 0208 	add.w	r2, r7, #8
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	2159      	movs	r1, #89	@ 0x59
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f003 fd8c 	bl	80050f0 <HAL_I2C_Master_Receive>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <MCP4662_ReadTCON+0x50>
        return 0xFFFF; // Kod błędu
 80015de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015e2:	e00b      	b.n	80015fc <MCP4662_ReadTCON+0x68>
    }

    // Połączenie danych (TCON ma 9 bitów, więc maskujemy)
    uint16_t tcon_value = ((data[0] << 8) | data[1]) & 0x01FF;
 80015e4:	7a3b      	ldrb	r3, [r7, #8]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	7a7b      	ldrb	r3, [r7, #9]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f8:	81fb      	strh	r3, [r7, #14]

    return tcon_value;
 80015fa:	89fb      	ldrh	r3, [r7, #14]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <__io_putchar>:

int __io_putchar(int ch) //function used to print() in usart
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d102      	bne.n	8001618 <__io_putchar+0x14>
    __io_putchar('\r');
 8001612:	200d      	movs	r0, #13
 8001614:	f7ff fff6 	bl	8001604 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	2201      	movs	r2, #1
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <__io_putchar+0x2c>)
 8001622:	f00a f9d9 	bl	800b9d8 <HAL_UART_Transmit>

  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000400 	.word	0x20000400

08001634 <ReadWiper>:
uint16_t ReadWiper(I2C_HandleTypeDef *hi2c, uint8_t wiper_reg) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
    uint8_t command_byte = (wiper_reg << 4) | 0x0C; // CC = 11 (Read)
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f043 030c 	orr.w	r3, r3, #12
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 8001650:	2300      	movs	r3, #0
 8001652:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001654:	f107 020d 	add.w	r2, r7, #13
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	2158      	movs	r1, #88	@ 0x58
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f003 fc50 	bl	8004f08 <HAL_I2C_Master_Transmit>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <ReadWiper+0x40>
        return 0xFFFF; // Kod błędu
 800166e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001672:	e01b      	b.n	80016ac <ReadWiper+0x78>
    }

    // Odczyt 10-bitowego wiper value
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2302      	movs	r3, #2
 8001680:	2159      	movs	r1, #89	@ 0x59
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f003 fd34 	bl	80050f0 <HAL_I2C_Master_Receive>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <ReadWiper+0x60>
        return 0xFFFF; // Kod błędu
 800168e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001692:	e00b      	b.n	80016ac <ReadWiper+0x78>
    }

    uint16_t wiper_value = ((data[0] << 8) | data[1]) & 0x03FF; // 10-bitowy wynik
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a8:	81fb      	strh	r3, [r7, #14]
    return wiper_value;
 80016aa:	89fb      	ldrh	r3, [r7, #14]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <wiper_command>:

void wiper_command(I2C_HandleTypeDef *hi2c, uint8_t wiper, uint8_t command) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
 80016c0:	4613      	mov	r3, r2
 80016c2:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd;

    if (wiper == 0) {
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <wiper_command+0x1c>
        cmd = command;  // Dla Wiper 0 (komendy 0x04 lub 0x08)
 80016ca:	78bb      	ldrb	r3, [r7, #2]
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e007      	b.n	80016e0 <wiper_command+0x2c>
    } else if (wiper == 1) {
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10f      	bne.n	80016f6 <wiper_command+0x42>
        cmd = command | 0x10; // Dodajemy bit 4, aby przełączyć na Wiper 1
 80016d6:	78bb      	ldrb	r3, [r7, #2]
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	73fb      	strb	r3, [r7, #15]
    } else {
        return; // Nieprawidłowy wybór wipera
    }

    HAL_I2C_Master_Transmit(hi2c, MCP4662_ADDR_WRITE, &cmd, 1, HAL_MAX_DELAY);
 80016e0:	f107 020f 	add.w	r2, r7, #15
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	2158      	movs	r1, #88	@ 0x58
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f003 fc0a 	bl	8004f08 <HAL_I2C_Master_Transmit>
 80016f4:	e000      	b.n	80016f8 <wiper_command+0x44>
        return; // Nieprawidłowy wybór wipera
 80016f6:	bf00      	nop
}
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <ESP32_SendCommand>:

void ESP32_SendCommand(const char* command) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7fe fdc5 	bl	8000298 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4808      	ldr	r0, [pc, #32]	@ (800173c <ESP32_SendCommand+0x3c>)
 800171a:	f00a f95d 	bl	800b9d8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	2202      	movs	r2, #2
 8001724:	4906      	ldr	r1, [pc, #24]	@ (8001740 <ESP32_SendCommand+0x40>)
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <ESP32_SendCommand+0x3c>)
 8001728:	f00a f956 	bl	800b9d8 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 800172c:	2064      	movs	r0, #100	@ 0x64
 800172e:	f001 fc43 	bl	8002fb8 <HAL_Delay>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000400 	.word	0x20000400
 8001740:	0800e034 	.word	0x0800e034

08001744 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800174e:	482e      	ldr	r0, [pc, #184]	@ (8001808 <InitAnalogIndicators+0xc4>)
 8001750:	f003 fb0c 	bl	8004d6c <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175a:	482c      	ldr	r0, [pc, #176]	@ (800180c <InitAnalogIndicators+0xc8>)
 800175c:	f003 fb06 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001766:	4829      	ldr	r0, [pc, #164]	@ (800180c <InitAnalogIndicators+0xc8>)
 8001768:	f003 fb00 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001772:	4826      	ldr	r0, [pc, #152]	@ (800180c <InitAnalogIndicators+0xc8>)
 8001774:	f003 fafa 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001778:	2200      	movs	r2, #0
 800177a:	2104      	movs	r1, #4
 800177c:	4823      	ldr	r0, [pc, #140]	@ (800180c <InitAnalogIndicators+0xc8>)
 800177e:	f003 faf5 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 8001782:	2201      	movs	r2, #1
 8001784:	2102      	movs	r1, #2
 8001786:	4821      	ldr	r0, [pc, #132]	@ (800180c <InitAnalogIndicators+0xc8>)
 8001788:	f003 faf0 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	481f      	ldr	r0, [pc, #124]	@ (8001810 <InitAnalogIndicators+0xcc>)
 8001792:	f003 faeb 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 8001796:	2200      	movs	r2, #0
 8001798:	2140      	movs	r1, #64	@ 0x40
 800179a:	481d      	ldr	r0, [pc, #116]	@ (8001810 <InitAnalogIndicators+0xcc>)
 800179c:	f003 fae6 	bl	8004d6c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 80017a0:	2200      	movs	r2, #0
 80017a2:	2120      	movs	r1, #32
 80017a4:	481a      	ldr	r0, [pc, #104]	@ (8001810 <InitAnalogIndicators+0xcc>)
 80017a6:	f003 fae1 	bl	8004d6c <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x0D);
 80017aa:	220d      	movs	r2, #13
 80017ac:	2100      	movs	r1, #0
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff fca4 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0xff);
 80017b4:	22ff      	movs	r2, #255	@ 0xff
 80017b6:	2101      	movs	r1, #1
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fc9f 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 0: Multiplexed Information
	 // Example: MUX_INFO[0] = 1, MUX_INFO[1] = 0, MUX_INFO[2] = 1, CAN_LEVEL = 0x11, OBD_STEUER = 0, MD_NORM = 0x3F
	 modify_can_frame_byte(FRAME_316, 0, 0x3F);  // Binary: 00111111
 80017be:	223f      	movs	r2, #63	@ 0x3f
 80017c0:	2100      	movs	r1, #0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc9a 	bl	80010fc <modify_can_frame_byte>
	 // Example: Engine Temp = 50°C, Calculation = (HEX * 0.75) - 48°C => HEX = (50 + 48) / 0.75 = 130.67 ~ 0x83
	 //modify_can_frame_byte(FRAME_316, 1, 0x83);  // 50°C

	 // Modify Byte 2: Ambient Pressure (AMP_CAN)
	 // Example: Pressure = 900hPa, Calculation = (HEX * 2) + 598 => HEX = (900 - 598) / 2 = 151
	 modify_can_frame_byte(FRAME_316, 2, 0x97);  // 900 hPa
 80017c8:	2297      	movs	r2, #151	@ 0x97
 80017ca:	2102      	movs	r1, #2
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fc95 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 3: Bitfield (Switch States)
	 // Example: LV_SWI_CLU = 1 (depressed), LV_LEVEL_IS = 0, LV_ACK_CRU_AD_ECU = 1 (ACK), LV_ERU_CAN = 1 (running)
	 // STATE_MSW_CAN[0] = 1 (Set), STATE_MSW_CAN[1] = 2 (Deceleration), STATE_MSW_CAN[2] = 3 (Resume)
	 modify_can_frame_byte(FRAME_316, 3, 0x97);  // Binary: 10010111 (depressed, ACK, engine running, set, deceleration, resume)
 80017d2:	2297      	movs	r2, #151	@ 0x97
 80017d4:	2103      	movs	r1, #3
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fc90 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 4: TPS Virtual CRU CAN (TPS_VIRT_CRU_CAN)
	 // Example: TPS_VIRT_CRU_CAN = 0.25 (Calculated by HEX * 0.390625)
	 // Let's assume HEX = 0x01, so 1 * 0.390625 = 0.390625 (0.25)
	 modify_can_frame_byte(FRAME_316, 4, 0x01);  // 0.25 as virtual throttle position
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fc8b 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 5: Accelerator Pedal Position (TPS_CAN)
	 // Example: 25% throttle, Calculation = HEX * 0.390625 => HEX = 25 / 0.390625 = 64
	 modify_can_frame_byte(FRAME_316, 5, 0x40);  // 25% throttle position
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	2105      	movs	r1, #5
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fc86 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 6: Bitfield (Brake Switch, Kickdown, etc.)
	 // Example: LV_BS = 0 (not actuated), LV_ERR_BS = 0 (OK), LV_KD_CAN = 1 (active), STATE_CRU_CAN[1] = 1 (constant drive)
	 modify_can_frame_byte(FRAME_316, 6, 0xF2);  // Binary: 11110010 (kickdown active, constant drive)
 80017f0:	22f2      	movs	r2, #242	@ 0xf2
 80017f2:	2106      	movs	r1, #6
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fc81 	bl	80010fc <modify_can_frame_byte>

	 // Modify Byte 7: Unused
	 // As Byte 7 is unused, we set it to 0x00 for simplicity
	 modify_can_frame_byte(FRAME_316, 7, 0x00);  // Unused byte
 80017fa:	2200      	movs	r2, #0
 80017fc:	2107      	movs	r1, #7
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc7c 	bl	80010fc <modify_can_frame_byte>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	42020800 	.word	0x42020800
 800180c:	42020400 	.word	0x42020400
 8001810:	42020000 	.word	0x42020000

08001814 <parse_frame>:
    uint16_t fuel_scaled = (uint16_t)((fuel_consumption / max_consumption) * 0xFFFF);
    return fuel_scaled;
}


void parse_frame(uint8_t *buffer) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]


    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4baf      	ldr	r3, [pc, #700]	@ (8001ae8 <parse_frame+0x2d4>)
 800182c:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3304      	adds	r3, #4
 8001832:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4baa      	ldr	r3, [pc, #680]	@ (8001ae8 <parse_frame+0x2d4>)
 8001840:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	3304      	adds	r3, #4
 8001846:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	4ba5      	ldr	r3, [pc, #660]	@ (8001ae8 <parse_frame+0x2d4>)
 8001854:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3302      	adds	r3, #2
 800185a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae8 <parse_frame+0x2d4>)
 8001866:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae8 <parse_frame+0x2d4>)
 8001878:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	3301      	adds	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b97      	ldr	r3, [pc, #604]	@ (8001ae8 <parse_frame+0x2d4>)
 800188c:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	3304      	adds	r3, #4
 8001892:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b92      	ldr	r3, [pc, #584]	@ (8001ae8 <parse_frame+0x2d4>)
 80018a0:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	3304      	adds	r3, #4
 80018a6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae8 <parse_frame+0x2d4>)
 80018b4:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	3304      	adds	r3, #4
 80018ba:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b88      	ldr	r3, [pc, #544]	@ (8001ae8 <parse_frame+0x2d4>)
 80018c8:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3304      	adds	r3, #4
 80018ce:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b83      	ldr	r3, [pc, #524]	@ (8001ae8 <parse_frame+0x2d4>)
 80018dc:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	3304      	adds	r3, #4
 80018e2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae8 <parse_frame+0x2d4>)
 80018f0:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	3304      	adds	r3, #4
 80018f6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b79      	ldr	r3, [pc, #484]	@ (8001ae8 <parse_frame+0x2d4>)
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3304      	adds	r3, #4
 800190a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b74      	ldr	r3, [pc, #464]	@ (8001ae8 <parse_frame+0x2d4>)
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3304      	adds	r3, #4
 800191e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <parse_frame+0x2d4>)
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3304      	adds	r3, #4
 8001932:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae8 <parse_frame+0x2d4>)
 8001940:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	3304      	adds	r3, #4
 8001946:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b65      	ldr	r3, [pc, #404]	@ (8001ae8 <parse_frame+0x2d4>)
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3304      	adds	r3, #4
 800195a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b60      	ldr	r3, [pc, #384]	@ (8001ae8 <parse_frame+0x2d4>)
 8001968:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3304      	adds	r3, #4
 800196e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	441a      	add	r2, r3
 8001976:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae8 <parse_frame+0x2d4>)
 8001978:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800197c:	4613      	mov	r3, r2
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3310      	adds	r3, #16
 800198c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	441a      	add	r2, r3
 8001994:	4b54      	ldr	r3, [pc, #336]	@ (8001ae8 <parse_frame+0x2d4>)
 8001996:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 800199a:	4613      	mov	r3, r2
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3310      	adds	r3, #16
 80019aa:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <parse_frame+0x2d4>)
 80019b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 80019ba:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <parse_frame+0x2d4>)
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdd6 	bl	8000570 <__aeabi_f2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <parse_frame+0x2d8>)
 80019ca:	f7fe ff53 	bl	8000874 <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f835 	bl	8000a44 <__aeabi_d2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 80019de:	89bb      	ldrh	r3, [r7, #12]
 80019e0:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 80019e2:	89bb      	ldrh	r3, [r7, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	72bb      	strb	r3, [r7, #10]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 80019ea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <parse_frame+0x2d4>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdbe 	bl	8000570 <__aeabi_f2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <parse_frame+0x2dc>)
 80019fa:	f7fe fc5b 	bl	80002b4 <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <parse_frame+0x2e0>)
 8001a0c:	f7fe ff32 	bl	8000874 <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f814 	bl	8000a44 <__aeabi_d2uiz>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a22:	891b      	ldrh	r3, [r3, #8]
 8001a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <parse_frame+0x2e4>)
 8001a34:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a38:	891b      	ldrh	r3, [r3, #8]
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <parse_frame+0x2e8>)
 8001a4a:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001a4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a4e:	891b      	ldrh	r3, [r3, #8]
 8001a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b28      	ldr	r3, [pc, #160]	@ (8001b00 <parse_frame+0x2ec>)
 8001a60:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <parse_frame+0x2f0>)
 8001a76:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <parse_frame+0x2f4>)
 8001a8c:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <parse_frame+0x2d4>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <parse_frame+0x2f8>)
 8001aa2:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <parse_frame+0x2d4>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf14      	ite	ne
 8001ab0:	2301      	movne	r3, #1
 8001ab2:	2300      	moveq	r3, #0
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <parse_frame+0x2fc>)
 8001ab8:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <parse_frame+0x2d4>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <parse_frame+0x300>)
 8001ace:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <parse_frame+0x2d4>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <parse_frame+0x304>)
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e019      	b.n	8001b1c <parse_frame+0x308>
 8001ae8:	200002a4 	.word	0x200002a4
 8001aec:	3fc40000 	.word	0x3fc40000
 8001af0:	40480000 	.word	0x40480000
 8001af4:	3fe80000 	.word	0x3fe80000
 8001af8:	20000308 	.word	0x20000308
 8001afc:	20000309 	.word	0x20000309
 8001b00:	2000030a 	.word	0x2000030a
 8001b04:	2000030b 	.word	0x2000030b
 8001b08:	2000030c 	.word	0x2000030c
 8001b0c:	2000030d 	.word	0x2000030d
 8001b10:	2000030e 	.word	0x2000030e
 8001b14:	2000030f 	.word	0x2000030f
 8001b18:	20000310 	.word	0x20000310
    isBatteryWarning = frame.showLights & DL_BATTERY;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <parse_frame+0x3b8>)
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <parse_frame+0x3bc>)
 8001b30:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <parse_frame+0x3b8>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <parse_frame+0x3c0>)
 8001b46:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <parse_frame+0x3b8>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <parse_frame+0x3c4>)
 8001b5c:	701a      	strb	r2, [r3, #0]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2102      	movs	r1, #2
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fac9 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 8001b6a:	7abb      	ldrb	r3, [r7, #10]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2103      	movs	r1, #3
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fac3 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001b76:	7a7b      	ldrb	r3, [r7, #9]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff fabd 	bl	80010fc <modify_can_frame_byte>

    if(frame.engTemp >= 129)
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <parse_frame+0x3b8>)
 8001b84:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b88:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001bdc <parse_frame+0x3c8>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	db06      	blt.n	8001ba4 <parse_frame+0x390>
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 1);
 8001b96:	2301      	movs	r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7ff fad9 	bl	8001154 <modify_can_frame_bit>
 8001ba2:	e00b      	b.n	8001bbc <parse_frame+0x3a8>
    }
    else
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 0);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	2103      	movs	r1, #3
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7ff fad2 	bl	8001154 <modify_can_frame_bit>
    	modify_can_frame_bit(FRAME_545, 3, 7, 1);
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7ff facc 	bl	8001154 <modify_can_frame_bit>
    }


    HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);  // Diagnostyka
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4808      	ldr	r0, [pc, #32]	@ (8001be0 <parse_frame+0x3cc>)
 8001bc0:	f003 f8ec 	bl	8004d9c <HAL_GPIO_TogglePin>
//    uint8_t fuel_lsb = fuel_value & 0xFF;
//    uint8_t fuel_msb = (fuel_value >> 8) & 0xFF;
//
//    modify_can_frame_byte(FRAME_545, 1, fuel_lsb);
//    modify_can_frame_byte(FRAME_545, 2, fuel_msb);
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	200002a4 	.word	0x200002a4
 8001bd0:	20000311 	.word	0x20000311
 8001bd4:	20000312 	.word	0x20000312
 8001bd8:	20000313 	.word	0x20000313
 8001bdc:	43010000 	.word	0x43010000
 8001be0:	42020400 	.word	0x42020400

08001be4 <calculate_checksum>:


uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73bb      	strb	r3, [r7, #14]
 8001bf8:	e009      	b.n	8001c0e <calculate_checksum+0x2a>
        checksum ^= data[i];
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	4053      	eors	r3, r2
 8001c06:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	73bb      	strb	r3, [r7, #14]
 8001c0e:	7bba      	ldrb	r2, [r7, #14]
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3f1      	bcc.n	8001bfa <calculate_checksum+0x16>
    }
    return checksum;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	4603      	mov	r3, r0
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	717b      	strb	r3, [r7, #5]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 8001c4a:	797b      	ldrb	r3, [r7, #5]
 8001c4c:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001c4e:	793b      	ldrb	r3, [r7, #4]
 8001c50:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001c52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c56:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 8001c58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c5c:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001c5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c62:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 8001c68:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c6c:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 8001c6e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffb1 	bl	8001be4 <calculate_checksum>
 8001c82:	4603      	mov	r3, r0
 8001c84:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001c86:	230a      	movs	r3, #10
 8001c88:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001c8a:	f107 010c 	add.w	r1, r7, #12
 8001c8e:	2364      	movs	r3, #100	@ 0x64
 8001c90:	220a      	movs	r2, #10
 8001c92:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <Send_KBUS_frame+0x7c>)
 8001c94:	f009 fea0 	bl	800b9d8 <HAL_UART_Transmit>
}
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000494 	.word	0x20000494

08001ca4 <process_frame>:


void process_frame(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <process_frame+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001cb0:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <process_frame+0x20>)
 8001cb2:	f7ff fdaf 	bl	8001814 <parse_frame>
        frameReady = false;
 8001cb6:	4b02      	ldr	r3, [pc, #8]	@ (8001cc0 <process_frame+0x1c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    }
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200002a2 	.word	0x200002a2
 8001cc4:	20000240 	.word	0x20000240

08001cc8 <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a22      	ldr	r2, [pc, #136]	@ (8001d68 <Set_PWM_Frequency+0xa0>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	441a      	add	r2, r3
 8001ce4:	1212      	asrs	r2, r2, #8
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	3319      	adds	r3, #25
 8001cec:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d817      	bhi.n	8001d28 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <Set_PWM_Frequency+0xa4>)
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0a:	d302      	bcc.n	8001d12 <Set_PWM_Frequency+0x4a>
 8001d0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d10:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3301      	adds	r3, #1
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <Set_PWM_Frequency+0xa4>)
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e007      	b.n	8001d38 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d6c <Set_PWM_Frequency+0xa4>)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3e:	d302      	bcc.n	8001d46 <Set_PWM_Frequency+0x7e>
 8001d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d44:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <Set_PWM_Frequency+0xa8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <Set_PWM_Frequency+0xa8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d56:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <Set_PWM_Frequency+0xa8>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	f2b9d649 	.word	0xf2b9d649
 8001d6c:	0ee6b280 	.word	0x0ee6b280
 8001d70:	2000031c 	.word	0x2000031c
 8001d74:	00000000 	.word	0x00000000

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7e:	f001 f85d 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d82:	f000 f905 	bl	8001f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d86:	f7ff fa77 	bl	8001278 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001d8a:	f7ff fa55 	bl	8001238 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001d8e:	f000 fe89 	bl	8002aa4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001d92:	f000 fc59 	bl	8002648 <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001d96:	f7ff fbbb 	bl	8001510 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001d9a:	f7ff f84f 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001d9e:	f000 fd05 	bl	80027ac <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001da2:	f000 fecb 	bl	8002b3c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001da6:	f000 fd75 	bl	8002894 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001daa:	f7ff fb09 	bl	80013c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dae:	2104      	movs	r1, #4
 8001db0:	486d      	ldr	r0, [pc, #436]	@ (8001f68 <main+0x1f0>)
 8001db2:	f008 f9c7 	bl	800a144 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001db6:	486d      	ldr	r0, [pc, #436]	@ (8001f6c <main+0x1f4>)
 8001db8:	f7ff fca2 	bl	8001700 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Wi-Fi //AT+CWJAP="PLAY_Swiatlowod_19A1","t8Xv9auf7Z#D" - if connection lost/MCU replaced
  HAL_Delay(5000);
 8001dbc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001dc0:	f001 f8fa 	bl	8002fb8 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001dc4:	486a      	ldr	r0, [pc, #424]	@ (8001f70 <main+0x1f8>)
 8001dc6:	f7ff fc9b 	bl	8001700 <ESP32_SendCommand>
  HAL_Delay(1000);
 8001dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dce:	f001 f8f3 	bl	8002fb8 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4967      	ldr	r1, [pc, #412]	@ (8001f74 <main+0x1fc>)
 8001dd6:	4868      	ldr	r0, [pc, #416]	@ (8001f78 <main+0x200>)
 8001dd8:	f009 fe9c 	bl	800bb14 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001ddc:	4867      	ldr	r0, [pc, #412]	@ (8001f7c <main+0x204>)
 8001dde:	f008 f841 	bl	8009e64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001de2:	4867      	ldr	r0, [pc, #412]	@ (8001f80 <main+0x208>)
 8001de4:	f008 f83e 	bl	8009e64 <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 8001de8:	f7ff f90c 	bl	8001004 <InitCANFrames>
  InitAnalogIndicators();
 8001dec:	f7ff fcaa 	bl	8001744 <InitAnalogIndicators>


  uint8_t increasing0 = 1, increasing1 = 1; // Flagi dla obu wiperów
 8001df0:	2301      	movs	r3, #1
 8001df2:	75fb      	strb	r3, [r7, #23]
 8001df4:	2301      	movs	r3, #1
 8001df6:	75bb      	strb	r3, [r7, #22]
  uint8_t reset_cmd = 0x06; // Komenda General Call Reset
 8001df8:	2306      	movs	r3, #6
 8001dfa:	757b      	strb	r3, [r7, #21]
//HAL_I2C_Master_Transmit(&hi2c1, 0x00, &reset_cmd, 1, HAL_MAX_DELAY);
HAL_Delay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f001 f8db 	bl	8002fb8 <HAL_Delay>
SetTCON(&hi2c1, 0xbb );  // Podłącza piny A, W, B dla obu wiperów  //0x34 //0xBB - HW ON -A OFF  //33 - HW OFF
 8001e02:	21bb      	movs	r1, #187	@ 0xbb
 8001e04:	485f      	ldr	r0, [pc, #380]	@ (8001f84 <main+0x20c>)
 8001e06:	f7ff fb97 	bl	8001538 <SetTCON>
HAL_Delay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f001 f8d4 	bl	8002fb8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 process_frame();
 8001e10:	f7ff ff48 	bl	8001ca4 <process_frame>
	 speed = frame.speed * 3.6;
 8001e14:	4b5c      	ldr	r3, [pc, #368]	@ (8001f88 <main+0x210>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fba9 	bl	8000570 <__aeabi_f2d>
 8001e1e:	a350      	add	r3, pc, #320	@ (adr r3, 8001f60 <main+0x1e8>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fbfc 	bl	8000620 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe28 	bl	8000a84 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a55      	ldr	r2, [pc, #340]	@ (8001f8c <main+0x214>)
 8001e38:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001e3a:	4b54      	ldr	r3, [pc, #336]	@ (8001f8c <main+0x214>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e44:	ee17 3a90 	vmov	r3, s15
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff3c 	bl	8001cc8 <Set_PWM_Frequency>
////////////////////////
     uint16_t wiper0 = ReadWiper(&hi2c1, VOLATILE_WIPER_0); // Wiper 0
 8001e50:	2100      	movs	r1, #0
 8001e52:	484c      	ldr	r0, [pc, #304]	@ (8001f84 <main+0x20c>)
 8001e54:	f7ff fbee 	bl	8001634 <ReadWiper>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	827b      	strh	r3, [r7, #18]
     uint16_t wiper1 = ReadWiper(&hi2c1, VOLATILE_WIPER_1); // Wiper 1
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4849      	ldr	r0, [pc, #292]	@ (8001f84 <main+0x20c>)
 8001e60:	f7ff fbe8 	bl	8001634 <ReadWiper>
 8001e64:	4603      	mov	r3, r0
 8001e66:	823b      	strh	r3, [r7, #16]
     uint16_t tcon = MCP4662_ReadTCON(&hi2c1);  // TCON
 8001e68:	4846      	ldr	r0, [pc, #280]	@ (8001f84 <main+0x20c>)
 8001e6a:	f7ff fb93 	bl	8001594 <MCP4662_ReadTCON>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	81fb      	strh	r3, [r7, #14]

     //WriteWiper(&hi2c1, VOLATILE_WIPER_0, 0x80);
     //WriteWiper(&hi2c1, VOLATILE_WIPER_1, 0x80);
//
//      Interpretacja bitów:
         uint8_t GCEN = (tcon >> 8) & 0x01;  // Bit 8 (GCEN)
 8001e72:	89fb      	ldrh	r3, [r7, #14]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	737b      	strb	r3, [r7, #13]
         uint8_t R1HW = (tcon >> 7) & 0x01;  // Bit 7
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	09db      	lsrs	r3, r3, #7
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	733b      	strb	r3, [r7, #12]
         uint8_t R1A  = (tcon >> 6) & 0x01;  // Bit 6
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	72fb      	strb	r3, [r7, #11]
         uint8_t R1W  = (tcon >> 5) & 0x01;  // Bit 5
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	72bb      	strb	r3, [r7, #10]
         uint8_t R1B  = (tcon >> 4) & 0x01;  // Bit 4
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	727b      	strb	r3, [r7, #9]
         uint8_t R0HW = (tcon >> 3) & 0x01;  // Bit 3
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	723b      	strb	r3, [r7, #8]
         uint8_t R0A  = (tcon >> 2) & 0x01;  // Bit 2
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	71fb      	strb	r3, [r7, #7]
         uint8_t R0W  = (tcon >> 1) & 0x01;  // Bit 1
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	71bb      	strb	r3, [r7, #6]
         uint8_t R0B  = (tcon >> 0) & 0x01;  // Bit 0
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	717b      	strb	r3, [r7, #5]
//         //HAL_Delay(50); // Czekaj dla stabilności
//     }
//     HAL_Delay(250); // Opóźnienie dla stabilnego działania
/////////////////////////////////////

         uint16_t target0 = (uint16_t)(0.01 * 255);//0.1 - 570ohm/off  0=1/4   0.01= ~half 0.03-half
 8001eec:	2302      	movs	r3, #2
 8001eee:	807b      	strh	r3, [r7, #2]
         uint16_t target1 = (uint16_t)(0.01 * 255);
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	803b      	strh	r3, [r7, #0]

             if (wiper0 < target0) {
 8001ef4:	8a7a      	ldrh	r2, [r7, #18]
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d208      	bcs.n	8001f0e <main+0x196>
                 wiper_command(&hi2c1, 0, 0x04); // Inkrementacja
 8001efc:	2204      	movs	r2, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4820      	ldr	r0, [pc, #128]	@ (8001f84 <main+0x20c>)
 8001f02:	f7ff fbd7 	bl	80016b4 <wiper_command>
                 wiper0++;
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	827b      	strh	r3, [r7, #18]
 8001f0c:	e00b      	b.n	8001f26 <main+0x1ae>
             } else if (wiper0 > target0) {
 8001f0e:	8a7a      	ldrh	r2, [r7, #18]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d907      	bls.n	8001f26 <main+0x1ae>
                 wiper_command(&hi2c1, 0, 0x08); // Dekrementacja
 8001f16:	2208      	movs	r2, #8
 8001f18:	2100      	movs	r1, #0
 8001f1a:	481a      	ldr	r0, [pc, #104]	@ (8001f84 <main+0x20c>)
 8001f1c:	f7ff fbca 	bl	80016b4 <wiper_command>
                 wiper0--;
 8001f20:	8a7b      	ldrh	r3, [r7, #18]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	827b      	strh	r3, [r7, #18]
             }

             if (wiper1 < target1) {
 8001f26:	8a3a      	ldrh	r2, [r7, #16]
 8001f28:	883b      	ldrh	r3, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d208      	bcs.n	8001f40 <main+0x1c8>
                 wiper_command(&hi2c1, 1, 0x04); // Inkrementacja
 8001f2e:	2204      	movs	r2, #4
 8001f30:	2101      	movs	r1, #1
 8001f32:	4814      	ldr	r0, [pc, #80]	@ (8001f84 <main+0x20c>)
 8001f34:	f7ff fbbe 	bl	80016b4 <wiper_command>
                 wiper1++;
 8001f38:	8a3b      	ldrh	r3, [r7, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	823b      	strh	r3, [r7, #16]
 8001f3e:	e767      	b.n	8001e10 <main+0x98>
             } else if (wiper1 > target1) {
 8001f40:	8a3a      	ldrh	r2, [r7, #16]
 8001f42:	883b      	ldrh	r3, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f67f af63 	bls.w	8001e10 <main+0x98>
                 wiper_command(&hi2c1, 1, 0x08); // Dekrementacja
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <main+0x20c>)
 8001f50:	f7ff fbb0 	bl	80016b4 <wiper_command>
                 wiper1--;
 8001f54:	8a3b      	ldrh	r3, [r7, #16]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	823b      	strh	r3, [r7, #16]
  {
 8001f5a:	e759      	b.n	8001e10 <main+0x98>
 8001f5c:	f3af 8000 	nop.w
 8001f60:	cccccccd 	.word	0xcccccccd
 8001f64:	400ccccc 	.word	0x400ccccc
 8001f68:	2000031c 	.word	0x2000031c
 8001f6c:	0800e078 	.word	0x0800e078
 8001f70:	0800e080 	.word	0x0800e080
 8001f74:	200001c0 	.word	0x200001c0
 8001f78:	20000400 	.word	0x20000400
 8001f7c:	20000368 	.word	0x20000368
 8001f80:	200003b4 	.word	0x200003b4
 8001f84:	2000016c 	.word	0x2000016c
 8001f88:	200002a4 	.word	0x200002a4
 8001f8c:	20000304 	.word	0x20000304

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09c      	sub	sp, #112	@ 0x70
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2250      	movs	r2, #80	@ 0x50
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00b fa6a 	bl	800d478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <SystemClock_Config+0xdc>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	@ (800206c <SystemClock_Config+0xdc>)
 8001fbc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001fc0:	6113      	str	r3, [r2, #16]
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <SystemClock_Config+0xdc>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001fce:	bf00      	nop
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <SystemClock_Config+0xdc>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d1f9      	bne.n	8001fd0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001fea:	2303      	movs	r3, #3
 8001fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001ff2:	233e      	movs	r3, #62	@ 0x3e
 8001ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8002002:	230c      	movs	r3, #12
 8002004:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002006:	2300      	movs	r3, #0
 8002008:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800200a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fccf 	bl	80059b8 <HAL_RCC_OscConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002020:	f000 f94c 	bl	80022bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002024:	231f      	movs	r3, #31
 8002026:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002028:	2303      	movs	r3, #3
 800202a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	2105      	movs	r1, #5
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f8f0 	bl	8006228 <HAL_RCC_ClockConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800204e:	f000 f935 	bl	80022bc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <SystemClock_Config+0xe0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SystemClock_Config+0xe0>)
 800205c:	f043 0320 	orr.w	r3, r3, #32
 8002060:	6013      	str	r3, [r2, #0]
}
 8002062:	bf00      	nop
 8002064:	3770      	adds	r7, #112	@ 0x70
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	44020800 	.word	0x44020800
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800207c:	2108      	movs	r1, #8
 800207e:	482e      	ldr	r0, [pc, #184]	@ (8002138 <HAL_UART_RxCpltCallback+0xc4>)
 8002080:	f002 fe8c 	bl	8004d9c <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a2c      	ldr	r2, [pc, #176]	@ (800213c <HAL_UART_RxCpltCallback+0xc8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d150      	bne.n	8002130 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 800208e:	4b2c      	ldr	r3, [pc, #176]	@ (8002140 <HAL_UART_RxCpltCallback+0xcc>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <HAL_UART_RxCpltCallback+0xd0>)
 8002094:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d813      	bhi.n	80020c6 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 800209e:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b29      	ldr	r3, [pc, #164]	@ (800214c <HAL_UART_RxCpltCallback+0xd8>)
 80020a6:	5c9a      	ldrb	r2, [r3, r2]
 80020a8:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <HAL_UART_RxCpltCallback+0xd0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e033      	b.n	8002126 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e02f      	b.n	8002126 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d10d      	bne.n	80020ea <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 80020ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_UART_RxCpltCallback+0xd0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80020d4:	d127      	bne.n	8002126 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 80020e0:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e01d      	b.n	8002126 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b5f      	cmp	r3, #95	@ 0x5f
 80020f0:	d80a      	bhi.n	8002108 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 80020f2:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	b2d1      	uxtb	r1, r2
 80020fa:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 80020fc:	7011      	strb	r1, [r2, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_UART_RxCpltCallback+0xd0>)
 8002102:	7819      	ldrb	r1, [r3, #0]
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_UART_RxCpltCallback+0xe0>)
 8002106:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b5f      	cmp	r3, #95	@ 0x5f
 800210e:	d90a      	bls.n	8002126 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_UART_RxCpltCallback+0xe4>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
                process_frame();
 8002116:	f7ff fdc5 	bl	8001ca4 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_UART_RxCpltCallback+0xd4>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_UART_RxCpltCallback+0xdc>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8002126:	2201      	movs	r2, #1
 8002128:	4905      	ldr	r1, [pc, #20]	@ (8002140 <HAL_UART_RxCpltCallback+0xcc>)
 800212a:	480c      	ldr	r0, [pc, #48]	@ (800215c <HAL_UART_RxCpltCallback+0xe8>)
 800212c:	f009 fcf2 	bl	800bb14 <HAL_UART_Receive_DMA>
    }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	42020400 	.word	0x42020400
 800213c:	40013800 	.word	0x40013800
 8002140:	200001c0 	.word	0x200001c0
 8002144:	20000314 	.word	0x20000314
 8002148:	200002a0 	.word	0x200002a0
 800214c:	0800e0ac 	.word	0x0800e0ac
 8002150:	200002a1 	.word	0x200002a1
 8002154:	20000240 	.word	0x20000240
 8002158:	200002a2 	.word	0x200002a2
 800215c:	20000400 	.word	0x20000400

08002160 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a49      	ldr	r2, [pc, #292]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8002170:	2000      	movs	r0, #0
 8002172:	f7fe ff9b 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 8002176:	2001      	movs	r0, #1
 8002178:	f7fe ff98 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 800217c:	2002      	movs	r0, #2
 800217e:	f7fe ff95 	bl	80010ac <SendCANFrame>
	    // SendCANFrame(FRAME_1F3); 20 ms refresh rate Its sent out by the tractiuon control module DSC at a refresh rate of 20ms
	    //AX and AY maybe stand for accelleration X and Y axis of the car.
	 }
	 if (htim == &htim3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a43      	ldr	r2, [pc, #268]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d17d      	bne.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x126>
	 {
		bool anyConditionMet = false;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 800218e:	2300      	movs	r3, #0
 8002190:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x42>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 800219a:	2307      	movs	r3, #7
 800219c:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 80021a2:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x56>
			command = command | TURN_LEFT;
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x6a>
			command = command | TURN_RIGHT;
 80021be:	7bbb      	ldrb	r3, [r7, #14]
 80021c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021c4:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00d      	beq.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x92>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 80021d6:	2307      	movs	r3, #7
 80021d8:	9303      	str	r3, [sp, #12]
 80021da:	2300      	movs	r3, #0
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2300      	movs	r3, #0
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2300      	movs	r3, #0
 80021e8:	225b      	movs	r2, #91	@ 0x5b
 80021ea:	21bf      	movs	r1, #191	@ 0xbf
 80021ec:	20d0      	movs	r0, #208	@ 0xd0
 80021ee:	f7ff fd19 	bl	8001c24 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 80021f2:	7bbb      	ldrb	r3, [r7, #14]
 80021f4:	2207      	movs	r2, #7
 80021f6:	9203      	str	r2, [sp, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	9202      	str	r2, [sp, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	225b      	movs	r2, #91	@ 0x5b
 8002206:	21bf      	movs	r1, #191	@ 0xbf
 8002208:	20d0      	movs	r0, #208	@ 0xd0
 800220a:	f7ff fd0b 	bl	8001c24 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 800220e:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800221c:	f002 fda6 	bl	8004d6c <HAL_GPIO_WritePin>
 8002220:	e004      	b.n	800222c <HAL_TIM_PeriodElapsedCallback+0xcc>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8002222:	2200      	movs	r2, #0
 8002224:	2104      	movs	r1, #4
 8002226:	4820      	ldr	r0, [pc, #128]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002228:	f002 fda0 	bl	8004d6c <HAL_GPIO_WritePin>
		if (isOilWarning) {
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_TIM_PeriodElapsedCallback+0xe0>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 8002234:	2201      	movs	r2, #1
 8002236:	2140      	movs	r1, #64	@ 0x40
 8002238:	481d      	ldr	r0, [pc, #116]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800223a:	f002 fd97 	bl	8004d6c <HAL_GPIO_WritePin>
 800223e:	e004      	b.n	800224a <HAL_TIM_PeriodElapsedCallback+0xea>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 8002240:	2200      	movs	r2, #0
 8002242:	2140      	movs	r1, #64	@ 0x40
 8002244:	481a      	ldr	r0, [pc, #104]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002246:	f002 fd91 	bl	8004d6c <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 800224a:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2120      	movs	r1, #32
 8002256:	4816      	ldr	r0, [pc, #88]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002258:	f002 fd88 	bl	8004d6c <HAL_GPIO_WritePin>
 800225c:	e004      	b.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x108>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	2120      	movs	r1, #32
 8002262:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002264:	f002 fd82 	bl	8004d6c <HAL_GPIO_WritePin>
		if (isABSActive) {
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	2102      	movs	r1, #2
 8002274:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002276:	f002 fd79 	bl	8004d6c <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 800227a:	e004      	b.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x126>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 800227c:	2201      	movs	r2, #1
 800227e:	2102      	movs	r1, #2
 8002280:	4809      	ldr	r0, [pc, #36]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002282:	f002 fd73 	bl	8004d6c <HAL_GPIO_WritePin>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000368 	.word	0x20000368
 8002294:	200003b4 	.word	0x200003b4
 8002298:	2000030c 	.word	0x2000030c
 800229c:	20000312 	.word	0x20000312
 80022a0:	20000313 	.word	0x20000313
 80022a4:	2000030d 	.word	0x2000030d
 80022a8:	42020400 	.word	0x42020400
 80022ac:	20000310 	.word	0x20000310
 80022b0:	42020000 	.word	0x42020000
 80022b4:	20000311 	.word	0x20000311
 80022b8:	2000030f 	.word	0x2000030f

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c0:	b672      	cpsid	i
}
 80022c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 80022c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c8:	4801      	ldr	r0, [pc, #4]	@ (80022d0 <Error_Handler+0x14>)
 80022ca:	f002 fd67 	bl	8004d9c <HAL_GPIO_TogglePin>
 80022ce:	e7f9      	b.n	80022c4 <Error_Handler+0x8>
 80022d0:	42020000 	.word	0x42020000

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e6:	bf00      	nop
 80022e8:	e7fd      	b.n	80022e6 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	bf00      	nop
 80022f0:	e7fd      	b.n	80022ee <HardFault_Handler+0x4>

080022f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f6:	bf00      	nop
 80022f8:	e7fd      	b.n	80022f6 <MemManage_Handler+0x4>

080022fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	bf00      	nop
 8002300:	e7fd      	b.n	80022fe <BusFault_Handler+0x4>

08002302 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002338:	f000 fe1e 	bl	8002f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002346:	f001 fa1c 	bl	8003782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000528 	.word	0x20000528

08002354 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <FDCAN1_IT0_IRQHandler+0x10>)
 800235a:	f002 f93d 	bl	80045d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000108 	.word	0x20000108

08002368 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <FDCAN1_IT1_IRQHandler+0x10>)
 800236e:	f002 f933 	bl	80045d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000108 	.word	0x20000108

0800237c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <TIM1_BRK_IRQHandler+0x10>)
 8002382:	f008 f823 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000031c 	.word	0x2000031c

08002390 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <TIM1_UP_IRQHandler+0x10>)
 8002396:	f008 f819 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000031c 	.word	0x2000031c

080023a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80023aa:	f008 f80f 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000031c 	.word	0x2000031c

080023b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <TIM1_CC_IRQHandler+0x10>)
 80023be:	f008 f805 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000031c 	.word	0x2000031c

080023cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <TIM2_IRQHandler+0x10>)
 80023d2:	f007 fffb 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000368 	.word	0x20000368

080023e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <TIM3_IRQHandler+0x10>)
 80023e6:	f007 fff1 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200003b4 	.word	0x200003b4

080023f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <USART1_IRQHandler+0x10>)
 80023fa:	f009 fbdd 	bl	800bbb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000400 	.word	0x20000400

08002408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e00a      	b.n	8002430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800241a:	f3af 8000 	nop.w
 800241e:	4601      	mov	r1, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf0      	blt.n	800241a <_read+0x12>
  }

  return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e009      	b.n	8002468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff f8d1 	bl	8001604 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf1      	blt.n	8002454 <_write+0x12>
  }
  return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_close>:

int _close(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024a2:	605a      	str	r2, [r3, #4]
  return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_isatty>:

int _isatty(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ec:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <_sbrk+0x5c>)
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <_sbrk+0x60>)
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002500:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <_sbrk+0x64>)
 8002502:	4a12      	ldr	r2, [pc, #72]	@ (800254c <_sbrk+0x68>)
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	d207      	bcs.n	8002524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002514:	f00a fffe 	bl	800d514 <__errno>
 8002518:	4603      	mov	r3, r0
 800251a:	220c      	movs	r2, #12
 800251c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e009      	b.n	8002538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252a:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <_sbrk+0x64>)
 8002534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20044000 	.word	0x20044000
 8002544:	00000400 	.word	0x00000400
 8002548:	20000318 	.word	0x20000318
 800254c:	200006f0 	.word	0x200006f0

08002550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002556:	4b35      	ldr	r3, [pc, #212]	@ (800262c <SystemInit+0xdc>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	4a33      	ldr	r2, [pc, #204]	@ (800262c <SystemInit+0xdc>)
 800255e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002562:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002566:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <SystemInit+0xe0>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800256c:	4b30      	ldr	r3, [pc, #192]	@ (8002630 <SystemInit+0xe0>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <SystemInit+0xe0>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002578:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <SystemInit+0xe0>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	492c      	ldr	r1, [pc, #176]	@ (8002630 <SystemInit+0xe0>)
 800257e:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <SystemInit+0xe4>)
 8002580:	4013      	ands	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002584:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <SystemInit+0xe0>)
 8002586:	2200      	movs	r2, #0
 8002588:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800258a:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <SystemInit+0xe0>)
 800258c:	2200      	movs	r2, #0
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <SystemInit+0xe0>)
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002596:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <SystemInit+0xe0>)
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <SystemInit+0xe8>)
 800259a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800259c:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <SystemInit+0xe0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <SystemInit+0xe0>)
 80025a4:	4a24      	ldr	r2, [pc, #144]	@ (8002638 <SystemInit+0xe8>)
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <SystemInit+0xe0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <SystemInit+0xe0>)
 80025b0:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <SystemInit+0xe8>)
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <SystemInit+0xe0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80025ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <SystemInit+0xe0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <SystemInit+0xe0>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <SystemInit+0xe0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <SystemInit+0xdc>)
 80025ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025d2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <SystemInit+0xec>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80025dc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80025e4:	d003      	beq.n	80025ee <SystemInit+0x9e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80025ec:	d117      	bne.n	800261e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <SystemInit+0xec>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <SystemInit+0xec>)
 80025fc:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <SystemInit+0xf0>)
 80025fe:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <SystemInit+0xec>)
 8002602:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <SystemInit+0xf4>)
 8002604:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <SystemInit+0xec>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <SystemInit+0xec>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <SystemInit+0xec>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <SystemInit+0xec>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	61d3      	str	r3, [r2, #28]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00
 8002630:	44020c00 	.word	0x44020c00
 8002634:	eae2eae3 	.word	0xeae2eae3
 8002638:	01010280 	.word	0x01010280
 800263c:	40022000 	.word	0x40022000
 8002640:	08192a3b 	.word	0x08192a3b
 8002644:	4c5d6e7f 	.word	0x4c5d6e7f

08002648 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b09c      	sub	sp, #112	@ 0x70
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	615a      	str	r2, [r3, #20]
 800267a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2234      	movs	r2, #52	@ 0x34
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f00a fef8 	bl	800d478 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002688:	4b46      	ldr	r3, [pc, #280]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 800268a:	4a47      	ldr	r2, [pc, #284]	@ (80027a8 <MX_TIM1_Init+0x160>)
 800268c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 800268e:	4b45      	ldr	r3, [pc, #276]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 8002690:	2231      	movs	r2, #49	@ 0x31
 8002692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800269a:	4b42      	ldr	r3, [pc, #264]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 800269c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b40      	ldr	r3, [pc, #256]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a8:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026b4:	483b      	ldr	r0, [pc, #236]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026b6:	f007 fb7d 	bl	8009db4 <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80026c0:	f7ff fdfc 	bl	80022bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80026ce:	4619      	mov	r1, r3
 80026d0:	4834      	ldr	r0, [pc, #208]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026d2:	f008 f959 	bl	800a988 <HAL_TIM_ConfigClockSource>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026dc:	f7ff fdee 	bl	80022bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026e0:	4830      	ldr	r0, [pc, #192]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 80026e2:	f007 fcce 	bl	800a082 <HAL_TIM_PWM_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026ec:	f7ff fde6 	bl	80022bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002700:	4619      	mov	r1, r3
 8002702:	4828      	ldr	r0, [pc, #160]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 8002704:	f008 ff68 	bl	800b5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800270e:	f7ff fdd5 	bl	80022bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002712:	2360      	movs	r3, #96	@ 0x60
 8002714:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8002716:	f241 3388 	movw	r3, #5000	@ 0x1388
 800271a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002720:	2300      	movs	r3, #0
 8002722:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002730:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002734:	2204      	movs	r2, #4
 8002736:	4619      	mov	r1, r3
 8002738:	481a      	ldr	r0, [pc, #104]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 800273a:	f008 f811 	bl	800a760 <HAL_TIM_PWM_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002744:	f7ff fdba 	bl	80022bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800275c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002760:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800276e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 8002786:	f008 fff7 	bl	800b778 <HAL_TIMEx_ConfigBreakDeadTime>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002790:	f7ff fd94 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM1_Init+0x15c>)
 8002796:	f000 f949 	bl	8002a2c <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3770      	adds	r7, #112	@ 0x70
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000031c 	.word	0x2000031c
 80027a8:	40012c00 	.word	0x40012c00

080027ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08e      	sub	sp, #56	@ 0x38
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027cc:	463b      	mov	r3, r7
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	615a      	str	r2, [r3, #20]
 80027dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027de:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <MX_TIM2_Init+0xe4>)
 80027e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <MX_TIM2_Init+0xe4>)
 80027e8:	2231      	movs	r2, #49	@ 0x31
 80027ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <MX_TIM2_Init+0xe4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80027f2:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <MX_TIM2_Init+0xe4>)
 80027f4:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80027f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <MX_TIM2_Init+0xe4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002800:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002806:	4822      	ldr	r0, [pc, #136]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002808:	f007 fad4 	bl	8009db4 <HAL_TIM_Base_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002812:	f7ff fd53 	bl	80022bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800281c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002820:	4619      	mov	r1, r3
 8002822:	481b      	ldr	r0, [pc, #108]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002824:	f008 f8b0 	bl	800a988 <HAL_TIM_ConfigClockSource>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800282e:	f7ff fd45 	bl	80022bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002832:	4817      	ldr	r0, [pc, #92]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002834:	f007 fbc4 	bl	8009fc0 <HAL_TIM_OC_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800283e:	f7ff fd3d 	bl	80022bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	480f      	ldr	r0, [pc, #60]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002852:	f008 fec1 	bl	800b5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800285c:	f7ff fd2e 	bl	80022bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002860:	2300      	movs	r3, #0
 8002862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	2204      	movs	r2, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <MX_TIM2_Init+0xe4>)
 8002878:	f007 fef8 	bl	800a66c <HAL_TIM_OC_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002882:	f7ff fd1b 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	3738      	adds	r7, #56	@ 0x38
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000368 	.word	0x20000368

08002894 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <MX_TIM3_Init+0x98>)
 80028b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <MX_TIM3_Init+0x9c>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <MX_TIM3_Init+0x98>)
 80028ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <MX_TIM3_Init+0x98>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80028c6:	4b19      	ldr	r3, [pc, #100]	@ (800292c <MX_TIM3_Init+0x98>)
 80028c8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80028cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ce:	4b17      	ldr	r3, [pc, #92]	@ (800292c <MX_TIM3_Init+0x98>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d4:	4b15      	ldr	r3, [pc, #84]	@ (800292c <MX_TIM3_Init+0x98>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028da:	4814      	ldr	r0, [pc, #80]	@ (800292c <MX_TIM3_Init+0x98>)
 80028dc:	f007 fa6a 	bl	8009db4 <HAL_TIM_Base_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80028e6:	f7ff fce9 	bl	80022bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4619      	mov	r1, r3
 80028f6:	480d      	ldr	r0, [pc, #52]	@ (800292c <MX_TIM3_Init+0x98>)
 80028f8:	f008 f846 	bl	800a988 <HAL_TIM_ConfigClockSource>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002902:	f7ff fcdb 	bl	80022bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4806      	ldr	r0, [pc, #24]	@ (800292c <MX_TIM3_Init+0x98>)
 8002914:	f008 fe60 	bl	800b5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800291e:	f7ff fccd 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200003b4 	.word	0x200003b4
 8002930:	40000400 	.word	0x40000400

08002934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a37      	ldr	r2, [pc, #220]	@ (8002a20 <HAL_TIM_Base_MspInit+0xec>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12f      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 8002948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800294c:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 800294e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002952:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002956:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 8002958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800295c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2029      	movs	r0, #41	@ 0x29
 800296a:	f000 fc01 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800296e:	2029      	movs	r0, #41	@ 0x29
 8002970:	f000 fc18 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2102      	movs	r1, #2
 8002978:	202a      	movs	r0, #42	@ 0x2a
 800297a:	f000 fbf9 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800297e:	202a      	movs	r0, #42	@ 0x2a
 8002980:	f000 fc10 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2102      	movs	r1, #2
 8002988:	202b      	movs	r0, #43	@ 0x2b
 800298a:	f000 fbf1 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800298e:	202b      	movs	r0, #43	@ 0x2b
 8002990:	f000 fc08 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2102      	movs	r1, #2
 8002998:	202c      	movs	r0, #44	@ 0x2c
 800299a:	f000 fbe9 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800299e:	202c      	movs	r0, #44	@ 0x2c
 80029a0:	f000 fc00 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029a4:	e038      	b.n	8002a18 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ae:	d117      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029c0:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2103      	movs	r1, #3
 80029d2:	202d      	movs	r0, #45	@ 0x2d
 80029d4:	f000 fbcc 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d8:	202d      	movs	r0, #45	@ 0x2d
 80029da:	f000 fbe3 	bl	80031a4 <HAL_NVIC_EnableIRQ>
}
 80029de:	e01b      	b.n	8002a18 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <HAL_TIM_Base_MspInit+0xf4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d116      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf0>)
 80029fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2106      	movs	r1, #6
 8002a0c:	202e      	movs	r0, #46	@ 0x2e
 8002a0e:	f000 fbaf 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a12:	202e      	movs	r0, #46	@ 0x2e
 8002a14:	f000 fbc6 	bl	80031a4 <HAL_NVIC_EnableIRQ>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	44020c00 	.word	0x44020c00
 8002a28:	40000400 	.word	0x40000400

08002a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_TIM_MspPostInit+0x6c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d11f      	bne.n	8002a8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <HAL_TIM_MspPostInit+0x70>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a54:	4a11      	ldr	r2, [pc, #68]	@ (8002a9c <HAL_TIM_MspPostInit+0x70>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <HAL_TIM_MspPostInit+0x70>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	4619      	mov	r1, r3
 8002a88:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <HAL_TIM_MspPostInit+0x74>)
 8002a8a:	f002 f81d 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	44020c00 	.word	0x44020c00
 8002aa0:	42020000 	.word	0x42020000

08002aa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <MX_USART1_UART_Init+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aca:	220c      	movs	r2, #12
 8002acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aec:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aee:	f008 ff23 	bl	800b938 <HAL_UART_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002af8:	f7ff fbe0 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b00:	f00a f9e5 	bl	800cece <HAL_UARTEx_SetTxFifoThreshold>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b0a:	f7ff fbd7 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4808      	ldr	r0, [pc, #32]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b12:	f00a fa1a 	bl	800cf4a <HAL_UARTEx_SetRxFifoThreshold>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b1c:	f7ff fbce 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b22:	f00a f99b 	bl	800ce5c <HAL_UARTEx_DisableFifoMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b2c:	f7ff fbc6 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000400 	.word	0x20000400
 8002b38:	40013800 	.word	0x40013800

08002b3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b40:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b42:	4a24      	ldr	r2, [pc, #144]	@ (8002bd4 <MX_USART2_UART_Init+0x98>)
 8002b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b54:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b70:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b76:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b7c:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b82:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b88:	4811      	ldr	r0, [pc, #68]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b8a:	f008 fed5 	bl	800b938 <HAL_UART_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002b94:	f7ff fb92 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b98:	2100      	movs	r1, #0
 8002b9a:	480d      	ldr	r0, [pc, #52]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002b9c:	f00a f997 	bl	800cece <HAL_UARTEx_SetTxFifoThreshold>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002ba6:	f7ff fb89 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002baa:	2100      	movs	r1, #0
 8002bac:	4808      	ldr	r0, [pc, #32]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002bae:	f00a f9cc 	bl	800cf4a <HAL_UARTEx_SetRxFifoThreshold>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002bb8:	f7ff fb80 	bl	80022bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002bbc:	4804      	ldr	r0, [pc, #16]	@ (8002bd0 <MX_USART2_UART_Init+0x94>)
 8002bbe:	f00a f94d 	bl	800ce5c <HAL_UARTEx_DisableFifoMode>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002bc8:	f7ff fb78 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000494 	.word	0x20000494
 8002bd4:	40004400 	.word	0x40004400

08002bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0c0      	sub	sp, #256	@ 0x100
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	22d0      	movs	r2, #208	@ 0xd0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00a fc3d 	bl	800d478 <memset>
  if(uartHandle->Instance==USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a72      	ldr	r2, [pc, #456]	@ (8002dcc <HAL_UART_MspInit+0x1f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f040 8091 	bne.w	8002d2c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c0a:	f04f 0201 	mov.w	r2, #1
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c16:	2300      	movs	r3, #0
 8002c18:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1a:	f107 0318 	add.w	r3, r7, #24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 fe44 	bl	80068ac <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c2a:	f7ff fb47 	bl	80022bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	4b68      	ldr	r3, [pc, #416]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c34:	4a66      	ldr	r2, [pc, #408]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c3e:	4b64      	ldr	r3, [pc, #400]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c52:	4a5f      	ldr	r2, [pc, #380]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c6a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c84:	2304      	movs	r3, #4
 8002c86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4850      	ldr	r0, [pc, #320]	@ (8002dd4 <HAL_UART_MspInit+0x1fc>)
 8002c92:	f001 ff19 	bl	8004ac8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002c96:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_UART_MspInit+0x204>)
 8002c9a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002c9e:	2215      	movs	r2, #21
 8002ca0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8002cae:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002cb4:	4b48      	ldr	r3, [pc, #288]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002cc0:	4b45      	ldr	r3, [pc, #276]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002cc6:	4b44      	ldr	r3, [pc, #272]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002ccc:	4b42      	ldr	r3, [pc, #264]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002cea:	483b      	ldr	r0, [pc, #236]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cec:	f000 fb18 	bl	8003320 <HAL_DMA_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8002cf6:	f7ff fae1 	bl	80022bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a36      	ldr	r2, [pc, #216]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002cfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d02:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d08:	2110      	movs	r1, #16
 8002d0a:	4833      	ldr	r0, [pc, #204]	@ (8002dd8 <HAL_UART_MspInit+0x200>)
 8002d0c:	f000 fe9a 	bl	8003a44 <HAL_DMA_ConfigChannelAttributes>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002d16:	f7ff fad1 	bl	80022bc <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	203a      	movs	r0, #58	@ 0x3a
 8002d20:	f000 fa26 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d24:	203a      	movs	r0, #58	@ 0x3a
 8002d26:	f000 fa3d 	bl	80031a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d2a:	e049      	b.n	8002dc0 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2b      	ldr	r2, [pc, #172]	@ (8002de0 <HAL_UART_MspInit+0x208>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d144      	bne.n	8002dc0 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d36:	f04f 0202 	mov.w	r2, #2
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0318 	add.w	r3, r7, #24
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fdae 	bl	80068ac <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002d56:	f7ff fab1 	bl	80022bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d66:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d6a:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d7e:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_UART_MspInit+0x1f8>)
 8002d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d96:	230c      	movs	r3, #12
 8002d98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dae:	2307      	movs	r3, #7
 8002db0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002db8:	4619      	mov	r1, r3
 8002dba:	480a      	ldr	r0, [pc, #40]	@ (8002de4 <HAL_UART_MspInit+0x20c>)
 8002dbc:	f001 fe84 	bl	8004ac8 <HAL_GPIO_Init>
}
 8002dc0:	bf00      	nop
 8002dc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	44020c00 	.word	0x44020c00
 8002dd4:	42020400 	.word	0x42020400
 8002dd8:	20000528 	.word	0x20000528
 8002ddc:	40020050 	.word	0x40020050
 8002de0:	40004400 	.word	0x40004400
 8002de4:	42020000 	.word	0x42020000

08002de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002de8:	480d      	ldr	r0, [pc, #52]	@ (8002e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dec:	f7ff fbb0 	bl	8002550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df0:	480c      	ldr	r0, [pc, #48]	@ (8002e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002df2:	490d      	ldr	r1, [pc, #52]	@ (8002e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <LoopForever+0xe>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df8:	e002      	b.n	8002e00 <LoopCopyDataInit>

08002dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfe:	3304      	adds	r3, #4

08002e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e04:	d3f9      	bcc.n	8002dfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e08:	4c0a      	ldr	r4, [pc, #40]	@ (8002e34 <LoopForever+0x16>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e0c:	e001      	b.n	8002e12 <LoopFillZerobss>

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e10:	3204      	adds	r2, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e16:	f00a fb83 	bl	800d520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1a:	f7fe ffad 	bl	8001d78 <main>

08002e1e <LoopForever>:

LoopForever:
    b LoopForever
 8002e1e:	e7fe      	b.n	8002e1e <LoopForever>
  ldr   r0, =_estack
 8002e20:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002e2c:	0800e148 	.word	0x0800e148
  ldr r2, =_sbss
 8002e30:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002e34:	200006f0 	.word	0x200006f0

08002e38 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC1_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e40:	2003      	movs	r0, #3
 8002e42:	f000 f98a 	bl	800315a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e46:	f003 fba7 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <HAL_Init+0x44>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	490b      	ldr	r1, [pc, #44]	@ (8002e84 <HAL_Init+0x48>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_Init+0x4c>)
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e60:	2004      	movs	r0, #4
 8002e62:	f000 f9cf 	bl	8003204 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e66:	2000      	movs	r0, #0
 8002e68:	f000 f810 	bl	8002e8c <HAL_InitTick>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e002      	b.n	8002e7c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e76:	f7ff fa2d 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	44020c00 	.word	0x44020c00
 8002e84:	0800e0b4 	.word	0x0800e0b4
 8002e88:	20000084 	.word	0x20000084

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002e98:	4b33      	ldr	r3, [pc, #204]	@ (8002f68 <HAL_InitTick+0xdc>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e05c      	b.n	8002f5e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_InitTick+0xe0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d10c      	bne.n	8002eca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HAL_InitTick+0xe4>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f68 <HAL_InitTick+0xdc>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e037      	b.n	8002f3a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002eca:	f000 f9f3 	bl	80032b4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002ece:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d023      	beq.n	8002f1e <HAL_InitTick+0x92>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d82d      	bhi.n	8002f38 <HAL_InitTick+0xac>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_InitTick+0x5e>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d00d      	beq.n	8002f04 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002ee8:	e026      	b.n	8002f38 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002eea:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <HAL_InitTick+0xe4>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <HAL_InitTick+0xdc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e01a      	b.n	8002f3a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f04:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_InitTick+0xdc>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f12:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	60fb      	str	r3, [r7, #12]
        break;
 8002f1c:	e00d      	b.n	8002f3a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_InitTick+0xdc>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	60fb      	str	r3, [r7, #12]
        break;
 8002f36:	e000      	b.n	8002f3a <HAL_InitTick+0xae>
        break;
 8002f38:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f940 	bl	80031c0 <HAL_SYSTICK_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e009      	b.n	8002f5e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f52:	f000 f90d 	bl	8003170 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002f56:	4a07      	ldr	r2, [pc, #28]	@ (8002f74 <HAL_InitTick+0xe8>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000008c 	.word	0x2000008c
 8002f6c:	e000e010 	.word	0xe000e010
 8002f70:	20000084 	.word	0x20000084
 8002f74:	20000088 	.word	0x20000088

08002f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x20>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000008c 	.word	0x2000008c
 8002f9c:	200005a0 	.word	0x200005a0

08002fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <HAL_GetTick+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	200005a0 	.word	0x200005a0

08002fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff ffee 	bl	8002fa0 <HAL_GetTick>
 8002fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d005      	beq.n	8002fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_Delay+0x44>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fde:	bf00      	nop
 8002fe0:	f7ff ffde 	bl	8002fa0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d8f7      	bhi.n	8002fe0 <HAL_Delay+0x28>
  {
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000008c 	.word	0x2000008c

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800302c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	@ (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	490c      	ldr	r1, [pc, #48]	@ (80030ec <__NVIC_SetPriority+0x4c>)
 80030ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4908      	ldr	r1, [pc, #32]	@ (80030f0 <__NVIC_SetPriority+0x50>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	3b04      	subs	r3, #4
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	401a      	ands	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43d9      	mvns	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	4313      	orrs	r3, r2
         );
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff4c 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800317e:	f7ff ff63 	bl	8003048 <__NVIC_GetPriorityGrouping>
 8003182:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	6978      	ldr	r0, [r7, #20]
 800318a:	f7ff ffb3 	bl	80030f4 <NVIC_EncodePriority>
 800318e:	4602      	mov	r2, r0
 8003190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff82 	bl	80030a0 <__NVIC_SetPriority>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff56 	bl	8003064 <__NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d0:	d301      	bcc.n	80031d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00d      	b.n	80031f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80031d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003200 <HAL_SYSTICK_Config+0x40>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_SYSTICK_Config+0x40>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_SYSTICK_Config+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <HAL_SYSTICK_Config+0x40>)
 80031ea:	f043 0303 	orr.w	r3, r3, #3
 80031ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e010 	.word	0xe000e010

08003204 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d844      	bhi.n	800329c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	0800323b 	.word	0x0800323b
 800321c:	08003259 	.word	0x08003259
 8003220:	0800327b 	.word	0x0800327b
 8003224:	0800329d 	.word	0x0800329d
 8003228:	0800322d 	.word	0x0800322d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6013      	str	r3, [r2, #0]
      break;
 8003238:	e031      	b.n	800329e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800323a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003248:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800324c:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800324e:	f023 030c 	bic.w	r3, r3, #12
 8003252:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003256:	e022      	b.n	800329e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003266:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800326a:	f023 030c 	bic.w	r3, r3, #12
 800326e:	4a10      	ldr	r2, [pc, #64]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003278:	e011      	b.n	800329e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a0b      	ldr	r2, [pc, #44]	@ (80032ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800328c:	f023 030c 	bic.w	r3, r3, #12
 8003290:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003292:	f043 0308 	orr.w	r3, r3, #8
 8003296:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800329a:	e000      	b.n	800329e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800329c:	bf00      	nop
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010
 80032b0:	44020c00 	.word	0x44020c00

080032b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80032ba:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80032c6:	2304      	movs	r3, #4
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	e01e      	b.n	800330a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80032ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d00f      	beq.n	80032fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d80f      	bhi.n	8003304 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d003      	beq.n	80032f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80032f0:	e008      	b.n	8003304 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
        break;
 80032f6:	e008      	b.n	800330a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80032f8:	2301      	movs	r3, #1
 80032fa:	607b      	str	r3, [r7, #4]
        break;
 80032fc:	e005      	b.n	800330a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80032fe:	2302      	movs	r3, #2
 8003300:	607b      	str	r3, [r7, #4]
        break;
 8003302:	e002      	b.n	800330a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
        break;
 8003308:	bf00      	nop
    }
  }
  return systick_source;
 800330a:	687b      	ldr	r3, [r7, #4]
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e010 	.word	0xe000e010
 800331c:	44020c00 	.word	0x44020c00

08003320 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fe3a 	bl	8002fa0 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0db      	b.n	80034f0 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6e      	ldr	r2, [pc, #440]	@ (80034f8 <HAL_DMA_Init+0x1d8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	f000 809f 	beq.w	8003482 <HAL_DMA_Init+0x162>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6c      	ldr	r2, [pc, #432]	@ (80034fc <HAL_DMA_Init+0x1dc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f000 8099 	beq.w	8003482 <HAL_DMA_Init+0x162>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6a      	ldr	r2, [pc, #424]	@ (8003500 <HAL_DMA_Init+0x1e0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f000 8093 	beq.w	8003482 <HAL_DMA_Init+0x162>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	@ (8003504 <HAL_DMA_Init+0x1e4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f000 808d 	beq.w	8003482 <HAL_DMA_Init+0x162>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	@ (8003508 <HAL_DMA_Init+0x1e8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f000 8087 	beq.w	8003482 <HAL_DMA_Init+0x162>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a64      	ldr	r2, [pc, #400]	@ (800350c <HAL_DMA_Init+0x1ec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f000 8081 	beq.w	8003482 <HAL_DMA_Init+0x162>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a62      	ldr	r2, [pc, #392]	@ (8003510 <HAL_DMA_Init+0x1f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d07b      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a61      	ldr	r2, [pc, #388]	@ (8003514 <HAL_DMA_Init+0x1f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d076      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <HAL_DMA_Init+0x1f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d071      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5e      	ldr	r2, [pc, #376]	@ (800351c <HAL_DMA_Init+0x1fc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d06c      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003520 <HAL_DMA_Init+0x200>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d067      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003524 <HAL_DMA_Init+0x204>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d062      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a59      	ldr	r2, [pc, #356]	@ (8003528 <HAL_DMA_Init+0x208>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d05d      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a58      	ldr	r2, [pc, #352]	@ (800352c <HAL_DMA_Init+0x20c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d058      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_DMA_Init+0x210>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d053      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a55      	ldr	r2, [pc, #340]	@ (8003534 <HAL_DMA_Init+0x214>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d04e      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <HAL_DMA_Init+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d049      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_DMA_Init+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d044      	beq.n	8003482 <HAL_DMA_Init+0x162>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a50      	ldr	r2, [pc, #320]	@ (8003540 <HAL_DMA_Init+0x220>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03f      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4f      	ldr	r2, [pc, #316]	@ (8003544 <HAL_DMA_Init+0x224>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03a      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4d      	ldr	r2, [pc, #308]	@ (8003548 <HAL_DMA_Init+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d035      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4c      	ldr	r2, [pc, #304]	@ (800354c <HAL_DMA_Init+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d030      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4a      	ldr	r2, [pc, #296]	@ (8003550 <HAL_DMA_Init+0x230>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a49      	ldr	r2, [pc, #292]	@ (8003554 <HAL_DMA_Init+0x234>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d026      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a47      	ldr	r2, [pc, #284]	@ (8003558 <HAL_DMA_Init+0x238>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d021      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a46      	ldr	r2, [pc, #280]	@ (800355c <HAL_DMA_Init+0x23c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01c      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a44      	ldr	r2, [pc, #272]	@ (8003560 <HAL_DMA_Init+0x240>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d017      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a43      	ldr	r2, [pc, #268]	@ (8003564 <HAL_DMA_Init+0x244>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d012      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a41      	ldr	r2, [pc, #260]	@ (8003568 <HAL_DMA_Init+0x248>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a40      	ldr	r2, [pc, #256]	@ (800356c <HAL_DMA_Init+0x24c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d008      	beq.n	8003482 <HAL_DMA_Init+0x162>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a3e      	ldr	r2, [pc, #248]	@ (8003570 <HAL_DMA_Init+0x250>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <HAL_DMA_Init+0x162>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3d      	ldr	r2, [pc, #244]	@ (8003574 <HAL_DMA_Init+0x254>)
 8003480:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0206 	orr.w	r2, r2, #6
 80034a0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80034a2:	e00f      	b.n	80034c4 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80034a4:	f7ff fd7c 	bl	8002fa0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d908      	bls.n	80034c4 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2210      	movs	r2, #16
 80034b6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2203      	movs	r2, #3
 80034bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e015      	b.n	80034f0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e8      	bne.n	80034a4 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb18 	bl	8003b08 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40020050 	.word	0x40020050
 80034fc:	50020050 	.word	0x50020050
 8003500:	400200d0 	.word	0x400200d0
 8003504:	500200d0 	.word	0x500200d0
 8003508:	40020150 	.word	0x40020150
 800350c:	50020150 	.word	0x50020150
 8003510:	400201d0 	.word	0x400201d0
 8003514:	500201d0 	.word	0x500201d0
 8003518:	40020250 	.word	0x40020250
 800351c:	50020250 	.word	0x50020250
 8003520:	400202d0 	.word	0x400202d0
 8003524:	500202d0 	.word	0x500202d0
 8003528:	40020350 	.word	0x40020350
 800352c:	50020350 	.word	0x50020350
 8003530:	400203d0 	.word	0x400203d0
 8003534:	500203d0 	.word	0x500203d0
 8003538:	40021050 	.word	0x40021050
 800353c:	50021050 	.word	0x50021050
 8003540:	400210d0 	.word	0x400210d0
 8003544:	500210d0 	.word	0x500210d0
 8003548:	40021150 	.word	0x40021150
 800354c:	50021150 	.word	0x50021150
 8003550:	400211d0 	.word	0x400211d0
 8003554:	500211d0 	.word	0x500211d0
 8003558:	40021250 	.word	0x40021250
 800355c:	50021250 	.word	0x50021250
 8003560:	400212d0 	.word	0x400212d0
 8003564:	500212d0 	.word	0x500212d0
 8003568:	40021350 	.word	0x40021350
 800356c:	50021350 	.word	0x50021350
 8003570:	400213d0 	.word	0x400213d0
 8003574:	500213d0 	.word	0x500213d0

08003578 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04f      	b.n	8003630 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_DMA_Start_IT+0x26>
 800359a:	2302      	movs	r3, #2
 800359c:	e048      	b.n	8003630 <HAL_DMA_Start_IT+0xb8>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d136      	bne.n	8003620 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fa78 	bl	8003abc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80035da:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800360a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e007      	b.n	8003630 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	@ 0x40
 8003624:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003640:	f7ff fcae 	bl	8002fa0 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e06b      	b.n	8003728 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d008      	beq.n	800366e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e05c      	b.n	8003728 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0204 	orr.w	r2, r2, #4
 800367c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2205      	movs	r2, #5
 8003682:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003686:	e020      	b.n	80036ca <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003688:	f7ff fc8a 	bl	8002fa0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b05      	cmp	r3, #5
 8003694:	d919      	bls.n	80036ca <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ba:	2201      	movs	r2, #1
 80036bc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02e      	b.n	8003728 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0d7      	beq.n	8003688 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0202 	orr.w	r2, r2, #2
 80036e6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80036f8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	2201      	movs	r2, #1
 8003714:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e019      	b.n	8003776 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e00e      	b.n	8003776 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003792:	f023 030f 	bic.w	r3, r3, #15
 8003796:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	3b50      	subs	r3, #80	@ 0x50
 80037a2:	09db      	lsrs	r3, r3, #7
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 813b 	beq.w	8003a38 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d011      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037e6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d011      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003818:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d011      	beq.n	8003858 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800384a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800387c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ae:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04c      	beq.n	8003968 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d045      	beq.n	8003968 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038e4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d12e      	bne.n	8003950 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003900:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0202 	orr.w	r2, r2, #2
 8003910:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	2201      	movs	r2, #1
 800392c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07a      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
        }

        return;
 800394e:	e075      	b.n	8003a3c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2205      	movs	r2, #5
 8003954:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d039      	beq.n	80039ea <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d032      	beq.n	80039ea <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	2201      	movs	r2, #1
 80039b2:	731a      	strb	r2, [r3, #12]
 80039b4:	e008      	b.n	80039c8 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80039d0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d025      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0202 	orr.w	r2, r2, #2
 8003a00:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e002      	b.n	8003a3e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003a3c:	bf00      	nop
    }
  }
}
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e02b      	b.n	8003ab0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003a60:	f023 030f 	bic.w	r3, r3, #15
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	3b50      	subs	r3, #80	@ 0x50
 8003a70:	09db      	lsrs	r3, r3, #7
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f003 0311 	and.w	r3, r3, #17
 8003a8e:	2b11      	cmp	r3, #17
 8003a90:	d106      	bne.n	8003aa0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	e006      	b.n	8003aae <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	b291      	uxth	r1, r2
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003ae8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a53      	ldr	r2, [pc, #332]	@ (8003c94 <DMA_Init+0x18c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	f000 80a0 	beq.w	8003c8e <DMA_Init+0x186>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a51      	ldr	r2, [pc, #324]	@ (8003c98 <DMA_Init+0x190>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f000 809a 	beq.w	8003c8e <DMA_Init+0x186>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4f      	ldr	r2, [pc, #316]	@ (8003c9c <DMA_Init+0x194>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f000 8094 	beq.w	8003c8e <DMA_Init+0x186>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca0 <DMA_Init+0x198>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	f000 808e 	beq.w	8003c8e <DMA_Init+0x186>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca4 <DMA_Init+0x19c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f000 8088 	beq.w	8003c8e <DMA_Init+0x186>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a49      	ldr	r2, [pc, #292]	@ (8003ca8 <DMA_Init+0x1a0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	f000 8082 	beq.w	8003c8e <DMA_Init+0x186>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a47      	ldr	r2, [pc, #284]	@ (8003cac <DMA_Init+0x1a4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d07c      	beq.n	8003c8e <DMA_Init+0x186>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a45      	ldr	r2, [pc, #276]	@ (8003cb0 <DMA_Init+0x1a8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d077      	beq.n	8003c8e <DMA_Init+0x186>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a44      	ldr	r2, [pc, #272]	@ (8003cb4 <DMA_Init+0x1ac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d072      	beq.n	8003c8e <DMA_Init+0x186>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <DMA_Init+0x1b0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d06d      	beq.n	8003c8e <DMA_Init+0x186>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <DMA_Init+0x1b4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d068      	beq.n	8003c8e <DMA_Init+0x186>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc0 <DMA_Init+0x1b8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d063      	beq.n	8003c8e <DMA_Init+0x186>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc4 <DMA_Init+0x1bc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d05e      	beq.n	8003c8e <DMA_Init+0x186>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <DMA_Init+0x1c0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d059      	beq.n	8003c8e <DMA_Init+0x186>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ccc <DMA_Init+0x1c4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d054      	beq.n	8003c8e <DMA_Init+0x186>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a39      	ldr	r2, [pc, #228]	@ (8003cd0 <DMA_Init+0x1c8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d04f      	beq.n	8003c8e <DMA_Init+0x186>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a38      	ldr	r2, [pc, #224]	@ (8003cd4 <DMA_Init+0x1cc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <DMA_Init+0x186>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a36      	ldr	r2, [pc, #216]	@ (8003cd8 <DMA_Init+0x1d0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <DMA_Init+0x186>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a35      	ldr	r2, [pc, #212]	@ (8003cdc <DMA_Init+0x1d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <DMA_Init+0x186>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <DMA_Init+0x1d8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <DMA_Init+0x186>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ce4 <DMA_Init+0x1dc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <DMA_Init+0x186>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a30      	ldr	r2, [pc, #192]	@ (8003ce8 <DMA_Init+0x1e0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <DMA_Init+0x186>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <DMA_Init+0x1e4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <DMA_Init+0x186>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <DMA_Init+0x1e8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <DMA_Init+0x186>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf4 <DMA_Init+0x1ec>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <DMA_Init+0x186>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf8 <DMA_Init+0x1f0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <DMA_Init+0x186>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a29      	ldr	r2, [pc, #164]	@ (8003cfc <DMA_Init+0x1f4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <DMA_Init+0x186>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <DMA_Init+0x1f8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <DMA_Init+0x186>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a26      	ldr	r2, [pc, #152]	@ (8003d04 <DMA_Init+0x1fc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <DMA_Init+0x186>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <DMA_Init+0x200>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <DMA_Init+0x186>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <DMA_Init+0x204>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <DMA_Init+0x186>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <DMA_Init+0x208>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d142      	bne.n	8003d14 <DMA_Init+0x20c>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e041      	b.n	8003d16 <DMA_Init+0x20e>
 8003c92:	bf00      	nop
 8003c94:	40020050 	.word	0x40020050
 8003c98:	50020050 	.word	0x50020050
 8003c9c:	400200d0 	.word	0x400200d0
 8003ca0:	500200d0 	.word	0x500200d0
 8003ca4:	40020150 	.word	0x40020150
 8003ca8:	50020150 	.word	0x50020150
 8003cac:	400201d0 	.word	0x400201d0
 8003cb0:	500201d0 	.word	0x500201d0
 8003cb4:	40020250 	.word	0x40020250
 8003cb8:	50020250 	.word	0x50020250
 8003cbc:	400202d0 	.word	0x400202d0
 8003cc0:	500202d0 	.word	0x500202d0
 8003cc4:	40020350 	.word	0x40020350
 8003cc8:	50020350 	.word	0x50020350
 8003ccc:	400203d0 	.word	0x400203d0
 8003cd0:	500203d0 	.word	0x500203d0
 8003cd4:	40021050 	.word	0x40021050
 8003cd8:	50021050 	.word	0x50021050
 8003cdc:	400210d0 	.word	0x400210d0
 8003ce0:	500210d0 	.word	0x500210d0
 8003ce4:	40021150 	.word	0x40021150
 8003ce8:	50021150 	.word	0x50021150
 8003cec:	400211d0 	.word	0x400211d0
 8003cf0:	500211d0 	.word	0x500211d0
 8003cf4:	40021250 	.word	0x40021250
 8003cf8:	50021250 	.word	0x50021250
 8003cfc:	400212d0 	.word	0x400212d0
 8003d00:	500212d0 	.word	0x500212d0
 8003d04:	40021350 	.word	0x40021350
 8003d08:	50021350 	.word	0x50021350
 8003d0c:	400213d0 	.word	0x400213d0
 8003d10:	500213d0 	.word	0x500213d0
 8003d14:	2300      	movs	r3, #0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	051b      	lsls	r3, r3, #20
 8003d26:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003d2a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	3b01      	subs	r3, #1
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003d38:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d70:	f040 80b0 	bne.w	8003ed4 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a84      	ldr	r2, [pc, #528]	@ (8003f8c <DMA_Init+0x484>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f000 80a0 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a82      	ldr	r2, [pc, #520]	@ (8003f90 <DMA_Init+0x488>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f000 809a 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a80      	ldr	r2, [pc, #512]	@ (8003f94 <DMA_Init+0x48c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	f000 8094 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7e      	ldr	r2, [pc, #504]	@ (8003f98 <DMA_Init+0x490>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	f000 808e 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a7c      	ldr	r2, [pc, #496]	@ (8003f9c <DMA_Init+0x494>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f000 8088 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa0 <DMA_Init+0x498>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	f000 8082 	beq.w	8003ec0 <DMA_Init+0x3b8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a78      	ldr	r2, [pc, #480]	@ (8003fa4 <DMA_Init+0x49c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d07c      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a77      	ldr	r2, [pc, #476]	@ (8003fa8 <DMA_Init+0x4a0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d077      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a75      	ldr	r2, [pc, #468]	@ (8003fac <DMA_Init+0x4a4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d072      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a74      	ldr	r2, [pc, #464]	@ (8003fb0 <DMA_Init+0x4a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d06d      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a72      	ldr	r2, [pc, #456]	@ (8003fb4 <DMA_Init+0x4ac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d068      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a71      	ldr	r2, [pc, #452]	@ (8003fb8 <DMA_Init+0x4b0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d063      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6f      	ldr	r2, [pc, #444]	@ (8003fbc <DMA_Init+0x4b4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d05e      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc0 <DMA_Init+0x4b8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d059      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6c      	ldr	r2, [pc, #432]	@ (8003fc4 <DMA_Init+0x4bc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d054      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc8 <DMA_Init+0x4c0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04f      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a69      	ldr	r2, [pc, #420]	@ (8003fcc <DMA_Init+0x4c4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d04a      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a68      	ldr	r2, [pc, #416]	@ (8003fd0 <DMA_Init+0x4c8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d045      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a66      	ldr	r2, [pc, #408]	@ (8003fd4 <DMA_Init+0x4cc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d040      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <DMA_Init+0x4d0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d03b      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a63      	ldr	r2, [pc, #396]	@ (8003fdc <DMA_Init+0x4d4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d036      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a62      	ldr	r2, [pc, #392]	@ (8003fe0 <DMA_Init+0x4d8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d031      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a60      	ldr	r2, [pc, #384]	@ (8003fe4 <DMA_Init+0x4dc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02c      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003fe8 <DMA_Init+0x4e0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d027      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a5d      	ldr	r2, [pc, #372]	@ (8003fec <DMA_Init+0x4e4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ff0 <DMA_Init+0x4e8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01d      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5a      	ldr	r2, [pc, #360]	@ (8003ff4 <DMA_Init+0x4ec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a59      	ldr	r2, [pc, #356]	@ (8003ff8 <DMA_Init+0x4f0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a57      	ldr	r2, [pc, #348]	@ (8003ffc <DMA_Init+0x4f4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a56      	ldr	r2, [pc, #344]	@ (8004000 <DMA_Init+0x4f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a54      	ldr	r2, [pc, #336]	@ (8004004 <DMA_Init+0x4fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <DMA_Init+0x3b8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a53      	ldr	r2, [pc, #332]	@ (8004008 <DMA_Init+0x500>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <DMA_Init+0x3bc>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <DMA_Init+0x3be>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e008      	b.n	8003ee6 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003edc:	d103      	bne.n	8003ee6 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ee4:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef6:	4b45      	ldr	r3, [pc, #276]	@ (800400c <DMA_Init+0x504>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <DMA_Init+0x4b4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <DMA_Init+0x454>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <DMA_Init+0x4b8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d01d      	beq.n	8003f5c <DMA_Init+0x454>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <DMA_Init+0x4bc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <DMA_Init+0x454>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <DMA_Init+0x4c0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <DMA_Init+0x454>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a30      	ldr	r2, [pc, #192]	@ (8003ffc <DMA_Init+0x4f4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <DMA_Init+0x454>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2f      	ldr	r2, [pc, #188]	@ (8004000 <DMA_Init+0x4f8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <DMA_Init+0x454>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004004 <DMA_Init+0x4fc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <DMA_Init+0x454>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2c      	ldr	r2, [pc, #176]	@ (8004008 <DMA_Init+0x500>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <DMA_Init+0x458>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <DMA_Init+0x45a>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40020050 	.word	0x40020050
 8003f90:	50020050 	.word	0x50020050
 8003f94:	400200d0 	.word	0x400200d0
 8003f98:	500200d0 	.word	0x500200d0
 8003f9c:	40020150 	.word	0x40020150
 8003fa0:	50020150 	.word	0x50020150
 8003fa4:	400201d0 	.word	0x400201d0
 8003fa8:	500201d0 	.word	0x500201d0
 8003fac:	40020250 	.word	0x40020250
 8003fb0:	50020250 	.word	0x50020250
 8003fb4:	400202d0 	.word	0x400202d0
 8003fb8:	500202d0 	.word	0x500202d0
 8003fbc:	40020350 	.word	0x40020350
 8003fc0:	50020350 	.word	0x50020350
 8003fc4:	400203d0 	.word	0x400203d0
 8003fc8:	500203d0 	.word	0x500203d0
 8003fcc:	40021050 	.word	0x40021050
 8003fd0:	50021050 	.word	0x50021050
 8003fd4:	400210d0 	.word	0x400210d0
 8003fd8:	500210d0 	.word	0x500210d0
 8003fdc:	40021150 	.word	0x40021150
 8003fe0:	50021150 	.word	0x50021150
 8003fe4:	400211d0 	.word	0x400211d0
 8003fe8:	500211d0 	.word	0x500211d0
 8003fec:	40021250 	.word	0x40021250
 8003ff0:	50021250 	.word	0x50021250
 8003ff4:	400212d0 	.word	0x400212d0
 8003ff8:	500212d0 	.word	0x500212d0
 8003ffc:	40021350 	.word	0x40021350
 8004000:	50021350 	.word	0x50021350
 8004004:	400213d0 	.word	0x400213d0
 8004008:	500213d0 	.word	0x500213d0
 800400c:	3cc02100 	.word	0x3cc02100

08004010 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_DMAEx_List_Start_IT+0x16>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e082      	b.n	8004130 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004030:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d005      	beq.n	8004050 <HAL_DMAEx_List_Start_IT+0x40>
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d16a      	bne.n	8004120 <HAL_DMAEx_List_Start_IT+0x110>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d067      	beq.n	8004120 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d157      	bne.n	800410c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_DMAEx_List_Start_IT+0x5a>
 8004066:	2302      	movs	r3, #2
 8004068:	e062      	b.n	8004130 <HAL_DMAEx_List_Start_IT+0x120>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	2202      	movs	r2, #2
 8004080:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800409e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ce:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f107 010c 	add.w	r1, r7, #12
 80040da:	2200      	movs	r2, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f82b 	bl	8004138 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	0c0b      	lsrs	r3, r1, #16
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004100:	4013      	ands	r3, r2
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e007      	b.n	8004130 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2240      	movs	r2, #64	@ 0x40
 8004124:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <DMA_List_GetCLLRNodeInfo+0x58>)
 800415a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00f      	beq.n	8004182 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2207      	movs	r2, #7
 8004166:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004168:	e00b      	b.n	8004182 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004174:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2205      	movs	r2, #5
 8004180:	601a      	str	r2, [r3, #0]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	fe010000 	.word	0xfe010000
 8004194:	f8010000 	.word	0xf8010000

08004198 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e147      	b.n	800443a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fea6 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0210 	bic.w	r2, r2, #16
 80041d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d4:	f7fe fee4 	bl	8002fa0 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041da:	e012      	b.n	8004202 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041dc:	f7fe fee0 	bl	8002fa0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b0a      	cmp	r3, #10
 80041e8:	d90b      	bls.n	8004202 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e11b      	b.n	800443a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d0e5      	beq.n	80041dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004220:	f7fe febe 	bl	8002fa0 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004226:	e012      	b.n	800424e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004228:	f7fe feba 	bl	8002fa0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b0a      	cmp	r3, #10
 8004234:	d90b      	bls.n	800424e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0f5      	b.n	800443a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0e5      	beq.n	8004228 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0202 	orr.w	r2, r2, #2
 800426a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a74      	ldr	r2, [pc, #464]	@ (8004444 <HAL_FDCAN_Init+0x2ac>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d103      	bne.n	800427e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004276:	4a74      	ldr	r2, [pc, #464]	@ (8004448 <HAL_FDCAN_Init+0x2b0>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7c1b      	ldrb	r3, [r3, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004294:	619a      	str	r2, [r3, #24]
 8004296:	e007      	b.n	80042a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7c5b      	ldrb	r3, [r3, #17]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d108      	bne.n	80042c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	e007      	b.n	80042d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	7c9b      	ldrb	r3, [r3, #18]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d108      	bne.n	80042ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042e8:	619a      	str	r2, [r3, #24]
 80042ea:	e007      	b.n	80042fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004320:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0210 	bic.w	r2, r2, #16
 8004330:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d108      	bne.n	800434c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0204 	orr.w	r2, r2, #4
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e02c      	b.n	80043a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d028      	beq.n	80043a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d01c      	beq.n	8004396 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800436a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0210 	orr.w	r2, r2, #16
 800437a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d110      	bne.n	80043a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0220 	orr.w	r2, r2, #32
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	e007      	b.n	80043a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0220 	orr.w	r2, r2, #32
 80043a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043da:	d115      	bne.n	8004408 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	3b01      	subs	r3, #1
 80043e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	3b01      	subs	r3, #1
 80043f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004404:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004406:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa74 	bl	800490c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	4000a400 	.word	0x4000a400
 8004448:	4000a500 	.word	0x4000a500

0800444c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800445c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d002      	beq.n	800446a <HAL_FDCAN_ConfigFilter+0x1e>
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d13d      	bne.n	80044e6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d119      	bne.n	80044a6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800447e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004486:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e01d      	b.n	80044e2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	075a      	lsls	r2, r3, #29
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	079a      	lsls	r2, r3, #30
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3304      	adds	r3, #4
 80044da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e006      	b.n	80044f4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d110      	bne.n	8004536 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e006      	b.n	8004544 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d12c      	bne.n	80045c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e023      	b.n	80045d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa16 	bl	80049d0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	fa01 f202 	lsl.w	r2, r1, r2
 80045b0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80045b4:	2201      	movs	r2, #1
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e006      	b.n	80045d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c6:	f043 0208 	orr.w	r2, r3, #8
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08c      	sub	sp, #48	@ 0x30
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045f4:	4013      	ands	r3, r2
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800460c:	4013      	ands	r3, r2
 800460e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	4013      	ands	r3, r2
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004632:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	4013      	ands	r3, r2
 800463e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004646:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800464a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	4013      	ands	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2240      	movs	r2, #64	@ 0x40
 8004682:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f921 	bl	80048cc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d019      	beq.n	80046c8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d014      	beq.n	80046c8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046a6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80046c0:	6939      	ldr	r1, [r7, #16]
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8e3 	bl	800488e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80046d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8a2 	bl	8004822 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80046ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8a2 	bl	8004838 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004700:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004702:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8a2 	bl	800484e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004726:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f89b 	bl	8004864 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d018      	beq.n	800476a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800474a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2280      	movs	r2, #128	@ 0x80
 8004760:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f887 	bl	8004878 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f88b 	bl	80048a4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00c      	beq.n	80047b2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80047aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f883 	bl	80048b8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f881 	bl	80048f4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f863 	bl	80048e0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800481a:	bf00      	nop
 800481c:	3730      	adds	r7, #48	@ 0x30
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004914:	4b2c      	ldr	r3, [pc, #176]	@ (80049c8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004916:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d103      	bne.n	800492a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004928:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004938:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004940:	041a      	lsls	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	061a      	lsls	r2, r3, #24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	e005      	b.n	80049ac <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d3f3      	bcc.n	80049a0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	4000ac00 	.word	0x4000ac00
 80049cc:	4000a800 	.word	0x4000a800

080049d0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	@ 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80049ee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e00a      	b.n	8004a12 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004a04:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004a0a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a10:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a1c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004a22:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004a28:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e020      	b.n	8004aa6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3303      	adds	r3, #3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3302      	adds	r3, #2
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	440b      	add	r3, r1
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a7c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	440b      	add	r3, r1
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a8a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a94:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4a06      	ldr	r2, [pc, #24]	@ (8004ac4 <FDCAN_CopyMessageToRAM+0xf4>)
 8004aac:	5cd3      	ldrb	r3, [r2, r3]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d3d6      	bcc.n	8004a64 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	3724      	adds	r7, #36	@ 0x24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	0800e0cc 	.word	0x0800e0cc

08004ac8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ad6:	e136      	b.n	8004d46 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2101      	movs	r1, #1
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8128 	beq.w	8004d40 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x38>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b12      	cmp	r3, #18
 8004afe:	d125      	bne.n	8004b4c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	220f      	movs	r2, #15
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4013      	ands	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 020f 	and.w	r2, r3, #15
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	08da      	lsrs	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3208      	adds	r2, #8
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4013      	ands	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0203 	and.w	r2, r3, #3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d00b      	beq.n	8004ba0 <HAL_GPIO_Init+0xd8>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b94:	2b11      	cmp	r3, #17
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b12      	cmp	r3, #18
 8004b9e:	d130      	bne.n	8004c02 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	2203      	movs	r2, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4013      	ands	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 0201 	and.w	r2, r3, #1
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d017      	beq.n	8004c3a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	2203      	movs	r2, #3
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d07c      	beq.n	8004d40 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004c46:	4a47      	ldr	r2, [pc, #284]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	3318      	adds	r3, #24
 8004c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c52:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4013      	ands	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0a9a      	lsrs	r2, r3, #10
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d68 <HAL_GPIO_Init+0x2a0>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	f002 0203 	and.w	r2, r2, #3
 8004c78:	00d2      	lsls	r2, r2, #3
 8004c7a:	4093      	lsls	r3, r2
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c82:	4938      	ldr	r1, [pc, #224]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	3318      	adds	r3, #24
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c90:	4b34      	ldr	r3, [pc, #208]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004cba:	4b2a      	ldr	r3, [pc, #168]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004cde:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004d0a:	4a16      	ldr	r2, [pc, #88]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004d12:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d18:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4013      	ands	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004d38:	4a0a      	ldr	r2, [pc, #40]	@ (8004d64 <HAL_GPIO_Init+0x29c>)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3301      	adds	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f aec1 	bne.w	8004ad8 <HAL_GPIO_Init+0x10>
  }
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	44022000 	.word	0x44022000
 8004d68:	002f7f7f 	.word	0x002f7f7f

08004d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d7c:	787b      	ldrb	r3, [r7, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d88:	e002      	b.n	8004d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d8a:	887a      	ldrh	r2, [r7, #2]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4013      	ands	r3, r2
 8004db4:	041a      	lsls	r2, r3, #16
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43d9      	mvns	r1, r3
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e08d      	b.n	8004efe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc fb22 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	@ 0x24
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e006      	b.n	8004e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d108      	bne.n	8004e72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e6e:	605a      	str	r2, [r3, #4]
 8004e70:	e007      	b.n	8004e82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	461a      	mov	r2, r3
 8004f14:	460b      	mov	r3, r1
 8004f16:	817b      	strh	r3, [r7, #10]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	f040 80da 	bne.w	80050de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_I2C_Master_Transmit+0x30>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0d3      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f40:	f7fe f82e 	bl	8002fa0 <HAL_GetTick>
 8004f44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2319      	movs	r3, #25
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f9e6 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e0be      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2221      	movs	r2, #33	@ 0x21
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	893a      	ldrh	r2, [r7, #8]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2bff      	cmp	r3, #255	@ 0xff
 8004f92:	d90e      	bls.n	8004fb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	22ff      	movs	r2, #255	@ 0xff
 8004f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	8979      	ldrh	r1, [r7, #10]
 8004fa2:	4b51      	ldr	r3, [pc, #324]	@ (80050e8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fc0a 	bl	80057c4 <I2C_TransferConfig>
 8004fb0:	e06c      	b.n	800508c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	8979      	ldrh	r1, [r7, #10]
 8004fc4:	4b48      	ldr	r3, [pc, #288]	@ (80050e8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fbf9 	bl	80057c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fd2:	e05b      	b.n	800508c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	6a39      	ldr	r1, [r7, #32]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f9fc 	bl	80053d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e07b      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d034      	beq.n	800508c <HAL_I2C_Master_Transmit+0x184>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d130      	bne.n	800508c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2200      	movs	r2, #0
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f975 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e04d      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2bff      	cmp	r3, #255	@ 0xff
 800504c:	d90e      	bls.n	800506c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	22ff      	movs	r2, #255	@ 0xff
 8005052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005058:	b2da      	uxtb	r2, r3
 800505a:	8979      	ldrh	r1, [r7, #10]
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fbad 	bl	80057c4 <I2C_TransferConfig>
 800506a:	e00f      	b.n	800508c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	b2da      	uxtb	r2, r3
 800507c:	8979      	ldrh	r1, [r7, #10]
 800507e:	2300      	movs	r3, #0
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fb9c 	bl	80057c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d19e      	bne.n	8004fd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f9e2 	bl	8005464 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01a      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2220      	movs	r2, #32
 80050b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_I2C_Master_Transmit+0x1e4>)
 80050be:	400b      	ands	r3, r1
 80050c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	80002000 	.word	0x80002000
 80050ec:	fe00e800 	.word	0xfe00e800

080050f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	461a      	mov	r2, r3
 80050fc:	460b      	mov	r3, r1
 80050fe:	817b      	strh	r3, [r7, #10]
 8005100:	4613      	mov	r3, r2
 8005102:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b20      	cmp	r3, #32
 800510e:	f040 80db 	bne.w	80052c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_I2C_Master_Receive+0x30>
 800511c:	2302      	movs	r3, #2
 800511e:	e0d4      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005128:	f7fd ff3a 	bl	8002fa0 <HAL_GetTick>
 800512c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2319      	movs	r3, #25
 8005134:	2201      	movs	r2, #1
 8005136:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8f2 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0bf      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2222      	movs	r2, #34	@ 0x22
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2210      	movs	r2, #16
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	893a      	ldrh	r2, [r7, #8]
 800516a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2bff      	cmp	r3, #255	@ 0xff
 800517a:	d90e      	bls.n	800519a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	22ff      	movs	r2, #255	@ 0xff
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005186:	b2da      	uxtb	r2, r3
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	4b52      	ldr	r3, [pc, #328]	@ (80052d4 <HAL_I2C_Master_Receive+0x1e4>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fb16 	bl	80057c4 <I2C_TransferConfig>
 8005198:	e06d      	b.n	8005276 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	8979      	ldrh	r1, [r7, #10]
 80051ac:	4b49      	ldr	r3, [pc, #292]	@ (80052d4 <HAL_I2C_Master_Receive+0x1e4>)
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fb05 	bl	80057c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051ba:	e05c      	b.n	8005276 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	6a39      	ldr	r1, [r7, #32]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f993 	bl	80054ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e07c      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d034      	beq.n	8005276 <HAL_I2C_Master_Receive+0x186>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d130      	bne.n	8005276 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2200      	movs	r2, #0
 800521c:	2180      	movs	r1, #128	@ 0x80
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f880 	bl	8005324 <I2C_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04d      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2bff      	cmp	r3, #255	@ 0xff
 8005236:	d90e      	bls.n	8005256 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	22ff      	movs	r2, #255	@ 0xff
 800523c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005242:	b2da      	uxtb	r2, r3
 8005244:	8979      	ldrh	r1, [r7, #10]
 8005246:	2300      	movs	r3, #0
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fab8 	bl	80057c4 <I2C_TransferConfig>
 8005254:	e00f      	b.n	8005276 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	b2da      	uxtb	r2, r3
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 faa7 	bl	80057c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d19d      	bne.n	80051bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	6a39      	ldr	r1, [r7, #32]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f8ed 	bl	8005464 <I2C_WaitOnSTOPFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e01a      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2220      	movs	r2, #32
 800529a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <HAL_I2C_Master_Receive+0x1e8>)
 80052a8:	400b      	ands	r3, r1
 80052aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	80002400 	.word	0x80002400
 80052d8:	fe00e800 	.word	0xfe00e800

080052dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d103      	bne.n	80052fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2200      	movs	r2, #0
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d007      	beq.n	8005318 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	619a      	str	r2, [r3, #24]
  }
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005334:	e03b      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f962 	bl	8005604 <I2C_IsErrorOccurred>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e041      	b.n	80053ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d02d      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fd fe25 	bl	8002fa0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d122      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	429a      	cmp	r2, r3
 8005384:	d113      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00f      	b.n	80053ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d0b4      	beq.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e2:	e033      	b.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f90b 	bl	8005604 <I2C_IsErrorOccurred>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e031      	b.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fe:	d025      	beq.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005400:	f7fd fdce 	bl	8002fa0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	d302      	bcc.n	8005416 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11a      	bne.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d013      	beq.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d1c4      	bne.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005470:	e02f      	b.n	80054d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f8c4 	bl	8005604 <I2C_IsErrorOccurred>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e02d      	b.n	80054e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fd fd8b 	bl	8002fa0 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11a      	bne.n	80054d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d013      	beq.n	80054d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e007      	b.n	80054e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d1c8      	bne.n	8005472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80054fc:	e071      	b.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f87e 	bl	8005604 <I2C_IsErrorOccurred>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b20      	cmp	r3, #32
 800551e:	d13b      	bne.n	8005598 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d138      	bne.n	8005598 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d105      	bne.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b10      	cmp	r3, #16
 800554c:	d121      	bne.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2210      	movs	r2, #16
 8005554:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2204      	movs	r2, #4
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2220      	movs	r2, #32
 8005562:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b24      	ldr	r3, [pc, #144]	@ (8005600 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005570:	400b      	ands	r3, r1
 8005572:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
 8005590:	e002      	b.n	8005598 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005598:	f7fd fd02 	bl	8002fa0 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d119      	bne.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d00f      	beq.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d002      	beq.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d083      	beq.n	80054fe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	@ 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d068      	beq.n	8005702 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2210      	movs	r2, #16
 8005636:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005638:	e049      	b.n	80056ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d045      	beq.n	80056ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fd fcad 	bl	8002fa0 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_IsErrorOccurred+0x54>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13a      	bne.n	80056ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005662:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800566a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567a:	d121      	bne.n	80056c0 <I2C_IsErrorOccurred+0xbc>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005682:	d01d      	beq.n	80056c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005684:	7cfb      	ldrb	r3, [r7, #19]
 8005686:	2b20      	cmp	r3, #32
 8005688:	d01a      	beq.n	80056c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005698:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800569a:	f7fd fc81 	bl	8002fa0 <HAL_GetTick>
 800569e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056a0:	e00e      	b.n	80056c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056a2:	f7fd fc7d 	bl	8002fa0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b19      	cmp	r3, #25
 80056ae:	d907      	bls.n	80056c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f043 0320 	orr.w	r3, r3, #32
 80056b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80056be:	e006      	b.n	80056ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d1e9      	bne.n	80056a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d003      	beq.n	80056e4 <I2C_IsErrorOccurred+0xe0>
 80056dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0aa      	beq.n	800563a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2220      	movs	r2, #32
 80056f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f043 0302 	orr.w	r3, r3, #2
 800575e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01c      	beq.n	80057b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fdaf 	bl	80052dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <I2C_IsErrorOccurred+0x1bc>)
 800578a:	400b      	ands	r3, r1
 800578c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80057b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	@ 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	fe00e800 	.word	0xfe00e800

080057c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	4613      	mov	r3, r2
 80057d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057dc:	7a7b      	ldrb	r3, [r7, #9]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057e4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	0d5b      	lsrs	r3, r3, #21
 80057fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005802:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <I2C_TransferConfig+0x60>)
 8005804:	430b      	orrs	r3, r1
 8005806:	43db      	mvns	r3, r3
 8005808:	ea02 0103 	and.w	r1, r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	03ff63ff 	.word	0x03ff63ff

08005828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b20      	cmp	r3, #32
 800583c:	d138      	bne.n	80058b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005848:	2302      	movs	r3, #2
 800584a:	e032      	b.n	80058b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2224      	movs	r2, #36	@ 0x24
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0201 	bic.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800587a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d139      	bne.n	8005948 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058de:	2302      	movs	r3, #2
 80058e0:	e033      	b.n	800594a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2224      	movs	r2, #36	@ 0x24
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005910:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005964:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e007      	b.n	8005986 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005976:	4b07      	ldr	r3, [pc, #28]	@ (8005994 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0204 	bic.w	r2, r3, #4
 800597e:	4905      	ldr	r1, [pc, #20]	@ (8005994 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40030400 	.word	0x40030400

08005998 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <HAL_ICACHE_Enable+0x1c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a04      	ldr	r2, [pc, #16]	@ (80059b4 <HAL_ICACHE_Enable+0x1c>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40030400 	.word	0x40030400

080059b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f000 bc28 	b.w	800621c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059cc:	4b94      	ldr	r3, [pc, #592]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f003 0318 	and.w	r3, r3, #24
 80059d4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80059d6:	4b92      	ldr	r3, [pc, #584]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d005      	beq.n	80059fe <HAL_RCC_OscConfig+0x46>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b18      	cmp	r3, #24
 80059f6:	d114      	bne.n	8005a22 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d111      	bne.n	8005a22 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f000 bc08 	b.w	800621c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005a0c:	4b84      	ldr	r3, [pc, #528]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	4981      	ldr	r1, [pc, #516]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005a20:	e040      	b.n	8005aa4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d023      	beq.n	8005a72 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fd fab3 	bl	8002fa0 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005a3e:	f7fd faaf 	bl	8002fa0 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e3e5      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005a50:	4b73      	ldr	r3, [pc, #460]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005a5c:	4b70      	ldr	r3, [pc, #448]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	496d      	ldr	r1, [pc, #436]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	618b      	str	r3, [r1, #24]
 8005a70:	e018      	b.n	8005aa4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a72:	4b6b      	ldr	r3, [pc, #428]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6a      	ldr	r2, [pc, #424]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fa8f 	bl	8002fa0 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005a86:	f7fd fa8b 	bl	8002fa0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e3c1      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005a98:	4b61      	ldr	r3, [pc, #388]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80a0 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x10c>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b18      	cmp	r3, #24
 8005abc:	d109      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f040 8092 	bne.w	8005bf2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e3a4      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x132>
 8005adc:	4b50      	ldr	r3, [pc, #320]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e058      	b.n	8005b9c <HAL_RCC_OscConfig+0x1e4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d112      	bne.n	8005b18 <HAL_RCC_OscConfig+0x160>
 8005af2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4a      	ldr	r2, [pc, #296]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b48      	ldr	r3, [pc, #288]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a47      	ldr	r2, [pc, #284]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4b45      	ldr	r3, [pc, #276]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a44      	ldr	r2, [pc, #272]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e041      	b.n	8005b9c <HAL_RCC_OscConfig+0x1e4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b20:	d112      	bne.n	8005b48 <HAL_RCC_OscConfig+0x190>
 8005b22:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3e      	ldr	r2, [pc, #248]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a38      	ldr	r2, [pc, #224]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e029      	b.n	8005b9c <HAL_RCC_OscConfig+0x1e4>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005b50:	d112      	bne.n	8005b78 <HAL_RCC_OscConfig+0x1c0>
 8005b52:	4b33      	ldr	r3, [pc, #204]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b30      	ldr	r3, [pc, #192]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2f      	ldr	r2, [pc, #188]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e011      	b.n	8005b9c <HAL_RCC_OscConfig+0x1e4>
 8005b78:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a28      	ldr	r2, [pc, #160]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a25      	ldr	r2, [pc, #148]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a22      	ldr	r2, [pc, #136]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005b96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fd f9fc 	bl	8002fa0 <HAL_GetTick>
 8005ba8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005bac:	f7fd f9f8 	bl	8002fa0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	@ 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e32e      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbe:	4b18      	ldr	r3, [pc, #96]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x1f4>
 8005bca:	e012      	b.n	8005bf2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fd f9e8 	bl	8002fa0 <HAL_GetTick>
 8005bd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005bd4:	f7fd f9e4 	bl	8002fa0 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	@ 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e31a      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <HAL_RCC_OscConfig+0x268>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 809a 	beq.w	8005d34 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_RCC_OscConfig+0x25a>
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b18      	cmp	r3, #24
 8005c0a:	d149      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d146      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e2fe      	b.n	800621c <HAL_RCC_OscConfig+0x864>
 8005c1e:	bf00      	nop
 8005c20:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11c      	bne.n	8005c64 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005c2a:	4b9a      	ldr	r3, [pc, #616]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0218 	and.w	r2, r3, #24
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d014      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005c3a:	4b96      	ldr	r3, [pc, #600]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 0218 	bic.w	r2, r3, #24
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	4993      	ldr	r1, [pc, #588]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005c4c:	f000 fdd0 	bl	80067f0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c50:	4b91      	ldr	r3, [pc, #580]	@ (8005e98 <HAL_RCC_OscConfig+0x4e0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd f919 	bl	8002e8c <HAL_InitTick>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e2db      	b.n	800621c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fd f99c 	bl	8002fa0 <HAL_GetTick>
 8005c68:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005c6c:	f7fd f998 	bl	8002fa0 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e2ce      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c7e:	4b85      	ldr	r3, [pc, #532]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005c8a:	4b82      	ldr	r3, [pc, #520]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	497e      	ldr	r1, [pc, #504]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005c9e:	e049      	b.n	8005d34 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02c      	beq.n	8005d02 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005ca8:	4b7a      	ldr	r3, [pc, #488]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 0218 	bic.w	r2, r3, #24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	4977      	ldr	r1, [pc, #476]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005cba:	4b76      	ldr	r3, [pc, #472]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a75      	ldr	r2, [pc, #468]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fd f96b 	bl	8002fa0 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005cce:	f7fd f967 	bl	8002fa0 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e29d      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005cec:	4b69      	ldr	r3, [pc, #420]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	4966      	ldr	r1, [pc, #408]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
 8005d00:	e018      	b.n	8005d34 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d02:	4b64      	ldr	r3, [pc, #400]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a63      	ldr	r2, [pc, #396]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fd f947 	bl	8002fa0 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005d16:	f7fd f943 	bl	8002fa0 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e279      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d28:	4b5a      	ldr	r3, [pc, #360]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f0      	bne.n	8005d16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d03c      	beq.n	8005dba <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01c      	beq.n	8005d82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d48:	4b52      	ldr	r3, [pc, #328]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d4e:	4a51      	ldr	r2, [pc, #324]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fd f922 	bl	8002fa0 <HAL_GetTick>
 8005d5c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005d60:	f7fd f91e 	bl	8002fa0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e254      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005d72:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0ef      	beq.n	8005d60 <HAL_RCC_OscConfig+0x3a8>
 8005d80:	e01b      	b.n	8005dba <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d82:	4b44      	ldr	r3, [pc, #272]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d88:	4a42      	ldr	r2, [pc, #264]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005d8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fd f905 	bl	8002fa0 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005d9a:	f7fd f901 	bl	8002fa0 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e237      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005dac:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1ef      	bne.n	8005d9a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80d2 	beq.w	8005f6c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005dc8:	4b34      	ldr	r3, [pc, #208]	@ (8005e9c <HAL_RCC_OscConfig+0x4e4>)
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d118      	bne.n	8005e06 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005dd4:	4b31      	ldr	r3, [pc, #196]	@ (8005e9c <HAL_RCC_OscConfig+0x4e4>)
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	4a30      	ldr	r2, [pc, #192]	@ (8005e9c <HAL_RCC_OscConfig+0x4e4>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de0:	f7fd f8de 	bl	8002fa0 <HAL_GetTick>
 8005de4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de8:	f7fd f8da 	bl	8002fa0 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e210      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005dfa:	4b28      	ldr	r3, [pc, #160]	@ (8005e9c <HAL_RCC_OscConfig+0x4e4>)
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d108      	bne.n	8005e20 <HAL_RCC_OscConfig+0x468>
 8005e0e:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e14:	4a1f      	ldr	r2, [pc, #124]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e1e:	e074      	b.n	8005f0a <HAL_RCC_OscConfig+0x552>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d118      	bne.n	8005e5a <HAL_RCC_OscConfig+0x4a2>
 8005e28:	4b1a      	ldr	r3, [pc, #104]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e2e:	4a19      	ldr	r2, [pc, #100]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e38:	4b16      	ldr	r3, [pc, #88]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e3e:	4a15      	ldr	r2, [pc, #84]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e48:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e4e:	4a11      	ldr	r2, [pc, #68]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e58:	e057      	b.n	8005f0a <HAL_RCC_OscConfig+0x552>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d11e      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4e8>
 8005e62:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e68:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e6a:	f043 0304 	orr.w	r3, r3, #4
 8005e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e72:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e78:	4a06      	ldr	r2, [pc, #24]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e82:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e88:	4a02      	ldr	r2, [pc, #8]	@ (8005e94 <HAL_RCC_OscConfig+0x4dc>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e92:	e03a      	b.n	8005f0a <HAL_RCC_OscConfig+0x552>
 8005e94:	44020c00 	.word	0x44020c00
 8005e98:	20000088 	.word	0x20000088
 8005e9c:	44020800 	.word	0x44020800
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b85      	cmp	r3, #133	@ 0x85
 8005ea6:	d118      	bne.n	8005eda <HAL_RCC_OscConfig+0x522>
 8005ea8:	4ba2      	ldr	r3, [pc, #648]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eae:	4aa1      	ldr	r2, [pc, #644]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005eb0:	f043 0304 	orr.w	r3, r3, #4
 8005eb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005eb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ebe:	4a9d      	ldr	r2, [pc, #628]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ec8:	4b9a      	ldr	r3, [pc, #616]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ece:	4a99      	ldr	r2, [pc, #612]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ed8:	e017      	b.n	8005f0a <HAL_RCC_OscConfig+0x552>
 8005eda:	4b96      	ldr	r3, [pc, #600]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ee0:	4a94      	ldr	r2, [pc, #592]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005eea:	4b92      	ldr	r3, [pc, #584]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef0:	4a90      	ldr	r2, [pc, #576]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005ef2:	f023 0304 	bic.w	r3, r3, #4
 8005ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005efa:	4b8e      	ldr	r3, [pc, #568]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f00:	4a8c      	ldr	r2, [pc, #560]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f12:	f7fd f845 	bl	8002fa0 <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1a:	f7fd f841 	bl	8002fa0 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e175      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f30:	4b80      	ldr	r3, [pc, #512]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ed      	beq.n	8005f1a <HAL_RCC_OscConfig+0x562>
 8005f3e:	e015      	b.n	8005f6c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f40:	f7fd f82e 	bl	8002fa0 <HAL_GetTick>
 8005f44:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f48:	f7fd f82a 	bl	8002fa0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e15e      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f5e:	4b75      	ldr	r3, [pc, #468]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ed      	bne.n	8005f48 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d036      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d019      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f80:	4b6c      	ldr	r3, [pc, #432]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6b      	ldr	r2, [pc, #428]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005f86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fd f808 	bl	8002fa0 <HAL_GetTick>
 8005f90:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005f94:	f7fd f804 	bl	8002fa0 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e13a      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005fa6:	4b63      	ldr	r3, [pc, #396]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x5dc>
 8005fb2:	e018      	b.n	8005fe6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fb4:	4b5f      	ldr	r3, [pc, #380]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005fba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fc ffee 	bl	8002fa0 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005fc8:	f7fc ffea 	bl	8002fa0 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e120      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fda:	4b56      	ldr	r3, [pc, #344]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8115 	beq.w	800621a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b18      	cmp	r3, #24
 8005ff4:	f000 80af 	beq.w	8006156 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	f040 8086 	bne.w	800610e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006002:	4b4c      	ldr	r3, [pc, #304]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4b      	ldr	r2, [pc, #300]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800600c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600e:	f7fc ffc7 	bl	8002fa0 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006016:	f7fc ffc3 	bl	8002fa0 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0f9      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006028:	4b42      	ldr	r3, [pc, #264]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006034:	4b3f      	ldr	r3, [pc, #252]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006048:	0212      	lsls	r2, r2, #8
 800604a:	430a      	orrs	r2, r1
 800604c:	4939      	ldr	r1, [pc, #228]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	628b      	str	r3, [r1, #40]	@ 0x28
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006056:	3b01      	subs	r3, #1
 8006058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	3b01      	subs	r3, #1
 8006062:	025b      	lsls	r3, r3, #9
 8006064:	b29b      	uxth	r3, r3
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	3b01      	subs	r3, #1
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607a:	3b01      	subs	r3, #1
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006082:	492c      	ldr	r1, [pc, #176]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006084:	4313      	orrs	r3, r2
 8006086:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006088:	4b2a      	ldr	r3, [pc, #168]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	4a29      	ldr	r2, [pc, #164]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006098:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800609e:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	4a24      	ldr	r2, [pc, #144]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060a4:	f043 0310 	orr.w	r3, r3, #16
 80060a8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80060aa:	4b22      	ldr	r3, [pc, #136]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	f023 020c 	bic.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	491f      	ldr	r1, [pc, #124]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80060bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c0:	f023 0220 	bic.w	r2, r3, #32
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c8:	491a      	ldr	r1, [pc, #104]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060ce:	4b19      	ldr	r3, [pc, #100]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	4a18      	ldr	r2, [pc, #96]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80060da:	4b16      	ldr	r3, [pc, #88]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 80060e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fc ff5b 	bl	8002fa0 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80060ee:	f7fc ff57 	bl	8002fa0 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e08d      	b.n	800621c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006100:	4b0c      	ldr	r3, [pc, #48]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x736>
 800610c:	e085      	b.n	800621a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800610e:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a08      	ldr	r2, [pc, #32]	@ (8006134 <HAL_RCC_OscConfig+0x77c>)
 8006114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fc ff41 	bl	8002fa0 <HAL_GetTick>
 800611e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006120:	e00a      	b.n	8006138 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006122:	f7fc ff3d 	bl	8002fa0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d903      	bls.n	8006138 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e073      	b.n	800621c <HAL_RCC_OscConfig+0x864>
 8006134:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006138:	4b3a      	ldr	r3, [pc, #232]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ee      	bne.n	8006122 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006144:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	4a36      	ldr	r2, [pc, #216]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 800614a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800614e:	f023 0303 	bic.w	r3, r3, #3
 8006152:	6293      	str	r3, [r2, #40]	@ 0x28
 8006154:	e061      	b.n	800621a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006156:	4b33      	ldr	r3, [pc, #204]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800615c:	4b31      	ldr	r3, [pc, #196]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 800615e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006160:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	2b01      	cmp	r3, #1
 8006168:	d031      	beq.n	80061ce <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f003 0203 	and.w	r2, r3, #3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d12a      	bne.n	80061ce <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d122      	bne.n	80061ce <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006192:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d11a      	bne.n	80061ce <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	0a5b      	lsrs	r3, r3, #9
 800619c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d111      	bne.n	80061ce <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d108      	bne.n	80061ce <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	0e1b      	lsrs	r3, r3, #24
 80061c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e024      	b.n	800621c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80061d2:	4b14      	ldr	r3, [pc, #80]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d01a      	beq.n	800621a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f0:	f7fc fed6 	bl	8002fa0 <HAL_GetTick>
 80061f4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80061f6:	bf00      	nop
 80061f8:	f7fc fed2 	bl	8002fa0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4293      	cmp	r3, r2
 8006202:	d0f9      	beq.n	80061f8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006208:	4a06      	ldr	r2, [pc, #24]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800620e:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <HAL_RCC_OscConfig+0x86c>)
 8006214:	f043 0310 	orr.w	r3, r3, #16
 8006218:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	44020c00 	.word	0x44020c00

08006228 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e19e      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800623c:	4b83      	ldr	r3, [pc, #524]	@ (800644c <HAL_RCC_ClockConfig+0x224>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d910      	bls.n	800626c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b80      	ldr	r3, [pc, #512]	@ (800644c <HAL_RCC_ClockConfig+0x224>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 020f 	bic.w	r2, r3, #15
 8006252:	497e      	ldr	r1, [pc, #504]	@ (800644c <HAL_RCC_ClockConfig+0x224>)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625a:	4b7c      	ldr	r3, [pc, #496]	@ (800644c <HAL_RCC_ClockConfig+0x224>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e186      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d012      	beq.n	800629e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	4b74      	ldr	r3, [pc, #464]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006286:	429a      	cmp	r2, r3
 8006288:	d909      	bls.n	800629e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800628a:	4b71      	ldr	r3, [pc, #452]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	496d      	ldr	r1, [pc, #436]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 800629a:	4313      	orrs	r3, r2
 800629c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d012      	beq.n	80062d0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	4b68      	ldr	r3, [pc, #416]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d909      	bls.n	80062d0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80062bc:	4b64      	ldr	r3, [pc, #400]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	4961      	ldr	r1, [pc, #388]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d010      	beq.n	80062fe <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d908      	bls.n	80062fe <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80062ec:	4b58      	ldr	r3, [pc, #352]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4955      	ldr	r1, [pc, #340]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	4b50      	ldr	r3, [pc, #320]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	429a      	cmp	r2, r3
 8006318:	d908      	bls.n	800632c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800631a:	4b4d      	ldr	r3, [pc, #308]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 020f 	bic.w	r2, r3, #15
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	494a      	ldr	r1, [pc, #296]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006328:	4313      	orrs	r3, r2
 800632a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8093 	beq.w	8006460 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006342:	4b43      	ldr	r3, [pc, #268]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d121      	bne.n	8006392 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e113      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800635a:	4b3d      	ldr	r3, [pc, #244]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d115      	bne.n	8006392 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e107      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0fb      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006382:	4b33      	ldr	r3, [pc, #204]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0f3      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006392:	4b2f      	ldr	r3, [pc, #188]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	492c      	ldr	r1, [pc, #176]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a4:	f7fc fdfc 	bl	8002fa0 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d112      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b2:	e00a      	b.n	80063ca <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80063b4:	f7fc fdf4 	bl	8002fa0 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e0d7      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ca:	4b21      	ldr	r3, [pc, #132]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f003 0318 	and.w	r3, r3, #24
 80063d2:	2b18      	cmp	r3, #24
 80063d4:	d1ee      	bne.n	80063b4 <HAL_RCC_ClockConfig+0x18c>
 80063d6:	e043      	b.n	8006460 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d112      	bne.n	8006406 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e0:	e00a      	b.n	80063f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80063e2:	f7fc fddd 	bl	8002fa0 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0c0      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063f8:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f003 0318 	and.w	r3, r3, #24
 8006400:	2b10      	cmp	r3, #16
 8006402:	d1ee      	bne.n	80063e2 <HAL_RCC_ClockConfig+0x1ba>
 8006404:	e02c      	b.n	8006460 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d122      	bne.n	8006454 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800640e:	e00a      	b.n	8006426 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006410:	f7fc fdc6 	bl	8002fa0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0a9      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <HAL_RCC_ClockConfig+0x228>)
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 0318 	and.w	r3, r3, #24
 800642e:	2b08      	cmp	r3, #8
 8006430:	d1ee      	bne.n	8006410 <HAL_RCC_ClockConfig+0x1e8>
 8006432:	e015      	b.n	8006460 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006434:	f7fc fdb4 	bl	8002fa0 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006442:	4293      	cmp	r3, r2
 8006444:	d906      	bls.n	8006454 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e097      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
 800644a:	bf00      	nop
 800644c:	40022000 	.word	0x40022000
 8006450:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006454:	4b4b      	ldr	r3, [pc, #300]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 0318 	and.w	r3, r3, #24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e9      	bne.n	8006434 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	4b44      	ldr	r3, [pc, #272]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	429a      	cmp	r2, r3
 800647a:	d208      	bcs.n	800648e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800647c:	4b41      	ldr	r3, [pc, #260]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f023 020f 	bic.w	r2, r3, #15
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	493e      	ldr	r1, [pc, #248]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800648a:	4313      	orrs	r3, r2
 800648c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800648e:	4b3e      	ldr	r3, [pc, #248]	@ (8006588 <HAL_RCC_ClockConfig+0x360>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d210      	bcs.n	80064be <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649c:	4b3a      	ldr	r3, [pc, #232]	@ (8006588 <HAL_RCC_ClockConfig+0x360>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f023 020f 	bic.w	r2, r3, #15
 80064a4:	4938      	ldr	r1, [pc, #224]	@ (8006588 <HAL_RCC_ClockConfig+0x360>)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ac:	4b36      	ldr	r3, [pc, #216]	@ (8006588 <HAL_RCC_ClockConfig+0x360>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d001      	beq.n	80064be <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e05d      	b.n	800657a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d208      	bcs.n	80064ec <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80064da:	4b2a      	ldr	r3, [pc, #168]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	4927      	ldr	r1, [pc, #156]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d012      	beq.n	800651e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	4b21      	ldr	r3, [pc, #132]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006506:	429a      	cmp	r2, r3
 8006508:	d209      	bcs.n	800651e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800650a:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	491a      	ldr	r1, [pc, #104]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800651a:	4313      	orrs	r3, r2
 800651c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	4b15      	ldr	r3, [pc, #84]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006538:	429a      	cmp	r2, r3
 800653a:	d209      	bcs.n	8006550 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800653c:	4b11      	ldr	r3, [pc, #68]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	021b      	lsls	r3, r3, #8
 800654a:	490e      	ldr	r1, [pc, #56]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006550:	f000 f822 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	490b      	ldr	r1, [pc, #44]	@ (800658c <HAL_RCC_ClockConfig+0x364>)
 8006560:	5ccb      	ldrb	r3, [r1, r3]
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	4a0a      	ldr	r2, [pc, #40]	@ (8006590 <HAL_RCC_ClockConfig+0x368>)
 8006568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800656a:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <HAL_RCC_ClockConfig+0x36c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fc fc8c 	bl	8002e8c <HAL_InitTick>
 8006574:	4603      	mov	r3, r0
 8006576:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006578:	7afb      	ldrb	r3, [r7, #11]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	44020c00 	.word	0x44020c00
 8006588:	40022000 	.word	0x40022000
 800658c:	0800e0b4 	.word	0x0800e0b4
 8006590:	20000084 	.word	0x20000084
 8006594:	20000088 	.word	0x20000088

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	@ 0x24
 800659c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800659e:	4b8c      	ldr	r3, [pc, #560]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0318 	and.w	r3, r3, #24
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d102      	bne.n	80065b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80065aa:	4b8a      	ldr	r3, [pc, #552]	@ (80067d4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e107      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065b0:	4b87      	ldr	r3, [pc, #540]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f003 0318 	and.w	r3, r3, #24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d112      	bne.n	80065e2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80065bc:	4b84      	ldr	r3, [pc, #528]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065c8:	4b81      	ldr	r3, [pc, #516]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	08db      	lsrs	r3, r3, #3
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	4a81      	ldr	r2, [pc, #516]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x240>)
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e0f1      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80065dc:	4b7e      	ldr	r3, [pc, #504]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x240>)
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e0ee      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065e2:	4b7b      	ldr	r3, [pc, #492]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0318 	and.w	r3, r3, #24
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d102      	bne.n	80065f4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065ee:	4b7b      	ldr	r3, [pc, #492]	@ (80067dc <HAL_RCC_GetSysClockFreq+0x244>)
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e0e5      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065f4:	4b76      	ldr	r3, [pc, #472]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 0318 	and.w	r3, r3, #24
 80065fc:	2b18      	cmp	r3, #24
 80065fe:	f040 80dd 	bne.w	80067bc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006602:	4b73      	ldr	r3, [pc, #460]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800660c:	4b70      	ldr	r3, [pc, #448]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	0a1b      	lsrs	r3, r3, #8
 8006612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006616:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006618:	4b6d      	ldr	r3, [pc, #436]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006624:	4b6a      	ldr	r3, [pc, #424]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80b7 	beq.w	80067b6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d003      	beq.n	8006656 <HAL_RCC_GetSysClockFreq+0xbe>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d056      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0x16a>
 8006654:	e077      	b.n	8006746 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006656:	4b5e      	ldr	r3, [pc, #376]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02d      	beq.n	80066be <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006662:	4b5b      	ldr	r3, [pc, #364]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	4a5a      	ldr	r2, [pc, #360]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x240>)
 800666e:	fa22 f303 	lsr.w	r3, r2, r3
 8006672:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	ee07 3a90 	vmov	s15, r3
 8006684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668c:	4b50      	ldr	r3, [pc, #320]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800668e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800669c:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80067e0 <HAL_RCC_GetSysClockFreq+0x248>
 80066a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80066bc:	e065      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80067e4 <HAL_RCC_GetSysClockFreq+0x24c>
 80066cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d0:	4b3f      	ldr	r3, [pc, #252]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 80066d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80066e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80066e4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80067e0 <HAL_RCC_GetSysClockFreq+0x248>
 80066e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80066f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006700:	e043      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80067e8 <HAL_RCC_GetSysClockFreq+0x250>
 8006710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006714:	4b2e      	ldr	r3, [pc, #184]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 8006716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671c:	ee07 3a90 	vmov	s15, r3
 8006720:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006724:	ed97 6a02 	vldr	s12, [r7, #8]
 8006728:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80067e0 <HAL_RCC_GetSysClockFreq+0x248>
 800672c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006730:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006738:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006744:	e021      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006750:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80067ec <HAL_RCC_GetSysClockFreq+0x254>
 8006754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006758:	4b1d      	ldr	r3, [pc, #116]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800675a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006768:	ed97 6a02 	vldr	s12, [r7, #8]
 800676c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80067e0 <HAL_RCC_GetSysClockFreq+0x248>
 8006770:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006774:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006784:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006788:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800678a:	4b11      	ldr	r3, [pc, #68]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0x238>)
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	0a5b      	lsrs	r3, r3, #9
 8006790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006794:	3301      	adds	r3, #1
 8006796:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80067a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ae:	ee17 3a90 	vmov	r3, s15
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e004      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e001      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80067bc:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCC_GetSysClockFreq+0x240>)
 80067be:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80067c0:	69fb      	ldr	r3, [r7, #28]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	44020c00 	.word	0x44020c00
 80067d4:	003d0900 	.word	0x003d0900
 80067d8:	03d09000 	.word	0x03d09000
 80067dc:	007a1200 	.word	0x007a1200
 80067e0:	46000000 	.word	0x46000000
 80067e4:	4c742400 	.word	0x4c742400
 80067e8:	4af42400 	.word	0x4af42400
 80067ec:	4a742400 	.word	0x4a742400

080067f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80067f4:	f7ff fed0 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b08      	ldr	r3, [pc, #32]	@ (800681c <HAL_RCC_GetHCLKFreq+0x2c>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80067fe:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006802:	4907      	ldr	r1, [pc, #28]	@ (8006820 <HAL_RCC_GetHCLKFreq+0x30>)
 8006804:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006806:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	4a05      	ldr	r2, [pc, #20]	@ (8006824 <HAL_RCC_GetHCLKFreq+0x34>)
 8006810:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006812:	4b04      	ldr	r3, [pc, #16]	@ (8006824 <HAL_RCC_GetHCLKFreq+0x34>)
 8006814:	681b      	ldr	r3, [r3, #0]
}
 8006816:	4618      	mov	r0, r3
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	44020c00 	.word	0x44020c00
 8006820:	0800e0b4 	.word	0x0800e0b4
 8006824:	20000084 	.word	0x20000084

08006828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800682c:	f7ff ffe0 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006830:	4602      	mov	r2, r0
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	4904      	ldr	r1, [pc, #16]	@ (8006850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800683e:	5ccb      	ldrb	r3, [r1, r3]
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	44020c00 	.word	0x44020c00
 8006850:	0800e0c4 	.word	0x0800e0c4

08006854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006858:	f7ff ffca 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 800685c:	4602      	mov	r2, r0
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	4904      	ldr	r1, [pc, #16]	@ (800687c <HAL_RCC_GetPCLK2Freq+0x28>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006874:	4618      	mov	r0, r3
 8006876:	bd80      	pop	{r7, pc}
 8006878:	44020c00 	.word	0x44020c00
 800687c:	0800e0c4 	.word	0x0800e0c4

08006880 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006884:	f7ff ffb4 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	0b1b      	lsrs	r3, r3, #12
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4904      	ldr	r1, [pc, #16]	@ (80068a8 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	44020c00 	.word	0x44020c00
 80068a8:	0800e0c4 	.word	0x0800e0c4

080068ac <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b0ba      	sub	sp, #232	@ 0xe8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80068d0:	2500      	movs	r5, #0
 80068d2:	ea54 0305 	orrs.w	r3, r4, r5
 80068d6:	d00b      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80068d8:	4bcd      	ldr	r3, [pc, #820]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80068da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068de:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80068e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e8:	4ac9      	ldr	r2, [pc, #804]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 0801 	and.w	r8, r2, #1
 80068fc:	f04f 0900 	mov.w	r9, #0
 8006900:	ea58 0309 	orrs.w	r3, r8, r9
 8006904:	d042      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800690a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690c:	2b05      	cmp	r3, #5
 800690e:	d823      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006910:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	08006961 	.word	0x08006961
 800691c:	08006931 	.word	0x08006931
 8006920:	08006945 	.word	0x08006945
 8006924:	08006961 	.word	0x08006961
 8006928:	08006961 	.word	0x08006961
 800692c:	08006961 	.word	0x08006961
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006934:	3308      	adds	r3, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f003 f90c 	bl	8009b54 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006942:	e00e      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006948:	3330      	adds	r3, #48	@ 0x30
 800694a:	4618      	mov	r0, r3
 800694c:	f003 f99a 	bl	8009c84 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10c      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800696a:	4ba9      	ldr	r3, [pc, #676]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800696c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006970:	f023 0107 	bic.w	r1, r3, #7
 8006974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697a:	4aa5      	ldr	r2, [pc, #660]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800697c:	430b      	orrs	r3, r1
 800697e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006982:	e003      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006988:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800698c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f002 0a02 	and.w	sl, r2, #2
 8006998:	f04f 0b00 	mov.w	fp, #0
 800699c:	ea5a 030b 	orrs.w	r3, sl, fp
 80069a0:	f000 8088 	beq.w	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80069a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069aa:	2b28      	cmp	r3, #40	@ 0x28
 80069ac:	d868      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80069ae:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	08006a89 	.word	0x08006a89
 80069b8:	08006a81 	.word	0x08006a81
 80069bc:	08006a81 	.word	0x08006a81
 80069c0:	08006a81 	.word	0x08006a81
 80069c4:	08006a81 	.word	0x08006a81
 80069c8:	08006a81 	.word	0x08006a81
 80069cc:	08006a81 	.word	0x08006a81
 80069d0:	08006a81 	.word	0x08006a81
 80069d4:	08006a59 	.word	0x08006a59
 80069d8:	08006a81 	.word	0x08006a81
 80069dc:	08006a81 	.word	0x08006a81
 80069e0:	08006a81 	.word	0x08006a81
 80069e4:	08006a81 	.word	0x08006a81
 80069e8:	08006a81 	.word	0x08006a81
 80069ec:	08006a81 	.word	0x08006a81
 80069f0:	08006a81 	.word	0x08006a81
 80069f4:	08006a6d 	.word	0x08006a6d
 80069f8:	08006a81 	.word	0x08006a81
 80069fc:	08006a81 	.word	0x08006a81
 8006a00:	08006a81 	.word	0x08006a81
 8006a04:	08006a81 	.word	0x08006a81
 8006a08:	08006a81 	.word	0x08006a81
 8006a0c:	08006a81 	.word	0x08006a81
 8006a10:	08006a81 	.word	0x08006a81
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006a81 	.word	0x08006a81
 8006a1c:	08006a81 	.word	0x08006a81
 8006a20:	08006a81 	.word	0x08006a81
 8006a24:	08006a81 	.word	0x08006a81
 8006a28:	08006a81 	.word	0x08006a81
 8006a2c:	08006a81 	.word	0x08006a81
 8006a30:	08006a81 	.word	0x08006a81
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a81 	.word	0x08006a81
 8006a3c:	08006a81 	.word	0x08006a81
 8006a40:	08006a81 	.word	0x08006a81
 8006a44:	08006a81 	.word	0x08006a81
 8006a48:	08006a81 	.word	0x08006a81
 8006a4c:	08006a81 	.word	0x08006a81
 8006a50:	08006a81 	.word	0x08006a81
 8006a54:	08006a89 	.word	0x08006a89
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f003 f878 	bl	8009b54 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006a6a:	e00e      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a70:	3330      	adds	r3, #48	@ 0x30
 8006a72:	4618      	mov	r0, r3
 8006a74:	f003 f906 	bl	8009c84 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006a7e:	e004      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a86:	e000      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006a92:	4b5f      	ldr	r3, [pc, #380]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a98:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ab0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f002 0304 	and.w	r3, r2, #4
 8006ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d04e      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ada:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ade:	d02c      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006ae0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ae4:	d825      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aea:	d028      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af0:	d81f      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af4:	d025      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af8:	d81b      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006afa:	2b80      	cmp	r3, #128	@ 0x80
 8006afc:	d00f      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006afe:	2b80      	cmp	r3, #128	@ 0x80
 8006b00:	d817      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d01f      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d113      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b0e:	3308      	adds	r3, #8
 8006b10:	4618      	mov	r0, r3
 8006b12:	f003 f81f 	bl	8009b54 <RCCEx_PLL2_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006b1c:	e014      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b22:	3330      	adds	r3, #48	@ 0x30
 8006b24:	4618      	mov	r0, r3
 8006b26:	f003 f8ad 	bl	8009c84 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006b30:	e00a      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e004      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10c      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006b50:	4b2f      	ldr	r3, [pc, #188]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b56:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b60:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b62:	430b      	orrs	r3, r1
 8006b64:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b6e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f002 0308 	and.w	r3, r2, #8
 8006b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d056      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006b9c:	d031      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006b9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006ba2:	d82a      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d02d      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bae:	d824      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006bb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bb4:	d029      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006bb6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bba:	d81e      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc0:	d011      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc6:	d818      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d023      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd0:	d113      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f002 ffbb 	bl	8009b54 <RCCEx_PLL2_Config>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006be4:	e017      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bea:	3330      	adds	r3, #48	@ 0x30
 8006bec:	4618      	mov	r0, r3
 8006bee:	f003 f849 	bl	8009c84 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006bf8:	e00d      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c00:	e009      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006c02:	bf00      	nop
 8006c04:	e007      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006c06:	bf00      	nop
 8006c08:	e005      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e003      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006c0e:	bf00      	nop
 8006c10:	44020c00 	.word	0x44020c00
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006c1e:	4bb9      	ldr	r3, [pc, #740]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c24:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c2e:	4ab5      	ldr	r2, [pc, #724]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 0310 	and.w	r3, r2, #16
 8006c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d053      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c66:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c6a:	d031      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006c6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c70:	d82a      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c76:	d02d      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c7c:	d824      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006c7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c82:	d029      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006c84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c88:	d81e      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8e:	d011      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c94:	d818      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d020      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9e:	d113      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 ff54 	bl	8009b54 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006cb2:	e014      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cb8:	3330      	adds	r3, #48	@ 0x30
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f002 ffe2 	bl	8009c84 <RCCEx_PLL3_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006cc6:	e00a      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006cce:	e006      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e004      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e002      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006ce6:	4b87      	ldr	r3, [pc, #540]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf6:	4a83      	ldr	r2, [pc, #524]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cfe:	e003      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f002 0320 	and.w	r3, r2, #32
 8006d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d053      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006d32:	d031      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006d34:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006d38:	d82a      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d3e:	d02d      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d44:	d824      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006d46:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006d4a:	d029      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006d4c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006d50:	d81e      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d56:	d011      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d5c:	d818      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d020      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d66:	d113      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 fef0 	bl	8009b54 <RCCEx_PLL2_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006d7a:	e014      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d80:	3330      	adds	r3, #48	@ 0x30
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 ff7e 	bl	8009c84 <RCCEx_PLL3_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006d98:	bf00      	nop
 8006d9a:	e004      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006d9c:	bf00      	nop
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006da0:	bf00      	nop
 8006da2:	e000      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006dae:	4b55      	ldr	r3, [pc, #340]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006db4:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbe:	4a51      	ldr	r2, [pc, #324]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006dc6:	e003      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006dcc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006de6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d053      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006dfa:	d031      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006dfc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e00:	d82a      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e06:	d02d      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006e08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e0c:	d824      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e12:	d029      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006e14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e18:	d81e      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e1e:	d011      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e24:	d818      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d020      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e2e:	d113      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e34:	3308      	adds	r3, #8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f002 fe8c 	bl	8009b54 <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006e42:	e014      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e48:	3330      	adds	r3, #48	@ 0x30
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 ff1a 	bl	8009c84 <RCCEx_PLL3_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006e56:	e00a      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e5e:	e006      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006e76:	4b23      	ldr	r3, [pc, #140]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e86:	4a1f      	ldr	r2, [pc, #124]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e94:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006eae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d03d      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ec2:	d01b      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006ec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ec8:	d814      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ece:	d017      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed4:	d80e      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ee4:	3330      	adds	r3, #48	@ 0x30
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 fecc 	bl	8009c84 <RCCEx_PLL3_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006efa:	e006      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006efc:	bf00      	nop
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8006f00:	bf00      	nop
 8006f02:	e002      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8006f04:	44020c00 	.word	0x44020c00
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10c      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f12:	4b99      	ldr	r3, [pc, #612]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f18:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f22:	4a95      	ldr	r2, [pc, #596]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d03b      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f5e:	d01b      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006f60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f64:	d814      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006f66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f6a:	d017      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006f6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f70:	d80e      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d014      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8006f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f80:	3330      	adds	r3, #48	@ 0x30
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 fe7e 	bl	8009c84 <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006f98:	bf00      	nop
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006faa:	4b73      	ldr	r3, [pc, #460]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fb0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fba:	4a6f      	ldr	r2, [pc, #444]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006fc2:	e003      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fc8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fe2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d03d      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006fec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ff8:	d01b      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8006ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ffe:	d814      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8007000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007004:	d017      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800700a:	d80e      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d014      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8007010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007014:	d109      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800701a:	3330      	adds	r3, #48	@ 0x30
 800701c:	4618      	mov	r0, r3
 800701e:	f002 fe31 	bl	8009c84 <RCCEx_PLL3_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007028:	e008      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007030:	e004      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007032:	bf00      	nop
 8007034:	e002      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007036:	bf00      	nop
 8007038:	e000      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800703a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10d      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007044:	4b4c      	ldr	r3, [pc, #304]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007046:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800704a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800704e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007056:	4a48      	ldr	r2, [pc, #288]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007058:	430b      	orrs	r3, r1
 800705a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800705e:	e003      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007064:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800707e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d035      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007094:	d015      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800709a:	d80e      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80070a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070aa:	3330      	adds	r3, #48	@ 0x30
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 fde9 	bl	8009c84 <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10d      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80070d0:	4b29      	ldr	r3, [pc, #164]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80070d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070d6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80070da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070e2:	4a25      	ldr	r2, [pc, #148]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80070e4:	430b      	orrs	r3, r1
 80070e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80070f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	2100      	movs	r1, #0
 80070fe:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8007102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800710a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d037      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8007114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007120:	d015      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007126:	d80e      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d012      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800712c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007130:	d109      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007136:	3330      	adds	r3, #48	@ 0x30
 8007138:	4618      	mov	r0, r3
 800713a:	f002 fda3 	bl	8009c84 <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007144:	e006      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800714c:	e002      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800714e:	bf00      	nop
 8007150:	e000      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8007152:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007154:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10f      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800715c:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800715e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007162:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716e:	4a02      	ldr	r2, [pc, #8]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007170:	430b      	orrs	r3, r1
 8007172:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007176:	e005      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8007178:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007180:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	2100      	movs	r1, #0
 800718e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007196:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d00e      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80071a0:	4bb8      	ldr	r3, [pc, #736]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	4ab7      	ldr	r2, [pc, #732]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80071a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071aa:	61d3      	str	r3, [r2, #28]
 80071ac:	4bb5      	ldr	r3, [pc, #724]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80071ae:	69d9      	ldr	r1, [r3, #28]
 80071b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80071b8:	4ab2      	ldr	r2, [pc, #712]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80071ba:	430b      	orrs	r3, r1
 80071bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80071cc:	2300      	movs	r3, #0
 80071ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80071d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80071d4:	460b      	mov	r3, r1
 80071d6:	4313      	orrs	r3, r2
 80071d8:	d055      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80071da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071e6:	d031      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80071e8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80071ec:	d82a      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f2:	d02d      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80071f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f8:	d824      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80071fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fe:	d029      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8007200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007204:	d81e      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720a:	d011      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007210:	d818      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d020      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8007216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721a:	d113      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800721c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007220:	3308      	adds	r3, #8
 8007222:	4618      	mov	r0, r3
 8007224:	f002 fc96 	bl	8009b54 <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800722e:	e014      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007234:	3330      	adds	r3, #48	@ 0x30
 8007236:	4618      	mov	r0, r3
 8007238:	f002 fd24 	bl	8009c84 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007242:	e00a      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800724a:	e006      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800724c:	bf00      	nop
 800724e:	e004      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007262:	4b88      	ldr	r3, [pc, #544]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007268:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800726c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007274:	4a83      	ldr	r2, [pc, #524]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007276:	430b      	orrs	r3, r1
 8007278:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007282:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007292:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007294:	2300      	movs	r3, #0
 8007296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007298:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800729c:	460b      	mov	r3, r1
 800729e:	4313      	orrs	r3, r2
 80072a0:	d055      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80072a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072ae:	d031      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80072b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80072b4:	d82a      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80072b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ba:	d02d      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80072bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072c0:	d824      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80072c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072c6:	d029      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80072c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072cc:	d81e      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80072ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072d2:	d011      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80072d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072d8:	d818      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e2:	d113      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e8:	3308      	adds	r3, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fc32 	bl	8009b54 <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80072f6:	e014      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072fc:	3330      	adds	r3, #48	@ 0x30
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 fcc0 	bl	8009c84 <RCCEx_PLL3_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800730a:	e00a      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007312:	e006      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007314:	bf00      	nop
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800732a:	4b56      	ldr	r3, [pc, #344]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800732c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007330:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733c:	4a51      	ldr	r2, [pc, #324]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800733e:	430b      	orrs	r3, r1
 8007340:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007344:	e003      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007346:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800734a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800734e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800735a:	663b      	str	r3, [r7, #96]	@ 0x60
 800735c:	2300      	movs	r3, #0
 800735e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007360:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007364:	460b      	mov	r3, r1
 8007366:	4313      	orrs	r3, r2
 8007368:	d032      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800736a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800736e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007372:	2b05      	cmp	r3, #5
 8007374:	d80f      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007376:	2b03      	cmp	r3, #3
 8007378:	d211      	bcs.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800737a:	2b01      	cmp	r3, #1
 800737c:	d911      	bls.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800737e:	2b02      	cmp	r3, #2
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007386:	3308      	adds	r3, #8
 8007388:	4618      	mov	r0, r3
 800738a:	f002 fbe3 	bl	8009b54 <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007394:	e006      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80073a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80073ac:	4b35      	ldr	r3, [pc, #212]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80073ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073b2:	f023 0107 	bic.w	r1, r3, #7
 80073b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073be:	4a31      	ldr	r2, [pc, #196]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80073c0:	430b      	orrs	r3, r1
 80073c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80073c6:	e003      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80073d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	2100      	movs	r1, #0
 80073da:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d024      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80073ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d005      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007412:	4b1c      	ldr	r3, [pc, #112]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007418:	f023 0108 	bic.w	r1, r3, #8
 800741c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007424:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007426:	430b      	orrs	r3, r1
 8007428:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800742c:	e003      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007432:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007442:	653b      	str	r3, [r7, #80]	@ 0x50
 8007444:	2300      	movs	r3, #0
 8007446:	657b      	str	r3, [r7, #84]	@ 0x54
 8007448:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800744c:	460b      	mov	r3, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	f000 80b9 	beq.w	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007454:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	4a0b      	ldr	r2, [pc, #44]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007460:	f7fb fd9e 	bl	8002fa0 <HAL_GetTick>
 8007464:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007468:	e010      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746a:	f7fb fd99 	bl	8002fa0 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d908      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007480:	e00a      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007482:	bf00      	nop
 8007484:	44020c00 	.word	0x44020c00
 8007488:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800748c:	4bba      	ldr	r3, [pc, #744]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0e8      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8007498:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 808e 	bne.w	80075be <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074a2:	4bb6      	ldr	r3, [pc, #728]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d023      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01b      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074c8:	4bac      	ldr	r3, [pc, #688]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074d6:	4ba9      	ldr	r3, [pc, #676]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074dc:	4aa7      	ldr	r2, [pc, #668]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074e6:	4ba5      	ldr	r3, [pc, #660]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ec:	4aa3      	ldr	r2, [pc, #652]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074f6:	4aa1      	ldr	r2, [pc, #644]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fb fd48 	bl	8002fa0 <HAL_GetTick>
 8007510:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007514:	e00d      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007516:	f7fb fd43 	bl	8002fa0 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007530:	e006      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007532:	4b92      	ldr	r3, [pc, #584]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0ea      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007540:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d135      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007558:	d110      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800755a:	4b88      	ldr	r3, [pc, #544]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007566:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007570:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007574:	4a81      	ldr	r2, [pc, #516]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007576:	430b      	orrs	r3, r1
 8007578:	61d3      	str	r3, [r2, #28]
 800757a:	e005      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800757c:	4b7f      	ldr	r3, [pc, #508]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	4a7e      	ldr	r2, [pc, #504]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007582:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007586:	61d3      	str	r3, [r2, #28]
 8007588:	4b7c      	ldr	r3, [pc, #496]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800758a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800758e:	4a7b      	ldr	r2, [pc, #492]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007598:	4b78      	ldr	r3, [pc, #480]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800759a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800759e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	4a74      	ldr	r2, [pc, #464]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075b2:	e008      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80075bc:	e003      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80075d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075d4:	2300      	movs	r3, #0
 80075d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80075dc:	460b      	mov	r3, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	d035      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80075e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075ea:	2b30      	cmp	r3, #48	@ 0x30
 80075ec:	d014      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80075ee:	2b30      	cmp	r3, #48	@ 0x30
 80075f0:	d80e      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d012      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d80a      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d010      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007602:	4b5e      	ldr	r3, [pc, #376]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007606:	4a5d      	ldr	r2, [pc, #372]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800760c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800760e:	e008      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007616:	e004      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007618:	bf00      	nop
 800761a:	e002      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007622:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800762a:	4b54      	ldr	r3, [pc, #336]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800762c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007630:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800763c:	4a4f      	ldr	r2, [pc, #316]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800763e:	430b      	orrs	r3, r1
 8007640:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007644:	e003      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800764a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800764e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800765a:	643b      	str	r3, [r7, #64]	@ 0x40
 800765c:	2300      	movs	r3, #0
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007660:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	d033      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800766a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800766e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007676:	2b40      	cmp	r3, #64	@ 0x40
 8007678:	d007      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800767a:	e010      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767c:	4b3f      	ldr	r3, [pc, #252]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	4a3e      	ldr	r2, [pc, #248]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007686:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007688:	e00d      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800768a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800768e:	3308      	adds	r3, #8
 8007690:	4618      	mov	r0, r3
 8007692:	f002 fa5f 	bl	8009b54 <RCCEx_PLL2_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800769c:	e003      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80076ae:	4b33      	ldr	r3, [pc, #204]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80076b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076b4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80076b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c0:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80076ce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80076de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076e0:	2300      	movs	r3, #0
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80076e8:	460b      	mov	r3, r1
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d04c      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80076ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d827      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007715 	.word	0x08007715
 8007704:	08007723 	.word	0x08007723
 8007708:	08007737 	.word	0x08007737
 800770c:	08007753 	.word	0x08007753
 8007710:	08007753 	.word	0x08007753
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007718:	4a18      	ldr	r2, [pc, #96]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800771a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800771e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007720:	e018      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007726:	3308      	adds	r3, #8
 8007728:	4618      	mov	r0, r3
 800772a:	f002 fa13 	bl	8009b54 <RCCEx_PLL2_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007734:	e00e      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800773a:	3330      	adds	r3, #48	@ 0x30
 800773c:	4618      	mov	r0, r3
 800773e:	f002 faa1 	bl	8009c84 <RCCEx_PLL3_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007748:	e004      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007750:	e000      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007754:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d111      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800775c:	4b07      	ldr	r3, [pc, #28]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800775e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007762:	f023 0107 	bic.w	r1, r3, #7
 8007766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800776a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800776e:	4a03      	ldr	r2, [pc, #12]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007770:	430b      	orrs	r3, r1
 8007772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007776:	e007      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007778:	44020800 	.word	0x44020800
 800777c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007780:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007784:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007794:	633b      	str	r3, [r7, #48]	@ 0x30
 8007796:	2300      	movs	r3, #0
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
 800779a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800779e:	460b      	mov	r3, r1
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f000 8081 	beq.w	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80077a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d85f      	bhi.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80077b2:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	0800783d 	.word	0x0800783d
 80077bc:	08007873 	.word	0x08007873
 80077c0:	08007873 	.word	0x08007873
 80077c4:	08007873 	.word	0x08007873
 80077c8:	08007873 	.word	0x08007873
 80077cc:	08007873 	.word	0x08007873
 80077d0:	08007873 	.word	0x08007873
 80077d4:	08007873 	.word	0x08007873
 80077d8:	0800784b 	.word	0x0800784b
 80077dc:	08007873 	.word	0x08007873
 80077e0:	08007873 	.word	0x08007873
 80077e4:	08007873 	.word	0x08007873
 80077e8:	08007873 	.word	0x08007873
 80077ec:	08007873 	.word	0x08007873
 80077f0:	08007873 	.word	0x08007873
 80077f4:	08007873 	.word	0x08007873
 80077f8:	0800785f 	.word	0x0800785f
 80077fc:	08007873 	.word	0x08007873
 8007800:	08007873 	.word	0x08007873
 8007804:	08007873 	.word	0x08007873
 8007808:	08007873 	.word	0x08007873
 800780c:	08007873 	.word	0x08007873
 8007810:	08007873 	.word	0x08007873
 8007814:	08007873 	.word	0x08007873
 8007818:	0800787b 	.word	0x0800787b
 800781c:	08007873 	.word	0x08007873
 8007820:	08007873 	.word	0x08007873
 8007824:	08007873 	.word	0x08007873
 8007828:	08007873 	.word	0x08007873
 800782c:	08007873 	.word	0x08007873
 8007830:	08007873 	.word	0x08007873
 8007834:	08007873 	.word	0x08007873
 8007838:	0800787b 	.word	0x0800787b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783c:	4bb9      	ldr	r3, [pc, #740]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	4ab8      	ldr	r2, [pc, #736]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007846:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007848:	e018      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800784a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800784e:	3308      	adds	r3, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f002 f97f 	bl	8009b54 <RCCEx_PLL2_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800785c:	e00e      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800785e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007862:	3330      	adds	r3, #48	@ 0x30
 8007864:	4618      	mov	r0, r3
 8007866:	f002 fa0d 	bl	8009c84 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007870:	e004      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007878:	e000      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800787a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007884:	4ba7      	ldr	r3, [pc, #668]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800788a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800788e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007892:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007896:	4aa3      	ldr	r2, [pc, #652]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007898:	430b      	orrs	r3, r1
 800789a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800789e:	e003      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80078a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80078b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078b6:	2300      	movs	r3, #0
 80078b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80078be:	460b      	mov	r3, r1
 80078c0:	4313      	orrs	r3, r2
 80078c2:	d04e      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80078c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d0:	d02e      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d6:	d827      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80078d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80078da:	d02b      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80078dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80078de:	d823      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80078e0:	2b80      	cmp	r3, #128	@ 0x80
 80078e2:	d017      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80078e4:	2b80      	cmp	r3, #128	@ 0x80
 80078e6:	d81f      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80078ec:	2b40      	cmp	r3, #64	@ 0x40
 80078ee:	d007      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80078f0:	e01a      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f2:	4b8c      	ldr	r3, [pc, #560]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80078f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f6:	4a8b      	ldr	r2, [pc, #556]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80078f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80078fe:	e01a      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007904:	3308      	adds	r3, #8
 8007906:	4618      	mov	r0, r3
 8007908:	f002 f924 	bl	8009b54 <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007912:	e010      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007918:	3330      	adds	r3, #48	@ 0x30
 800791a:	4618      	mov	r0, r3
 800791c:	f002 f9b2 	bl	8009c84 <RCCEx_PLL3_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007926:	e006      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800792e:	e002      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007936:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10d      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800793e:	4b79      	ldr	r3, [pc, #484]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007944:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800794c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007950:	4974      	ldr	r1, [pc, #464]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800795e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800796e:	623b      	str	r3, [r7, #32]
 8007970:	2300      	movs	r3, #0
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
 8007974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007978:	460b      	mov	r3, r1
 800797a:	4313      	orrs	r3, r2
 800797c:	d055      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800797e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007982:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007986:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800798a:	d031      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 800798c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007990:	d82a      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007996:	d02d      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800799c:	d824      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800799e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079a2:	d029      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80079a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079a8:	d81e      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ae:	d011      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079b4:	d818      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d020      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079be:	d113      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c4:	3308      	adds	r3, #8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 f8c4 	bl	8009b54 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80079d2:	e014      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079d8:	3330      	adds	r3, #48	@ 0x30
 80079da:	4618      	mov	r0, r3
 80079dc:	f002 f952 	bl	8009c84 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80079e6:	e00a      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079ee:	e006      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80079f0:	bf00      	nop
 80079f2:	e004      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80079f4:	bf00      	nop
 80079f6:	e002      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80079fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10d      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007a06:	4b47      	ldr	r3, [pc, #284]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a0c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007a10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a18:	4942      	ldr	r1, [pc, #264]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007a20:	e003      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a26:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	2100      	movs	r1, #0
 8007a34:	61b9      	str	r1, [r7, #24]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a40:	460b      	mov	r3, r1
 8007a42:	4313      	orrs	r3, r2
 8007a44:	d03c      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d81b      	bhi.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007a52:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a93 	.word	0x08007a93
 8007a5c:	08007a69 	.word	0x08007a69
 8007a60:	08007a77 	.word	0x08007a77
 8007a64:	08007a93 	.word	0x08007a93
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a68:	4b2e      	ldr	r3, [pc, #184]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a72:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007a74:	e00e      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f002 f869 	bl	8009b54 <RCCEx_PLL2_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007a88:	e004      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a90:	e000      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10d      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007a9c:	4b21      	ldr	r3, [pc, #132]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa2:	f023 0203 	bic.w	r2, r3, #3
 8007aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007aae:	491d      	ldr	r1, [pc, #116]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007ab6:	e003      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007abc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6139      	str	r1, [r7, #16]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d03c      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae8:	d00e      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aee:	d815      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8007af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007af8:	d110      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007afa:	4b0a      	ldr	r3, [pc, #40]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	4a09      	ldr	r2, [pc, #36]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007b06:	e010      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f002 f820 	bl	8009b54 <RCCEx_PLL2_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007b1a:	e006      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b22:	e002      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8007b24:	44020c00 	.word	0x44020c00
        break;
 8007b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007b32:	4b3d      	ldr	r3, [pc, #244]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b44:	4938      	ldr	r1, [pc, #224]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b52:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	2100      	movs	r1, #0
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	d038      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007b7a:	2b30      	cmp	r3, #48	@ 0x30
 8007b7c:	d01b      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007b7e:	2b30      	cmp	r3, #48	@ 0x30
 8007b80:	d815      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007b82:	2b10      	cmp	r3, #16
 8007b84:	d002      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d007      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007b8a:	e010      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8c:	4b26      	ldr	r3, [pc, #152]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b90:	4a25      	ldr	r2, [pc, #148]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b96:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b98:	e00e      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b9e:	3330      	adds	r3, #48	@ 0x30
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f002 f86f 	bl	8009c84 <RCCEx_PLL3_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007bac:	e004      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007bc0:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007bc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bc6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007bd2:	4915      	ldr	r1, [pc, #84]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007bda:	e003      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007be0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	2100      	movs	r1, #0
 8007bee:	6039      	str	r1, [r7, #0]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d00c      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007c00:	4b09      	ldr	r3, [pc, #36]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c12:	4905      	ldr	r1, [pc, #20]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007c1a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	37e8      	adds	r7, #232	@ 0xe8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c28:	44020c00 	.word	0x44020c00

08007c2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b08b      	sub	sp, #44	@ 0x2c
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007c34:	4bae      	ldr	r3, [pc, #696]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007c3e:	4bac      	ldr	r3, [pc, #688]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007c48:	4ba9      	ldr	r3, [pc, #676]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	0a1b      	lsrs	r3, r3, #8
 8007c4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c52:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007c54:	4ba6      	ldr	r3, [pc, #664]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007c60:	4ba3      	ldr	r3, [pc, #652]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	08db      	lsrs	r3, r3, #3
 8007c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c78:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 8126 	beq.w	8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d053      	beq.n	8007d32 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d86f      	bhi.n	8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d003      	beq.n	8007c9e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d02b      	beq.n	8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007c9c:	e068      	b.n	8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c9e:	4b94      	ldr	r3, [pc, #592]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	08db      	lsrs	r3, r3, #3
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	4a92      	ldr	r2, [pc, #584]	@ (8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007cd6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007cf2:	e068      	b.n	8007dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007efc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d10:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d14:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007d30:	e049      	b.n	8007dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d52:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007d6e:	e02a      	b.n	8007dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d70:	4b5f      	ldr	r3, [pc, #380]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d80:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da4:	ed97 6a04 	vldr	s12, [r7, #16]
 8007da8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007dc4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dd2:	d121      	bne.n	8007e18 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007dd4:	4b46      	ldr	r3, [pc, #280]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d017      	beq.n	8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007de0:	4b43      	ldr	r3, [pc, #268]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de4:	0a5b      	lsrs	r3, r3, #9
 8007de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007df6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007dfa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e006      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e1e:	4b34      	ldr	r3, [pc, #208]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e2a:	d121      	bne.n	8007e70 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007e2c:	4b30      	ldr	r3, [pc, #192]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d017      	beq.n	8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007e38:	4b2d      	ldr	r3, [pc, #180]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3c:	0c1b      	lsrs	r3, r3, #16
 8007e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007e52:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	e006      	b.n	8007e76 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	e002      	b.n	8007e76 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e76:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e82:	d121      	bne.n	8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007e84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d017      	beq.n	8007ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007e90:	4b17      	ldr	r3, [pc, #92]	@ (8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007eaa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ebe:	e010      	b.n	8007ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	609a      	str	r2, [r3, #8]
}
 8007ec6:	e00c      	b.n	8007ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	609a      	str	r2, [r3, #8]
}
 8007ece:	e008      	b.n	8007ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]
}
 8007ee2:	bf00      	nop
 8007ee4:	372c      	adds	r7, #44	@ 0x2c
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	44020c00 	.word	0x44020c00
 8007ef4:	03d09000 	.word	0x03d09000
 8007ef8:	46000000 	.word	0x46000000
 8007efc:	4a742400 	.word	0x4a742400
 8007f00:	4af42400 	.word	0x4af42400

08007f04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b08b      	sub	sp, #44	@ 0x2c
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007f0c:	4bae      	ldr	r3, [pc, #696]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f14:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007f16:	4bac      	ldr	r3, [pc, #688]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007f20:	4ba9      	ldr	r3, [pc, #676]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f2a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007f2c:	4ba6      	ldr	r3, [pc, #664]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007f38:	4ba3      	ldr	r3, [pc, #652]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	08db      	lsrs	r3, r3, #3
 8007f3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f50:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8126 	beq.w	80081a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d053      	beq.n	800800a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d86f      	bhi.n	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d003      	beq.n	8007f76 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d02b      	beq.n	8007fcc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007f74:	e068      	b.n	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f76:	4b94      	ldr	r3, [pc, #592]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	4a92      	ldr	r2, [pc, #584]	@ (80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a04 	vldr	s12, [r7, #16]
 8007fae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007fca:	e068      	b.n	800809e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe8:	ed97 6a04 	vldr	s12, [r7, #16]
 8007fec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008004:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008008:	e049      	b.n	800809e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008014:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008026:	ed97 6a04 	vldr	s12, [r7, #16]
 800802a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800802e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800803a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008042:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008046:	e02a      	b.n	800809e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008048:	4b5f      	ldr	r3, [pc, #380]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	4a5e      	ldr	r2, [pc, #376]	@ (80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	ee07 3a90 	vmov	s15, r3
 8008078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008080:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008098:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800809c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800809e:	4b4a      	ldr	r3, [pc, #296]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080aa:	d121      	bne.n	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80080ac:	4b46      	ldr	r3, [pc, #280]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80080b8:	4b43      	ldr	r3, [pc, #268]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080bc:	0a5b      	lsrs	r3, r3, #9
 80080be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80080ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80080d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80080d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080de:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e006      	b.n	80080f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e002      	b.n	80080f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f6:	4b34      	ldr	r3, [pc, #208]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008102:	d121      	bne.n	8008148 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008104:	4b30      	ldr	r3, [pc, #192]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008110:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008126:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800812a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800812e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008136:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	e006      	b.n	800814e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	e002      	b.n	800814e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800814e:	4b1e      	ldr	r3, [pc, #120]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800815a:	d121      	bne.n	80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800815c:	4b1a      	ldr	r3, [pc, #104]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800815e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d017      	beq.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008168:	4b17      	ldr	r3, [pc, #92]	@ (80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800816a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816c:	0e1b      	lsrs	r3, r3, #24
 800816e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800817a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800817e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008182:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008196:	e010      	b.n	80081ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	609a      	str	r2, [r3, #8]
}
 800819e:	e00c      	b.n	80081ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
}
 80081a6:	e008      	b.n	80081ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]
}
 80081ba:	bf00      	nop
 80081bc:	372c      	adds	r7, #44	@ 0x2c
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	44020c00 	.word	0x44020c00
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	46000000 	.word	0x46000000
 80081d4:	4a742400 	.word	0x4a742400
 80081d8:	4af42400 	.word	0x4af42400

080081dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80081dc:	b480      	push	{r7}
 80081de:	b08b      	sub	sp, #44	@ 0x2c
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80081e4:	4bae      	ldr	r3, [pc, #696]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80081e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ec:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80081ee:	4bac      	ldr	r3, [pc, #688]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80081f8:	4ba9      	ldr	r3, [pc, #676]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80081fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008202:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008204:	4ba6      	ldr	r3, [pc, #664]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008208:	091b      	lsrs	r3, r3, #4
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008210:	4ba3      	ldr	r3, [pc, #652]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008214:	08db      	lsrs	r3, r3, #3
 8008216:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	fb02 f303 	mul.w	r3, r2, r3
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008228:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 8126 	beq.w	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d053      	beq.n	80082e2 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d86f      	bhi.n	8008320 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d003      	beq.n	800824e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d02b      	beq.n	80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800824c:	e068      	b.n	8008320 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800824e:	4b94      	ldr	r3, [pc, #592]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	08db      	lsrs	r3, r3, #3
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	4a92      	ldr	r2, [pc, #584]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800825a:	fa22 f303 	lsr.w	r3, r2, r3
 800825e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a04 	vldr	s12, [r7, #16]
 8008286:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80082a2:	e068      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80082c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80082c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80082e0:	e049      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	ee07 3a90 	vmov	s15, r3
 80082e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80082f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8008302:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800831e:	e02a      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008320:	4b5f      	ldr	r3, [pc, #380]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	08db      	lsrs	r3, r3, #3
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	4a5e      	ldr	r2, [pc, #376]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008354:	ed97 6a04 	vldr	s12, [r7, #16]
 8008358:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800835c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008370:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008374:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008376:	4b4a      	ldr	r3, [pc, #296]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008382:	d121      	bne.n	80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008384:	4b46      	ldr	r3, [pc, #280]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d017      	beq.n	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008390:	4b43      	ldr	r3, [pc, #268]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80083a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80083aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80083ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e006      	b.n	80083ce <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e002      	b.n	80083ce <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ce:	4b34      	ldr	r3, [pc, #208]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083da:	d121      	bne.n	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80083dc:	4b30      	ldr	r3, [pc, #192]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d017      	beq.n	8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80083e8:	4b2d      	ldr	r3, [pc, #180]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ec:	0c1b      	lsrs	r3, r3, #16
 80083ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80083fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008402:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	e006      	b.n	8008426 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	e002      	b.n	8008426 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008426:	4b1e      	ldr	r3, [pc, #120]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008432:	d121      	bne.n	8008478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008434:	4b1a      	ldr	r3, [pc, #104]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d017      	beq.n	8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008444:	0e1b      	lsrs	r3, r3, #24
 8008446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008456:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800845a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800845e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008466:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800846e:	e010      	b.n	8008492 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	609a      	str	r2, [r3, #8]
}
 8008476:	e00c      	b.n	8008492 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	609a      	str	r2, [r3, #8]
}
 800847e:	e008      	b.n	8008492 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	609a      	str	r2, [r3, #8]
}
 8008492:	bf00      	nop
 8008494:	372c      	adds	r7, #44	@ 0x2c
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	44020c00 	.word	0x44020c00
 80084a4:	03d09000 	.word	0x03d09000
 80084a8:	46000000 	.word	0x46000000
 80084ac:	4a742400 	.word	0x4a742400
 80084b0:	4af42400 	.word	0x4af42400

080084b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b08f      	sub	sp, #60	@ 0x3c
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80084be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80084c6:	4321      	orrs	r1, r4
 80084c8:	d150      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80084ca:	4b26      	ldr	r3, [pc, #152]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80084d6:	4b23      	ldr	r3, [pc, #140]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d108      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ea:	d104      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80084ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f2:	f001 bb20 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80084f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008504:	d108      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850c:	d104      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800850e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
 8008514:	f001 bb0f 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008518:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008524:	d119      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800852c:	d115      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800852e:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853a:	d30a      	bcc.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008546:	4a08      	ldr	r2, [pc, #32]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008548:	fbb2 f3f3 	udiv	r3, r2, r3
 800854c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800854e:	f001 baf2 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008556:	f001 baee 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
 800855e:	f001 baea 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008562:	bf00      	nop
 8008564:	44020c00 	.word	0x44020c00
 8008568:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800856c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008570:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8008574:	ea50 0104 	orrs.w	r1, r0, r4
 8008578:	f000 8615 	beq.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 800857c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008580:	2801      	cmp	r0, #1
 8008582:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8008586:	f081 82d3 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800858a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800858e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008592:	ea50 0104 	orrs.w	r1, r0, r4
 8008596:	f000 84d8 	beq.w	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800859a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800859e:	2801      	cmp	r0, #1
 80085a0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80085a4:	f081 82c4 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ac:	f1a1 0410 	sub.w	r4, r1, #16
 80085b0:	ea50 0104 	orrs.w	r1, r0, r4
 80085b4:	f001 8288 	beq.w	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 80085b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085bc:	2801      	cmp	r0, #1
 80085be:	f171 0110 	sbcs.w	r1, r1, #16
 80085c2:	f081 82b5 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ca:	f1a1 0408 	sub.w	r4, r1, #8
 80085ce:	ea50 0104 	orrs.w	r1, r0, r4
 80085d2:	f001 81fe 	beq.w	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80085d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085da:	2801      	cmp	r0, #1
 80085dc:	f171 0108 	sbcs.w	r1, r1, #8
 80085e0:	f081 82a6 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80085e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085e8:	1f0c      	subs	r4, r1, #4
 80085ea:	ea50 0104 	orrs.w	r1, r0, r4
 80085ee:	f000 8753 	beq.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80085f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085f6:	2801      	cmp	r0, #1
 80085f8:	f171 0104 	sbcs.w	r1, r1, #4
 80085fc:	f081 8298 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008604:	1e8c      	subs	r4, r1, #2
 8008606:	ea50 0104 	orrs.w	r1, r0, r4
 800860a:	f001 8173 	beq.w	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800860e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008612:	2801      	cmp	r0, #1
 8008614:	f171 0102 	sbcs.w	r1, r1, #2
 8008618:	f081 828a 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800861c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008620:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008624:	4321      	orrs	r1, r4
 8008626:	f001 80fe 	beq.w	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800862a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800862e:	4ccb      	ldr	r4, [pc, #812]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008630:	42a0      	cmp	r0, r4
 8008632:	f171 0100 	sbcs.w	r1, r1, #0
 8008636:	f081 827b 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800863a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800863e:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008642:	4321      	orrs	r1, r4
 8008644:	f001 8076 	beq.w	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800864c:	4cc4      	ldr	r4, [pc, #784]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800864e:	42a0      	cmp	r0, r4
 8008650:	f171 0100 	sbcs.w	r1, r1, #0
 8008654:	f081 826c 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800865c:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008660:	4321      	orrs	r1, r4
 8008662:	f000 87b5 	beq.w	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800866a:	4cbe      	ldr	r4, [pc, #760]	@ (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 800866c:	42a0      	cmp	r0, r4
 800866e:	f171 0100 	sbcs.w	r1, r1, #0
 8008672:	f081 825d 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800867a:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800867e:	4321      	orrs	r1, r4
 8008680:	f000 8738 	beq.w	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008688:	4cb7      	ldr	r4, [pc, #732]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800868a:	42a0      	cmp	r0, r4
 800868c:	f171 0100 	sbcs.w	r1, r1, #0
 8008690:	f081 824e 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008698:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800869c:	4321      	orrs	r1, r4
 800869e:	f001 81cd 	beq.w	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 80086a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086a6:	4cb1      	ldr	r4, [pc, #708]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	f171 0100 	sbcs.w	r1, r1, #0
 80086ae:	f081 823f 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086b6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80086ba:	4321      	orrs	r1, r4
 80086bc:	f000 80d9 	beq.w	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80086c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086c4:	4caa      	ldr	r4, [pc, #680]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80086c6:	42a0      	cmp	r0, r4
 80086c8:	f171 0100 	sbcs.w	r1, r1, #0
 80086cc:	f081 8230 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086d4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80086d8:	4321      	orrs	r1, r4
 80086da:	f000 83da 	beq.w	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80086de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086e2:	4ca4      	ldr	r4, [pc, #656]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	f171 0100 	sbcs.w	r1, r1, #0
 80086ea:	f081 8221 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80086ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086f2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80086f6:	4321      	orrs	r1, r4
 80086f8:	f000 8627 	beq.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80086fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008700:	4c9d      	ldr	r4, [pc, #628]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8008702:	42a0      	cmp	r0, r4
 8008704:	f171 0100 	sbcs.w	r1, r1, #0
 8008708:	f081 8212 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800870c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008710:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008714:	4321      	orrs	r1, r4
 8008716:	f000 857a 	beq.w	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800871a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800871e:	4c97      	ldr	r4, [pc, #604]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008720:	42a0      	cmp	r0, r4
 8008722:	f171 0100 	sbcs.w	r1, r1, #0
 8008726:	f081 8203 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800872a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800872e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008732:	4321      	orrs	r1, r4
 8008734:	f000 84fb 	beq.w	800912e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800873c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008740:	f171 0100 	sbcs.w	r1, r1, #0
 8008744:	f081 81f4 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800874c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008750:	4321      	orrs	r1, r4
 8008752:	f000 84a9 	beq.w	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800875a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800875e:	42a0      	cmp	r0, r4
 8008760:	f171 0100 	sbcs.w	r1, r1, #0
 8008764:	f081 81e4 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800876c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008770:	4321      	orrs	r1, r4
 8008772:	f000 8456 	beq.w	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8008776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800877a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800877e:	42a0      	cmp	r0, r4
 8008780:	f171 0100 	sbcs.w	r1, r1, #0
 8008784:	f081 81d4 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800878c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008790:	4321      	orrs	r1, r4
 8008792:	f000 8403 	beq.w	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800879a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800879e:	42a0      	cmp	r0, r4
 80087a0:	f171 0100 	sbcs.w	r1, r1, #0
 80087a4:	f081 81c4 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80087a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ac:	2821      	cmp	r0, #33	@ 0x21
 80087ae:	f171 0100 	sbcs.w	r1, r1, #0
 80087b2:	d255      	bcs.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80087b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087b8:	4301      	orrs	r1, r0
 80087ba:	f001 81b9 	beq.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80087be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087c2:	1e42      	subs	r2, r0, #1
 80087c4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80087c8:	2a20      	cmp	r2, #32
 80087ca:	f173 0100 	sbcs.w	r1, r3, #0
 80087ce:	f081 81af 	bcs.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80087d2:	2a1f      	cmp	r2, #31
 80087d4:	f201 81ac 	bhi.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80087d8:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80087da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087de:	bf00      	nop
 80087e0:	080088b7 	.word	0x080088b7
 80087e4:	080089b5 	.word	0x080089b5
 80087e8:	08009b31 	.word	0x08009b31
 80087ec:	08008a75 	.word	0x08008a75
 80087f0:	08009b31 	.word	0x08009b31
 80087f4:	08009b31 	.word	0x08009b31
 80087f8:	08009b31 	.word	0x08009b31
 80087fc:	08008b45 	.word	0x08008b45
 8008800:	08009b31 	.word	0x08009b31
 8008804:	08009b31 	.word	0x08009b31
 8008808:	08009b31 	.word	0x08009b31
 800880c:	08009b31 	.word	0x08009b31
 8008810:	08009b31 	.word	0x08009b31
 8008814:	08009b31 	.word	0x08009b31
 8008818:	08009b31 	.word	0x08009b31
 800881c:	08008c29 	.word	0x08008c29
 8008820:	08009b31 	.word	0x08009b31
 8008824:	08009b31 	.word	0x08009b31
 8008828:	08009b31 	.word	0x08009b31
 800882c:	08009b31 	.word	0x08009b31
 8008830:	08009b31 	.word	0x08009b31
 8008834:	08009b31 	.word	0x08009b31
 8008838:	08009b31 	.word	0x08009b31
 800883c:	08009b31 	.word	0x08009b31
 8008840:	08009b31 	.word	0x08009b31
 8008844:	08009b31 	.word	0x08009b31
 8008848:	08009b31 	.word	0x08009b31
 800884c:	08009b31 	.word	0x08009b31
 8008850:	08009b31 	.word	0x08009b31
 8008854:	08009b31 	.word	0x08009b31
 8008858:	08009b31 	.word	0x08009b31
 800885c:	08008cff 	.word	0x08008cff
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008868:	430b      	orrs	r3, r1
 800886a:	f000 82b3 	beq.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800886e:	f001 b95f 	b.w	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008872:	4b43      	ldr	r3, [pc, #268]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008884:	f107 0320 	add.w	r3, r7, #32
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff f9cf 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008892:	f001 b950 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	2b40      	cmp	r3, #64	@ 0x40
 800889a:	d108      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fb2f 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088aa:	f001 b944 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b2:	f001 b940 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80088b6:	4b32      	ldr	r3, [pc, #200]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80088b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80088c8:	f7fd ffc4 	bl	8006854 <HAL_RCC_GetPCLK2Freq>
 80088cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088ce:	f001 b932 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80088d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088de:	d10a      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d107      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e6:	f107 0314 	add.w	r3, r7, #20
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fb0a 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f4:	e05c      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80088f6:	4b22      	ldr	r3, [pc, #136]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008902:	d10a      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	2b02      	cmp	r3, #2
 8008908:	d107      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800890a:	f107 0308 	add.w	r3, r7, #8
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff fc64 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	637b      	str	r3, [r7, #52]	@ 0x34
 8008918:	e04a      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800891a:	4b19      	ldr	r3, [pc, #100]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b02      	cmp	r3, #2
 8008924:	d10c      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	2b03      	cmp	r3, #3
 800892a:	d109      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800892c:	4b14      	ldr	r3, [pc, #80]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	08db      	lsrs	r3, r3, #3
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	4a13      	ldr	r2, [pc, #76]	@ (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
 800893e:	e037      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008940:	4b0f      	ldr	r3, [pc, #60]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800894c:	d11e      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11b      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008954:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
 8008958:	e02a      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800895a:	bf00      	nop
 800895c:	40000001 	.word	0x40000001
 8008960:	20000001 	.word	0x20000001
 8008964:	10000001 	.word	0x10000001
 8008968:	08000001 	.word	0x08000001
 800896c:	04000001 	.word	0x04000001
 8008970:	00400001 	.word	0x00400001
 8008974:	00200001 	.word	0x00200001
 8008978:	00040001 	.word	0x00040001
 800897c:	00020001 	.word	0x00020001
 8008980:	44020c00 	.word	0x44020c00
 8008984:	03d09000 	.word	0x03d09000
 8008988:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800898c:	4ba3      	ldr	r3, [pc, #652]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800898e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b02      	cmp	r3, #2
 8008998:	d106      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	2b05      	cmp	r3, #5
 800899e:	d103      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80089a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a6:	e003      	b.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ac:	f001 b8c3 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80089b0:	f001 b8c1 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80089b4:	4b99      	ldr	r3, [pc, #612]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80089ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089c6:	f7fd ff2f 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 80089ca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80089cc:	f001 b8b3 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80089d0:	4b92      	ldr	r3, [pc, #584]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089dc:	d10a      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d107      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fa8b 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f2:	e03d      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	2b10      	cmp	r3, #16
 80089f8:	d108      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089fa:	f107 0308 	add.w	r3, r7, #8
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fbec 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a08:	f001 b895 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008a0c:	4b83      	ldr	r3, [pc, #524]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d10c      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	2b18      	cmp	r3, #24
 8008a1c:	d109      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	08db      	lsrs	r3, r3, #3
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	4a7d      	ldr	r2, [pc, #500]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a30:	e01e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008a32:	4b7a      	ldr	r3, [pc, #488]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3e:	d105      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d102      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8008a46:	4b77      	ldr	r3, [pc, #476]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	e011      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008a4c:	4b73      	ldr	r3, [pc, #460]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d106      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	2b28      	cmp	r3, #40	@ 0x28
 8008a5e:	d103      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a66:	e003      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a6c:	f001 b863 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a70:	f001 b861 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a74:	4b69      	ldr	r3, [pc, #420]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a7a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008a7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a86:	f7fd fecf 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8008a8a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a8c:	f001 b853 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008a90:	4b62      	ldr	r3, [pc, #392]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	2b40      	cmp	r3, #64	@ 0x40
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fa2b 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab2:	e045      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008ab4:	4b59      	ldr	r3, [pc, #356]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	2b80      	cmp	r3, #128	@ 0x80
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff fb85 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad6:	e033      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008ad8:	4b50      	ldr	r3, [pc, #320]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d10c      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ae8:	d109      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008aea:	4b4c      	ldr	r3, [pc, #304]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	08db      	lsrs	r3, r3, #3
 8008af0:	f003 0303 	and.w	r3, r3, #3
 8008af4:	4a4a      	ldr	r2, [pc, #296]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008af6:	fa22 f303 	lsr.w	r3, r2, r3
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	e020      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008afe:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b0a:	d106      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b12:	d102      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8008b14:	4b43      	ldr	r3, [pc, #268]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b18:	e012      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008b1a:	4b40      	ldr	r3, [pc, #256]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d107      	bne.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008b2e:	d103      	bne.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b36:	e003      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b3c:	f000 bffb 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008b40:	f000 bff9 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b44:	4b35      	ldr	r3, [pc, #212]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b4a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008b4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b56:	f7fd fe67 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8008b5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b5c:	f000 bfeb 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008b60:	4b2e      	ldr	r3, [pc, #184]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b6c:	d10b      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b76:	f107 0314 	add.w	r3, r7, #20
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff f9c2 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	e047      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008b86:	4b25      	ldr	r3, [pc, #148]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b92:	d10b      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b9a:	d107      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9c:	f107 0308 	add.w	r3, r7, #8
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff fb1b 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008baa:	e034      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008bac:	4b1b      	ldr	r3, [pc, #108]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d10d      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bbe:	d109      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bc0:	4b16      	ldr	r3, [pc, #88]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a15      	ldr	r2, [pc, #84]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd2:	e020      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008bd4:	4b11      	ldr	r3, [pc, #68]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be0:	d106      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008be8:	d102      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8008bea:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bee:	e012      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d107      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008c04:	d103      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0c:	e003      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c12:	f000 bf90 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008c16:	f000 bf8e 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008c1a:	bf00      	nop
 8008c1c:	44020c00 	.word	0x44020c00
 8008c20:	03d09000 	.word	0x03d09000
 8008c24:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008c28:	4ba5      	ldr	r3, [pc, #660]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c2e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c3a:	f7fd fdf5 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8008c3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c40:	f000 bf79 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008c44:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c50:	d10b      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c5a:	f107 0314 	add.w	r3, r7, #20
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f950 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c68:	e047      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008c6a:	4b95      	ldr	r3, [pc, #596]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c76:	d10b      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c7e:	d107      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff faa9 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8e:	e034      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c90:	4b8b      	ldr	r3, [pc, #556]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ca2:	d109      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ca4:	4b86      	ldr	r3, [pc, #536]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	08db      	lsrs	r3, r3, #3
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	4a85      	ldr	r2, [pc, #532]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	e020      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008cb8:	4b81      	ldr	r3, [pc, #516]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc4:	d106      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ccc:	d102      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8008cce:	4b7e      	ldr	r3, [pc, #504]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	e012      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ce8:	d103      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8008cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf0:	e003      	b.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cf6:	f000 bf1e 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008cfa:	f000 bf1c 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008cfe:	4b70      	ldr	r3, [pc, #448]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d04:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008d08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d10:	f7fd fd8a 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8008d14:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d16:	f000 bf0e 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008d1a:	4b69      	ldr	r3, [pc, #420]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d26:	d10b      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff f8e5 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d3e:	e047      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008d40:	4b5f      	ldr	r3, [pc, #380]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4c:	d10b      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d54:	d107      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fa3e 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d64:	e034      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008d66:	4b56      	ldr	r3, [pc, #344]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d10d      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008d78:	d109      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d7a:	4b51      	ldr	r3, [pc, #324]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	08db      	lsrs	r3, r3, #3
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	4a4f      	ldr	r2, [pc, #316]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008d86:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8c:	e020      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d9a:	d106      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da2:	d102      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8008da4:	4b48      	ldr	r3, [pc, #288]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da8:	e012      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008daa:	4b45      	ldr	r3, [pc, #276]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d107      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008dbe:	d103      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc6:	e003      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dcc:	f000 beb3 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008dd0:	f000 beb1 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dda:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008dde:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008de6:	f7fd fd4b 	bl	8006880 <HAL_RCC_GetPCLK3Freq>
 8008dea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dec:	f000 bea3 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008df6:	d108      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff f881 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e06:	f000 be96 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e10:	d108      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff f9e0 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e20:	f000 be89 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008e24:	4b26      	ldr	r3, [pc, #152]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d10d      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e36:	d109      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e38:	4b21      	ldr	r3, [pc, #132]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	08db      	lsrs	r3, r3, #3
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	4a20      	ldr	r2, [pc, #128]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008e44:	fa22 f303 	lsr.w	r3, r2, r3
 8008e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4a:	e020      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e58:	d106      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e60:	d102      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8008e62:	4b19      	ldr	r3, [pc, #100]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	e012      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008e68:	4b15      	ldr	r3, [pc, #84]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d107      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e7c:	d103      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8008e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e84:	e003      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e8a:	f000 be54 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e8e:	f000 be52 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008e92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008ea4:	f7fd fca4 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8008ea8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008eaa:	f000 be44 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d10b      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8008eb4:	f7fd fb70 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8008eb8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008eba:	f000 be3c 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008ebe:	bf00      	nop
 8008ec0:	44020c00 	.word	0x44020c00
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d108      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed2:	f107 0314 	add.w	r3, r7, #20
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff f814 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ee0:	f000 be29 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008ee4:	4b9f      	ldr	r3, [pc, #636]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ef0:	d105      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d102      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8008ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efc:	e023      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008efe:	4b99      	ldr	r3, [pc, #612]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d10c      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d109      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f10:	4b94      	ldr	r3, [pc, #592]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a94      	ldr	r2, [pc, #592]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f22:	e010      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008f24:	4b8f      	ldr	r3, [pc, #572]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f30:	d105      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8008f38:	4b8d      	ldr	r3, [pc, #564]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3c:	e003      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f42:	f000 bdf8 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f46:	f000 bdf6 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008f4a:	4b86      	ldr	r3, [pc, #536]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008f56:	4b83      	ldr	r3, [pc, #524]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d106      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8008f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f70:	e012      	b.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008f72:	4b7c      	ldr	r3, [pc, #496]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f80:	d106      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d103      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8008f88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8e:	e003      	b.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008f94:	f000 bdcf 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f98:	f000 bdcd 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f9c:	4b71      	ldr	r3, [pc, #452]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008fa6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fae:	f7fd fc3b 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8008fb2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fb4:	f000 bdbf 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fbe:	d108      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff f909 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fce:	f000 bdb2 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008fd2:	4b64      	ldr	r3, [pc, #400]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d10d      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe4:	d109      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff8:	e011      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009006:	d106      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800900e:	d102      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8009010:	4b57      	ldr	r3, [pc, #348]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
 8009014:	e003      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800901a:	f000 bd8c 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800901e:	f000 bd8a 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009022:	4b50      	ldr	r3, [pc, #320]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009028:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800902c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009034:	f7fd fbf8 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8009038:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800903a:	f000 bd7c 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009044:	d108      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009046:	f107 0308 	add.w	r3, r7, #8
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff f8c6 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009054:	f000 bd6f 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009058:	4b42      	ldr	r3, [pc, #264]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b02      	cmp	r3, #2
 8009062:	d10d      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800906a:	d109      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800906c:	4b3d      	ldr	r3, [pc, #244]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	08db      	lsrs	r3, r3, #3
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	4a3d      	ldr	r2, [pc, #244]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
 800907e:	e011      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009080:	4b38      	ldr	r3, [pc, #224]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800908c:	d106      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009094:	d102      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8009096:	4b36      	ldr	r3, [pc, #216]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009098:	637b      	str	r3, [r7, #52]	@ 0x34
 800909a:	e003      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a0:	f000 bd49 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80090a4:	f000 bd47 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80090aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80090b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80090ba:	f7fd fbe1 	bl	8006880 <HAL_RCC_GetPCLK3Freq>
 80090be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80090c0:	f000 bd39 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ca:	d108      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff f883 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090da:	f000 bd2c 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80090de:	4b21      	ldr	r3, [pc, #132]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d10d      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090f0:	d109      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	08db      	lsrs	r3, r3, #3
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	4a1b      	ldr	r2, [pc, #108]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80090fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
 8009104:	e011      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009106:	4b17      	ldr	r3, [pc, #92]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800910e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009112:	d106      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800911a:	d102      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 800911c:	4b14      	ldr	r3, [pc, #80]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800911e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009120:	e003      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009126:	f000 bd06 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800912a:	f000 bd04 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009134:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009138:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009140:	f7fd fb72 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 8009144:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009146:	f000 bcf6 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009150:	d110      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff f840 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009160:	f000 bce9 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009164:	44020c00 	.word	0x44020c00
 8009168:	007a1200 	.word	0x007a1200
 800916c:	03d09000 	.word	0x03d09000
 8009170:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009174:	4ba4      	ldr	r3, [pc, #656]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b02      	cmp	r3, #2
 800917e:	d10e      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009186:	d10a      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009188:	4b9f      	ldr	r3, [pc, #636]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	4a9e      	ldr	r2, [pc, #632]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800919a:	f000 bccc 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a2:	f000 bcc8 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80091a6:	4b98      	ldr	r3, [pc, #608]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091b0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091b8:	f7fd fb62 	bl	8006880 <HAL_RCC_GetPCLK3Freq>
 80091bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80091be:	f000 bcba 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091c8:	d108      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ca:	f107 0308 	add.w	r3, r7, #8
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f804 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091d8:	f000 bcad 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80091dc:	4b8a      	ldr	r3, [pc, #552]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d10e      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ee:	d10a      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f0:	4b85      	ldr	r3, [pc, #532]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a84      	ldr	r2, [pc, #528]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009202:	f000 bc98 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800920a:	f000 bc94 	b.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800920e:	4b7e      	ldr	r3, [pc, #504]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009214:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009218:	633b      	str	r3, [r7, #48]	@ 0x30
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009220:	d056      	beq.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009228:	f200 808b 	bhi.w	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009232:	d03e      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800923a:	f200 8082 	bhi.w	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009244:	d027      	beq.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800924c:	d879      	bhi.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009254:	d017      	beq.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800925c:	d871      	bhi.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926a:	d004      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 800926c:	e069      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800926e:	f7fd fb07 	bl	8006880 <HAL_RCC_GetPCLK3Freq>
 8009272:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009274:	e068      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009276:	f107 0314 	add.w	r3, r7, #20
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fe42 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009284:	e060      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe ffa6 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009294:	e058      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009296:	4b5c      	ldr	r3, [pc, #368]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d103      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 80092a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092aa:	e04d      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092b0:	e04a      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80092b2:	4b55      	ldr	r3, [pc, #340]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c0:	d103      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80092c2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092c8:	e03e      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ce:	e03b      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092da:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d10c      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80092e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d109      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ee:	4b46      	ldr	r3, [pc, #280]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	08db      	lsrs	r3, r3, #3
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	4a44      	ldr	r2, [pc, #272]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009300:	e01e      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009302:	4b41      	ldr	r3, [pc, #260]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800930a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800930e:	d106      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009316:	d102      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009318:	4b3d      	ldr	r3, [pc, #244]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
 800931c:	e010      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800931e:	4b3a      	ldr	r3, [pc, #232]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800932a:	d106      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800932c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009332:	d102      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009334:	4b37      	ldr	r3, [pc, #220]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8009336:	637b      	str	r3, [r7, #52]	@ 0x34
 8009338:	e002      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800933e:	e003      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009340:	e002      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009346:	bf00      	nop
          }
        }
        break;
 8009348:	e3f5      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800934a:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800934c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009350:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009354:	633b      	str	r3, [r7, #48]	@ 0x30
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800935c:	d05f      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009364:	f200 8094 	bhi.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800936e:	d03f      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009376:	f200 808b 	bhi.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009380:	d028      	beq.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009388:	f200 8082 	bhi.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009392:	d017      	beq.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800939a:	d879      	bhi.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a8:	d004      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 80093aa:	e071      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80093ac:	f7fd fa3c 	bl	8006828 <HAL_RCC_GetPCLK1Freq>
 80093b0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80093b2:	e070      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b4:	f107 0314 	add.w	r3, r7, #20
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fda3 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093c2:	e068      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c4:	f107 0308 	add.w	r3, r7, #8
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe ff07 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093d2:	e060      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80093d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d103      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80093e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80093e8:	e055      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093ee:	e052      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80093f0:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80093f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093fe:	d10b      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8009400:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009404:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009406:	e046      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8009408:	44020c00 	.word	0x44020c00
 800940c:	03d09000 	.word	0x03d09000
 8009410:	003d0900 	.word	0x003d0900
 8009414:	007a1200 	.word	0x007a1200
              frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800941c:	e03b      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800941e:	4bae      	ldr	r3, [pc, #696]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009424:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009428:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800942a:	4bab      	ldr	r3, [pc, #684]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d10c      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8009436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d109      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800943c:	4ba6      	ldr	r3, [pc, #664]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	08db      	lsrs	r3, r3, #3
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	4aa5      	ldr	r2, [pc, #660]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
 800944e:	e01e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009450:	4ba1      	ldr	r3, [pc, #644]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800945c:	d106      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009464:	d102      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009466:	4b9e      	ldr	r3, [pc, #632]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	e010      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800946c:	4b9a      	ldr	r3, [pc, #616]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009478:	d106      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009480:	d102      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009482:	4b98      	ldr	r3, [pc, #608]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
 8009486:	e002      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800948e:	e002      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009494:	bf00      	nop
          }
        }
        break;
 8009496:	e34e      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009498:	4b8f      	ldr	r3, [pc, #572]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800949a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800949e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80094a4:	4b8c      	ldr	r3, [pc, #560]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b0:	d105      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80094b8:	4b8a      	ldr	r3, [pc, #552]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80094bc:	e33b      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c4:	d107      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c6:	f107 0320 	add.w	r3, r7, #32
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fbae 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094d4:	e32f      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094dc:	d107      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fd0e 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ec:	e323      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094f2:	e320      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80094f4:	4b78      	ldr	r3, [pc, #480]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80094f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	2b04      	cmp	r3, #4
 8009504:	d860      	bhi.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8009506:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009521 	.word	0x08009521
 8009510:	08009531 	.word	0x08009531
 8009514:	08009541 	.word	0x08009541
 8009518:	08009551 	.word	0x08009551
 800951c:	08009557 	.word	0x08009557
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009520:	f107 0320 	add.w	r3, r7, #32
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fb81 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800952e:	e04e      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009530:	f107 0314 	add.w	r3, r7, #20
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fce5 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800953e:	e046      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009540:	f107 0308 	add.w	r3, r7, #8
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe fe49 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800954e:	e03e      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009550:	4b65      	ldr	r3, [pc, #404]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009554:	e03b      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009556:	4b60      	ldr	r3, [pc, #384]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800955c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009560:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009562:	4b5d      	ldr	r3, [pc, #372]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	2b02      	cmp	r3, #2
 800956c:	d10c      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d109      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009574:	4b58      	ldr	r3, [pc, #352]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	08db      	lsrs	r3, r3, #3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	4a57      	ldr	r2, [pc, #348]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009580:	fa22 f303 	lsr.w	r3, r2, r3
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
 8009586:	e01e      	b.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009588:	4b53      	ldr	r3, [pc, #332]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009594:	d106      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959c:	d102      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800959e:	4b50      	ldr	r3, [pc, #320]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a2:	e010      	b.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095a4:	4b4c      	ldr	r3, [pc, #304]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b0:	d106      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b8:	d102      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80095ba:	4b4a      	ldr	r3, [pc, #296]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095be:	e002      	b.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80095c4:	e003      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80095c6:	e002      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095cc:	bf00      	nop
          }
        }
        break;
 80095ce:	e2b2      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80095d0:	4b41      	ldr	r3, [pc, #260]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80095d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095da:	633b      	str	r3, [r7, #48]	@ 0x30
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	2b20      	cmp	r3, #32
 80095e0:	f200 80a4 	bhi.w	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80095e4:	a201      	add	r2, pc, #4	@ (adr r2, 80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009671 	.word	0x08009671
 80095f0:	0800972d 	.word	0x0800972d
 80095f4:	0800972d 	.word	0x0800972d
 80095f8:	0800972d 	.word	0x0800972d
 80095fc:	0800972d 	.word	0x0800972d
 8009600:	0800972d 	.word	0x0800972d
 8009604:	0800972d 	.word	0x0800972d
 8009608:	0800972d 	.word	0x0800972d
 800960c:	08009681 	.word	0x08009681
 8009610:	0800972d 	.word	0x0800972d
 8009614:	0800972d 	.word	0x0800972d
 8009618:	0800972d 	.word	0x0800972d
 800961c:	0800972d 	.word	0x0800972d
 8009620:	0800972d 	.word	0x0800972d
 8009624:	0800972d 	.word	0x0800972d
 8009628:	0800972d 	.word	0x0800972d
 800962c:	08009691 	.word	0x08009691
 8009630:	0800972d 	.word	0x0800972d
 8009634:	0800972d 	.word	0x0800972d
 8009638:	0800972d 	.word	0x0800972d
 800963c:	0800972d 	.word	0x0800972d
 8009640:	0800972d 	.word	0x0800972d
 8009644:	0800972d 	.word	0x0800972d
 8009648:	0800972d 	.word	0x0800972d
 800964c:	080096a1 	.word	0x080096a1
 8009650:	0800972d 	.word	0x0800972d
 8009654:	0800972d 	.word	0x0800972d
 8009658:	0800972d 	.word	0x0800972d
 800965c:	0800972d 	.word	0x0800972d
 8009660:	0800972d 	.word	0x0800972d
 8009664:	0800972d 	.word	0x0800972d
 8009668:	0800972d 	.word	0x0800972d
 800966c:	080096a7 	.word	0x080096a7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009670:	f107 0320 	add.w	r3, r7, #32
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fad9 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800967e:	e058      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009680:	f107 0314 	add.w	r3, r7, #20
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fc3d 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800968e:	e050      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fda1 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800969e:	e048      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80096a0:	4b11      	ldr	r3, [pc, #68]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a4:	e045      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096a6:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80096a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096b2:	4b09      	ldr	r3, [pc, #36]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d116      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d113      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096c4:	4b04      	ldr	r3, [pc, #16]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	08db      	lsrs	r3, r3, #3
 80096ca:	f003 0303 	and.w	r3, r3, #3
 80096ce:	4a03      	ldr	r2, [pc, #12]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80096d0:	fa22 f303 	lsr.w	r3, r2, r3
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d6:	e028      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80096d8:	44020c00 	.word	0x44020c00
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	007a1200 	.word	0x007a1200
 80096e8:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ec:	4b95      	ldr	r3, [pc, #596]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f8:	d106      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80096fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009700:	d102      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009702:	4b91      	ldr	r3, [pc, #580]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
 8009706:	e010      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009708:	4b8e      	ldr	r3, [pc, #568]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009714:	d106      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8009716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800971c:	d102      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800971e:	4b8b      	ldr	r3, [pc, #556]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
 8009722:	e002      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009728:	e003      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800972a:	e002      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009730:	bf00      	nop
          }
        }
        break;
 8009732:	e200      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009734:	4b83      	ldr	r3, [pc, #524]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800973a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009746:	d031      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974e:	d866      	bhi.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	2bc0      	cmp	r3, #192	@ 0xc0
 8009754:	d027      	beq.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009758:	2bc0      	cmp	r3, #192	@ 0xc0
 800975a:	d860      	bhi.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	2b80      	cmp	r3, #128	@ 0x80
 8009760:	d019      	beq.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	2b80      	cmp	r3, #128	@ 0x80
 8009766:	d85a      	bhi.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	2b40      	cmp	r3, #64	@ 0x40
 8009772:	d008      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009774:	e053      	b.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009776:	f107 0320 	add.w	r3, r7, #32
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fa56 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009784:	e04e      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009786:	f107 0314 	add.w	r3, r7, #20
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fbba 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009794:	e046      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fd1e 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097a4:	e03e      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80097a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097aa:	e03b      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097ac:	4b65      	ldr	r3, [pc, #404]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b8:	4b62      	ldr	r3, [pc, #392]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d10c      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097ca:	4b5e      	ldr	r3, [pc, #376]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	4a5f      	ldr	r2, [pc, #380]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80097d6:	fa22 f303 	lsr.w	r3, r2, r3
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
 80097dc:	e01e      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097de:	4b59      	ldr	r3, [pc, #356]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ea:	d106      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d102      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097f4:	4b54      	ldr	r3, [pc, #336]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f8:	e010      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097fa:	4b52      	ldr	r3, [pc, #328]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009806:	d106      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980e:	d102      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009810:	4b4e      	ldr	r3, [pc, #312]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
 8009814:	e002      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800981a:	e003      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 800981c:	e002      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009822:	bf00      	nop
          }
        }
        break;
 8009824:	e187      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009826:	4b47      	ldr	r3, [pc, #284]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800982c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009830:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009838:	f7fd f80c 	bl	8006854 <HAL_RCC_GetPCLK2Freq>
 800983c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800983e:	e17a      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009840:	4b40      	ldr	r3, [pc, #256]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800984c:	d10b      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009854:	d107      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009856:	f107 0314 	add.w	r3, r7, #20
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fb52 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
 8009864:	e045      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009866:	4b37      	ldr	r3, [pc, #220]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800986e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009872:	d10b      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800987a:	d107      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fcab 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
 800988a:	e032      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800988c:	4b2d      	ldr	r3, [pc, #180]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b02      	cmp	r3, #2
 8009896:	d10d      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800989e:	d109      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098a0:	4b28      	ldr	r3, [pc, #160]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	08db      	lsrs	r3, r3, #3
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
 80098b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b2:	e01e      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80098b4:	4b23      	ldr	r3, [pc, #140]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c0:	d106      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098c8:	d102      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80098ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80098cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ce:	e010      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80098d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098dc:	d106      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80098e4:	d102      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80098e6:	4b19      	ldr	r3, [pc, #100]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ea:	e002      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f0:	e121      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80098f2:	e120      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80098f4:	4b13      	ldr	r3, [pc, #76]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80098f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009902:	2b03      	cmp	r3, #3
 8009904:	d861      	bhi.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009906:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800991d 	.word	0x0800991d
 8009910:	08009925 	.word	0x08009925
 8009914:	08009935 	.word	0x08009935
 8009918:	08009959 	.word	0x08009959

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800991c:	f7fc ff68 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8009920:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009922:	e055      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009924:	f107 0320 	add.w	r3, r7, #32
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe f97f 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009932:	e04d      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fae3 	bl	8007f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009942:	e045      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009944:	44020c00 	.word	0x44020c00
 8009948:	003d0900 	.word	0x003d0900
 800994c:	007a1200 	.word	0x007a1200
 8009950:	00bb8000 	.word	0x00bb8000
 8009954:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009958:	4b79      	ldr	r3, [pc, #484]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800995a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800995e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009962:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009964:	4b76      	ldr	r3, [pc, #472]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b02      	cmp	r3, #2
 800996e:	d10c      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009976:	4b72      	ldr	r3, [pc, #456]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	08db      	lsrs	r3, r3, #3
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	4a70      	ldr	r2, [pc, #448]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009982:	fa22 f303 	lsr.w	r3, r2, r3
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
 8009988:	e01e      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800998a:	4b6d      	ldr	r3, [pc, #436]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009996:	d106      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800999e:	d102      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099a0:	4b69      	ldr	r3, [pc, #420]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a4:	e010      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099a6:	4b66      	ldr	r3, [pc, #408]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099b2:	d106      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80099b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ba:	d102      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099bc:	4b63      	ldr	r3, [pc, #396]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c0:	e002      	b.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099c6:	e003      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099ce:	bf00      	nop
          }
        }
        break;
 80099d0:	e0b1      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80099d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80099de:	4b58      	ldr	r3, [pc, #352]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d106      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d103      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80099f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f8:	e01f      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80099fa:	4b51      	ldr	r3, [pc, #324]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80099fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a08:	d106      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	2b40      	cmp	r3, #64	@ 0x40
 8009a0e:	d103      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8009a10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	e010      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009a18:	4b49      	ldr	r3, [pc, #292]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a24:	d106      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	2b80      	cmp	r3, #128	@ 0x80
 8009a2a:	d103      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009a2c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a32:	e002      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009a38:	e07d      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009a3a:	e07c      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009a3c:	4b40      	ldr	r3, [pc, #256]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a42:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a46:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009a48:	4b3d      	ldr	r3, [pc, #244]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a54:	d105      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a60:	e031      	b.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009a62:	4b37      	ldr	r3, [pc, #220]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a6e:	d10a      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d107      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a76:	f107 0320 	add.w	r3, r7, #32
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe f8d6 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a84:	e01f      	b.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009a86:	4b2e      	ldr	r3, [pc, #184]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	d103      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa0:	e011      	b.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009aa2:	4b27      	ldr	r3, [pc, #156]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ab0:	d106      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	2b30      	cmp	r3, #48	@ 0x30
 8009ab6:	d103      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009ab8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abe:	e002      	b.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009ac4:	e037      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009ac6:	e036      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009aca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ace:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ad2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	2b10      	cmp	r3, #16
 8009ad8:	d107      	bne.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ada:	f107 0320 	add.w	r3, r7, #32
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe f8a4 	bl	8007c2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009ae8:	e025      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009aea:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009af6:	d10a      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	d107      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fb6a 	bl	80081dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0c:	e00f      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b1a:	d105      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1e:	2b30      	cmp	r3, #48	@ 0x30
 8009b20:	d102      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8009b22:	4b0b      	ldr	r3, [pc, #44]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b26:	e002      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009b2c:	e003      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009b2e:	e002      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b34:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	373c      	adds	r7, #60	@ 0x3c
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd90      	pop	{r4, r7, pc}
 8009b40:	44020c00 	.word	0x44020c00
 8009b44:	03d09000 	.word	0x03d09000
 8009b48:	003d0900 	.word	0x003d0900
 8009b4c:	007a1200 	.word	0x007a1200
 8009b50:	02dc6c00 	.word	0x02dc6c00

08009b54 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009b5c:	4b48      	ldr	r3, [pc, #288]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a47      	ldr	r2, [pc, #284]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009b62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b68:	f7f9 fa1a 	bl	8002fa0 <HAL_GetTick>
 8009b6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b6e:	e008      	b.n	8009b82 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b70:	f7f9 fa16 	bl	8002fa0 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e07a      	b.n	8009c78 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b82:	4b3f      	ldr	r3, [pc, #252]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f0      	bne.n	8009b70 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6811      	ldr	r1, [r2, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	0212      	lsls	r2, r2, #8
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	4936      	ldr	r1, [pc, #216]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	025b      	lsls	r3, r3, #9
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	061b      	lsls	r3, r3, #24
 8009bd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009bdc:	4928      	ldr	r1, [pc, #160]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009be2:	4b27      	ldr	r3, [pc, #156]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	f023 020c 	bic.w	r2, r3, #12
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	4924      	ldr	r1, [pc, #144]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009bf4:	4b22      	ldr	r3, [pc, #136]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf8:	f023 0220 	bic.w	r2, r3, #32
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	491f      	ldr	r1, [pc, #124]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009c06:	4b1e      	ldr	r3, [pc, #120]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0e:	491c      	ldr	r1, [pc, #112]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009c14:	4b1a      	ldr	r3, [pc, #104]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	4a19      	ldr	r2, [pc, #100]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c1a:	f023 0310 	bic.w	r3, r3, #16
 8009c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009c20:	4b17      	ldr	r3, [pc, #92]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c28:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6a12      	ldr	r2, [r2, #32]
 8009c30:	00d2      	lsls	r2, r2, #3
 8009c32:	4913      	ldr	r1, [pc, #76]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009c38:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	4a10      	ldr	r2, [pc, #64]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c3e:	f043 0310 	orr.w	r3, r3, #16
 8009c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009c44:	4b0e      	ldr	r3, [pc, #56]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a0d      	ldr	r2, [pc, #52]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c50:	f7f9 f9a6 	bl	8002fa0 <HAL_GetTick>
 8009c54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c56:	e008      	b.n	8009c6a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c58:	f7f9 f9a2 	bl	8002fa0 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e006      	b.n	8009c78 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c6a:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <RCCEx_PLL2_Config+0x12c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0f0      	beq.n	8009c58 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009c76:	2300      	movs	r3, #0

}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	44020c00 	.word	0x44020c00

08009c84 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009c8c:	4b48      	ldr	r3, [pc, #288]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a47      	ldr	r2, [pc, #284]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c98:	f7f9 f982 	bl	8002fa0 <HAL_GetTick>
 8009c9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c9e:	e008      	b.n	8009cb2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ca0:	f7f9 f97e 	bl	8002fa0 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e07a      	b.n	8009da8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009cc6:	f023 0303 	bic.w	r3, r3, #3
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6811      	ldr	r1, [r2, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6852      	ldr	r2, [r2, #4]
 8009cd2:	0212      	lsls	r2, r2, #8
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	4936      	ldr	r1, [pc, #216]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	630b      	str	r3, [r1, #48]	@ 0x30
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	025b      	lsls	r3, r3, #9
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d0c:	4928      	ldr	r1, [pc, #160]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d12:	4b27      	ldr	r3, [pc, #156]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d16:	f023 020c 	bic.w	r2, r3, #12
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	4924      	ldr	r1, [pc, #144]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009d24:	4b22      	ldr	r3, [pc, #136]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d28:	f023 0220 	bic.w	r2, r3, #32
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	491f      	ldr	r1, [pc, #124]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009d36:	4b1e      	ldr	r3, [pc, #120]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3e:	491c      	ldr	r1, [pc, #112]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009d44:	4b1a      	ldr	r3, [pc, #104]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d48:	4a19      	ldr	r2, [pc, #100]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d4a:	f023 0310 	bic.w	r3, r3, #16
 8009d4e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009d50:	4b17      	ldr	r3, [pc, #92]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6a12      	ldr	r2, [r2, #32]
 8009d60:	00d2      	lsls	r2, r2, #3
 8009d62:	4913      	ldr	r1, [pc, #76]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009d68:	4b11      	ldr	r3, [pc, #68]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6c:	4a10      	ldr	r2, [pc, #64]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d6e:	f043 0310 	orr.w	r3, r3, #16
 8009d72:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009d74:	4b0e      	ldr	r3, [pc, #56]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a0d      	ldr	r2, [pc, #52]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d80:	f7f9 f90e 	bl	8002fa0 <HAL_GetTick>
 8009d84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d86:	e008      	b.n	8009d9a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d88:	f7f9 f90a 	bl	8002fa0 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d901      	bls.n	8009d9a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e006      	b.n	8009da8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d9a:	4b05      	ldr	r3, [pc, #20]	@ (8009db0 <RCCEx_PLL3_Config+0x12c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f0      	beq.n	8009d88 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	44020c00 	.word	0x44020c00

08009db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e049      	b.n	8009e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7f8 fdaa 	bl	8002934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f000 ff0e 	bl	800ac14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d001      	beq.n	8009e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e07c      	b.n	8009f76 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 0201 	orr.w	r2, r2, #1
 8009e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a3a      	ldr	r2, [pc, #232]	@ (8009f84 <HAL_TIM_Base_Start_IT+0x120>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d04a      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a39      	ldr	r2, [pc, #228]	@ (8009f88 <HAL_TIM_Base_Start_IT+0x124>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d045      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb0:	d040      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eba:	d03b      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a32      	ldr	r2, [pc, #200]	@ (8009f8c <HAL_TIM_Base_Start_IT+0x128>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d036      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a31      	ldr	r2, [pc, #196]	@ (8009f90 <HAL_TIM_Base_Start_IT+0x12c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d031      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8009f94 <HAL_TIM_Base_Start_IT+0x130>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d02c      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a2e      	ldr	r2, [pc, #184]	@ (8009f98 <HAL_TIM_Base_Start_IT+0x134>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d027      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8009f9c <HAL_TIM_Base_Start_IT+0x138>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d022      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8009fa0 <HAL_TIM_Base_Start_IT+0x13c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d01d      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a29      	ldr	r2, [pc, #164]	@ (8009fa4 <HAL_TIM_Base_Start_IT+0x140>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d018      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a28      	ldr	r2, [pc, #160]	@ (8009fa8 <HAL_TIM_Base_Start_IT+0x144>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d013      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a26      	ldr	r2, [pc, #152]	@ (8009fac <HAL_TIM_Base_Start_IT+0x148>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00e      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a25      	ldr	r2, [pc, #148]	@ (8009fb0 <HAL_TIM_Base_Start_IT+0x14c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d009      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a23      	ldr	r2, [pc, #140]	@ (8009fb4 <HAL_TIM_Base_Start_IT+0x150>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d004      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0xd0>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a22      	ldr	r2, [pc, #136]	@ (8009fb8 <HAL_TIM_Base_Start_IT+0x154>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d115      	bne.n	8009f60 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	4b20      	ldr	r3, [pc, #128]	@ (8009fbc <HAL_TIM_Base_Start_IT+0x158>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b06      	cmp	r3, #6
 8009f44:	d015      	beq.n	8009f72 <HAL_TIM_Base_Start_IT+0x10e>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f4c:	d011      	beq.n	8009f72 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0201 	orr.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5e:	e008      	b.n	8009f72 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0201 	orr.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e000      	b.n	8009f74 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	50012c00 	.word	0x50012c00
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	50000400 	.word	0x50000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	50000800 	.word	0x50000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	50000c00 	.word	0x50000c00
 8009fa4:	40013400 	.word	0x40013400
 8009fa8:	50013400 	.word	0x50013400
 8009fac:	40001800 	.word	0x40001800
 8009fb0:	50001800 	.word	0x50001800
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	50014000 	.word	0x50014000
 8009fbc:	00010007 	.word	0x00010007

08009fc0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e049      	b.n	800a066 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d106      	bne.n	8009fec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f841 	bl	800a06e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f000 fe08 	bl	800ac14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e049      	b.n	800a128 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f841 	bl	800a130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f000 fda7 	bl	800ac14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <HAL_TIM_PWM_Start+0x24>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	bf14      	ite	ne
 800a160:	2301      	movne	r3, #1
 800a162:	2300      	moveq	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	e03c      	b.n	800a1e2 <HAL_TIM_PWM_Start+0x9e>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d109      	bne.n	800a182 <HAL_TIM_PWM_Start+0x3e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b01      	cmp	r3, #1
 800a178:	bf14      	ite	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	2300      	moveq	r3, #0
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	e02f      	b.n	800a1e2 <HAL_TIM_PWM_Start+0x9e>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b08      	cmp	r3, #8
 800a186:	d109      	bne.n	800a19c <HAL_TIM_PWM_Start+0x58>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b01      	cmp	r3, #1
 800a192:	bf14      	ite	ne
 800a194:	2301      	movne	r3, #1
 800a196:	2300      	moveq	r3, #0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	e022      	b.n	800a1e2 <HAL_TIM_PWM_Start+0x9e>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b0c      	cmp	r3, #12
 800a1a0:	d109      	bne.n	800a1b6 <HAL_TIM_PWM_Start+0x72>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	bf14      	ite	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	2300      	moveq	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	e015      	b.n	800a1e2 <HAL_TIM_PWM_Start+0x9e>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b10      	cmp	r3, #16
 800a1ba:	d109      	bne.n	800a1d0 <HAL_TIM_PWM_Start+0x8c>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	bf14      	ite	ne
 800a1c8:	2301      	movne	r3, #1
 800a1ca:	2300      	moveq	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	e008      	b.n	800a1e2 <HAL_TIM_PWM_Start+0x9e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	bf14      	ite	ne
 800a1dc:	2301      	movne	r3, #1
 800a1de:	2300      	moveq	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0ce      	b.n	800a388 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIM_PWM_Start+0xb6>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1f8:	e023      	b.n	800a242 <HAL_TIM_PWM_Start+0xfe>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d104      	bne.n	800a20a <HAL_TIM_PWM_Start+0xc6>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a208:	e01b      	b.n	800a242 <HAL_TIM_PWM_Start+0xfe>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d104      	bne.n	800a21a <HAL_TIM_PWM_Start+0xd6>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2202      	movs	r2, #2
 800a214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a218:	e013      	b.n	800a242 <HAL_TIM_PWM_Start+0xfe>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b0c      	cmp	r3, #12
 800a21e:	d104      	bne.n	800a22a <HAL_TIM_PWM_Start+0xe6>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a228:	e00b      	b.n	800a242 <HAL_TIM_PWM_Start+0xfe>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d104      	bne.n	800a23a <HAL_TIM_PWM_Start+0xf6>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a238:	e003      	b.n	800a242 <HAL_TIM_PWM_Start+0xfe>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2202      	movs	r2, #2
 800a23e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2201      	movs	r2, #1
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 f99e 	bl	800b58c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a4e      	ldr	r2, [pc, #312]	@ (800a390 <HAL_TIM_PWM_Start+0x24c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d018      	beq.n	800a28c <HAL_TIM_PWM_Start+0x148>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a4d      	ldr	r2, [pc, #308]	@ (800a394 <HAL_TIM_PWM_Start+0x250>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d013      	beq.n	800a28c <HAL_TIM_PWM_Start+0x148>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a4b      	ldr	r2, [pc, #300]	@ (800a398 <HAL_TIM_PWM_Start+0x254>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00e      	beq.n	800a28c <HAL_TIM_PWM_Start+0x148>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a4a      	ldr	r2, [pc, #296]	@ (800a39c <HAL_TIM_PWM_Start+0x258>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d009      	beq.n	800a28c <HAL_TIM_PWM_Start+0x148>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a48      	ldr	r2, [pc, #288]	@ (800a3a0 <HAL_TIM_PWM_Start+0x25c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d004      	beq.n	800a28c <HAL_TIM_PWM_Start+0x148>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a47      	ldr	r2, [pc, #284]	@ (800a3a4 <HAL_TIM_PWM_Start+0x260>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d101      	bne.n	800a290 <HAL_TIM_PWM_Start+0x14c>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <HAL_TIM_PWM_Start+0x14e>
 800a290:	2300      	movs	r3, #0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a39      	ldr	r2, [pc, #228]	@ (800a390 <HAL_TIM_PWM_Start+0x24c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d04a      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a37      	ldr	r2, [pc, #220]	@ (800a394 <HAL_TIM_PWM_Start+0x250>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d045      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2c2:	d040      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2cc:	d03b      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a35      	ldr	r2, [pc, #212]	@ (800a3a8 <HAL_TIM_PWM_Start+0x264>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d036      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a33      	ldr	r2, [pc, #204]	@ (800a3ac <HAL_TIM_PWM_Start+0x268>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d031      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a32      	ldr	r2, [pc, #200]	@ (800a3b0 <HAL_TIM_PWM_Start+0x26c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d02c      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a30      	ldr	r2, [pc, #192]	@ (800a3b4 <HAL_TIM_PWM_Start+0x270>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d027      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a2f      	ldr	r2, [pc, #188]	@ (800a3b8 <HAL_TIM_PWM_Start+0x274>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d022      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a2d      	ldr	r2, [pc, #180]	@ (800a3bc <HAL_TIM_PWM_Start+0x278>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01d      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a22      	ldr	r2, [pc, #136]	@ (800a398 <HAL_TIM_PWM_Start+0x254>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d018      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a20      	ldr	r2, [pc, #128]	@ (800a39c <HAL_TIM_PWM_Start+0x258>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d013      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a27      	ldr	r2, [pc, #156]	@ (800a3c0 <HAL_TIM_PWM_Start+0x27c>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d00e      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a25      	ldr	r2, [pc, #148]	@ (800a3c4 <HAL_TIM_PWM_Start+0x280>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d009      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a0 <HAL_TIM_PWM_Start+0x25c>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d004      	beq.n	800a346 <HAL_TIM_PWM_Start+0x202>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a18      	ldr	r2, [pc, #96]	@ (800a3a4 <HAL_TIM_PWM_Start+0x260>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d115      	bne.n	800a372 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	4b1e      	ldr	r3, [pc, #120]	@ (800a3c8 <HAL_TIM_PWM_Start+0x284>)
 800a34e:	4013      	ands	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b06      	cmp	r3, #6
 800a356:	d015      	beq.n	800a384 <HAL_TIM_PWM_Start+0x240>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a35e:	d011      	beq.n	800a384 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0201 	orr.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a370:	e008      	b.n	800a384 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0201 	orr.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	e000      	b.n	800a386 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	40012c00 	.word	0x40012c00
 800a394:	50012c00 	.word	0x50012c00
 800a398:	40013400 	.word	0x40013400
 800a39c:	50013400 	.word	0x50013400
 800a3a0:	40014000 	.word	0x40014000
 800a3a4:	50014000 	.word	0x50014000
 800a3a8:	40000400 	.word	0x40000400
 800a3ac:	50000400 	.word	0x50000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	50000800 	.word	0x50000800
 800a3b8:	40000c00 	.word	0x40000c00
 800a3bc:	50000c00 	.word	0x50000c00
 800a3c0:	40001800 	.word	0x40001800
 800a3c4:	50001800 	.word	0x50001800
 800a3c8:	00010007 	.word	0x00010007

0800a3cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d020      	beq.n	800a430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01b      	beq.n	800a430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0202 	mvn.w	r2, #2
 800a400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fbde 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a41c:	e005      	b.n	800a42a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fbd0 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fbe1 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b00      	cmp	r3, #0
 800a438:	d020      	beq.n	800a47c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01b      	beq.n	800a47c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f06f 0204 	mvn.w	r2, #4
 800a44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2202      	movs	r2, #2
 800a452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fbb8 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a468:	e005      	b.n	800a476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fbaa 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fbbb 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d020      	beq.n	800a4c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f003 0308 	and.w	r3, r3, #8
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01b      	beq.n	800a4c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0208 	mvn.w	r2, #8
 800a498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2204      	movs	r2, #4
 800a49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fb92 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a4b4:	e005      	b.n	800a4c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fb84 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fb95 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f003 0310 	and.w	r3, r3, #16
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d020      	beq.n	800a514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01b      	beq.n	800a514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0210 	mvn.w	r2, #16
 800a4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2208      	movs	r2, #8
 800a4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fb6c 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a500:	e005      	b.n	800a50e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fb5e 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fb6f 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00c      	beq.n	800a538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f06f 0201 	mvn.w	r2, #1
 800a530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f7 fe14 	bl	8002160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d104      	bne.n	800a54c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00c      	beq.n	800a566 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a552:	2b00      	cmp	r3, #0
 800a554:	d007      	beq.n	800a566 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 f9ad 	bl	800b8c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00c      	beq.n	800a58a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a576:	2b00      	cmp	r3, #0
 800a578:	d007      	beq.n	800a58a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 f9a5 	bl	800b8d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00c      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb29 	bl	800ac00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f06f 0220 	mvn.w	r2, #32
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 f96d 	bl	800b8ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 f979 	bl	800b8e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00c      	beq.n	800a61a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 f971 	bl	800b8fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00c      	beq.n	800a63e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f969 	bl	800b910 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00c      	beq.n	800a662 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 f961 	bl	800b924 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a686:	2302      	movs	r3, #2
 800a688:	e066      	b.n	800a758 <HAL_TIM_OC_ConfigChannel+0xec>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b14      	cmp	r3, #20
 800a696:	d857      	bhi.n	800a748 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a698:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69e:	bf00      	nop
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a749 	.word	0x0800a749
 800a6a8:	0800a749 	.word	0x0800a749
 800a6ac:	0800a749 	.word	0x0800a749
 800a6b0:	0800a703 	.word	0x0800a703
 800a6b4:	0800a749 	.word	0x0800a749
 800a6b8:	0800a749 	.word	0x0800a749
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a711 	.word	0x0800a711
 800a6c4:	0800a749 	.word	0x0800a749
 800a6c8:	0800a749 	.word	0x0800a749
 800a6cc:	0800a749 	.word	0x0800a749
 800a6d0:	0800a71f 	.word	0x0800a71f
 800a6d4:	0800a749 	.word	0x0800a749
 800a6d8:	0800a749 	.word	0x0800a749
 800a6dc:	0800a749 	.word	0x0800a749
 800a6e0:	0800a72d 	.word	0x0800a72d
 800a6e4:	0800a749 	.word	0x0800a749
 800a6e8:	0800a749 	.word	0x0800a749
 800a6ec:	0800a749 	.word	0x0800a749
 800a6f0:	0800a73b 	.word	0x0800a73b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fb74 	bl	800ade8 <TIM_OC1_SetConfig>
      break;
 800a700:	e025      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fc07 	bl	800af1c <TIM_OC2_SetConfig>
      break;
 800a70e:	e01e      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fc98 	bl	800b04c <TIM_OC3_SetConfig>
      break;
 800a71c:	e017      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fd27 	bl	800b178 <TIM_OC4_SetConfig>
      break;
 800a72a:	e010      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 fdb8 	bl	800b2a8 <TIM_OC5_SetConfig>
      break;
 800a738:	e009      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fe1b 	bl	800b37c <TIM_OC6_SetConfig>
      break;
 800a746:	e002      	b.n	800a74e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
      break;
 800a74c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d101      	bne.n	800a77e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a77a:	2302      	movs	r3, #2
 800a77c:	e0ff      	b.n	800a97e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b14      	cmp	r3, #20
 800a78a:	f200 80f0 	bhi.w	800a96e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a78e:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7e9 	.word	0x0800a7e9
 800a798:	0800a96f 	.word	0x0800a96f
 800a79c:	0800a96f 	.word	0x0800a96f
 800a7a0:	0800a96f 	.word	0x0800a96f
 800a7a4:	0800a829 	.word	0x0800a829
 800a7a8:	0800a96f 	.word	0x0800a96f
 800a7ac:	0800a96f 	.word	0x0800a96f
 800a7b0:	0800a96f 	.word	0x0800a96f
 800a7b4:	0800a86b 	.word	0x0800a86b
 800a7b8:	0800a96f 	.word	0x0800a96f
 800a7bc:	0800a96f 	.word	0x0800a96f
 800a7c0:	0800a96f 	.word	0x0800a96f
 800a7c4:	0800a8ab 	.word	0x0800a8ab
 800a7c8:	0800a96f 	.word	0x0800a96f
 800a7cc:	0800a96f 	.word	0x0800a96f
 800a7d0:	0800a96f 	.word	0x0800a96f
 800a7d4:	0800a8ed 	.word	0x0800a8ed
 800a7d8:	0800a96f 	.word	0x0800a96f
 800a7dc:	0800a96f 	.word	0x0800a96f
 800a7e0:	0800a96f 	.word	0x0800a96f
 800a7e4:	0800a92d 	.word	0x0800a92d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fafa 	bl	800ade8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0208 	orr.w	r2, r2, #8
 800a802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f022 0204 	bic.w	r2, r2, #4
 800a812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6999      	ldr	r1, [r3, #24]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	691a      	ldr	r2, [r3, #16]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	619a      	str	r2, [r3, #24]
      break;
 800a826:	e0a5      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fb74 	bl	800af1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	699a      	ldr	r2, [r3, #24]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6999      	ldr	r1, [r3, #24]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	021a      	lsls	r2, r3, #8
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	619a      	str	r2, [r3, #24]
      break;
 800a868:	e084      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fbeb 	bl	800b04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	69da      	ldr	r2, [r3, #28]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 0208 	orr.w	r2, r2, #8
 800a884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0204 	bic.w	r2, r2, #4
 800a894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69d9      	ldr	r1, [r3, #28]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	61da      	str	r2, [r3, #28]
      break;
 800a8a8:	e064      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68b9      	ldr	r1, [r7, #8]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fc61 	bl	800b178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69da      	ldr	r2, [r3, #28]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69da      	ldr	r2, [r3, #28]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69d9      	ldr	r1, [r3, #28]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	021a      	lsls	r2, r3, #8
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	61da      	str	r2, [r3, #28]
      break;
 800a8ea:	e043      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fcd8 	bl	800b2a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0208 	orr.w	r2, r2, #8
 800a906:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0204 	bic.w	r2, r2, #4
 800a916:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	691a      	ldr	r2, [r3, #16]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a92a:	e023      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68b9      	ldr	r1, [r7, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fd22 	bl	800b37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a946:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a956:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	021a      	lsls	r2, r3, #8
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a96c:	e002      	b.n	800a974 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	75fb      	strb	r3, [r7, #23]
      break;
 800a972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop

0800a988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e0fe      	b.n	800aba2 <HAL_TIM_ConfigClockSource+0x21a>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a9c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9e0:	f000 80c9 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800a9e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9e8:	f200 80ce 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800a9ec:	4a6f      	ldr	r2, [pc, #444]	@ (800abac <HAL_TIM_ConfigClockSource+0x224>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	f000 80c1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800a9f4:	4a6d      	ldr	r2, [pc, #436]	@ (800abac <HAL_TIM_ConfigClockSource+0x224>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	f200 80c6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800a9fc:	4a6c      	ldr	r2, [pc, #432]	@ (800abb0 <HAL_TIM_ConfigClockSource+0x228>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	f000 80b9 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa04:	4a6a      	ldr	r2, [pc, #424]	@ (800abb0 <HAL_TIM_ConfigClockSource+0x228>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f200 80be 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa0c:	4a69      	ldr	r2, [pc, #420]	@ (800abb4 <HAL_TIM_ConfigClockSource+0x22c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	f000 80b1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa14:	4a67      	ldr	r2, [pc, #412]	@ (800abb4 <HAL_TIM_ConfigClockSource+0x22c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	f200 80b6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa1c:	4a66      	ldr	r2, [pc, #408]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x230>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f000 80a9 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa24:	4a64      	ldr	r2, [pc, #400]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x230>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	f200 80ae 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa2c:	4a63      	ldr	r2, [pc, #396]	@ (800abbc <HAL_TIM_ConfigClockSource+0x234>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	f000 80a1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa34:	4a61      	ldr	r2, [pc, #388]	@ (800abbc <HAL_TIM_ConfigClockSource+0x234>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	f200 80a6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa3c:	4a60      	ldr	r2, [pc, #384]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x238>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	f000 8099 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa44:	4a5e      	ldr	r2, [pc, #376]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x238>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	f200 809e 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa50:	f000 8091 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa58:	f200 8096 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa60:	f000 8089 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aa64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa68:	f200 808e 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa70:	d03e      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x168>
 800aa72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa76:	f200 8087 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa7e:	f000 8086 	beq.w	800ab8e <HAL_TIM_ConfigClockSource+0x206>
 800aa82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa86:	d87f      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa88:	2b70      	cmp	r3, #112	@ 0x70
 800aa8a:	d01a      	beq.n	800aac2 <HAL_TIM_ConfigClockSource+0x13a>
 800aa8c:	2b70      	cmp	r3, #112	@ 0x70
 800aa8e:	d87b      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa90:	2b60      	cmp	r3, #96	@ 0x60
 800aa92:	d050      	beq.n	800ab36 <HAL_TIM_ConfigClockSource+0x1ae>
 800aa94:	2b60      	cmp	r3, #96	@ 0x60
 800aa96:	d877      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aa98:	2b50      	cmp	r3, #80	@ 0x50
 800aa9a:	d03c      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x18e>
 800aa9c:	2b50      	cmp	r3, #80	@ 0x50
 800aa9e:	d873      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aaa0:	2b40      	cmp	r3, #64	@ 0x40
 800aaa2:	d058      	beq.n	800ab56 <HAL_TIM_ConfigClockSource+0x1ce>
 800aaa4:	2b40      	cmp	r3, #64	@ 0x40
 800aaa6:	d86f      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aaa8:	2b30      	cmp	r3, #48	@ 0x30
 800aaaa:	d064      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aaac:	2b30      	cmp	r3, #48	@ 0x30
 800aaae:	d86b      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aab0:	2b20      	cmp	r3, #32
 800aab2:	d060      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d867      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d05c      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d05a      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1ee>
 800aac0:	e062      	b.n	800ab88 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aad2:	f000 fd3b 	bl	800b54c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	609a      	str	r2, [r3, #8]
      break;
 800aaee:	e04f      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab00:	f000 fd24 	bl	800b54c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab12:	609a      	str	r2, [r3, #8]
      break;
 800ab14:	e03c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab22:	461a      	mov	r2, r3
 800ab24:	f000 fc96 	bl	800b454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2150      	movs	r1, #80	@ 0x50
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fcef 	bl	800b512 <TIM_ITRx_SetConfig>
      break;
 800ab34:	e02c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab42:	461a      	mov	r2, r3
 800ab44:	f000 fcb5 	bl	800b4b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2160      	movs	r1, #96	@ 0x60
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fcdf 	bl	800b512 <TIM_ITRx_SetConfig>
      break;
 800ab54:	e01c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab62:	461a      	mov	r2, r3
 800ab64:	f000 fc76 	bl	800b454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2140      	movs	r1, #64	@ 0x40
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fccf 	bl	800b512 <TIM_ITRx_SetConfig>
      break;
 800ab74:	e00c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f000 fcc6 	bl	800b512 <TIM_ITRx_SetConfig>
      break;
 800ab86:	e003      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8c:	e000      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800ab8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	00100070 	.word	0x00100070
 800abb0:	00100060 	.word	0x00100060
 800abb4:	00100050 	.word	0x00100050
 800abb8:	00100040 	.word	0x00100040
 800abbc:	00100030 	.word	0x00100030
 800abc0:	00100020 	.word	0x00100020

0800abc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a62      	ldr	r2, [pc, #392]	@ (800adb0 <TIM_Base_SetConfig+0x19c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d02b      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a61      	ldr	r2, [pc, #388]	@ (800adb4 <TIM_Base_SetConfig+0x1a0>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d027      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac3a:	d023      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac42:	d01f      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a5c      	ldr	r2, [pc, #368]	@ (800adb8 <TIM_Base_SetConfig+0x1a4>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d01b      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a5b      	ldr	r2, [pc, #364]	@ (800adbc <TIM_Base_SetConfig+0x1a8>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d017      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a5a      	ldr	r2, [pc, #360]	@ (800adc0 <TIM_Base_SetConfig+0x1ac>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d013      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a59      	ldr	r2, [pc, #356]	@ (800adc4 <TIM_Base_SetConfig+0x1b0>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00f      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a58      	ldr	r2, [pc, #352]	@ (800adc8 <TIM_Base_SetConfig+0x1b4>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00b      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a57      	ldr	r2, [pc, #348]	@ (800adcc <TIM_Base_SetConfig+0x1b8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a56      	ldr	r2, [pc, #344]	@ (800add0 <TIM_Base_SetConfig+0x1bc>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_Base_SetConfig+0x70>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a55      	ldr	r2, [pc, #340]	@ (800add4 <TIM_Base_SetConfig+0x1c0>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d108      	bne.n	800ac96 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a45      	ldr	r2, [pc, #276]	@ (800adb0 <TIM_Base_SetConfig+0x19c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d03b      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a44      	ldr	r2, [pc, #272]	@ (800adb4 <TIM_Base_SetConfig+0x1a0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d037      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acac:	d033      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acb4:	d02f      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a3f      	ldr	r2, [pc, #252]	@ (800adb8 <TIM_Base_SetConfig+0x1a4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d02b      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a3e      	ldr	r2, [pc, #248]	@ (800adbc <TIM_Base_SetConfig+0x1a8>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d027      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a3d      	ldr	r2, [pc, #244]	@ (800adc0 <TIM_Base_SetConfig+0x1ac>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d023      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a3c      	ldr	r2, [pc, #240]	@ (800adc4 <TIM_Base_SetConfig+0x1b0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d01f      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a3b      	ldr	r2, [pc, #236]	@ (800adc8 <TIM_Base_SetConfig+0x1b4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d01b      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a3a      	ldr	r2, [pc, #232]	@ (800adcc <TIM_Base_SetConfig+0x1b8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d017      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a39      	ldr	r2, [pc, #228]	@ (800add0 <TIM_Base_SetConfig+0x1bc>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d013      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a38      	ldr	r2, [pc, #224]	@ (800add4 <TIM_Base_SetConfig+0x1c0>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00f      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a37      	ldr	r2, [pc, #220]	@ (800add8 <TIM_Base_SetConfig+0x1c4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00b      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a36      	ldr	r2, [pc, #216]	@ (800addc <TIM_Base_SetConfig+0x1c8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d007      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a35      	ldr	r2, [pc, #212]	@ (800ade0 <TIM_Base_SetConfig+0x1cc>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d003      	beq.n	800ad16 <TIM_Base_SetConfig+0x102>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a34      	ldr	r2, [pc, #208]	@ (800ade4 <TIM_Base_SetConfig+0x1d0>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d108      	bne.n	800ad28 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a18      	ldr	r2, [pc, #96]	@ (800adb0 <TIM_Base_SetConfig+0x19c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d013      	beq.n	800ad7c <TIM_Base_SetConfig+0x168>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a17      	ldr	r2, [pc, #92]	@ (800adb4 <TIM_Base_SetConfig+0x1a0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00f      	beq.n	800ad7c <TIM_Base_SetConfig+0x168>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a1c      	ldr	r2, [pc, #112]	@ (800add0 <TIM_Base_SetConfig+0x1bc>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d00b      	beq.n	800ad7c <TIM_Base_SetConfig+0x168>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a1b      	ldr	r2, [pc, #108]	@ (800add4 <TIM_Base_SetConfig+0x1c0>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d007      	beq.n	800ad7c <TIM_Base_SetConfig+0x168>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a1c      	ldr	r2, [pc, #112]	@ (800ade0 <TIM_Base_SetConfig+0x1cc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d003      	beq.n	800ad7c <TIM_Base_SetConfig+0x168>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a1b      	ldr	r2, [pc, #108]	@ (800ade4 <TIM_Base_SetConfig+0x1d0>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d103      	bne.n	800ad84 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d105      	bne.n	800ada2 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f023 0201 	bic.w	r2, r3, #1
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	611a      	str	r2, [r3, #16]
  }
}
 800ada2:	bf00      	nop
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	40012c00 	.word	0x40012c00
 800adb4:	50012c00 	.word	0x50012c00
 800adb8:	40000400 	.word	0x40000400
 800adbc:	50000400 	.word	0x50000400
 800adc0:	40000800 	.word	0x40000800
 800adc4:	50000800 	.word	0x50000800
 800adc8:	40000c00 	.word	0x40000c00
 800adcc:	50000c00 	.word	0x50000c00
 800add0:	40013400 	.word	0x40013400
 800add4:	50013400 	.word	0x50013400
 800add8:	40001800 	.word	0x40001800
 800addc:	50001800 	.word	0x50001800
 800ade0:	40014000 	.word	0x40014000
 800ade4:	50014000 	.word	0x50014000

0800ade8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	f023 0201 	bic.w	r2, r3, #1
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f023 0303 	bic.w	r3, r3, #3
 800ae22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f023 0302 	bic.w	r3, r3, #2
 800ae34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a30      	ldr	r2, [pc, #192]	@ (800af04 <TIM_OC1_SetConfig+0x11c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d013      	beq.n	800ae70 <TIM_OC1_SetConfig+0x88>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a2f      	ldr	r2, [pc, #188]	@ (800af08 <TIM_OC1_SetConfig+0x120>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d00f      	beq.n	800ae70 <TIM_OC1_SetConfig+0x88>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a2e      	ldr	r2, [pc, #184]	@ (800af0c <TIM_OC1_SetConfig+0x124>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d00b      	beq.n	800ae70 <TIM_OC1_SetConfig+0x88>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a2d      	ldr	r2, [pc, #180]	@ (800af10 <TIM_OC1_SetConfig+0x128>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d007      	beq.n	800ae70 <TIM_OC1_SetConfig+0x88>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a2c      	ldr	r2, [pc, #176]	@ (800af14 <TIM_OC1_SetConfig+0x12c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d003      	beq.n	800ae70 <TIM_OC1_SetConfig+0x88>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a2b      	ldr	r2, [pc, #172]	@ (800af18 <TIM_OC1_SetConfig+0x130>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d10c      	bne.n	800ae8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f023 0308 	bic.w	r3, r3, #8
 800ae76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f023 0304 	bic.w	r3, r3, #4
 800ae88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a1d      	ldr	r2, [pc, #116]	@ (800af04 <TIM_OC1_SetConfig+0x11c>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d013      	beq.n	800aeba <TIM_OC1_SetConfig+0xd2>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a1c      	ldr	r2, [pc, #112]	@ (800af08 <TIM_OC1_SetConfig+0x120>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00f      	beq.n	800aeba <TIM_OC1_SetConfig+0xd2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a1b      	ldr	r2, [pc, #108]	@ (800af0c <TIM_OC1_SetConfig+0x124>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00b      	beq.n	800aeba <TIM_OC1_SetConfig+0xd2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a1a      	ldr	r2, [pc, #104]	@ (800af10 <TIM_OC1_SetConfig+0x128>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d007      	beq.n	800aeba <TIM_OC1_SetConfig+0xd2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a19      	ldr	r2, [pc, #100]	@ (800af14 <TIM_OC1_SetConfig+0x12c>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d003      	beq.n	800aeba <TIM_OC1_SetConfig+0xd2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a18      	ldr	r2, [pc, #96]	@ (800af18 <TIM_OC1_SetConfig+0x130>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d111      	bne.n	800aede <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	621a      	str	r2, [r3, #32]
}
 800aef8:	bf00      	nop
 800aefa:	371c      	adds	r7, #28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	40012c00 	.word	0x40012c00
 800af08:	50012c00 	.word	0x50012c00
 800af0c:	40013400 	.word	0x40013400
 800af10:	50013400 	.word	0x50013400
 800af14:	40014000 	.word	0x40014000
 800af18:	50014000 	.word	0x50014000

0800af1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	f023 0210 	bic.w	r2, r3, #16
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	4313      	orrs	r3, r2
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f023 0320 	bic.w	r3, r3, #32
 800af6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	4313      	orrs	r3, r2
 800af76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a2e      	ldr	r2, [pc, #184]	@ (800b034 <TIM_OC2_SetConfig+0x118>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00b      	beq.n	800af98 <TIM_OC2_SetConfig+0x7c>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a2d      	ldr	r2, [pc, #180]	@ (800b038 <TIM_OC2_SetConfig+0x11c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d007      	beq.n	800af98 <TIM_OC2_SetConfig+0x7c>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a2c      	ldr	r2, [pc, #176]	@ (800b03c <TIM_OC2_SetConfig+0x120>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d003      	beq.n	800af98 <TIM_OC2_SetConfig+0x7c>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a2b      	ldr	r2, [pc, #172]	@ (800b040 <TIM_OC2_SetConfig+0x124>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d10d      	bne.n	800afb4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a1f      	ldr	r2, [pc, #124]	@ (800b034 <TIM_OC2_SetConfig+0x118>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d013      	beq.n	800afe4 <TIM_OC2_SetConfig+0xc8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a1e      	ldr	r2, [pc, #120]	@ (800b038 <TIM_OC2_SetConfig+0x11c>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d00f      	beq.n	800afe4 <TIM_OC2_SetConfig+0xc8>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a1d      	ldr	r2, [pc, #116]	@ (800b03c <TIM_OC2_SetConfig+0x120>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00b      	beq.n	800afe4 <TIM_OC2_SetConfig+0xc8>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a1c      	ldr	r2, [pc, #112]	@ (800b040 <TIM_OC2_SetConfig+0x124>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d007      	beq.n	800afe4 <TIM_OC2_SetConfig+0xc8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a1b      	ldr	r2, [pc, #108]	@ (800b044 <TIM_OC2_SetConfig+0x128>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d003      	beq.n	800afe4 <TIM_OC2_SetConfig+0xc8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a1a      	ldr	r2, [pc, #104]	@ (800b048 <TIM_OC2_SetConfig+0x12c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d113      	bne.n	800b00c <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	4313      	orrs	r3, r2
 800affe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4313      	orrs	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	621a      	str	r2, [r3, #32]
}
 800b026:	bf00      	nop
 800b028:	371c      	adds	r7, #28
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	40012c00 	.word	0x40012c00
 800b038:	50012c00 	.word	0x50012c00
 800b03c:	40013400 	.word	0x40013400
 800b040:	50013400 	.word	0x50013400
 800b044:	40014000 	.word	0x40014000
 800b048:	50014000 	.word	0x50014000

0800b04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0303 	bic.w	r3, r3, #3
 800b086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a2d      	ldr	r2, [pc, #180]	@ (800b160 <TIM_OC3_SetConfig+0x114>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00b      	beq.n	800b0c6 <TIM_OC3_SetConfig+0x7a>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a2c      	ldr	r2, [pc, #176]	@ (800b164 <TIM_OC3_SetConfig+0x118>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d007      	beq.n	800b0c6 <TIM_OC3_SetConfig+0x7a>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a2b      	ldr	r2, [pc, #172]	@ (800b168 <TIM_OC3_SetConfig+0x11c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d003      	beq.n	800b0c6 <TIM_OC3_SetConfig+0x7a>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a2a      	ldr	r2, [pc, #168]	@ (800b16c <TIM_OC3_SetConfig+0x120>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d10d      	bne.n	800b0e2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b0e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a1e      	ldr	r2, [pc, #120]	@ (800b160 <TIM_OC3_SetConfig+0x114>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d013      	beq.n	800b112 <TIM_OC3_SetConfig+0xc6>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b164 <TIM_OC3_SetConfig+0x118>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00f      	beq.n	800b112 <TIM_OC3_SetConfig+0xc6>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b168 <TIM_OC3_SetConfig+0x11c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00b      	beq.n	800b112 <TIM_OC3_SetConfig+0xc6>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b16c <TIM_OC3_SetConfig+0x120>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d007      	beq.n	800b112 <TIM_OC3_SetConfig+0xc6>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a1a      	ldr	r2, [pc, #104]	@ (800b170 <TIM_OC3_SetConfig+0x124>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d003      	beq.n	800b112 <TIM_OC3_SetConfig+0xc6>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a19      	ldr	r2, [pc, #100]	@ (800b174 <TIM_OC3_SetConfig+0x128>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d113      	bne.n	800b13a <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4313      	orrs	r3, r2
 800b138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685a      	ldr	r2, [r3, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	621a      	str	r2, [r3, #32]
}
 800b154:	bf00      	nop
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	40012c00 	.word	0x40012c00
 800b164:	50012c00 	.word	0x50012c00
 800b168:	40013400 	.word	0x40013400
 800b16c:	50013400 	.word	0x50013400
 800b170:	40014000 	.word	0x40014000
 800b174:	50014000 	.word	0x50014000

0800b178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b1c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	031b      	lsls	r3, r3, #12
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a2e      	ldr	r2, [pc, #184]	@ (800b290 <TIM_OC4_SetConfig+0x118>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00b      	beq.n	800b1f4 <TIM_OC4_SetConfig+0x7c>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a2d      	ldr	r2, [pc, #180]	@ (800b294 <TIM_OC4_SetConfig+0x11c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d007      	beq.n	800b1f4 <TIM_OC4_SetConfig+0x7c>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b298 <TIM_OC4_SetConfig+0x120>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d003      	beq.n	800b1f4 <TIM_OC4_SetConfig+0x7c>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b29c <TIM_OC4_SetConfig+0x124>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d10d      	bne.n	800b210 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	031b      	lsls	r3, r3, #12
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	4313      	orrs	r3, r2
 800b206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b20e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a1f      	ldr	r2, [pc, #124]	@ (800b290 <TIM_OC4_SetConfig+0x118>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d013      	beq.n	800b240 <TIM_OC4_SetConfig+0xc8>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a1e      	ldr	r2, [pc, #120]	@ (800b294 <TIM_OC4_SetConfig+0x11c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d00f      	beq.n	800b240 <TIM_OC4_SetConfig+0xc8>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a1d      	ldr	r2, [pc, #116]	@ (800b298 <TIM_OC4_SetConfig+0x120>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00b      	beq.n	800b240 <TIM_OC4_SetConfig+0xc8>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a1c      	ldr	r2, [pc, #112]	@ (800b29c <TIM_OC4_SetConfig+0x124>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d007      	beq.n	800b240 <TIM_OC4_SetConfig+0xc8>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a1b      	ldr	r2, [pc, #108]	@ (800b2a0 <TIM_OC4_SetConfig+0x128>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d003      	beq.n	800b240 <TIM_OC4_SetConfig+0xc8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a1a      	ldr	r2, [pc, #104]	@ (800b2a4 <TIM_OC4_SetConfig+0x12c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d113      	bne.n	800b268 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b246:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b24e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	019b      	lsls	r3, r3, #6
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	019b      	lsls	r3, r3, #6
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	4313      	orrs	r3, r2
 800b266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	621a      	str	r2, [r3, #32]
}
 800b282:	bf00      	nop
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	40012c00 	.word	0x40012c00
 800b294:	50012c00 	.word	0x50012c00
 800b298:	40013400 	.word	0x40013400
 800b29c:	50013400 	.word	0x50013400
 800b2a0:	40014000 	.word	0x40014000
 800b2a4:	50014000 	.word	0x50014000

0800b2a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b2ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	041b      	lsls	r3, r3, #16
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a19      	ldr	r2, [pc, #100]	@ (800b364 <TIM_OC5_SetConfig+0xbc>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d013      	beq.n	800b32a <TIM_OC5_SetConfig+0x82>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a18      	ldr	r2, [pc, #96]	@ (800b368 <TIM_OC5_SetConfig+0xc0>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00f      	beq.n	800b32a <TIM_OC5_SetConfig+0x82>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a17      	ldr	r2, [pc, #92]	@ (800b36c <TIM_OC5_SetConfig+0xc4>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00b      	beq.n	800b32a <TIM_OC5_SetConfig+0x82>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a16      	ldr	r2, [pc, #88]	@ (800b370 <TIM_OC5_SetConfig+0xc8>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d007      	beq.n	800b32a <TIM_OC5_SetConfig+0x82>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a15      	ldr	r2, [pc, #84]	@ (800b374 <TIM_OC5_SetConfig+0xcc>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <TIM_OC5_SetConfig+0x82>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a14      	ldr	r2, [pc, #80]	@ (800b378 <TIM_OC5_SetConfig+0xd0>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d109      	bne.n	800b33e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	621a      	str	r2, [r3, #32]
}
 800b358:	bf00      	nop
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	40012c00 	.word	0x40012c00
 800b368:	50012c00 	.word	0x50012c00
 800b36c:	40013400 	.word	0x40013400
 800b370:	50013400 	.word	0x50013400
 800b374:	40014000 	.word	0x40014000
 800b378:	50014000 	.word	0x50014000

0800b37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	051b      	lsls	r3, r3, #20
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a1a      	ldr	r2, [pc, #104]	@ (800b43c <TIM_OC6_SetConfig+0xc0>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d013      	beq.n	800b400 <TIM_OC6_SetConfig+0x84>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a19      	ldr	r2, [pc, #100]	@ (800b440 <TIM_OC6_SetConfig+0xc4>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00f      	beq.n	800b400 <TIM_OC6_SetConfig+0x84>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a18      	ldr	r2, [pc, #96]	@ (800b444 <TIM_OC6_SetConfig+0xc8>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d00b      	beq.n	800b400 <TIM_OC6_SetConfig+0x84>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a17      	ldr	r2, [pc, #92]	@ (800b448 <TIM_OC6_SetConfig+0xcc>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d007      	beq.n	800b400 <TIM_OC6_SetConfig+0x84>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a16      	ldr	r2, [pc, #88]	@ (800b44c <TIM_OC6_SetConfig+0xd0>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d003      	beq.n	800b400 <TIM_OC6_SetConfig+0x84>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a15      	ldr	r2, [pc, #84]	@ (800b450 <TIM_OC6_SetConfig+0xd4>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d109      	bne.n	800b414 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	029b      	lsls	r3, r3, #10
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	4313      	orrs	r3, r2
 800b412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	621a      	str	r2, [r3, #32]
}
 800b42e:	bf00      	nop
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40012c00 	.word	0x40012c00
 800b440:	50012c00 	.word	0x50012c00
 800b444:	40013400 	.word	0x40013400
 800b448:	50013400 	.word	0x50013400
 800b44c:	40014000 	.word	0x40014000
 800b450:	50014000 	.word	0x50014000

0800b454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	f023 0201 	bic.w	r2, r3, #1
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f023 030a 	bic.w	r3, r3, #10
 800b490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	4313      	orrs	r3, r2
 800b498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	621a      	str	r2, [r3, #32]
}
 800b4a6:	bf00      	nop
 800b4a8:	371c      	adds	r7, #28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b087      	sub	sp, #28
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	60f8      	str	r0, [r7, #12]
 800b4ba:	60b9      	str	r1, [r7, #8]
 800b4bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	f023 0210 	bic.w	r2, r3, #16
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b4dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	031b      	lsls	r3, r3, #12
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b4ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	621a      	str	r2, [r3, #32]
}
 800b506:	bf00      	nop
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b512:	b480      	push	{r7}
 800b514:	b085      	sub	sp, #20
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b52c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4313      	orrs	r3, r2
 800b534:	f043 0307 	orr.w	r3, r3, #7
 800b538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	609a      	str	r2, [r3, #8]
}
 800b540:	bf00      	nop
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	021a      	lsls	r2, r3, #8
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	431a      	orrs	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4313      	orrs	r3, r2
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	4313      	orrs	r3, r2
 800b578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	609a      	str	r2, [r3, #8]
}
 800b580:	bf00      	nop
 800b582:	371c      	adds	r7, #28
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f003 031f 	and.w	r3, r3, #31
 800b59e:	2201      	movs	r2, #1
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6a1a      	ldr	r2, [r3, #32]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	43db      	mvns	r3, r3
 800b5ae:	401a      	ands	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a1a      	ldr	r2, [r3, #32]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f003 031f 	and.w	r3, r3, #31
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	621a      	str	r2, [r3, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d101      	bne.n	800b5f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e0a1      	b.n	800b734 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a4a      	ldr	r2, [pc, #296]	@ (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00e      	beq.n	800b638 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a49      	ldr	r2, [pc, #292]	@ (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d009      	beq.n	800b638 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a47      	ldr	r2, [pc, #284]	@ (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d004      	beq.n	800b638 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a46      	ldr	r2, [pc, #280]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d108      	bne.n	800b64a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b63e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a34      	ldr	r2, [pc, #208]	@ (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d04a      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a33      	ldr	r2, [pc, #204]	@ (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d045      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b684:	d040      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b68e:	d03b      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a2e      	ldr	r2, [pc, #184]	@ (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d036      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a2d      	ldr	r2, [pc, #180]	@ (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d031      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d02c      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d027      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a28      	ldr	r2, [pc, #160]	@ (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d022      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a27      	ldr	r2, [pc, #156]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d01d      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d018      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a1c      	ldr	r2, [pc, #112]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d013      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a20      	ldr	r2, [pc, #128]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d00e      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d009      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d004      	beq.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1c      	ldr	r2, [pc, #112]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d10c      	bne.n	800b722 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b70e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	4313      	orrs	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	40012c00 	.word	0x40012c00
 800b744:	50012c00 	.word	0x50012c00
 800b748:	40013400 	.word	0x40013400
 800b74c:	50013400 	.word	0x50013400
 800b750:	40000400 	.word	0x40000400
 800b754:	50000400 	.word	0x50000400
 800b758:	40000800 	.word	0x40000800
 800b75c:	50000800 	.word	0x50000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	50000c00 	.word	0x50000c00
 800b768:	40001800 	.word	0x40001800
 800b76c:	50001800 	.word	0x50001800
 800b770:	40014000 	.word	0x40014000
 800b774:	50014000 	.word	0x50014000

0800b778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b782:	2300      	movs	r3, #0
 800b784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b790:	2302      	movs	r3, #2
 800b792:	e07d      	b.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	041b      	lsls	r3, r3, #16
 800b80a:	4313      	orrs	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	4313      	orrs	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1e      	ldr	r2, [pc, #120]	@ (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d00e      	beq.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d009      	beq.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1b      	ldr	r2, [pc, #108]	@ (800b8a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d004      	beq.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d11c      	bne.n	800b87e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	40012c00 	.word	0x40012c00
 800b8a0:	50012c00 	.word	0x50012c00
 800b8a4:	40013400 	.word	0x40013400
 800b8a8:	50013400 	.word	0x50013400

0800b8ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e042      	b.n	800b9d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7f7 f93b 	bl	8002bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2224      	movs	r2, #36	@ 0x24
 800b966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0201 	bic.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fdde 	bl	800c544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fc2d 	bl	800c1e8 <UART_SetConfig>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b01      	cmp	r3, #1
 800b992:	d101      	bne.n	800b998 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e01b      	b.n	800b9d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b9b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f042 0201 	orr.w	r2, r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fe5d 	bl	800c688 <UART_CheckIdleState>
 800b9ce:	4603      	mov	r3, r0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	@ 0x28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ee:	2b20      	cmp	r3, #32
 800b9f0:	f040 808b 	bne.w	800bb0a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <HAL_UART_Transmit+0x28>
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e083      	b.n	800bb0c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba0e:	2b80      	cmp	r3, #128	@ 0x80
 800ba10:	d107      	bne.n	800ba22 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba20:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2221      	movs	r2, #33	@ 0x21
 800ba2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba32:	f7f7 fab5 	bl	8002fa0 <HAL_GetTick>
 800ba36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	88fa      	ldrh	r2, [r7, #6]
 800ba3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	88fa      	ldrh	r2, [r7, #6]
 800ba44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba50:	d108      	bne.n	800ba64 <HAL_UART_Transmit+0x8c>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d104      	bne.n	800ba64 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	e003      	b.n	800ba6c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba6c:	e030      	b.n	800bad0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2200      	movs	r2, #0
 800ba76:	2180      	movs	r1, #128	@ 0x80
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 feaf 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e03d      	b.n	800bb0c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10b      	bne.n	800baae <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	881b      	ldrh	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	3302      	adds	r3, #2
 800baaa:	61bb      	str	r3, [r7, #24]
 800baac:	e007      	b.n	800babe <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	781a      	ldrb	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	3301      	adds	r3, #1
 800babc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b01      	subs	r3, #1
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1c8      	bne.n	800ba6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2200      	movs	r2, #0
 800bae4:	2140      	movs	r1, #64	@ 0x40
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 fe78 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e006      	b.n	800bb0c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08a      	sub	sp, #40	@ 0x28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb28:	2b20      	cmp	r3, #32
 800bb2a:	d13c      	bne.n	800bba6 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_UART_Receive_DMA+0x24>
 800bb32:	88fb      	ldrh	r3, [r7, #6]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e035      	b.n	800bba8 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a1a      	ldr	r2, [pc, #104]	@ (800bbb0 <HAL_UART_Receive_DMA+0x9c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d024      	beq.n	800bb96 <HAL_UART_Receive_DMA+0x82>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a18      	ldr	r2, [pc, #96]	@ (800bbb4 <HAL_UART_Receive_DMA+0xa0>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d01f      	beq.n	800bb96 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d018      	beq.n	800bb96 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	e853 3f00 	ldrex	r3, [r3]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb78:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	623b      	str	r3, [r7, #32]
 800bb84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	69f9      	ldr	r1, [r7, #28]
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e6      	bne.n	800bb64 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	68b9      	ldr	r1, [r7, #8]
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fe8b 	bl	800c8b8 <UART_Start_Receive_DMA>
 800bba2:	4603      	mov	r3, r0
 800bba4:	e000      	b.n	800bba8 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bba6:	2302      	movs	r3, #2
  }
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3728      	adds	r7, #40	@ 0x28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	44002400 	.word	0x44002400
 800bbb4:	54002400 	.word	0x54002400

0800bbb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b0ae      	sub	sp, #184	@ 0xb8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800bbec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11b      	bne.n	800bc2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d015      	beq.n	800bc2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d105      	bne.n	800bc18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 82ac 	beq.w	800c17a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
      }
      return;
 800bc2a:	e2a6      	b.n	800c17a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 80fd 	beq.w	800be30 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bc3a:	4b7a      	ldr	r3, [pc, #488]	@ (800be24 <HAL_UART_IRQHandler+0x26c>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc46:	4b78      	ldr	r3, [pc, #480]	@ (800be28 <HAL_UART_IRQHandler+0x270>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 80f0 	beq.w	800be30 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d011      	beq.n	800bc80 <HAL_UART_IRQHandler+0xc8>
 800bc5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00b      	beq.n	800bc80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc76:	f043 0201 	orr.w	r2, r3, #1
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d011      	beq.n	800bcb0 <HAL_UART_IRQHandler+0xf8>
 800bc8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bca6:	f043 0204 	orr.w	r2, r3, #4
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d011      	beq.n	800bce0 <HAL_UART_IRQHandler+0x128>
 800bcbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2204      	movs	r2, #4
 800bcce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcd6:	f043 0202 	orr.w	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bce4:	f003 0308 	and.w	r3, r3, #8
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d017      	beq.n	800bd1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bcf0:	f003 0320 	and.w	r3, r3, #32
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d105      	bne.n	800bd04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bcf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bcfc:	4b49      	ldr	r3, [pc, #292]	@ (800be24 <HAL_UART_IRQHandler+0x26c>)
 800bcfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00b      	beq.n	800bd1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2208      	movs	r2, #8
 800bd0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd12:	f043 0208 	orr.w	r2, r3, #8
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d012      	beq.n	800bd4e <HAL_UART_IRQHandler+0x196>
 800bd28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00c      	beq.n	800bd4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd44:	f043 0220 	orr.w	r2, r3, #32
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8212 	beq.w	800c17e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d013      	beq.n	800bd8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d007      	beq.n	800bd8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda2:	2b40      	cmp	r3, #64	@ 0x40
 800bda4:	d005      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bda6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02e      	beq.n	800be10 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 feb9 	bl	800cb2a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc2:	2b40      	cmp	r3, #64	@ 0x40
 800bdc4:	d120      	bne.n	800be08 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d017      	beq.n	800be00 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd6:	4a15      	ldr	r2, [pc, #84]	@ (800be2c <HAL_UART_IRQHandler+0x274>)
 800bdd8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f7 fca5 	bl	8003730 <HAL_DMA_Abort_IT>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d019      	beq.n	800be20 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfe:	e00f      	b.n	800be20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f9db 	bl	800c1bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be06:	e00b      	b.n	800be20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f9d7 	bl	800c1bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0e:	e007      	b.n	800be20 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f9d3 	bl	800c1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800be1e:	e1ae      	b.n	800c17e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be20:	bf00      	nop
    return;
 800be22:	e1ac      	b.n	800c17e <HAL_UART_IRQHandler+0x5c6>
 800be24:	10000001 	.word	0x10000001
 800be28:	04000120 	.word	0x04000120
 800be2c:	0800cda7 	.word	0x0800cda7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be34:	2b01      	cmp	r3, #1
 800be36:	f040 8142 	bne.w	800c0be <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be3e:	f003 0310 	and.w	r3, r3, #16
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 813b 	beq.w	800c0be <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be4c:	f003 0310 	and.w	r3, r3, #16
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8134 	beq.w	800c0be <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2210      	movs	r2, #16
 800be5c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be68:	2b40      	cmp	r3, #64	@ 0x40
 800be6a:	f040 80aa 	bne.w	800bfc2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800be7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 8084 	beq.w	800bf8e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be8c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800be90:	429a      	cmp	r2, r3
 800be92:	d27c      	bcs.n	800bf8e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800be9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea6:	2b81      	cmp	r3, #129	@ 0x81
 800bea8:	d060      	beq.n	800bf6c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800beb2:	e853 3f00 	ldrex	r3, [r3]
 800beb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800beb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800beba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800becc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bed0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bed8:	e841 2300 	strex	r3, r2, [r1]
 800bedc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e2      	bne.n	800beaa <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3308      	adds	r3, #8
 800beea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800beee:	e853 3f00 	ldrex	r3, [r3]
 800bef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3308      	adds	r3, #8
 800bf04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bf08:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e3      	bne.n	800bee4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf32:	e853 3f00 	ldrex	r3, [r3]
 800bf36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf3a:	f023 0310 	bic.w	r3, r3, #16
 800bf3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf4e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e4      	bne.n	800bf2a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f7 fb66 	bl	8003638 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f922 	bl	800c1d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bf8c:	e0f9      	b.n	800c182 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf94:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	f040 80f2 	bne.w	800c182 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfa6:	2b81      	cmp	r3, #129	@ 0x81
 800bfa8:	f040 80eb 	bne.w	800c182 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f908 	bl	800c1d0 <HAL_UARTEx_RxEventCallback>
      return;
 800bfc0:	e0df      	b.n	800c182 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 80d1 	beq.w	800c186 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800bfe4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 80cc 	beq.w	800c186 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff6:	e853 3f00 	ldrex	r3, [r3]
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c010:	647b      	str	r3, [r7, #68]	@ 0x44
 800c012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c018:	e841 2300 	strex	r3, r2, [r1]
 800c01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e4      	bne.n	800bfee <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3308      	adds	r3, #8
 800c02a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	623b      	str	r3, [r7, #32]
   return(result);
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c03a:	f023 0301 	bic.w	r3, r3, #1
 800c03e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c04c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e1      	bne.n	800c024 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2220      	movs	r2, #32
 800c064:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	60fb      	str	r3, [r7, #12]
   return(result);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f023 0310 	bic.w	r3, r3, #16
 800c088:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c096:	61fb      	str	r3, [r7, #28]
 800c098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09a:	69b9      	ldr	r1, [r7, #24]
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	e841 2300 	strex	r3, r2, [r1]
 800c0a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1e4      	bne.n	800c074 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0b0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f88a 	bl	800c1d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0bc:	e063      	b.n	800c186 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c0be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c0c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00e      	beq.n	800c0e8 <HAL_UART_IRQHandler+0x530>
 800c0ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d008      	beq.n	800c0e8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c0de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fe9d 	bl	800ce20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0e6:	e051      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c0e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c0ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d014      	beq.n	800c11e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c0f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c0f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d105      	bne.n	800c10c <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d008      	beq.n	800c11e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c110:	2b00      	cmp	r3, #0
 800c112:	d03a      	beq.n	800c18a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	4798      	blx	r3
    }
    return;
 800c11c:	e035      	b.n	800c18a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c11e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d009      	beq.n	800c13e <HAL_UART_IRQHandler+0x586>
 800c12a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c12e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fe47 	bl	800cdca <UART_EndTransmit_IT>
    return;
 800c13c:	e026      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c13e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <HAL_UART_IRQHandler+0x5a6>
 800c14a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c14e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fe76 	bl	800ce48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c15c:	e016      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c15e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d010      	beq.n	800c18c <HAL_UART_IRQHandler+0x5d4>
 800c16a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	da0c      	bge.n	800c18c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fe5e 	bl	800ce34 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c178:	e008      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c17a:	bf00      	nop
 800c17c:	e006      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
    return;
 800c17e:	bf00      	nop
 800c180:	e004      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c182:	bf00      	nop
 800c184:	e002      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
      return;
 800c186:	bf00      	nop
 800c188:	e000      	b.n	800c18c <HAL_UART_IRQHandler+0x5d4>
    return;
 800c18a:	bf00      	nop
  }
}
 800c18c:	37b8      	adds	r7, #184	@ 0xb8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop

0800c194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1ec:	b094      	sub	sp, #80	@ 0x50
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	4b83      	ldr	r3, [pc, #524]	@ (800c40c <UART_SetConfig+0x224>)
 800c1fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c202:	689a      	ldr	r2, [r3, #8]
 800c204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	431a      	orrs	r2, r3
 800c20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	431a      	orrs	r2, r3
 800c210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	4313      	orrs	r3, r2
 800c216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	497c      	ldr	r1, [pc, #496]	@ (800c410 <UART_SetConfig+0x228>)
 800c220:	4019      	ands	r1, r3
 800c222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c228:	430b      	orrs	r3, r1
 800c22a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c238:	68d9      	ldr	r1, [r3, #12]
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	ea40 0301 	orr.w	r3, r0, r1
 800c242:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	4b6f      	ldr	r3, [pc, #444]	@ (800c40c <UART_SetConfig+0x224>)
 800c250:	429a      	cmp	r2, r3
 800c252:	d009      	beq.n	800c268 <UART_SetConfig+0x80>
 800c254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	4b6e      	ldr	r3, [pc, #440]	@ (800c414 <UART_SetConfig+0x22c>)
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d004      	beq.n	800c268 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c260:	6a1a      	ldr	r2, [r3, #32]
 800c262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c264:	4313      	orrs	r3, r2
 800c266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c272:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c27c:	430b      	orrs	r3, r1
 800c27e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c286:	f023 000f 	bic.w	r0, r3, #15
 800c28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	ea40 0301 	orr.w	r3, r0, r1
 800c296:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	4b5e      	ldr	r3, [pc, #376]	@ (800c418 <UART_SetConfig+0x230>)
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d102      	bne.n	800c2a8 <UART_SetConfig+0xc0>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2a6:	e032      	b.n	800c30e <UART_SetConfig+0x126>
 800c2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800c41c <UART_SetConfig+0x234>)
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d102      	bne.n	800c2b8 <UART_SetConfig+0xd0>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2b6:	e02a      	b.n	800c30e <UART_SetConfig+0x126>
 800c2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	4b58      	ldr	r3, [pc, #352]	@ (800c420 <UART_SetConfig+0x238>)
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d102      	bne.n	800c2c8 <UART_SetConfig+0xe0>
 800c2c2:	2304      	movs	r3, #4
 800c2c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2c6:	e022      	b.n	800c30e <UART_SetConfig+0x126>
 800c2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	4b55      	ldr	r3, [pc, #340]	@ (800c424 <UART_SetConfig+0x23c>)
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d102      	bne.n	800c2d8 <UART_SetConfig+0xf0>
 800c2d2:	2308      	movs	r3, #8
 800c2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2d6:	e01a      	b.n	800c30e <UART_SetConfig+0x126>
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	4b52      	ldr	r3, [pc, #328]	@ (800c428 <UART_SetConfig+0x240>)
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d102      	bne.n	800c2e8 <UART_SetConfig+0x100>
 800c2e2:	2310      	movs	r3, #16
 800c2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2e6:	e012      	b.n	800c30e <UART_SetConfig+0x126>
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	4b4f      	ldr	r3, [pc, #316]	@ (800c42c <UART_SetConfig+0x244>)
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d102      	bne.n	800c2f8 <UART_SetConfig+0x110>
 800c2f2:	2320      	movs	r3, #32
 800c2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2f6:	e00a      	b.n	800c30e <UART_SetConfig+0x126>
 800c2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	4b43      	ldr	r3, [pc, #268]	@ (800c40c <UART_SetConfig+0x224>)
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d103      	bne.n	800c30a <UART_SetConfig+0x122>
 800c302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c306:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c308:	e001      	b.n	800c30e <UART_SetConfig+0x126>
 800c30a:	2300      	movs	r3, #0
 800c30c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b3e      	ldr	r3, [pc, #248]	@ (800c40c <UART_SetConfig+0x224>)
 800c314:	429a      	cmp	r2, r3
 800c316:	d005      	beq.n	800c324 <UART_SetConfig+0x13c>
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	4b3d      	ldr	r3, [pc, #244]	@ (800c414 <UART_SetConfig+0x22c>)
 800c31e:	429a      	cmp	r2, r3
 800c320:	f040 8088 	bne.w	800c434 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c326:	2200      	movs	r2, #0
 800c328:	623b      	str	r3, [r7, #32]
 800c32a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c32c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c330:	f7fc f8c0 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c334:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 80eb 	beq.w	800c514 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c342:	4a3b      	ldr	r2, [pc, #236]	@ (800c430 <UART_SetConfig+0x248>)
 800c344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c348:	461a      	mov	r2, r3
 800c34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c350:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	4613      	mov	r3, r2
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4413      	add	r3, r2
 800c35c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c35e:	429a      	cmp	r2, r3
 800c360:	d305      	bcc.n	800c36e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c368:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d903      	bls.n	800c376 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c374:	e048      	b.n	800c408 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c378:	2200      	movs	r2, #0
 800c37a:	61bb      	str	r3, [r7, #24]
 800c37c:	61fa      	str	r2, [r7, #28]
 800c37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c382:	4a2b      	ldr	r2, [pc, #172]	@ (800c430 <UART_SetConfig+0x248>)
 800c384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c388:	b29b      	uxth	r3, r3
 800c38a:	2200      	movs	r2, #0
 800c38c:	613b      	str	r3, [r7, #16]
 800c38e:	617a      	str	r2, [r7, #20]
 800c390:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c394:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c398:	f7f4 fbc4 	bl	8000b24 <__aeabi_uldivmod>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	020b      	lsls	r3, r1, #8
 800c3ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3b2:	0202      	lsls	r2, r0, #8
 800c3b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3b6:	6849      	ldr	r1, [r1, #4]
 800c3b8:	0849      	lsrs	r1, r1, #1
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	460c      	mov	r4, r1
 800c3be:	4605      	mov	r5, r0
 800c3c0:	eb12 0804 	adds.w	r8, r2, r4
 800c3c4:	eb43 0905 	adc.w	r9, r3, r5
 800c3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	60bb      	str	r3, [r7, #8]
 800c3d0:	60fa      	str	r2, [r7, #12]
 800c3d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	4649      	mov	r1, r9
 800c3da:	f7f4 fba3 	bl	8000b24 <__aeabi_uldivmod>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3ec:	d308      	bcc.n	800c400 <UART_SetConfig+0x218>
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3f4:	d204      	bcs.n	800c400 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3fc:	60da      	str	r2, [r3, #12]
 800c3fe:	e003      	b.n	800c408 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c400:	2301      	movs	r3, #1
 800c402:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c406:	e085      	b.n	800c514 <UART_SetConfig+0x32c>
 800c408:	e084      	b.n	800c514 <UART_SetConfig+0x32c>
 800c40a:	bf00      	nop
 800c40c:	44002400 	.word	0x44002400
 800c410:	cfff69f3 	.word	0xcfff69f3
 800c414:	54002400 	.word	0x54002400
 800c418:	40013800 	.word	0x40013800
 800c41c:	40004400 	.word	0x40004400
 800c420:	40004800 	.word	0x40004800
 800c424:	40004c00 	.word	0x40004c00
 800c428:	40005000 	.word	0x40005000
 800c42c:	40006400 	.word	0x40006400
 800c430:	0800e0dc 	.word	0x0800e0dc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c43c:	d13c      	bne.n	800c4b8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c43e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c440:	2200      	movs	r2, #0
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	607a      	str	r2, [r7, #4]
 800c446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c44a:	f7fc f833 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c44e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d05e      	beq.n	800c514 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45a:	4a39      	ldr	r2, [pc, #228]	@ (800c540 <UART_SetConfig+0x358>)
 800c45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c460:	461a      	mov	r2, r3
 800c462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c464:	fbb3 f3f2 	udiv	r3, r3, r2
 800c468:	005a      	lsls	r2, r3, #1
 800c46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	441a      	add	r2, r3
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	fbb2 f3f3 	udiv	r3, r2, r3
 800c47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47e:	2b0f      	cmp	r3, #15
 800c480:	d916      	bls.n	800c4b0 <UART_SetConfig+0x2c8>
 800c482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c488:	d212      	bcs.n	800c4b0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	f023 030f 	bic.w	r3, r3, #15
 800c492:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c496:	085b      	lsrs	r3, r3, #1
 800c498:	b29b      	uxth	r3, r3
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c4ac:	60da      	str	r2, [r3, #12]
 800c4ae:	e031      	b.n	800c514 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c4b6:	e02d      	b.n	800c514 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	469a      	mov	sl, r3
 800c4be:	4693      	mov	fp, r2
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	f7fb fff6 	bl	80084b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c4c8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d021      	beq.n	800c514 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d4:	4a1a      	ldr	r2, [pc, #104]	@ (800c540 <UART_SetConfig+0x358>)
 800c4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4de:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	441a      	add	r2, r3
 800c4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d909      	bls.n	800c50e <UART_SetConfig+0x326>
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c500:	d205      	bcs.n	800c50e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c504:	b29a      	uxth	r2, r3
 800c506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60da      	str	r2, [r3, #12]
 800c50c:	e002      	b.n	800c514 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c516:	2201      	movs	r2, #1
 800c518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51e:	2201      	movs	r2, #1
 800c520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c526:	2200      	movs	r2, #0
 800c528:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52c:	2200      	movs	r2, #0
 800c52e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c530:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c534:	4618      	mov	r0, r3
 800c536:	3750      	adds	r7, #80	@ 0x50
 800c538:	46bd      	mov	sp, r7
 800c53a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c53e:	bf00      	nop
 800c540:	0800e0dc 	.word	0x0800e0dc

0800c544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	f003 0308 	and.w	r3, r3, #8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c594:	f003 0302 	and.w	r3, r3, #2
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d8:	f003 0310 	and.w	r3, r3, #16
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01a      	beq.n	800c65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	430a      	orrs	r2, r1
 800c638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c642:	d10a      	bne.n	800c65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b098      	sub	sp, #96	@ 0x60
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c698:	f7f6 fc82 	bl	8002fa0 <HAL_GetTick>
 800c69c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	d12f      	bne.n	800c70c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f88e 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d022      	beq.n	800c70c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6da:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e6      	bne.n	800c6c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e063      	b.n	800c7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b04      	cmp	r3, #4
 800c718:	d149      	bne.n	800c7ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c71a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c722:	2200      	movs	r2, #0
 800c724:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f857 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d03c      	beq.n	800c7ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	623b      	str	r3, [r7, #32]
   return(result);
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c752:	633b      	str	r3, [r7, #48]	@ 0x30
 800c754:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e6      	bne.n	800c734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3308      	adds	r3, #8
 800c76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	60fb      	str	r3, [r7, #12]
   return(result);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f023 0301 	bic.w	r3, r3, #1
 800c77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3308      	adds	r3, #8
 800c784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c786:	61fa      	str	r2, [r7, #28]
 800c788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	69b9      	ldr	r1, [r7, #24]
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	617b      	str	r3, [r7, #20]
   return(result);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e5      	bne.n	800c766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e012      	b.n	800c7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3758      	adds	r7, #88	@ 0x58
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ec:	e04f      	b.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d04b      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7f6:	f7f6 fbd3 	bl	8002fa0 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	429a      	cmp	r2, r3
 800c804:	d302      	bcc.n	800c80c <UART_WaitOnFlagUntilTimeout+0x30>
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e04e      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d037      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b80      	cmp	r3, #128	@ 0x80
 800c822:	d034      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b40      	cmp	r3, #64	@ 0x40
 800c828:	d031      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b08      	cmp	r3, #8
 800c836:	d110      	bne.n	800c85a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2208      	movs	r2, #8
 800c83e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f972 	bl	800cb2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2208      	movs	r2, #8
 800c84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e029      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c868:	d111      	bne.n	800c88e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 f958 	bl	800cb2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2220      	movs	r2, #32
 800c87e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e00f      	b.n	800c8ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	69da      	ldr	r2, [r3, #28]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4013      	ands	r3, r2
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	bf0c      	ite	eq
 800c89e:	2301      	moveq	r3, #1
 800c8a0:	2300      	movne	r3, #0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d0a0      	beq.n	800c7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
	...

0800c8b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b098      	sub	sp, #96	@ 0x60
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	88fa      	ldrh	r2, [r7, #6]
 800c8d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2222      	movs	r2, #34	@ 0x22
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d07c      	beq.n	800c9ee <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8fa:	4a68      	ldr	r2, [pc, #416]	@ (800ca9c <UART_Start_Receive_DMA+0x1e4>)
 800c8fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c904:	4a66      	ldr	r2, [pc, #408]	@ (800caa0 <UART_Start_Receive_DMA+0x1e8>)
 800c906:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c90e:	4a65      	ldr	r2, [pc, #404]	@ (800caa4 <UART_Start_Receive_DMA+0x1ec>)
 800c910:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c918:	2200      	movs	r2, #0
 800c91a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c924:	d107      	bne.n	800c936 <UART_Start_Receive_DMA+0x7e>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d103      	bne.n	800c936 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c942:	2b00      	cmp	r3, #0
 800c944:	d034      	beq.n	800c9b0 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c94c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d02a      	beq.n	800c9a8 <UART_Start_Receive_DMA+0xf0>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d023      	beq.n	800c9a8 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c96e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c97e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c98e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f7 fb38 	bl	8004010 <HAL_DMAEx_List_Start_IT>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9a6:	e014      	b.n	800c9d2 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9ae:	e010      	b.n	800c9d2 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3324      	adds	r3, #36	@ 0x24
 800c9bc:	4619      	mov	r1, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c9c8:	f7f6 fdd6 	bl	8003578 <HAL_DMA_Start_IT>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d009      	beq.n	800c9ee <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2210      	movs	r2, #16
 800c9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2220      	movs	r2, #32
 800c9e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e051      	b.n	800ca92 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d018      	beq.n	800ca28 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca16:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ca1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ca22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e6      	bne.n	800c9f6 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3a:	f043 0301 	orr.w	r3, r3, #1
 800ca3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3308      	adds	r3, #8
 800ca46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca48:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ca4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e5      	bne.n	800ca28 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca72:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca7c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6a39      	ldr	r1, [r7, #32]
 800ca82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e5      	bne.n	800ca5c <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3760      	adds	r7, #96	@ 0x60
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	0800cbf7 	.word	0x0800cbf7
 800caa0:	0800cce9 	.word	0x0800cce9
 800caa4:	0800cd27 	.word	0x0800cd27

0800caa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b08f      	sub	sp, #60	@ 0x3c
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cad0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e6      	bne.n	800cab0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3308      	adds	r3, #8
 800cae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	e853 3f00 	ldrex	r3, [r3]
 800caf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800caf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3308      	adds	r3, #8
 800cb00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb02:	61ba      	str	r2, [r7, #24]
 800cb04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb06:	6979      	ldr	r1, [r7, #20]
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	e841 2300 	strex	r3, r2, [r1]
 800cb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1e5      	bne.n	800cae2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2220      	movs	r2, #32
 800cb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cb1e:	bf00      	nop
 800cb20:	373c      	adds	r7, #60	@ 0x3c
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b095      	sub	sp, #84	@ 0x54
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb50:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e6      	bne.n	800cb32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3308      	adds	r3, #8
 800cb6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb7a:	f023 0301 	bic.w	r3, r3, #1
 800cb7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3308      	adds	r3, #8
 800cb86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e3      	bne.n	800cb64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d118      	bne.n	800cbd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f023 0310 	bic.w	r3, r3, #16
 800cbb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc2:	61bb      	str	r3, [r7, #24]
 800cbc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6979      	ldr	r1, [r7, #20]
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e6      	bne.n	800cba4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cbea:	bf00      	nop
 800cbec:	3754      	adds	r7, #84	@ 0x54
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b096      	sub	sp, #88	@ 0x58
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc02:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc08:	2b81      	cmp	r3, #129	@ 0x81
 800cc0a:	d057      	beq.n	800ccbc <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800cc0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	e853 3f00 	ldrex	r3, [r3]
 800cc20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc28:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc32:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc34:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc3a:	e841 2300 	strex	r3, r2, [r1]
 800cc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1e6      	bne.n	800cc14 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	623b      	str	r3, [r7, #32]
   return(result);
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	f023 0301 	bic.w	r3, r3, #1
 800cc5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3308      	adds	r3, #8
 800cc64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc66:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc6e:	e841 2300 	strex	r3, r2, [r1]
 800cc72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e5      	bne.n	800cc46 <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d118      	bne.n	800ccbc <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f023 0310 	bic.w	r3, r3, #16
 800cc9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	461a      	mov	r2, r3
 800cca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cca8:	61fb      	str	r3, [r7, #28]
 800ccaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	69b9      	ldr	r1, [r7, #24]
 800ccae:	69fa      	ldr	r2, [r7, #28]
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	617b      	str	r3, [r7, #20]
   return(result);
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e6      	bne.n	800cc8a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d107      	bne.n	800ccda <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ccd4:	f7ff fa7c 	bl	800c1d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccd8:	e002      	b.n	800cce0 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800ccda:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ccdc:	f7f5 f9ca 	bl	8002074 <HAL_UART_RxCpltCallback>
}
 800cce0:	bf00      	nop
 800cce2:	3758      	adds	r7, #88	@ 0x58
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d109      	bne.n	800cd18 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd0a:	085b      	lsrs	r3, r3, #1
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	4619      	mov	r1, r3
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f7ff fa5d 	bl	800c1d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd16:	e002      	b.n	800cd1e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7ff fa45 	bl	800c1a8 <HAL_UART_RxHalfCpltCallback>
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd4e:	2b80      	cmp	r3, #128	@ 0x80
 800cd50:	d109      	bne.n	800cd66 <UART_DMAError+0x40>
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b21      	cmp	r3, #33	@ 0x21
 800cd56:	d106      	bne.n	800cd66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cd60:	6978      	ldr	r0, [r7, #20]
 800cd62:	f7ff fea1 	bl	800caa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd70:	2b40      	cmp	r3, #64	@ 0x40
 800cd72:	d109      	bne.n	800cd88 <UART_DMAError+0x62>
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b22      	cmp	r3, #34	@ 0x22
 800cd78:	d106      	bne.n	800cd88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cd82:	6978      	ldr	r0, [r7, #20]
 800cd84:	f7ff fed1 	bl	800cb2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd8e:	f043 0210 	orr.w	r2, r3, #16
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd98:	6978      	ldr	r0, [r7, #20]
 800cd9a:	f7ff fa0f 	bl	800c1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd9e:	bf00      	nop
 800cda0:	3718      	adds	r7, #24
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff f9fd 	bl	800c1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b088      	sub	sp, #32
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	e853 3f00 	ldrex	r3, [r3]
 800cdde:	60bb      	str	r3, [r7, #8]
   return(result);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf4:	6979      	ldr	r1, [r7, #20]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	e841 2300 	strex	r3, r2, [r1]
 800cdfc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1e6      	bne.n	800cdd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2220      	movs	r2, #32
 800ce08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7ff f9be 	bl	800c194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce18:	bf00      	nop
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce50:	bf00      	nop
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d101      	bne.n	800ce72 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce6e:	2302      	movs	r3, #2
 800ce70:	e027      	b.n	800cec2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2224      	movs	r2, #36	@ 0x24
 800ce7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f022 0201 	bic.w	r2, r2, #1
 800ce98:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d101      	bne.n	800cee6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cee2:	2302      	movs	r3, #2
 800cee4:	e02d      	b.n	800cf42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2224      	movs	r2, #36	@ 0x24
 800cef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f022 0201 	bic.w	r2, r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f850 	bl	800cfc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2220      	movs	r2, #32
 800cf34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d101      	bne.n	800cf62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e02d      	b.n	800cfbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2224      	movs	r2, #36	@ 0x24
 800cf6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0201 	bic.w	r2, r2, #1
 800cf88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f812 	bl	800cfc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d108      	bne.n	800cfea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfe8:	e031      	b.n	800d04e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfea:	2308      	movs	r3, #8
 800cfec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfee:	2308      	movs	r3, #8
 800cff0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	0e5b      	lsrs	r3, r3, #25
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	f003 0307 	and.w	r3, r3, #7
 800d000:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	0f5b      	lsrs	r3, r3, #29
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 0307 	and.w	r3, r3, #7
 800d010:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d012:	7bbb      	ldrb	r3, [r7, #14]
 800d014:	7b3a      	ldrb	r2, [r7, #12]
 800d016:	4911      	ldr	r1, [pc, #68]	@ (800d05c <UARTEx_SetNbDataToProcess+0x94>)
 800d018:	5c8a      	ldrb	r2, [r1, r2]
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d01e:	7b3a      	ldrb	r2, [r7, #12]
 800d020:	490f      	ldr	r1, [pc, #60]	@ (800d060 <UARTEx_SetNbDataToProcess+0x98>)
 800d022:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d024:	fb93 f3f2 	sdiv	r3, r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	7b7a      	ldrb	r2, [r7, #13]
 800d034:	4909      	ldr	r1, [pc, #36]	@ (800d05c <UARTEx_SetNbDataToProcess+0x94>)
 800d036:	5c8a      	ldrb	r2, [r1, r2]
 800d038:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d03c:	7b7a      	ldrb	r2, [r7, #13]
 800d03e:	4908      	ldr	r1, [pc, #32]	@ (800d060 <UARTEx_SetNbDataToProcess+0x98>)
 800d040:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d042:	fb93 f3f2 	sdiv	r3, r3, r2
 800d046:	b29a      	uxth	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d04e:	bf00      	nop
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	0800e0f4 	.word	0x0800e0f4
 800d060:	0800e0fc 	.word	0x0800e0fc

0800d064 <std>:
 800d064:	2300      	movs	r3, #0
 800d066:	b510      	push	{r4, lr}
 800d068:	4604      	mov	r4, r0
 800d06a:	6083      	str	r3, [r0, #8]
 800d06c:	8181      	strh	r1, [r0, #12]
 800d06e:	4619      	mov	r1, r3
 800d070:	6643      	str	r3, [r0, #100]	@ 0x64
 800d072:	81c2      	strh	r2, [r0, #14]
 800d074:	2208      	movs	r2, #8
 800d076:	6183      	str	r3, [r0, #24]
 800d078:	e9c0 3300 	strd	r3, r3, [r0]
 800d07c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d080:	305c      	adds	r0, #92	@ 0x5c
 800d082:	f000 f9f9 	bl	800d478 <memset>
 800d086:	4b0d      	ldr	r3, [pc, #52]	@ (800d0bc <std+0x58>)
 800d088:	6224      	str	r4, [r4, #32]
 800d08a:	6263      	str	r3, [r4, #36]	@ 0x24
 800d08c:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c0 <std+0x5c>)
 800d08e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d090:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c4 <std+0x60>)
 800d092:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d094:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c8 <std+0x64>)
 800d096:	6323      	str	r3, [r4, #48]	@ 0x30
 800d098:	4b0c      	ldr	r3, [pc, #48]	@ (800d0cc <std+0x68>)
 800d09a:	429c      	cmp	r4, r3
 800d09c:	d006      	beq.n	800d0ac <std+0x48>
 800d09e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0a2:	4294      	cmp	r4, r2
 800d0a4:	d002      	beq.n	800d0ac <std+0x48>
 800d0a6:	33d0      	adds	r3, #208	@ 0xd0
 800d0a8:	429c      	cmp	r4, r3
 800d0aa:	d105      	bne.n	800d0b8 <std+0x54>
 800d0ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b4:	f000 ba58 	b.w	800d568 <__retarget_lock_init_recursive>
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	bf00      	nop
 800d0bc:	0800d2c9 	.word	0x0800d2c9
 800d0c0:	0800d2eb 	.word	0x0800d2eb
 800d0c4:	0800d323 	.word	0x0800d323
 800d0c8:	0800d347 	.word	0x0800d347
 800d0cc:	200005a4 	.word	0x200005a4

0800d0d0 <stdio_exit_handler>:
 800d0d0:	4a02      	ldr	r2, [pc, #8]	@ (800d0dc <stdio_exit_handler+0xc>)
 800d0d2:	4903      	ldr	r1, [pc, #12]	@ (800d0e0 <stdio_exit_handler+0x10>)
 800d0d4:	4803      	ldr	r0, [pc, #12]	@ (800d0e4 <stdio_exit_handler+0x14>)
 800d0d6:	f000 b869 	b.w	800d1ac <_fwalk_sglue>
 800d0da:	bf00      	nop
 800d0dc:	20000090 	.word	0x20000090
 800d0e0:	0800de11 	.word	0x0800de11
 800d0e4:	200000a0 	.word	0x200000a0

0800d0e8 <cleanup_stdio>:
 800d0e8:	6841      	ldr	r1, [r0, #4]
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d11c <cleanup_stdio+0x34>)
 800d0ec:	4299      	cmp	r1, r3
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	d001      	beq.n	800d0f8 <cleanup_stdio+0x10>
 800d0f4:	f000 fe8c 	bl	800de10 <_fflush_r>
 800d0f8:	68a1      	ldr	r1, [r4, #8]
 800d0fa:	4b09      	ldr	r3, [pc, #36]	@ (800d120 <cleanup_stdio+0x38>)
 800d0fc:	4299      	cmp	r1, r3
 800d0fe:	d002      	beq.n	800d106 <cleanup_stdio+0x1e>
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fe85 	bl	800de10 <_fflush_r>
 800d106:	68e1      	ldr	r1, [r4, #12]
 800d108:	4b06      	ldr	r3, [pc, #24]	@ (800d124 <cleanup_stdio+0x3c>)
 800d10a:	4299      	cmp	r1, r3
 800d10c:	d004      	beq.n	800d118 <cleanup_stdio+0x30>
 800d10e:	4620      	mov	r0, r4
 800d110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d114:	f000 be7c 	b.w	800de10 <_fflush_r>
 800d118:	bd10      	pop	{r4, pc}
 800d11a:	bf00      	nop
 800d11c:	200005a4 	.word	0x200005a4
 800d120:	2000060c 	.word	0x2000060c
 800d124:	20000674 	.word	0x20000674

0800d128 <global_stdio_init.part.0>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	4b0b      	ldr	r3, [pc, #44]	@ (800d158 <global_stdio_init.part.0+0x30>)
 800d12c:	2104      	movs	r1, #4
 800d12e:	4c0b      	ldr	r4, [pc, #44]	@ (800d15c <global_stdio_init.part.0+0x34>)
 800d130:	4a0b      	ldr	r2, [pc, #44]	@ (800d160 <global_stdio_init.part.0+0x38>)
 800d132:	4620      	mov	r0, r4
 800d134:	601a      	str	r2, [r3, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	f7ff ff94 	bl	800d064 <std>
 800d13c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d140:	2201      	movs	r2, #1
 800d142:	2109      	movs	r1, #9
 800d144:	f7ff ff8e 	bl	800d064 <std>
 800d148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d14c:	2202      	movs	r2, #2
 800d14e:	2112      	movs	r1, #18
 800d150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d154:	f7ff bf86 	b.w	800d064 <std>
 800d158:	200006dc 	.word	0x200006dc
 800d15c:	200005a4 	.word	0x200005a4
 800d160:	0800d0d1 	.word	0x0800d0d1

0800d164 <__sfp_lock_acquire>:
 800d164:	4801      	ldr	r0, [pc, #4]	@ (800d16c <__sfp_lock_acquire+0x8>)
 800d166:	f000 ba00 	b.w	800d56a <__retarget_lock_acquire_recursive>
 800d16a:	bf00      	nop
 800d16c:	200006e5 	.word	0x200006e5

0800d170 <__sfp_lock_release>:
 800d170:	4801      	ldr	r0, [pc, #4]	@ (800d178 <__sfp_lock_release+0x8>)
 800d172:	f000 b9fb 	b.w	800d56c <__retarget_lock_release_recursive>
 800d176:	bf00      	nop
 800d178:	200006e5 	.word	0x200006e5

0800d17c <__sinit>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4604      	mov	r4, r0
 800d180:	f7ff fff0 	bl	800d164 <__sfp_lock_acquire>
 800d184:	6a23      	ldr	r3, [r4, #32]
 800d186:	b11b      	cbz	r3, 800d190 <__sinit+0x14>
 800d188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18c:	f7ff bff0 	b.w	800d170 <__sfp_lock_release>
 800d190:	4b04      	ldr	r3, [pc, #16]	@ (800d1a4 <__sinit+0x28>)
 800d192:	6223      	str	r3, [r4, #32]
 800d194:	4b04      	ldr	r3, [pc, #16]	@ (800d1a8 <__sinit+0x2c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f5      	bne.n	800d188 <__sinit+0xc>
 800d19c:	f7ff ffc4 	bl	800d128 <global_stdio_init.part.0>
 800d1a0:	e7f2      	b.n	800d188 <__sinit+0xc>
 800d1a2:	bf00      	nop
 800d1a4:	0800d0e9 	.word	0x0800d0e9
 800d1a8:	200006dc 	.word	0x200006dc

0800d1ac <_fwalk_sglue>:
 800d1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	4688      	mov	r8, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1bc:	f1b9 0901 	subs.w	r9, r9, #1
 800d1c0:	d505      	bpl.n	800d1ce <_fwalk_sglue+0x22>
 800d1c2:	6824      	ldr	r4, [r4, #0]
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	d1f7      	bne.n	800d1b8 <_fwalk_sglue+0xc>
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d907      	bls.n	800d1e4 <_fwalk_sglue+0x38>
 800d1d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	d003      	beq.n	800d1e4 <_fwalk_sglue+0x38>
 800d1dc:	4629      	mov	r1, r5
 800d1de:	4638      	mov	r0, r7
 800d1e0:	47c0      	blx	r8
 800d1e2:	4306      	orrs	r6, r0
 800d1e4:	3568      	adds	r5, #104	@ 0x68
 800d1e6:	e7e9      	b.n	800d1bc <_fwalk_sglue+0x10>

0800d1e8 <iprintf>:
 800d1e8:	b40f      	push	{r0, r1, r2, r3}
 800d1ea:	b507      	push	{r0, r1, r2, lr}
 800d1ec:	4906      	ldr	r1, [pc, #24]	@ (800d208 <iprintf+0x20>)
 800d1ee:	ab04      	add	r3, sp, #16
 800d1f0:	6808      	ldr	r0, [r1, #0]
 800d1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f6:	6881      	ldr	r1, [r0, #8]
 800d1f8:	9301      	str	r3, [sp, #4]
 800d1fa:	f000 fadb 	bl	800d7b4 <_vfiprintf_r>
 800d1fe:	b003      	add	sp, #12
 800d200:	f85d eb04 	ldr.w	lr, [sp], #4
 800d204:	b004      	add	sp, #16
 800d206:	4770      	bx	lr
 800d208:	2000009c 	.word	0x2000009c

0800d20c <_puts_r>:
 800d20c:	6a03      	ldr	r3, [r0, #32]
 800d20e:	b570      	push	{r4, r5, r6, lr}
 800d210:	4605      	mov	r5, r0
 800d212:	460e      	mov	r6, r1
 800d214:	6884      	ldr	r4, [r0, #8]
 800d216:	b90b      	cbnz	r3, 800d21c <_puts_r+0x10>
 800d218:	f7ff ffb0 	bl	800d17c <__sinit>
 800d21c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d21e:	07db      	lsls	r3, r3, #31
 800d220:	d405      	bmi.n	800d22e <_puts_r+0x22>
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	0598      	lsls	r0, r3, #22
 800d226:	d402      	bmi.n	800d22e <_puts_r+0x22>
 800d228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d22a:	f000 f99e 	bl	800d56a <__retarget_lock_acquire_recursive>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	0719      	lsls	r1, r3, #28
 800d232:	d502      	bpl.n	800d23a <_puts_r+0x2e>
 800d234:	6923      	ldr	r3, [r4, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d135      	bne.n	800d2a6 <_puts_r+0x9a>
 800d23a:	4621      	mov	r1, r4
 800d23c:	4628      	mov	r0, r5
 800d23e:	f000 f8c5 	bl	800d3cc <__swsetup_r>
 800d242:	b380      	cbz	r0, 800d2a6 <_puts_r+0x9a>
 800d244:	f04f 35ff 	mov.w	r5, #4294967295
 800d248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d24a:	07da      	lsls	r2, r3, #31
 800d24c:	d405      	bmi.n	800d25a <_puts_r+0x4e>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	059b      	lsls	r3, r3, #22
 800d252:	d402      	bmi.n	800d25a <_puts_r+0x4e>
 800d254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d256:	f000 f989 	bl	800d56c <__retarget_lock_release_recursive>
 800d25a:	4628      	mov	r0, r5
 800d25c:	bd70      	pop	{r4, r5, r6, pc}
 800d25e:	2b00      	cmp	r3, #0
 800d260:	da04      	bge.n	800d26c <_puts_r+0x60>
 800d262:	69a2      	ldr	r2, [r4, #24]
 800d264:	429a      	cmp	r2, r3
 800d266:	dc17      	bgt.n	800d298 <_puts_r+0x8c>
 800d268:	290a      	cmp	r1, #10
 800d26a:	d015      	beq.n	800d298 <_puts_r+0x8c>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	6022      	str	r2, [r4, #0]
 800d272:	7019      	strb	r1, [r3, #0]
 800d274:	68a3      	ldr	r3, [r4, #8]
 800d276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d27a:	3b01      	subs	r3, #1
 800d27c:	60a3      	str	r3, [r4, #8]
 800d27e:	2900      	cmp	r1, #0
 800d280:	d1ed      	bne.n	800d25e <_puts_r+0x52>
 800d282:	2b00      	cmp	r3, #0
 800d284:	da11      	bge.n	800d2aa <_puts_r+0x9e>
 800d286:	4622      	mov	r2, r4
 800d288:	210a      	movs	r1, #10
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 f85f 	bl	800d34e <__swbuf_r>
 800d290:	3001      	adds	r0, #1
 800d292:	d0d7      	beq.n	800d244 <_puts_r+0x38>
 800d294:	250a      	movs	r5, #10
 800d296:	e7d7      	b.n	800d248 <_puts_r+0x3c>
 800d298:	4622      	mov	r2, r4
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f857 	bl	800d34e <__swbuf_r>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d1e7      	bne.n	800d274 <_puts_r+0x68>
 800d2a4:	e7ce      	b.n	800d244 <_puts_r+0x38>
 800d2a6:	3e01      	subs	r6, #1
 800d2a8:	e7e4      	b.n	800d274 <_puts_r+0x68>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	6022      	str	r2, [r4, #0]
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	701a      	strb	r2, [r3, #0]
 800d2b4:	e7ee      	b.n	800d294 <_puts_r+0x88>
	...

0800d2b8 <puts>:
 800d2b8:	4b02      	ldr	r3, [pc, #8]	@ (800d2c4 <puts+0xc>)
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f7ff bfa5 	b.w	800d20c <_puts_r>
 800d2c2:	bf00      	nop
 800d2c4:	2000009c 	.word	0x2000009c

0800d2c8 <__sread>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d0:	f000 f8fc 	bl	800d4cc <_read_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	bfab      	itete	ge
 800d2d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d2da:	89a3      	ldrhlt	r3, [r4, #12]
 800d2dc:	181b      	addge	r3, r3, r0
 800d2de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d2e2:	bfac      	ite	ge
 800d2e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d2e6:	81a3      	strhlt	r3, [r4, #12]
 800d2e8:	bd10      	pop	{r4, pc}

0800d2ea <__swrite>:
 800d2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ee:	461f      	mov	r7, r3
 800d2f0:	898b      	ldrh	r3, [r1, #12]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	05db      	lsls	r3, r3, #23
 800d2f8:	4616      	mov	r6, r2
 800d2fa:	d505      	bpl.n	800d308 <__swrite+0x1e>
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	2200      	movs	r2, #0
 800d300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d304:	f000 f8d0 	bl	800d4a8 <_lseek_r>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	4632      	mov	r2, r6
 800d30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d310:	4628      	mov	r0, r5
 800d312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d316:	81a3      	strh	r3, [r4, #12]
 800d318:	463b      	mov	r3, r7
 800d31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	f000 b8e7 	b.w	800d4f0 <_write_r>

0800d322 <__sseek>:
 800d322:	b510      	push	{r4, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32a:	f000 f8bd 	bl	800d4a8 <_lseek_r>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	bf15      	itete	ne
 800d334:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d33a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d33e:	81a3      	strheq	r3, [r4, #12]
 800d340:	bf18      	it	ne
 800d342:	81a3      	strhne	r3, [r4, #12]
 800d344:	bd10      	pop	{r4, pc}

0800d346 <__sclose>:
 800d346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34a:	f000 b89d 	b.w	800d488 <_close_r>

0800d34e <__swbuf_r>:
 800d34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d350:	460e      	mov	r6, r1
 800d352:	4614      	mov	r4, r2
 800d354:	4605      	mov	r5, r0
 800d356:	b118      	cbz	r0, 800d360 <__swbuf_r+0x12>
 800d358:	6a03      	ldr	r3, [r0, #32]
 800d35a:	b90b      	cbnz	r3, 800d360 <__swbuf_r+0x12>
 800d35c:	f7ff ff0e 	bl	800d17c <__sinit>
 800d360:	69a3      	ldr	r3, [r4, #24]
 800d362:	60a3      	str	r3, [r4, #8]
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	071a      	lsls	r2, r3, #28
 800d368:	d501      	bpl.n	800d36e <__swbuf_r+0x20>
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	b943      	cbnz	r3, 800d380 <__swbuf_r+0x32>
 800d36e:	4621      	mov	r1, r4
 800d370:	4628      	mov	r0, r5
 800d372:	f000 f82b 	bl	800d3cc <__swsetup_r>
 800d376:	b118      	cbz	r0, 800d380 <__swbuf_r+0x32>
 800d378:	f04f 37ff 	mov.w	r7, #4294967295
 800d37c:	4638      	mov	r0, r7
 800d37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	b2f6      	uxtb	r6, r6
 800d384:	6922      	ldr	r2, [r4, #16]
 800d386:	4637      	mov	r7, r6
 800d388:	1a98      	subs	r0, r3, r2
 800d38a:	6963      	ldr	r3, [r4, #20]
 800d38c:	4283      	cmp	r3, r0
 800d38e:	dc05      	bgt.n	800d39c <__swbuf_r+0x4e>
 800d390:	4621      	mov	r1, r4
 800d392:	4628      	mov	r0, r5
 800d394:	f000 fd3c 	bl	800de10 <_fflush_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1ed      	bne.n	800d378 <__swbuf_r+0x2a>
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	60a3      	str	r3, [r4, #8]
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	6022      	str	r2, [r4, #0]
 800d3a8:	701e      	strb	r6, [r3, #0]
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	6962      	ldr	r2, [r4, #20]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d004      	beq.n	800d3bc <__swbuf_r+0x6e>
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	07db      	lsls	r3, r3, #31
 800d3b6:	d5e1      	bpl.n	800d37c <__swbuf_r+0x2e>
 800d3b8:	2e0a      	cmp	r6, #10
 800d3ba:	d1df      	bne.n	800d37c <__swbuf_r+0x2e>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f000 fd26 	bl	800de10 <_fflush_r>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d0d9      	beq.n	800d37c <__swbuf_r+0x2e>
 800d3c8:	e7d6      	b.n	800d378 <__swbuf_r+0x2a>
	...

0800d3cc <__swsetup_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4b29      	ldr	r3, [pc, #164]	@ (800d474 <__swsetup_r+0xa8>)
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	6818      	ldr	r0, [r3, #0]
 800d3d6:	b118      	cbz	r0, 800d3e0 <__swsetup_r+0x14>
 800d3d8:	6a03      	ldr	r3, [r0, #32]
 800d3da:	b90b      	cbnz	r3, 800d3e0 <__swsetup_r+0x14>
 800d3dc:	f7ff fece 	bl	800d17c <__sinit>
 800d3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e4:	0719      	lsls	r1, r3, #28
 800d3e6:	d422      	bmi.n	800d42e <__swsetup_r+0x62>
 800d3e8:	06da      	lsls	r2, r3, #27
 800d3ea:	d407      	bmi.n	800d3fc <__swsetup_r+0x30>
 800d3ec:	2209      	movs	r2, #9
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	e033      	b.n	800d464 <__swsetup_r+0x98>
 800d3fc:	0758      	lsls	r0, r3, #29
 800d3fe:	d512      	bpl.n	800d426 <__swsetup_r+0x5a>
 800d400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d402:	b141      	cbz	r1, 800d416 <__swsetup_r+0x4a>
 800d404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__swsetup_r+0x46>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f000 f8af 	bl	800d570 <_free_r>
 800d412:	2300      	movs	r3, #0
 800d414:	6363      	str	r3, [r4, #52]	@ 0x34
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	2300      	movs	r3, #0
 800d420:	6063      	str	r3, [r4, #4]
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f043 0308 	orr.w	r3, r3, #8
 800d42c:	81a3      	strh	r3, [r4, #12]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	b94b      	cbnz	r3, 800d446 <__swsetup_r+0x7a>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d43c:	d003      	beq.n	800d446 <__swsetup_r+0x7a>
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f000 fd32 	bl	800deaa <__smakebuf_r>
 800d446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44a:	f013 0201 	ands.w	r2, r3, #1
 800d44e:	d00a      	beq.n	800d466 <__swsetup_r+0x9a>
 800d450:	2200      	movs	r2, #0
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6962      	ldr	r2, [r4, #20]
 800d456:	4252      	negs	r2, r2
 800d458:	61a2      	str	r2, [r4, #24]
 800d45a:	6922      	ldr	r2, [r4, #16]
 800d45c:	b942      	cbnz	r2, 800d470 <__swsetup_r+0xa4>
 800d45e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d462:	d1c5      	bne.n	800d3f0 <__swsetup_r+0x24>
 800d464:	bd38      	pop	{r3, r4, r5, pc}
 800d466:	0799      	lsls	r1, r3, #30
 800d468:	bf58      	it	pl
 800d46a:	6962      	ldrpl	r2, [r4, #20]
 800d46c:	60a2      	str	r2, [r4, #8]
 800d46e:	e7f4      	b.n	800d45a <__swsetup_r+0x8e>
 800d470:	2000      	movs	r0, #0
 800d472:	e7f7      	b.n	800d464 <__swsetup_r+0x98>
 800d474:	2000009c 	.word	0x2000009c

0800d478 <memset>:
 800d478:	4402      	add	r2, r0
 800d47a:	4603      	mov	r3, r0
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d100      	bne.n	800d482 <memset+0xa>
 800d480:	4770      	bx	lr
 800d482:	f803 1b01 	strb.w	r1, [r3], #1
 800d486:	e7f9      	b.n	800d47c <memset+0x4>

0800d488 <_close_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	2300      	movs	r3, #0
 800d48c:	4d05      	ldr	r5, [pc, #20]	@ (800d4a4 <_close_r+0x1c>)
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	602b      	str	r3, [r5, #0]
 800d494:	f7f4 fff1 	bl	800247a <_close>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_close_r+0x1a>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_close_r+0x1a>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	200006e0 	.word	0x200006e0

0800d4a8 <_lseek_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	4d06      	ldr	r5, [pc, #24]	@ (800d4c8 <_lseek_r+0x20>)
 800d4ae:	4608      	mov	r0, r1
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	602a      	str	r2, [r5, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f7f5 f806 	bl	80024c8 <_lseek>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_lseek_r+0x1e>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_lseek_r+0x1e>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	200006e0 	.word	0x200006e0

0800d4cc <_read_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4d06      	ldr	r5, [pc, #24]	@ (800d4ec <_read_r+0x20>)
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	602a      	str	r2, [r5, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	f7f4 ff94 	bl	8002408 <_read>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d102      	bne.n	800d4ea <_read_r+0x1e>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	b103      	cbz	r3, 800d4ea <_read_r+0x1e>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	200006e0 	.word	0x200006e0

0800d4f0 <_write_r>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4d06      	ldr	r5, [pc, #24]	@ (800d510 <_write_r+0x20>)
 800d4f6:	4608      	mov	r0, r1
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	602a      	str	r2, [r5, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	f7f4 ff9f 	bl	8002442 <_write>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d102      	bne.n	800d50e <_write_r+0x1e>
 800d508:	682b      	ldr	r3, [r5, #0]
 800d50a:	b103      	cbz	r3, 800d50e <_write_r+0x1e>
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	bd38      	pop	{r3, r4, r5, pc}
 800d510:	200006e0 	.word	0x200006e0

0800d514 <__errno>:
 800d514:	4b01      	ldr	r3, [pc, #4]	@ (800d51c <__errno+0x8>)
 800d516:	6818      	ldr	r0, [r3, #0]
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	2000009c 	.word	0x2000009c

0800d520 <__libc_init_array>:
 800d520:	b570      	push	{r4, r5, r6, lr}
 800d522:	4d0d      	ldr	r5, [pc, #52]	@ (800d558 <__libc_init_array+0x38>)
 800d524:	2600      	movs	r6, #0
 800d526:	4c0d      	ldr	r4, [pc, #52]	@ (800d55c <__libc_init_array+0x3c>)
 800d528:	1b64      	subs	r4, r4, r5
 800d52a:	10a4      	asrs	r4, r4, #2
 800d52c:	42a6      	cmp	r6, r4
 800d52e:	d109      	bne.n	800d544 <__libc_init_array+0x24>
 800d530:	4d0b      	ldr	r5, [pc, #44]	@ (800d560 <__libc_init_array+0x40>)
 800d532:	2600      	movs	r6, #0
 800d534:	4c0b      	ldr	r4, [pc, #44]	@ (800d564 <__libc_init_array+0x44>)
 800d536:	f000 fd35 	bl	800dfa4 <_init>
 800d53a:	1b64      	subs	r4, r4, r5
 800d53c:	10a4      	asrs	r4, r4, #2
 800d53e:	42a6      	cmp	r6, r4
 800d540:	d105      	bne.n	800d54e <__libc_init_array+0x2e>
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	f855 3b04 	ldr.w	r3, [r5], #4
 800d548:	3601      	adds	r6, #1
 800d54a:	4798      	blx	r3
 800d54c:	e7ee      	b.n	800d52c <__libc_init_array+0xc>
 800d54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d552:	3601      	adds	r6, #1
 800d554:	4798      	blx	r3
 800d556:	e7f2      	b.n	800d53e <__libc_init_array+0x1e>
 800d558:	0800e140 	.word	0x0800e140
 800d55c:	0800e140 	.word	0x0800e140
 800d560:	0800e140 	.word	0x0800e140
 800d564:	0800e144 	.word	0x0800e144

0800d568 <__retarget_lock_init_recursive>:
 800d568:	4770      	bx	lr

0800d56a <__retarget_lock_acquire_recursive>:
 800d56a:	4770      	bx	lr

0800d56c <__retarget_lock_release_recursive>:
 800d56c:	4770      	bx	lr
	...

0800d570 <_free_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4605      	mov	r5, r0
 800d574:	2900      	cmp	r1, #0
 800d576:	d041      	beq.n	800d5fc <_free_r+0x8c>
 800d578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d57c:	1f0c      	subs	r4, r1, #4
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bfb8      	it	lt
 800d582:	18e4      	addlt	r4, r4, r3
 800d584:	f000 f8e0 	bl	800d748 <__malloc_lock>
 800d588:	4a1d      	ldr	r2, [pc, #116]	@ (800d600 <_free_r+0x90>)
 800d58a:	6813      	ldr	r3, [r2, #0]
 800d58c:	b933      	cbnz	r3, 800d59c <_free_r+0x2c>
 800d58e:	6063      	str	r3, [r4, #4]
 800d590:	6014      	str	r4, [r2, #0]
 800d592:	4628      	mov	r0, r5
 800d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d598:	f000 b8dc 	b.w	800d754 <__malloc_unlock>
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	d908      	bls.n	800d5b2 <_free_r+0x42>
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	1821      	adds	r1, r4, r0
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf01      	itttt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	1809      	addeq	r1, r1, r0
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	e7ed      	b.n	800d58e <_free_r+0x1e>
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	b10b      	cbz	r3, 800d5bc <_free_r+0x4c>
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	d9fa      	bls.n	800d5b2 <_free_r+0x42>
 800d5bc:	6811      	ldr	r1, [r2, #0]
 800d5be:	1850      	adds	r0, r2, r1
 800d5c0:	42a0      	cmp	r0, r4
 800d5c2:	d10b      	bne.n	800d5dc <_free_r+0x6c>
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	4401      	add	r1, r0
 800d5c8:	1850      	adds	r0, r2, r1
 800d5ca:	6011      	str	r1, [r2, #0]
 800d5cc:	4283      	cmp	r3, r0
 800d5ce:	d1e0      	bne.n	800d592 <_free_r+0x22>
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	4408      	add	r0, r1
 800d5d6:	6053      	str	r3, [r2, #4]
 800d5d8:	6010      	str	r0, [r2, #0]
 800d5da:	e7da      	b.n	800d592 <_free_r+0x22>
 800d5dc:	d902      	bls.n	800d5e4 <_free_r+0x74>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	e7d6      	b.n	800d592 <_free_r+0x22>
 800d5e4:	6820      	ldr	r0, [r4, #0]
 800d5e6:	1821      	adds	r1, r4, r0
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf02      	ittt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	1809      	addeq	r1, r1, r0
 800d5f2:	6063      	str	r3, [r4, #4]
 800d5f4:	bf08      	it	eq
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	6054      	str	r4, [r2, #4]
 800d5fa:	e7ca      	b.n	800d592 <_free_r+0x22>
 800d5fc:	bd38      	pop	{r3, r4, r5, pc}
 800d5fe:	bf00      	nop
 800d600:	200006ec 	.word	0x200006ec

0800d604 <sbrk_aligned>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4e0f      	ldr	r6, [pc, #60]	@ (800d644 <sbrk_aligned+0x40>)
 800d608:	460c      	mov	r4, r1
 800d60a:	4605      	mov	r5, r0
 800d60c:	6831      	ldr	r1, [r6, #0]
 800d60e:	b911      	cbnz	r1, 800d616 <sbrk_aligned+0x12>
 800d610:	f000 fcaa 	bl	800df68 <_sbrk_r>
 800d614:	6030      	str	r0, [r6, #0]
 800d616:	4621      	mov	r1, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	f000 fca5 	bl	800df68 <_sbrk_r>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d103      	bne.n	800d62a <sbrk_aligned+0x26>
 800d622:	f04f 34ff 	mov.w	r4, #4294967295
 800d626:	4620      	mov	r0, r4
 800d628:	bd70      	pop	{r4, r5, r6, pc}
 800d62a:	1cc4      	adds	r4, r0, #3
 800d62c:	f024 0403 	bic.w	r4, r4, #3
 800d630:	42a0      	cmp	r0, r4
 800d632:	d0f8      	beq.n	800d626 <sbrk_aligned+0x22>
 800d634:	1a21      	subs	r1, r4, r0
 800d636:	4628      	mov	r0, r5
 800d638:	f000 fc96 	bl	800df68 <_sbrk_r>
 800d63c:	3001      	adds	r0, #1
 800d63e:	d1f2      	bne.n	800d626 <sbrk_aligned+0x22>
 800d640:	e7ef      	b.n	800d622 <sbrk_aligned+0x1e>
 800d642:	bf00      	nop
 800d644:	200006e8 	.word	0x200006e8

0800d648 <_malloc_r>:
 800d648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d64c:	1ccd      	adds	r5, r1, #3
 800d64e:	4606      	mov	r6, r0
 800d650:	f025 0503 	bic.w	r5, r5, #3
 800d654:	3508      	adds	r5, #8
 800d656:	2d0c      	cmp	r5, #12
 800d658:	bf38      	it	cc
 800d65a:	250c      	movcc	r5, #12
 800d65c:	2d00      	cmp	r5, #0
 800d65e:	db01      	blt.n	800d664 <_malloc_r+0x1c>
 800d660:	42a9      	cmp	r1, r5
 800d662:	d904      	bls.n	800d66e <_malloc_r+0x26>
 800d664:	230c      	movs	r3, #12
 800d666:	6033      	str	r3, [r6, #0]
 800d668:	2000      	movs	r0, #0
 800d66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d744 <_malloc_r+0xfc>
 800d672:	f000 f869 	bl	800d748 <__malloc_lock>
 800d676:	f8d8 3000 	ldr.w	r3, [r8]
 800d67a:	461c      	mov	r4, r3
 800d67c:	bb44      	cbnz	r4, 800d6d0 <_malloc_r+0x88>
 800d67e:	4629      	mov	r1, r5
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff ffbf 	bl	800d604 <sbrk_aligned>
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	4604      	mov	r4, r0
 800d68a:	d158      	bne.n	800d73e <_malloc_r+0xf6>
 800d68c:	f8d8 4000 	ldr.w	r4, [r8]
 800d690:	4627      	mov	r7, r4
 800d692:	2f00      	cmp	r7, #0
 800d694:	d143      	bne.n	800d71e <_malloc_r+0xd6>
 800d696:	2c00      	cmp	r4, #0
 800d698:	d04b      	beq.n	800d732 <_malloc_r+0xea>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	4639      	mov	r1, r7
 800d69e:	4630      	mov	r0, r6
 800d6a0:	eb04 0903 	add.w	r9, r4, r3
 800d6a4:	f000 fc60 	bl	800df68 <_sbrk_r>
 800d6a8:	4581      	cmp	r9, r0
 800d6aa:	d142      	bne.n	800d732 <_malloc_r+0xea>
 800d6ac:	6821      	ldr	r1, [r4, #0]
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	1a6d      	subs	r5, r5, r1
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	f7ff ffa6 	bl	800d604 <sbrk_aligned>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d03a      	beq.n	800d732 <_malloc_r+0xea>
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	442b      	add	r3, r5
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	bb62      	cbnz	r2, 800d724 <_malloc_r+0xdc>
 800d6ca:	f8c8 7000 	str.w	r7, [r8]
 800d6ce:	e00f      	b.n	800d6f0 <_malloc_r+0xa8>
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	1b52      	subs	r2, r2, r5
 800d6d4:	d420      	bmi.n	800d718 <_malloc_r+0xd0>
 800d6d6:	2a0b      	cmp	r2, #11
 800d6d8:	d917      	bls.n	800d70a <_malloc_r+0xc2>
 800d6da:	1961      	adds	r1, r4, r5
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	6025      	str	r5, [r4, #0]
 800d6e0:	bf18      	it	ne
 800d6e2:	6059      	strne	r1, [r3, #4]
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	bf08      	it	eq
 800d6e8:	f8c8 1000 	streq.w	r1, [r8]
 800d6ec:	5162      	str	r2, [r4, r5]
 800d6ee:	604b      	str	r3, [r1, #4]
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f000 f82f 	bl	800d754 <__malloc_unlock>
 800d6f6:	f104 000b 	add.w	r0, r4, #11
 800d6fa:	1d23      	adds	r3, r4, #4
 800d6fc:	f020 0007 	bic.w	r0, r0, #7
 800d700:	1ac2      	subs	r2, r0, r3
 800d702:	bf1c      	itt	ne
 800d704:	1a1b      	subne	r3, r3, r0
 800d706:	50a3      	strne	r3, [r4, r2]
 800d708:	e7af      	b.n	800d66a <_malloc_r+0x22>
 800d70a:	6862      	ldr	r2, [r4, #4]
 800d70c:	42a3      	cmp	r3, r4
 800d70e:	bf0c      	ite	eq
 800d710:	f8c8 2000 	streq.w	r2, [r8]
 800d714:	605a      	strne	r2, [r3, #4]
 800d716:	e7eb      	b.n	800d6f0 <_malloc_r+0xa8>
 800d718:	4623      	mov	r3, r4
 800d71a:	6864      	ldr	r4, [r4, #4]
 800d71c:	e7ae      	b.n	800d67c <_malloc_r+0x34>
 800d71e:	463c      	mov	r4, r7
 800d720:	687f      	ldr	r7, [r7, #4]
 800d722:	e7b6      	b.n	800d692 <_malloc_r+0x4a>
 800d724:	461a      	mov	r2, r3
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	42a3      	cmp	r3, r4
 800d72a:	d1fb      	bne.n	800d724 <_malloc_r+0xdc>
 800d72c:	2300      	movs	r3, #0
 800d72e:	6053      	str	r3, [r2, #4]
 800d730:	e7de      	b.n	800d6f0 <_malloc_r+0xa8>
 800d732:	230c      	movs	r3, #12
 800d734:	4630      	mov	r0, r6
 800d736:	6033      	str	r3, [r6, #0]
 800d738:	f000 f80c 	bl	800d754 <__malloc_unlock>
 800d73c:	e794      	b.n	800d668 <_malloc_r+0x20>
 800d73e:	6005      	str	r5, [r0, #0]
 800d740:	e7d6      	b.n	800d6f0 <_malloc_r+0xa8>
 800d742:	bf00      	nop
 800d744:	200006ec 	.word	0x200006ec

0800d748 <__malloc_lock>:
 800d748:	4801      	ldr	r0, [pc, #4]	@ (800d750 <__malloc_lock+0x8>)
 800d74a:	f7ff bf0e 	b.w	800d56a <__retarget_lock_acquire_recursive>
 800d74e:	bf00      	nop
 800d750:	200006e4 	.word	0x200006e4

0800d754 <__malloc_unlock>:
 800d754:	4801      	ldr	r0, [pc, #4]	@ (800d75c <__malloc_unlock+0x8>)
 800d756:	f7ff bf09 	b.w	800d56c <__retarget_lock_release_recursive>
 800d75a:	bf00      	nop
 800d75c:	200006e4 	.word	0x200006e4

0800d760 <__sfputc_r>:
 800d760:	6893      	ldr	r3, [r2, #8]
 800d762:	3b01      	subs	r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	6093      	str	r3, [r2, #8]
 800d768:	b410      	push	{r4}
 800d76a:	da08      	bge.n	800d77e <__sfputc_r+0x1e>
 800d76c:	6994      	ldr	r4, [r2, #24]
 800d76e:	42a3      	cmp	r3, r4
 800d770:	db01      	blt.n	800d776 <__sfputc_r+0x16>
 800d772:	290a      	cmp	r1, #10
 800d774:	d103      	bne.n	800d77e <__sfputc_r+0x1e>
 800d776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d77a:	f7ff bde8 	b.w	800d34e <__swbuf_r>
 800d77e:	6813      	ldr	r3, [r2, #0]
 800d780:	1c58      	adds	r0, r3, #1
 800d782:	6010      	str	r0, [r2, #0]
 800d784:	4608      	mov	r0, r1
 800d786:	7019      	strb	r1, [r3, #0]
 800d788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <__sfputs_r>:
 800d78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d790:	4606      	mov	r6, r0
 800d792:	460f      	mov	r7, r1
 800d794:	4614      	mov	r4, r2
 800d796:	18d5      	adds	r5, r2, r3
 800d798:	42ac      	cmp	r4, r5
 800d79a:	d101      	bne.n	800d7a0 <__sfputs_r+0x12>
 800d79c:	2000      	movs	r0, #0
 800d79e:	e007      	b.n	800d7b0 <__sfputs_r+0x22>
 800d7a0:	463a      	mov	r2, r7
 800d7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7ff ffda 	bl	800d760 <__sfputc_r>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d1f3      	bne.n	800d798 <__sfputs_r+0xa>
 800d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7b4 <_vfiprintf_r>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	460d      	mov	r5, r1
 800d7ba:	b09d      	sub	sp, #116	@ 0x74
 800d7bc:	4614      	mov	r4, r2
 800d7be:	4698      	mov	r8, r3
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	b118      	cbz	r0, 800d7cc <_vfiprintf_r+0x18>
 800d7c4:	6a03      	ldr	r3, [r0, #32]
 800d7c6:	b90b      	cbnz	r3, 800d7cc <_vfiprintf_r+0x18>
 800d7c8:	f7ff fcd8 	bl	800d17c <__sinit>
 800d7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7ce:	07d9      	lsls	r1, r3, #31
 800d7d0:	d405      	bmi.n	800d7de <_vfiprintf_r+0x2a>
 800d7d2:	89ab      	ldrh	r3, [r5, #12]
 800d7d4:	059a      	lsls	r2, r3, #22
 800d7d6:	d402      	bmi.n	800d7de <_vfiprintf_r+0x2a>
 800d7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7da:	f7ff fec6 	bl	800d56a <__retarget_lock_acquire_recursive>
 800d7de:	89ab      	ldrh	r3, [r5, #12]
 800d7e0:	071b      	lsls	r3, r3, #28
 800d7e2:	d501      	bpl.n	800d7e8 <_vfiprintf_r+0x34>
 800d7e4:	692b      	ldr	r3, [r5, #16]
 800d7e6:	b99b      	cbnz	r3, 800d810 <_vfiprintf_r+0x5c>
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f7ff fdee 	bl	800d3cc <__swsetup_r>
 800d7f0:	b170      	cbz	r0, 800d810 <_vfiprintf_r+0x5c>
 800d7f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7f4:	07dc      	lsls	r4, r3, #31
 800d7f6:	d504      	bpl.n	800d802 <_vfiprintf_r+0x4e>
 800d7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fc:	b01d      	add	sp, #116	@ 0x74
 800d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d802:	89ab      	ldrh	r3, [r5, #12]
 800d804:	0598      	lsls	r0, r3, #22
 800d806:	d4f7      	bmi.n	800d7f8 <_vfiprintf_r+0x44>
 800d808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d80a:	f7ff feaf 	bl	800d56c <__retarget_lock_release_recursive>
 800d80e:	e7f3      	b.n	800d7f8 <_vfiprintf_r+0x44>
 800d810:	2300      	movs	r3, #0
 800d812:	f8cd 800c 	str.w	r8, [sp, #12]
 800d816:	f04f 0901 	mov.w	r9, #1
 800d81a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d9d0 <_vfiprintf_r+0x21c>
 800d81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d820:	2320      	movs	r3, #32
 800d822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d826:	2330      	movs	r3, #48	@ 0x30
 800d828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d82c:	4623      	mov	r3, r4
 800d82e:	469a      	mov	sl, r3
 800d830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d834:	b10a      	cbz	r2, 800d83a <_vfiprintf_r+0x86>
 800d836:	2a25      	cmp	r2, #37	@ 0x25
 800d838:	d1f9      	bne.n	800d82e <_vfiprintf_r+0x7a>
 800d83a:	ebba 0b04 	subs.w	fp, sl, r4
 800d83e:	d00b      	beq.n	800d858 <_vfiprintf_r+0xa4>
 800d840:	465b      	mov	r3, fp
 800d842:	4622      	mov	r2, r4
 800d844:	4629      	mov	r1, r5
 800d846:	4630      	mov	r0, r6
 800d848:	f7ff ffa1 	bl	800d78e <__sfputs_r>
 800d84c:	3001      	adds	r0, #1
 800d84e:	f000 80a7 	beq.w	800d9a0 <_vfiprintf_r+0x1ec>
 800d852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d854:	445a      	add	r2, fp
 800d856:	9209      	str	r2, [sp, #36]	@ 0x24
 800d858:	f89a 3000 	ldrb.w	r3, [sl]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 809f 	beq.w	800d9a0 <_vfiprintf_r+0x1ec>
 800d862:	2300      	movs	r3, #0
 800d864:	f04f 32ff 	mov.w	r2, #4294967295
 800d868:	f10a 0a01 	add.w	sl, sl, #1
 800d86c:	9304      	str	r3, [sp, #16]
 800d86e:	9307      	str	r3, [sp, #28]
 800d870:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d874:	931a      	str	r3, [sp, #104]	@ 0x68
 800d876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d87a:	4654      	mov	r4, sl
 800d87c:	2205      	movs	r2, #5
 800d87e:	4854      	ldr	r0, [pc, #336]	@ (800d9d0 <_vfiprintf_r+0x21c>)
 800d880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d884:	f000 fb80 	bl	800df88 <memchr>
 800d888:	9a04      	ldr	r2, [sp, #16]
 800d88a:	b9d8      	cbnz	r0, 800d8c4 <_vfiprintf_r+0x110>
 800d88c:	06d1      	lsls	r1, r2, #27
 800d88e:	bf44      	itt	mi
 800d890:	2320      	movmi	r3, #32
 800d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d896:	0713      	lsls	r3, r2, #28
 800d898:	bf44      	itt	mi
 800d89a:	232b      	movmi	r3, #43	@ 0x2b
 800d89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8a6:	d015      	beq.n	800d8d4 <_vfiprintf_r+0x120>
 800d8a8:	9a07      	ldr	r2, [sp, #28]
 800d8aa:	4654      	mov	r4, sl
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	f04f 0c0a 	mov.w	ip, #10
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b8:	3b30      	subs	r3, #48	@ 0x30
 800d8ba:	2b09      	cmp	r3, #9
 800d8bc:	d94b      	bls.n	800d956 <_vfiprintf_r+0x1a2>
 800d8be:	b1b0      	cbz	r0, 800d8ee <_vfiprintf_r+0x13a>
 800d8c0:	9207      	str	r2, [sp, #28]
 800d8c2:	e014      	b.n	800d8ee <_vfiprintf_r+0x13a>
 800d8c4:	eba0 0308 	sub.w	r3, r0, r8
 800d8c8:	46a2      	mov	sl, r4
 800d8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	e7d2      	b.n	800d87a <_vfiprintf_r+0xc6>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	1d19      	adds	r1, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	9103      	str	r1, [sp, #12]
 800d8de:	bfbb      	ittet	lt
 800d8e0:	425b      	neglt	r3, r3
 800d8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d8e6:	9307      	strge	r3, [sp, #28]
 800d8e8:	9307      	strlt	r3, [sp, #28]
 800d8ea:	bfb8      	it	lt
 800d8ec:	9204      	strlt	r2, [sp, #16]
 800d8ee:	7823      	ldrb	r3, [r4, #0]
 800d8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8f2:	d10a      	bne.n	800d90a <_vfiprintf_r+0x156>
 800d8f4:	7863      	ldrb	r3, [r4, #1]
 800d8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f8:	d132      	bne.n	800d960 <_vfiprintf_r+0x1ac>
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	3402      	adds	r4, #2
 800d8fe:	1d1a      	adds	r2, r3, #4
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d906:	9203      	str	r2, [sp, #12]
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d9e0 <_vfiprintf_r+0x22c>
 800d90e:	2203      	movs	r2, #3
 800d910:	7821      	ldrb	r1, [r4, #0]
 800d912:	4650      	mov	r0, sl
 800d914:	f000 fb38 	bl	800df88 <memchr>
 800d918:	b138      	cbz	r0, 800d92a <_vfiprintf_r+0x176>
 800d91a:	eba0 000a 	sub.w	r0, r0, sl
 800d91e:	2240      	movs	r2, #64	@ 0x40
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	3401      	adds	r4, #1
 800d924:	4082      	lsls	r2, r0
 800d926:	4313      	orrs	r3, r2
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92e:	2206      	movs	r2, #6
 800d930:	4828      	ldr	r0, [pc, #160]	@ (800d9d4 <_vfiprintf_r+0x220>)
 800d932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d936:	f000 fb27 	bl	800df88 <memchr>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d03f      	beq.n	800d9be <_vfiprintf_r+0x20a>
 800d93e:	4b26      	ldr	r3, [pc, #152]	@ (800d9d8 <_vfiprintf_r+0x224>)
 800d940:	bb1b      	cbnz	r3, 800d98a <_vfiprintf_r+0x1d6>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	3307      	adds	r3, #7
 800d946:	f023 0307 	bic.w	r3, r3, #7
 800d94a:	3308      	adds	r3, #8
 800d94c:	9303      	str	r3, [sp, #12]
 800d94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d950:	443b      	add	r3, r7
 800d952:	9309      	str	r3, [sp, #36]	@ 0x24
 800d954:	e76a      	b.n	800d82c <_vfiprintf_r+0x78>
 800d956:	fb0c 3202 	mla	r2, ip, r2, r3
 800d95a:	460c      	mov	r4, r1
 800d95c:	2001      	movs	r0, #1
 800d95e:	e7a8      	b.n	800d8b2 <_vfiprintf_r+0xfe>
 800d960:	2300      	movs	r3, #0
 800d962:	3401      	adds	r4, #1
 800d964:	f04f 0c0a 	mov.w	ip, #10
 800d968:	4619      	mov	r1, r3
 800d96a:	9305      	str	r3, [sp, #20]
 800d96c:	4620      	mov	r0, r4
 800d96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d972:	3a30      	subs	r2, #48	@ 0x30
 800d974:	2a09      	cmp	r2, #9
 800d976:	d903      	bls.n	800d980 <_vfiprintf_r+0x1cc>
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0c6      	beq.n	800d90a <_vfiprintf_r+0x156>
 800d97c:	9105      	str	r1, [sp, #20]
 800d97e:	e7c4      	b.n	800d90a <_vfiprintf_r+0x156>
 800d980:	fb0c 2101 	mla	r1, ip, r1, r2
 800d984:	4604      	mov	r4, r0
 800d986:	2301      	movs	r3, #1
 800d988:	e7f0      	b.n	800d96c <_vfiprintf_r+0x1b8>
 800d98a:	ab03      	add	r3, sp, #12
 800d98c:	462a      	mov	r2, r5
 800d98e:	a904      	add	r1, sp, #16
 800d990:	4630      	mov	r0, r6
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	4b11      	ldr	r3, [pc, #68]	@ (800d9dc <_vfiprintf_r+0x228>)
 800d996:	f3af 8000 	nop.w
 800d99a:	4607      	mov	r7, r0
 800d99c:	1c78      	adds	r0, r7, #1
 800d99e:	d1d6      	bne.n	800d94e <_vfiprintf_r+0x19a>
 800d9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9a2:	07d9      	lsls	r1, r3, #31
 800d9a4:	d405      	bmi.n	800d9b2 <_vfiprintf_r+0x1fe>
 800d9a6:	89ab      	ldrh	r3, [r5, #12]
 800d9a8:	059a      	lsls	r2, r3, #22
 800d9aa:	d402      	bmi.n	800d9b2 <_vfiprintf_r+0x1fe>
 800d9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9ae:	f7ff fddd 	bl	800d56c <__retarget_lock_release_recursive>
 800d9b2:	89ab      	ldrh	r3, [r5, #12]
 800d9b4:	065b      	lsls	r3, r3, #25
 800d9b6:	f53f af1f 	bmi.w	800d7f8 <_vfiprintf_r+0x44>
 800d9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9bc:	e71e      	b.n	800d7fc <_vfiprintf_r+0x48>
 800d9be:	ab03      	add	r3, sp, #12
 800d9c0:	462a      	mov	r2, r5
 800d9c2:	a904      	add	r1, sp, #16
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	4b04      	ldr	r3, [pc, #16]	@ (800d9dc <_vfiprintf_r+0x228>)
 800d9ca:	f000 f87d 	bl	800dac8 <_printf_i>
 800d9ce:	e7e4      	b.n	800d99a <_vfiprintf_r+0x1e6>
 800d9d0:	0800e104 	.word	0x0800e104
 800d9d4:	0800e10e 	.word	0x0800e10e
 800d9d8:	00000000 	.word	0x00000000
 800d9dc:	0800d78f 	.word	0x0800d78f
 800d9e0:	0800e10a 	.word	0x0800e10a

0800d9e4 <_printf_common>:
 800d9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e8:	4616      	mov	r6, r2
 800d9ea:	4698      	mov	r8, r3
 800d9ec:	688a      	ldr	r2, [r1, #8]
 800d9ee:	4607      	mov	r7, r0
 800d9f0:	690b      	ldr	r3, [r1, #16]
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	bfb8      	it	lt
 800d9fc:	4613      	movlt	r3, r2
 800d9fe:	6033      	str	r3, [r6, #0]
 800da00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da04:	b10a      	cbz	r2, 800da0a <_printf_common+0x26>
 800da06:	3301      	adds	r3, #1
 800da08:	6033      	str	r3, [r6, #0]
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	0699      	lsls	r1, r3, #26
 800da0e:	bf42      	ittt	mi
 800da10:	6833      	ldrmi	r3, [r6, #0]
 800da12:	3302      	addmi	r3, #2
 800da14:	6033      	strmi	r3, [r6, #0]
 800da16:	6825      	ldr	r5, [r4, #0]
 800da18:	f015 0506 	ands.w	r5, r5, #6
 800da1c:	d106      	bne.n	800da2c <_printf_common+0x48>
 800da1e:	f104 0a19 	add.w	sl, r4, #25
 800da22:	68e3      	ldr	r3, [r4, #12]
 800da24:	6832      	ldr	r2, [r6, #0]
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	42ab      	cmp	r3, r5
 800da2a:	dc2b      	bgt.n	800da84 <_printf_common+0xa0>
 800da2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da30:	6822      	ldr	r2, [r4, #0]
 800da32:	3b00      	subs	r3, #0
 800da34:	bf18      	it	ne
 800da36:	2301      	movne	r3, #1
 800da38:	0692      	lsls	r2, r2, #26
 800da3a:	d430      	bmi.n	800da9e <_printf_common+0xba>
 800da3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da40:	4641      	mov	r1, r8
 800da42:	4638      	mov	r0, r7
 800da44:	47c8      	blx	r9
 800da46:	3001      	adds	r0, #1
 800da48:	d023      	beq.n	800da92 <_printf_common+0xae>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	341a      	adds	r4, #26
 800da4e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800da52:	f003 0306 	and.w	r3, r3, #6
 800da56:	2b04      	cmp	r3, #4
 800da58:	bf0a      	itet	eq
 800da5a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800da5e:	2500      	movne	r5, #0
 800da60:	6833      	ldreq	r3, [r6, #0]
 800da62:	f04f 0600 	mov.w	r6, #0
 800da66:	bf08      	it	eq
 800da68:	1aed      	subeq	r5, r5, r3
 800da6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800da6e:	bf08      	it	eq
 800da70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da74:	4293      	cmp	r3, r2
 800da76:	bfc4      	itt	gt
 800da78:	1a9b      	subgt	r3, r3, r2
 800da7a:	18ed      	addgt	r5, r5, r3
 800da7c:	42b5      	cmp	r5, r6
 800da7e:	d11a      	bne.n	800dab6 <_printf_common+0xd2>
 800da80:	2000      	movs	r0, #0
 800da82:	e008      	b.n	800da96 <_printf_common+0xb2>
 800da84:	2301      	movs	r3, #1
 800da86:	4652      	mov	r2, sl
 800da88:	4641      	mov	r1, r8
 800da8a:	4638      	mov	r0, r7
 800da8c:	47c8      	blx	r9
 800da8e:	3001      	adds	r0, #1
 800da90:	d103      	bne.n	800da9a <_printf_common+0xb6>
 800da92:	f04f 30ff 	mov.w	r0, #4294967295
 800da96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9a:	3501      	adds	r5, #1
 800da9c:	e7c1      	b.n	800da22 <_printf_common+0x3e>
 800da9e:	18e1      	adds	r1, r4, r3
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	2030      	movs	r0, #48	@ 0x30
 800daa4:	3302      	adds	r3, #2
 800daa6:	4422      	add	r2, r4
 800daa8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800daac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dab4:	e7c2      	b.n	800da3c <_printf_common+0x58>
 800dab6:	2301      	movs	r3, #1
 800dab8:	4622      	mov	r2, r4
 800daba:	4641      	mov	r1, r8
 800dabc:	4638      	mov	r0, r7
 800dabe:	47c8      	blx	r9
 800dac0:	3001      	adds	r0, #1
 800dac2:	d0e6      	beq.n	800da92 <_printf_common+0xae>
 800dac4:	3601      	adds	r6, #1
 800dac6:	e7d9      	b.n	800da7c <_printf_common+0x98>

0800dac8 <_printf_i>:
 800dac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dacc:	7e0f      	ldrb	r7, [r1, #24]
 800dace:	4691      	mov	r9, r2
 800dad0:	4680      	mov	r8, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	2f78      	cmp	r7, #120	@ 0x78
 800dad6:	469a      	mov	sl, r3
 800dad8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dade:	d807      	bhi.n	800daf0 <_printf_i+0x28>
 800dae0:	2f62      	cmp	r7, #98	@ 0x62
 800dae2:	d80a      	bhi.n	800dafa <_printf_i+0x32>
 800dae4:	2f00      	cmp	r7, #0
 800dae6:	f000 80d2 	beq.w	800dc8e <_printf_i+0x1c6>
 800daea:	2f58      	cmp	r7, #88	@ 0x58
 800daec:	f000 80b9 	beq.w	800dc62 <_printf_i+0x19a>
 800daf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daf8:	e03a      	b.n	800db70 <_printf_i+0xa8>
 800dafa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dafe:	2b15      	cmp	r3, #21
 800db00:	d8f6      	bhi.n	800daf0 <_printf_i+0x28>
 800db02:	a101      	add	r1, pc, #4	@ (adr r1, 800db08 <_printf_i+0x40>)
 800db04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db08:	0800db61 	.word	0x0800db61
 800db0c:	0800db75 	.word	0x0800db75
 800db10:	0800daf1 	.word	0x0800daf1
 800db14:	0800daf1 	.word	0x0800daf1
 800db18:	0800daf1 	.word	0x0800daf1
 800db1c:	0800daf1 	.word	0x0800daf1
 800db20:	0800db75 	.word	0x0800db75
 800db24:	0800daf1 	.word	0x0800daf1
 800db28:	0800daf1 	.word	0x0800daf1
 800db2c:	0800daf1 	.word	0x0800daf1
 800db30:	0800daf1 	.word	0x0800daf1
 800db34:	0800dc75 	.word	0x0800dc75
 800db38:	0800db9f 	.word	0x0800db9f
 800db3c:	0800dc2f 	.word	0x0800dc2f
 800db40:	0800daf1 	.word	0x0800daf1
 800db44:	0800daf1 	.word	0x0800daf1
 800db48:	0800dc97 	.word	0x0800dc97
 800db4c:	0800daf1 	.word	0x0800daf1
 800db50:	0800db9f 	.word	0x0800db9f
 800db54:	0800daf1 	.word	0x0800daf1
 800db58:	0800daf1 	.word	0x0800daf1
 800db5c:	0800dc37 	.word	0x0800dc37
 800db60:	6833      	ldr	r3, [r6, #0]
 800db62:	1d1a      	adds	r2, r3, #4
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6032      	str	r2, [r6, #0]
 800db68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db70:	2301      	movs	r3, #1
 800db72:	e09d      	b.n	800dcb0 <_printf_i+0x1e8>
 800db74:	6833      	ldr	r3, [r6, #0]
 800db76:	6820      	ldr	r0, [r4, #0]
 800db78:	1d19      	adds	r1, r3, #4
 800db7a:	6031      	str	r1, [r6, #0]
 800db7c:	0606      	lsls	r6, r0, #24
 800db7e:	d501      	bpl.n	800db84 <_printf_i+0xbc>
 800db80:	681d      	ldr	r5, [r3, #0]
 800db82:	e003      	b.n	800db8c <_printf_i+0xc4>
 800db84:	0645      	lsls	r5, r0, #25
 800db86:	d5fb      	bpl.n	800db80 <_printf_i+0xb8>
 800db88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db8c:	2d00      	cmp	r5, #0
 800db8e:	da03      	bge.n	800db98 <_printf_i+0xd0>
 800db90:	232d      	movs	r3, #45	@ 0x2d
 800db92:	426d      	negs	r5, r5
 800db94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db98:	4859      	ldr	r0, [pc, #356]	@ (800dd00 <_printf_i+0x238>)
 800db9a:	230a      	movs	r3, #10
 800db9c:	e011      	b.n	800dbc2 <_printf_i+0xfa>
 800db9e:	6821      	ldr	r1, [r4, #0]
 800dba0:	6833      	ldr	r3, [r6, #0]
 800dba2:	0608      	lsls	r0, r1, #24
 800dba4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dba8:	d402      	bmi.n	800dbb0 <_printf_i+0xe8>
 800dbaa:	0649      	lsls	r1, r1, #25
 800dbac:	bf48      	it	mi
 800dbae:	b2ad      	uxthmi	r5, r5
 800dbb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbb2:	6033      	str	r3, [r6, #0]
 800dbb4:	4852      	ldr	r0, [pc, #328]	@ (800dd00 <_printf_i+0x238>)
 800dbb6:	bf14      	ite	ne
 800dbb8:	230a      	movne	r3, #10
 800dbba:	2308      	moveq	r3, #8
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbc2:	6866      	ldr	r6, [r4, #4]
 800dbc4:	2e00      	cmp	r6, #0
 800dbc6:	60a6      	str	r6, [r4, #8]
 800dbc8:	bfa2      	ittt	ge
 800dbca:	6821      	ldrge	r1, [r4, #0]
 800dbcc:	f021 0104 	bicge.w	r1, r1, #4
 800dbd0:	6021      	strge	r1, [r4, #0]
 800dbd2:	b90d      	cbnz	r5, 800dbd8 <_printf_i+0x110>
 800dbd4:	2e00      	cmp	r6, #0
 800dbd6:	d04b      	beq.n	800dc70 <_printf_i+0x1a8>
 800dbd8:	4616      	mov	r6, r2
 800dbda:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbde:	fb03 5711 	mls	r7, r3, r1, r5
 800dbe2:	5dc7      	ldrb	r7, [r0, r7]
 800dbe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbe8:	462f      	mov	r7, r5
 800dbea:	460d      	mov	r5, r1
 800dbec:	42bb      	cmp	r3, r7
 800dbee:	d9f4      	bls.n	800dbda <_printf_i+0x112>
 800dbf0:	2b08      	cmp	r3, #8
 800dbf2:	d10b      	bne.n	800dc0c <_printf_i+0x144>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	07df      	lsls	r7, r3, #31
 800dbf8:	d508      	bpl.n	800dc0c <_printf_i+0x144>
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	6861      	ldr	r1, [r4, #4]
 800dbfe:	4299      	cmp	r1, r3
 800dc00:	bfde      	ittt	le
 800dc02:	2330      	movle	r3, #48	@ 0x30
 800dc04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc0c:	1b92      	subs	r2, r2, r6
 800dc0e:	6122      	str	r2, [r4, #16]
 800dc10:	464b      	mov	r3, r9
 800dc12:	aa03      	add	r2, sp, #12
 800dc14:	4621      	mov	r1, r4
 800dc16:	4640      	mov	r0, r8
 800dc18:	f8cd a000 	str.w	sl, [sp]
 800dc1c:	f7ff fee2 	bl	800d9e4 <_printf_common>
 800dc20:	3001      	adds	r0, #1
 800dc22:	d14a      	bne.n	800dcba <_printf_i+0x1f2>
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	b004      	add	sp, #16
 800dc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	f043 0320 	orr.w	r3, r3, #32
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	2778      	movs	r7, #120	@ 0x78
 800dc38:	4832      	ldr	r0, [pc, #200]	@ (800dd04 <_printf_i+0x23c>)
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc40:	061f      	lsls	r7, r3, #24
 800dc42:	6831      	ldr	r1, [r6, #0]
 800dc44:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc48:	d402      	bmi.n	800dc50 <_printf_i+0x188>
 800dc4a:	065f      	lsls	r7, r3, #25
 800dc4c:	bf48      	it	mi
 800dc4e:	b2ad      	uxthmi	r5, r5
 800dc50:	6031      	str	r1, [r6, #0]
 800dc52:	07d9      	lsls	r1, r3, #31
 800dc54:	bf44      	itt	mi
 800dc56:	f043 0320 	orrmi.w	r3, r3, #32
 800dc5a:	6023      	strmi	r3, [r4, #0]
 800dc5c:	b11d      	cbz	r5, 800dc66 <_printf_i+0x19e>
 800dc5e:	2310      	movs	r3, #16
 800dc60:	e7ac      	b.n	800dbbc <_printf_i+0xf4>
 800dc62:	4827      	ldr	r0, [pc, #156]	@ (800dd00 <_printf_i+0x238>)
 800dc64:	e7e9      	b.n	800dc3a <_printf_i+0x172>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	f023 0320 	bic.w	r3, r3, #32
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	e7f6      	b.n	800dc5e <_printf_i+0x196>
 800dc70:	4616      	mov	r6, r2
 800dc72:	e7bd      	b.n	800dbf0 <_printf_i+0x128>
 800dc74:	6833      	ldr	r3, [r6, #0]
 800dc76:	6825      	ldr	r5, [r4, #0]
 800dc78:	1d18      	adds	r0, r3, #4
 800dc7a:	6961      	ldr	r1, [r4, #20]
 800dc7c:	6030      	str	r0, [r6, #0]
 800dc7e:	062e      	lsls	r6, r5, #24
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	d501      	bpl.n	800dc88 <_printf_i+0x1c0>
 800dc84:	6019      	str	r1, [r3, #0]
 800dc86:	e002      	b.n	800dc8e <_printf_i+0x1c6>
 800dc88:	0668      	lsls	r0, r5, #25
 800dc8a:	d5fb      	bpl.n	800dc84 <_printf_i+0x1bc>
 800dc8c:	8019      	strh	r1, [r3, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	4616      	mov	r6, r2
 800dc92:	6123      	str	r3, [r4, #16]
 800dc94:	e7bc      	b.n	800dc10 <_printf_i+0x148>
 800dc96:	6833      	ldr	r3, [r6, #0]
 800dc98:	2100      	movs	r1, #0
 800dc9a:	1d1a      	adds	r2, r3, #4
 800dc9c:	6032      	str	r2, [r6, #0]
 800dc9e:	681e      	ldr	r6, [r3, #0]
 800dca0:	6862      	ldr	r2, [r4, #4]
 800dca2:	4630      	mov	r0, r6
 800dca4:	f000 f970 	bl	800df88 <memchr>
 800dca8:	b108      	cbz	r0, 800dcae <_printf_i+0x1e6>
 800dcaa:	1b80      	subs	r0, r0, r6
 800dcac:	6060      	str	r0, [r4, #4]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	6123      	str	r3, [r4, #16]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcb8:	e7aa      	b.n	800dc10 <_printf_i+0x148>
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	47d0      	blx	sl
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d0ad      	beq.n	800dc24 <_printf_i+0x15c>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	079b      	lsls	r3, r3, #30
 800dccc:	d413      	bmi.n	800dcf6 <_printf_i+0x22e>
 800dcce:	68e0      	ldr	r0, [r4, #12]
 800dcd0:	9b03      	ldr	r3, [sp, #12]
 800dcd2:	4298      	cmp	r0, r3
 800dcd4:	bfb8      	it	lt
 800dcd6:	4618      	movlt	r0, r3
 800dcd8:	e7a6      	b.n	800dc28 <_printf_i+0x160>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4632      	mov	r2, r6
 800dcde:	4649      	mov	r1, r9
 800dce0:	4640      	mov	r0, r8
 800dce2:	47d0      	blx	sl
 800dce4:	3001      	adds	r0, #1
 800dce6:	d09d      	beq.n	800dc24 <_printf_i+0x15c>
 800dce8:	3501      	adds	r5, #1
 800dcea:	68e3      	ldr	r3, [r4, #12]
 800dcec:	9903      	ldr	r1, [sp, #12]
 800dcee:	1a5b      	subs	r3, r3, r1
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	dcf2      	bgt.n	800dcda <_printf_i+0x212>
 800dcf4:	e7eb      	b.n	800dcce <_printf_i+0x206>
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	f104 0619 	add.w	r6, r4, #25
 800dcfc:	e7f5      	b.n	800dcea <_printf_i+0x222>
 800dcfe:	bf00      	nop
 800dd00:	0800e115 	.word	0x0800e115
 800dd04:	0800e126 	.word	0x0800e126

0800dd08 <__sflush_r>:
 800dd08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	0716      	lsls	r6, r2, #28
 800dd12:	4605      	mov	r5, r0
 800dd14:	460c      	mov	r4, r1
 800dd16:	d454      	bmi.n	800ddc2 <__sflush_r+0xba>
 800dd18:	684b      	ldr	r3, [r1, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dc02      	bgt.n	800dd24 <__sflush_r+0x1c>
 800dd1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dd48      	ble.n	800ddb6 <__sflush_r+0xae>
 800dd24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd26:	2e00      	cmp	r6, #0
 800dd28:	d045      	beq.n	800ddb6 <__sflush_r+0xae>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd30:	682f      	ldr	r7, [r5, #0]
 800dd32:	6a21      	ldr	r1, [r4, #32]
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	d030      	beq.n	800dd9a <__sflush_r+0x92>
 800dd38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	0759      	lsls	r1, r3, #29
 800dd3e:	d505      	bpl.n	800dd4c <__sflush_r+0x44>
 800dd40:	6863      	ldr	r3, [r4, #4]
 800dd42:	1ad2      	subs	r2, r2, r3
 800dd44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd46:	b10b      	cbz	r3, 800dd4c <__sflush_r+0x44>
 800dd48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd50:	6a21      	ldr	r1, [r4, #32]
 800dd52:	4628      	mov	r0, r5
 800dd54:	47b0      	blx	r6
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	d106      	bne.n	800dd6a <__sflush_r+0x62>
 800dd5c:	6829      	ldr	r1, [r5, #0]
 800dd5e:	291d      	cmp	r1, #29
 800dd60:	d82b      	bhi.n	800ddba <__sflush_r+0xb2>
 800dd62:	4a2a      	ldr	r2, [pc, #168]	@ (800de0c <__sflush_r+0x104>)
 800dd64:	410a      	asrs	r2, r1
 800dd66:	07d6      	lsls	r6, r2, #31
 800dd68:	d427      	bmi.n	800ddba <__sflush_r+0xb2>
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	04d9      	lsls	r1, r3, #19
 800dd6e:	6062      	str	r2, [r4, #4]
 800dd70:	6922      	ldr	r2, [r4, #16]
 800dd72:	6022      	str	r2, [r4, #0]
 800dd74:	d504      	bpl.n	800dd80 <__sflush_r+0x78>
 800dd76:	1c42      	adds	r2, r0, #1
 800dd78:	d101      	bne.n	800dd7e <__sflush_r+0x76>
 800dd7a:	682b      	ldr	r3, [r5, #0]
 800dd7c:	b903      	cbnz	r3, 800dd80 <__sflush_r+0x78>
 800dd7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd82:	602f      	str	r7, [r5, #0]
 800dd84:	b1b9      	cbz	r1, 800ddb6 <__sflush_r+0xae>
 800dd86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd8a:	4299      	cmp	r1, r3
 800dd8c:	d002      	beq.n	800dd94 <__sflush_r+0x8c>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7ff fbee 	bl	800d570 <_free_r>
 800dd94:	2300      	movs	r3, #0
 800dd96:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd98:	e00d      	b.n	800ddb6 <__sflush_r+0xae>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	47b0      	blx	r6
 800dda0:	4602      	mov	r2, r0
 800dda2:	1c50      	adds	r0, r2, #1
 800dda4:	d1c9      	bne.n	800dd3a <__sflush_r+0x32>
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d0c6      	beq.n	800dd3a <__sflush_r+0x32>
 800ddac:	2b1d      	cmp	r3, #29
 800ddae:	d001      	beq.n	800ddb4 <__sflush_r+0xac>
 800ddb0:	2b16      	cmp	r3, #22
 800ddb2:	d11d      	bne.n	800ddf0 <__sflush_r+0xe8>
 800ddb4:	602f      	str	r7, [r5, #0]
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	e021      	b.n	800ddfe <__sflush_r+0xf6>
 800ddba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddbe:	b21b      	sxth	r3, r3
 800ddc0:	e01a      	b.n	800ddf8 <__sflush_r+0xf0>
 800ddc2:	690f      	ldr	r7, [r1, #16]
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	d0f6      	beq.n	800ddb6 <__sflush_r+0xae>
 800ddc8:	0793      	lsls	r3, r2, #30
 800ddca:	680e      	ldr	r6, [r1, #0]
 800ddcc:	600f      	str	r7, [r1, #0]
 800ddce:	bf0c      	ite	eq
 800ddd0:	694b      	ldreq	r3, [r1, #20]
 800ddd2:	2300      	movne	r3, #0
 800ddd4:	eba6 0807 	sub.w	r8, r6, r7
 800ddd8:	608b      	str	r3, [r1, #8]
 800ddda:	f1b8 0f00 	cmp.w	r8, #0
 800ddde:	ddea      	ble.n	800ddb6 <__sflush_r+0xae>
 800dde0:	4643      	mov	r3, r8
 800dde2:	463a      	mov	r2, r7
 800dde4:	6a21      	ldr	r1, [r4, #32]
 800dde6:	4628      	mov	r0, r5
 800dde8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ddea:	47b0      	blx	r6
 800ddec:	2800      	cmp	r0, #0
 800ddee:	dc08      	bgt.n	800de02 <__sflush_r+0xfa>
 800ddf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de02:	4407      	add	r7, r0
 800de04:	eba8 0800 	sub.w	r8, r8, r0
 800de08:	e7e7      	b.n	800ddda <__sflush_r+0xd2>
 800de0a:	bf00      	nop
 800de0c:	dfbffffe 	.word	0xdfbffffe

0800de10 <_fflush_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	690b      	ldr	r3, [r1, #16]
 800de14:	4605      	mov	r5, r0
 800de16:	460c      	mov	r4, r1
 800de18:	b913      	cbnz	r3, 800de20 <_fflush_r+0x10>
 800de1a:	2500      	movs	r5, #0
 800de1c:	4628      	mov	r0, r5
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	b118      	cbz	r0, 800de2a <_fflush_r+0x1a>
 800de22:	6a03      	ldr	r3, [r0, #32]
 800de24:	b90b      	cbnz	r3, 800de2a <_fflush_r+0x1a>
 800de26:	f7ff f9a9 	bl	800d17c <__sinit>
 800de2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d0f3      	beq.n	800de1a <_fflush_r+0xa>
 800de32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de34:	07d0      	lsls	r0, r2, #31
 800de36:	d404      	bmi.n	800de42 <_fflush_r+0x32>
 800de38:	0599      	lsls	r1, r3, #22
 800de3a:	d402      	bmi.n	800de42 <_fflush_r+0x32>
 800de3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de3e:	f7ff fb94 	bl	800d56a <__retarget_lock_acquire_recursive>
 800de42:	4628      	mov	r0, r5
 800de44:	4621      	mov	r1, r4
 800de46:	f7ff ff5f 	bl	800dd08 <__sflush_r>
 800de4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de4c:	4605      	mov	r5, r0
 800de4e:	07da      	lsls	r2, r3, #31
 800de50:	d4e4      	bmi.n	800de1c <_fflush_r+0xc>
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	059b      	lsls	r3, r3, #22
 800de56:	d4e1      	bmi.n	800de1c <_fflush_r+0xc>
 800de58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de5a:	f7ff fb87 	bl	800d56c <__retarget_lock_release_recursive>
 800de5e:	e7dd      	b.n	800de1c <_fflush_r+0xc>

0800de60 <__swhatbuf_r>:
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	460c      	mov	r4, r1
 800de64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de68:	b096      	sub	sp, #88	@ 0x58
 800de6a:	4615      	mov	r5, r2
 800de6c:	2900      	cmp	r1, #0
 800de6e:	461e      	mov	r6, r3
 800de70:	da0c      	bge.n	800de8c <__swhatbuf_r+0x2c>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	2100      	movs	r1, #0
 800de76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de7a:	bf14      	ite	ne
 800de7c:	2340      	movne	r3, #64	@ 0x40
 800de7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de82:	2000      	movs	r0, #0
 800de84:	6031      	str	r1, [r6, #0]
 800de86:	602b      	str	r3, [r5, #0]
 800de88:	b016      	add	sp, #88	@ 0x58
 800de8a:	bd70      	pop	{r4, r5, r6, pc}
 800de8c:	466a      	mov	r2, sp
 800de8e:	f000 f849 	bl	800df24 <_fstat_r>
 800de92:	2800      	cmp	r0, #0
 800de94:	dbed      	blt.n	800de72 <__swhatbuf_r+0x12>
 800de96:	9901      	ldr	r1, [sp, #4]
 800de98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dea0:	4259      	negs	r1, r3
 800dea2:	4159      	adcs	r1, r3
 800dea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dea8:	e7eb      	b.n	800de82 <__swhatbuf_r+0x22>

0800deaa <__smakebuf_r>:
 800deaa:	898b      	ldrh	r3, [r1, #12]
 800deac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deae:	079d      	lsls	r5, r3, #30
 800deb0:	4606      	mov	r6, r0
 800deb2:	460c      	mov	r4, r1
 800deb4:	d507      	bpl.n	800dec6 <__smakebuf_r+0x1c>
 800deb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	6123      	str	r3, [r4, #16]
 800debe:	2301      	movs	r3, #1
 800dec0:	6163      	str	r3, [r4, #20]
 800dec2:	b003      	add	sp, #12
 800dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dec6:	ab01      	add	r3, sp, #4
 800dec8:	466a      	mov	r2, sp
 800deca:	f7ff ffc9 	bl	800de60 <__swhatbuf_r>
 800dece:	9f00      	ldr	r7, [sp, #0]
 800ded0:	4605      	mov	r5, r0
 800ded2:	4630      	mov	r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f7ff fbb7 	bl	800d648 <_malloc_r>
 800deda:	b948      	cbnz	r0, 800def0 <__smakebuf_r+0x46>
 800dedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee0:	059a      	lsls	r2, r3, #22
 800dee2:	d4ee      	bmi.n	800dec2 <__smakebuf_r+0x18>
 800dee4:	f023 0303 	bic.w	r3, r3, #3
 800dee8:	f043 0302 	orr.w	r3, r3, #2
 800deec:	81a3      	strh	r3, [r4, #12]
 800deee:	e7e2      	b.n	800deb6 <__smakebuf_r+0xc>
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	6020      	str	r0, [r4, #0]
 800def4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	9b01      	ldr	r3, [sp, #4]
 800defc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df00:	b15b      	cbz	r3, 800df1a <__smakebuf_r+0x70>
 800df02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df06:	4630      	mov	r0, r6
 800df08:	f000 f81e 	bl	800df48 <_isatty_r>
 800df0c:	b128      	cbz	r0, 800df1a <__smakebuf_r+0x70>
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	f023 0303 	bic.w	r3, r3, #3
 800df14:	f043 0301 	orr.w	r3, r3, #1
 800df18:	81a3      	strh	r3, [r4, #12]
 800df1a:	89a3      	ldrh	r3, [r4, #12]
 800df1c:	431d      	orrs	r5, r3
 800df1e:	81a5      	strh	r5, [r4, #12]
 800df20:	e7cf      	b.n	800dec2 <__smakebuf_r+0x18>
	...

0800df24 <_fstat_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	2300      	movs	r3, #0
 800df28:	4d06      	ldr	r5, [pc, #24]	@ (800df44 <_fstat_r+0x20>)
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	4611      	mov	r1, r2
 800df30:	602b      	str	r3, [r5, #0]
 800df32:	f7f4 faae 	bl	8002492 <_fstat>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d102      	bne.n	800df40 <_fstat_r+0x1c>
 800df3a:	682b      	ldr	r3, [r5, #0]
 800df3c:	b103      	cbz	r3, 800df40 <_fstat_r+0x1c>
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd38      	pop	{r3, r4, r5, pc}
 800df42:	bf00      	nop
 800df44:	200006e0 	.word	0x200006e0

0800df48 <_isatty_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	2300      	movs	r3, #0
 800df4c:	4d05      	ldr	r5, [pc, #20]	@ (800df64 <_isatty_r+0x1c>)
 800df4e:	4604      	mov	r4, r0
 800df50:	4608      	mov	r0, r1
 800df52:	602b      	str	r3, [r5, #0]
 800df54:	f7f4 faad 	bl	80024b2 <_isatty>
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d102      	bne.n	800df62 <_isatty_r+0x1a>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	b103      	cbz	r3, 800df62 <_isatty_r+0x1a>
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	bd38      	pop	{r3, r4, r5, pc}
 800df64:	200006e0 	.word	0x200006e0

0800df68 <_sbrk_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	2300      	movs	r3, #0
 800df6c:	4d05      	ldr	r5, [pc, #20]	@ (800df84 <_sbrk_r+0x1c>)
 800df6e:	4604      	mov	r4, r0
 800df70:	4608      	mov	r0, r1
 800df72:	602b      	str	r3, [r5, #0]
 800df74:	f7f4 fab6 	bl	80024e4 <_sbrk>
 800df78:	1c43      	adds	r3, r0, #1
 800df7a:	d102      	bne.n	800df82 <_sbrk_r+0x1a>
 800df7c:	682b      	ldr	r3, [r5, #0]
 800df7e:	b103      	cbz	r3, 800df82 <_sbrk_r+0x1a>
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	bd38      	pop	{r3, r4, r5, pc}
 800df84:	200006e0 	.word	0x200006e0

0800df88 <memchr>:
 800df88:	b2c9      	uxtb	r1, r1
 800df8a:	4603      	mov	r3, r0
 800df8c:	4402      	add	r2, r0
 800df8e:	b510      	push	{r4, lr}
 800df90:	4293      	cmp	r3, r2
 800df92:	4618      	mov	r0, r3
 800df94:	d101      	bne.n	800df9a <memchr+0x12>
 800df96:	2000      	movs	r0, #0
 800df98:	e003      	b.n	800dfa2 <memchr+0x1a>
 800df9a:	7804      	ldrb	r4, [r0, #0]
 800df9c:	3301      	adds	r3, #1
 800df9e:	428c      	cmp	r4, r1
 800dfa0:	d1f6      	bne.n	800df90 <memchr+0x8>
 800dfa2:	bd10      	pop	{r4, pc}

0800dfa4 <_init>:
 800dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa6:	bf00      	nop
 800dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfaa:	bc08      	pop	{r3}
 800dfac:	469e      	mov	lr, r3
 800dfae:	4770      	bx	lr

0800dfb0 <_fini>:
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb2:	bf00      	nop
 800dfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb6:	bc08      	pop	{r3}
 800dfb8:	469e      	mov	lr, r3
 800dfba:	4770      	bx	lr
