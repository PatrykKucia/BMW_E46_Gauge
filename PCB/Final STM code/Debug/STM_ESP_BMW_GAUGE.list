
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d63c  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800d894  0800d894  0000e894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da10  0800da10  0000f144  2**0
                  CONTENTS
  4 .ARM          00000008  0800da10  0800da10  0000ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da18  0800da18  0000f144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da18  0800da18  0000ea18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da1c  0800da1c  0000ea1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800da20  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000144  0800db64  0000f144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800db64  0000f7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bb7  00000000  00000000  0000f17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b22  00000000  00000000  0002fd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00033858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ae  00000000  00000000  000352c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6a7  00000000  00000000  0003676e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243d0  00000000  00000000  00064e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120c58  00000000  00000000  000891e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a4c  00000000  00000000  001a9e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b18cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000144 	.word	0x20000144
 8000274:	00000000 	.word	0x00000000
 8000278:	0800d87c 	.word	0x0800d87c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000148 	.word	0x20000148
 8000294:	0800d87c 	.word	0x0800d87c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f003 fa6e 	bl	8004390 <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f001 f9b9 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000ece:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ed2:	617b      	str	r3, [r7, #20]


	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eda:	f003 fbb3 	bl	8004644 <HAL_FDCAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <MX_FDCAN1_Init+0xae>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee6:	f00b fe47 	bl	800cb78 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eea:	4806      	ldr	r0, [pc, #24]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eec:	f003 fc04 	bl	80046f8 <HAL_FDCAN_Start>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000ef6:	f001 f99b 	bl	8002230 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000160 	.word	0x20000160
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800d894 	.word	0x0800d894

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b ff01 	bl	800cd38 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f912 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f001 f965 	bl	8002230 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fe79 	bl	8004cc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f002 f9c8 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f002 f9df 	bl	800339c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f002 f9c0 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f002 f9d7 	bl	800339c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b04      	cmp	r3, #4
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00b fcf3 	bl	800caa8 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f003 fb30 	bl	8004748 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800d8b0 	.word	0x0800d8b0
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000160 	.word	0x20000160

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00b fcc7 	bl	800caa8 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00b fcc0 	bl	800caa8 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800d8b0 	.word	0x0800d8b0
 800114c:	0800d8c8 	.word	0x0800d8c8
 8001150:	20000000 	.word	0x20000000

08001154 <modify_can_frame_bit>:

void modify_can_frame_bit(uint8_t frameIndex, uint8_t byte_num, uint8_t bit_num, bool state)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	4603      	mov	r3, r0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	717b      	strb	r3, [r7, #5]
 800116e:	4613      	mov	r3, r2
 8001170:	713b      	strb	r3, [r7, #4]
	   if (frameIndex >= FRAME_COUNT) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d903      	bls.n	8001180 <modify_can_frame_bit+0x2c>
			printf("Over can frames index");
 8001178:	482b      	ldr	r0, [pc, #172]	@ (8001228 <modify_can_frame_bit+0xd4>)
 800117a:	f00b fc95 	bl	800caa8 <iprintf>
			return; // todo add error
 800117e:	e04f      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }
	   if (byte_num > 8) {
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d903      	bls.n	800118e <modify_can_frame_bit+0x3a>
		   printf("Wrong byte index");
 8001186:	4829      	ldr	r0, [pc, #164]	@ (800122c <modify_can_frame_bit+0xd8>)
 8001188:	f00b fc8e 	bl	800caa8 <iprintf>
	       return;
 800118c:	e048      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }
	   if (bit_num > 8) {
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d903      	bls.n	800119c <modify_can_frame_bit+0x48>
		   printf("Wrong bit index");
 8001194:	4826      	ldr	r0, [pc, #152]	@ (8001230 <modify_can_frame_bit+0xdc>)
 8001196:	f00b fc87 	bl	800caa8 <iprintf>
		   return;
 800119a:	e041      	b.n	8001220 <modify_can_frame_bit+0xcc>
	   }

	   if(state)
 800119c:	793b      	ldrb	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01e      	beq.n	80011e0 <modify_can_frame_bit+0x8c>
		   frames[frameIndex].data[byte_num] |= (1 << bit_num);  // bit set by OR
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	4923      	ldr	r1, [pc, #140]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011a8:	202c      	movs	r0, #44	@ 0x2c
 80011aa:	fb00 f202 	mul.w	r2, r0, r2
 80011ae:	440a      	add	r2, r1
 80011b0:	4413      	add	r3, r2
 80011b2:	3324      	adds	r3, #36	@ 0x24
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	b2cc      	uxtb	r4, r1
 80011cc:	4919      	ldr	r1, [pc, #100]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011ce:	202c      	movs	r0, #44	@ 0x2c
 80011d0:	fb00 f202 	mul.w	r2, r0, r2
 80011d4:	440a      	add	r2, r1
 80011d6:	4413      	add	r3, r2
 80011d8:	3324      	adds	r3, #36	@ 0x24
 80011da:	4622      	mov	r2, r4
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e01f      	b.n	8001220 <modify_can_frame_bit+0xcc>
		else
		   frames[frameIndex].data[byte_num] &= ~(1 << bit_num); // bit unset BY AND
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	4913      	ldr	r1, [pc, #76]	@ (8001234 <modify_can_frame_bit+0xe0>)
 80011e6:	202c      	movs	r0, #44	@ 0x2c
 80011e8:	fb00 f202 	mul.w	r2, r0, r2
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	3324      	adds	r3, #36	@ 0x24
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	b25b      	sxtb	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	b259      	sxtb	r1, r3
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	b2cc      	uxtb	r4, r1
 800120e:	4909      	ldr	r1, [pc, #36]	@ (8001234 <modify_can_frame_bit+0xe0>)
 8001210:	202c      	movs	r0, #44	@ 0x2c
 8001212:	fb00 f202 	mul.w	r2, r0, r2
 8001216:	440a      	add	r2, r1
 8001218:	4413      	add	r3, r2
 800121a:	3324      	adds	r3, #36	@ 0x24
 800121c:	4622      	mov	r2, r4
 800121e:	701a      	strb	r2, [r3, #0]
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	0800d8b0 	.word	0x0800d8b0
 800122c:	0800d8c8 	.word	0x0800d8c8
 8001230:	0800d8dc 	.word	0x0800d8dc
 8001234:	20000000 	.word	0x20000000

08001238 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001244:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_GPDMA1_Init+0x3c>)
 8001250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	201b      	movs	r0, #27
 8001262:	f002 f881 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001266:	201b      	movs	r0, #27
 8001268:	f002 f898 	bl	800339c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	44020c00 	.word	0x44020c00

08001278 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b48      	ldr	r3, [pc, #288]	@ (80013b0 <MX_GPIO_Init+0x138>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001294:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <MX_GPIO_Init+0x138>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129e:	4b44      	ldr	r3, [pc, #272]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ac:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b2:	4a3f      	ldr	r2, [pc, #252]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012bc:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d0:	4a37      	ldr	r2, [pc, #220]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ee:	4a30      	ldr	r2, [pc, #192]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_GPIO_Init+0x138>)
 80012fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800130c:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 800130e:	f003 fe29 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001318:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <MX_GPIO_Init+0x140>)
 800131a:	f003 fe23 	bl	8004f64 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800131e:	2200      	movs	r2, #0
 8001320:	f243 411e 	movw	r1, #13342	@ 0x341e
 8001324:	4825      	ldr	r0, [pc, #148]	@ (80013bc <MX_GPIO_Init+0x144>)
 8001326:	f003 fe1d 	bl	8004f64 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fuel_HVC_GPIO_Port, Fuel_HVC_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2120      	movs	r1, #32
 800132e:	4823      	ldr	r0, [pc, #140]	@ (80013bc <MX_GPIO_Init+0x144>)
 8001330:	f003 fe18 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 800134a:	f003 fcb9 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 800134e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <MX_GPIO_Init+0x13c>)
 8001368:	f003 fcaa 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800136c:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001370:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_GPIO_Init+0x140>)
 8001386:	f003 fc9b 	bl	8004cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800138a:	f243 433e 	movw	r3, #13374	@ 0x343e
 800138e:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_GPIO_Init+0x144>)
 80013a4:	f003 fc8c 	bl	8004cc0 <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	44020c00 	.word	0x44020c00
 80013b4:	42020800 	.word	0x42020800
 80013b8:	42020000 	.word	0x42020000
 80013bc:	42020400 	.word	0x42020400

080013c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <MX_I2C1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <MX_I2C1_Init+0x7c>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fa:	480e      	ldr	r0, [pc, #56]	@ (8001434 <MX_I2C1_Init+0x74>)
 80013fc:	f003 fde4 	bl	8004fc8 <HAL_I2C_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001406:	f000 ff13 	bl	8002230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <MX_I2C1_Init+0x74>)
 800140e:	f003 fe76 	bl	80050fe <HAL_I2CEx_ConfigAnalogFilter>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001418:	f000 ff0a 	bl	8002230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_I2C1_Init+0x74>)
 8001420:	f003 feb8 	bl	8005194 <HAL_I2CEx_ConfigDigitalFilter>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800142a:	f000 ff01 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001c4 	.word	0x200001c4
 8001438:	40005400 	.word	0x40005400
 800143c:	60808cd3 	.word	0x60808cd3

08001440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0be      	sub	sp, #248	@ 0xf8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	22d0      	movs	r2, #208	@ 0xd0
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00b fc69 	bl	800cd38 <memset>
  if(i2cHandle->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <HAL_I2C_MspInit+0xc8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d146      	bne.n	80014fe <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4618      	mov	r0, r3
 8001488:	f004 fe7a 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001492:	f000 fecd 	bl	8002230 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014bc:	2312      	movs	r3, #18
 80014be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <HAL_I2C_MspInit+0xd0>)
 80014dc:	f003 fbf0 	bl	8004cc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 80014e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_I2C_MspInit+0xcc>)
 80014f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014fe:	bf00      	nop
 8001500:	37f8      	adds	r7, #248	@ 0xf8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40005400 	.word	0x40005400
 800150c:	44020c00 	.word	0x44020c00
 8001510:	42020400 	.word	0x42020400

08001514 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001518:	2000      	movs	r0, #0
 800151a:	f003 fe87 	bl	800522c <HAL_ICACHE_ConfigAssociativityMode>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001524:	f000 fe84 	bl	8002230 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001528:	f003 fea0 	bl	800526c <HAL_ICACHE_Enable>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001532:	f000 fe7d 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <Servo_SetAngle>:
    // Połączenie danych (TCON ma 9 bitów, więc maskujemy)
    uint16_t tcon_value = ((data[0] << 8) | data[1]) & 0x01FF;

    return tcon_value;
}
void Servo_SetAngle(Servo_t *servo, uint8_t angle) {
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
    if (angle >= 105) angle = 105;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	2b68      	cmp	r3, #104	@ 0x68
 800154c:	d901      	bls.n	8001552 <Servo_SetAngle+0x16>
 800154e:	2369      	movs	r3, #105	@ 0x69
 8001550:	70fb      	strb	r3, [r7, #3]
    if (angle <= 10) angle = 10;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d801      	bhi.n	800155c <Servo_SetAngle+0x20>
 8001558:	230a      	movs	r3, #10
 800155a:	70fb      	strb	r3, [r7, #3]

    uint32_t range = servo->max_pulse - servo->min_pulse;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	895b      	ldrh	r3, [r3, #10]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	891b      	ldrh	r3, [r3, #8]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = servo->min_pulse + ((uint32_t)angle * range) / 180;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	891b      	ldrh	r3, [r3, #8]
 800156e:	4619      	mov	r1, r3
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <Servo_SetAngle+0xc4>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <Servo_SetAngle+0x5e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001598:	e02c      	b.n	80015f4 <Servo_SetAngle+0xb8>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d105      	bne.n	80015ae <Servo_SetAngle+0x72>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015ac:	e022      	b.n	80015f4 <Servo_SetAngle+0xb8>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d105      	bne.n	80015c2 <Servo_SetAngle+0x86>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80015c0:	e018      	b.n	80015f4 <Servo_SetAngle+0xb8>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d105      	bne.n	80015d6 <Servo_SetAngle+0x9a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015d4:	e00e      	b.n	80015f4 <Servo_SetAngle+0xb8>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d105      	bne.n	80015ea <Servo_SetAngle+0xae>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80015e8:	e004      	b.n	80015f4 <Servo_SetAngle+0xb8>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	16c16c17 	.word	0x16c16c17

08001604 <Servo_Init>:


void Servo_Init(Servo_t *servo, TIM_HandleTypeDef *htim, uint32_t channel) {
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
    servo->htim = htim;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	605a      	str	r2, [r3, #4]

    // Typowe wartości dla serwa: 1ms - 2ms w trybie PWM 20ms (50Hz)
    servo->min_pulse = 500;   // w mikrosekundach (np. 0 stopni)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001622:	811a      	strh	r2, [r3, #8]
    servo->max_pulse = 2500;  // w mikrosekundach (np. 180 stopni)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800162a:	815a      	strh	r2, [r3, #10]

}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <__io_putchar>:
int __io_putchar(int ch) //function used to print() in usart
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0a      	cmp	r3, #10
 8001644:	d102      	bne.n	800164c <__io_putchar+0x14>
    __io_putchar('\r');
 8001646:	200d      	movs	r0, #13
 8001648:	f7ff fff6 	bl	8001638 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800164c:	1d39      	adds	r1, r7, #4
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	2201      	movs	r2, #1
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <__io_putchar+0x2c>)
 8001656:	f009 fe1f 	bl	800b298 <HAL_UART_Transmit>

  return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000500 	.word	0x20000500

08001668 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <Set_PWM_Frequency+0xa0>)
 800167e:	fb82 1203 	smull	r1, r2, r2, r3
 8001682:	441a      	add	r2, r3
 8001684:	1212      	asrs	r2, r2, #8
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	3319      	adds	r3, #25
 800168c:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001694:	4293      	cmp	r3, r2
 8001696:	d817      	bhi.n	80016c8 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <Set_PWM_Frequency+0xa4>)
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016aa:	d302      	bcc.n	80016b2 <Set_PWM_Frequency+0x4a>
 80016ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016b0:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	3301      	adds	r3, #1
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a13      	ldr	r2, [pc, #76]	@ (800170c <Set_PWM_Frequency+0xa4>)
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e007      	b.n	80016d8 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <Set_PWM_Frequency+0xa4>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016de:	d302      	bcc.n	80016e6 <Set_PWM_Frequency+0x7e>
 80016e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e4:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <Set_PWM_Frequency+0xa8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <Set_PWM_Frequency+0xa8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016f6:	4a06      	ldr	r2, [pc, #24]	@ (8001710 <Set_PWM_Frequency+0xa8>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	f2b9d649 	.word	0xf2b9d649
 800170c:	0ee6b280 	.word	0x0ee6b280
 8001710:	20000384 	.word	0x20000384

08001714 <ESP32_SendCommand>:

void ESP32_SendCommand(const char* command) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe fdbb 	bl	8000298 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4808      	ldr	r0, [pc, #32]	@ (8001750 <ESP32_SendCommand+0x3c>)
 800172e:	f009 fdb3 	bl	800b298 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2202      	movs	r2, #2
 8001738:	4906      	ldr	r1, [pc, #24]	@ (8001754 <ESP32_SendCommand+0x40>)
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <ESP32_SendCommand+0x3c>)
 800173c:	f009 fdac 	bl	800b298 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 8001740:	2064      	movs	r0, #100	@ 0x64
 8001742:	f001 fd35 	bl	80031b0 <HAL_Delay>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000500 	.word	0x20000500
 8001754:	0800d90c 	.word	0x0800d90c

08001758 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001762:	486a      	ldr	r0, [pc, #424]	@ (800190c <InitAnalogIndicators+0x1b4>)
 8001764:	f003 fbfe 	bl	8004f64 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800176e:	4868      	ldr	r0, [pc, #416]	@ (8001910 <InitAnalogIndicators+0x1b8>)
 8001770:	f003 fbf8 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177a:	4865      	ldr	r0, [pc, #404]	@ (8001910 <InitAnalogIndicators+0x1b8>)
 800177c:	f003 fbf2 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001786:	4862      	ldr	r0, [pc, #392]	@ (8001910 <InitAnalogIndicators+0x1b8>)
 8001788:	f003 fbec 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 800178c:	2200      	movs	r2, #0
 800178e:	2104      	movs	r1, #4
 8001790:	485f      	ldr	r0, [pc, #380]	@ (8001910 <InitAnalogIndicators+0x1b8>)
 8001792:	f003 fbe7 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	485d      	ldr	r0, [pc, #372]	@ (8001910 <InitAnalogIndicators+0x1b8>)
 800179c:	f003 fbe2 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 80017a0:	2201      	movs	r2, #1
 80017a2:	2180      	movs	r1, #128	@ 0x80
 80017a4:	485b      	ldr	r0, [pc, #364]	@ (8001914 <InitAnalogIndicators+0x1bc>)
 80017a6:	f003 fbdd 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 80017aa:	2200      	movs	r2, #0
 80017ac:	2140      	movs	r1, #64	@ 0x40
 80017ae:	4859      	ldr	r0, [pc, #356]	@ (8001914 <InitAnalogIndicators+0x1bc>)
 80017b0:	f003 fbd8 	bl	8004f64 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 80017b4:	2200      	movs	r2, #0
 80017b6:	2120      	movs	r1, #32
 80017b8:	4856      	ldr	r0, [pc, #344]	@ (8001914 <InitAnalogIndicators+0x1bc>)
 80017ba:	f003 fbd3 	bl	8004f64 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x05);
 80017be:	2205      	movs	r2, #5
 80017c0:	2100      	movs	r1, #0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc9a 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0x14);
 80017c8:	2214      	movs	r2, #20
 80017ca:	2101      	movs	r1, #1
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fc95 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 4, 0x14);
 80017d2:	2214      	movs	r2, #20
 80017d4:	2104      	movs	r1, #4
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fc90 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 5, 0x17);
 80017dc:	2217      	movs	r2, #23
 80017de:	2105      	movs	r1, #5
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fc8b 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 6, 0x0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2106      	movs	r1, #6
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fc86 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 7, 0x16);
 80017f0:	2216      	movs	r2, #22
 80017f2:	2107      	movs	r1, #7
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fc81 	bl	80010fc <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2003      	movs	r0, #3
 8001800:	f7ff fc7c 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 8001804:	2200      	movs	r2, #0
 8001806:	2101      	movs	r1, #1
 8001808:	2003      	movs	r0, #3
 800180a:	f7ff fc77 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 2, 0x00); // zero flag
 800180e:	2200      	movs	r2, #0
 8001810:	2102      	movs	r1, #2
 8001812:	2003      	movs	r0, #3
 8001814:	f7ff fc72 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 3, 0x00); // zero błędów
 8001818:	2200      	movs	r2, #0
 800181a:	2103      	movs	r1, #3
 800181c:	2003      	movs	r0, #3
 800181e:	f7ff fc6d 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 4, 0x00); // zero
 8001822:	2200      	movs	r2, #0
 8001824:	2104      	movs	r1, #4
 8001826:	2003      	movs	r0, #3
 8001828:	f7ff fc68 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 5, 0x00); // zero
 800182c:	2200      	movs	r2, #0
 800182e:	2105      	movs	r1, #5
 8001830:	2003      	movs	r0, #3
 8001832:	f7ff fc63 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 6, 0x00); // brak błędu
 8001836:	2200      	movs	r2, #0
 8001838:	2106      	movs	r1, #6
 800183a:	2003      	movs	r0, #3
 800183c:	f7ff fc5e 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 7, 0x00); // suma kontrolna lub pusty
 8001840:	2200      	movs	r2, #0
 8001842:	2107      	movs	r1, #7
 8001844:	2003      	movs	r0, #3
 8001846:	f7ff fc59 	bl	80010fc <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_545, 4, 0x7E);  // Unused byte
 800184a:	227e      	movs	r2, #126	@ 0x7e
 800184c:	2104      	movs	r1, #4
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff fc54 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 5, 0x10);  // Unused byte
 8001854:	2210      	movs	r2, #16
 8001856:	2105      	movs	r1, #5
 8001858:	2002      	movs	r0, #2
 800185a:	f7ff fc4f 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 6, 0x00);  // Unused byte
 800185e:	2200      	movs	r2, #0
 8001860:	2106      	movs	r1, #6
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fc4a 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 7, 0x18);  // Unused byte
 8001868:	2218      	movs	r2, #24
 800186a:	2107      	movs	r1, #7
 800186c:	2002      	movs	r0, #2
 800186e:	f7ff fc45 	bl	80010fc <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_329, 0, 0x07);  // Unused byte
 8001872:	2207      	movs	r2, #7
 8001874:	2100      	movs	r1, #0
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fc40 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 2, 0xB2);  // Unused byte
 800187c:	22b2      	movs	r2, #178	@ 0xb2
 800187e:	2102      	movs	r1, #2
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff fc3b 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 3, 0x19);  // Unused byte
 8001886:	2219      	movs	r2, #25
 8001888:	2103      	movs	r1, #3
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fc36 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 4, 0x00);  // Unused byte
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fc31 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 5, 0xEE);  // Unused byte
 800189a:	22ee      	movs	r2, #238	@ 0xee
 800189c:	2105      	movs	r1, #5
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fc2c 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 6, 0x00);  // Unused byte
 80018a4:	2200      	movs	r2, #0
 80018a6:	2106      	movs	r1, #6
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fc27 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 7, 0x00);  // Unused byte
 80018ae:	2200      	movs	r2, #0
 80018b0:	2107      	movs	r1, #7
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fc22 	bl	80010fc <modify_can_frame_byte>

	 modify_can_frame_byte(FRAME_1F3, 0, 0x00);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff fc1d 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 1, 0x00);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	2004      	movs	r0, #4
 80018c8:	f7ff fc18 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 2, 0x00);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2102      	movs	r1, #2
 80018d0:	2004      	movs	r0, #4
 80018d2:	f7ff fc13 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 3, 0x00);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2103      	movs	r1, #3
 80018da:	2004      	movs	r0, #4
 80018dc:	f7ff fc0e 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 4, 0x00);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2104      	movs	r1, #4
 80018e4:	2004      	movs	r0, #4
 80018e6:	f7ff fc09 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 5, 0x00);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2105      	movs	r1, #5
 80018ee:	2004      	movs	r0, #4
 80018f0:	f7ff fc04 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 6, 0x00);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2106      	movs	r1, #6
 80018f8:	2004      	movs	r0, #4
 80018fa:	f7ff fbff 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 7, 0x00);
 80018fe:	2200      	movs	r2, #0
 8001900:	2107      	movs	r1, #7
 8001902:	2004      	movs	r0, #4
 8001904:	f7ff fbfa 	bl	80010fc <modify_can_frame_byte>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	42020800 	.word	0x42020800
 8001910:	42020400 	.word	0x42020400
 8001914:	42020000 	.word	0x42020000

08001918 <parse_frame>:

void parse_frame(uint8_t *buffer) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    uint8_t offset = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame, buffer, sizeof(FrameData));
 8001924:	2260      	movs	r2, #96	@ 0x60
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <parse_frame+0x130>)
 800192a:	f00b fa80 	bl	800ce2e <memcpy>

    isTurboActive = frame.flags & OG_TURBO;
 800192e:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <parse_frame+0x130>)
 8001930:	891b      	ldrh	r3, [r3, #8]
 8001932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b42      	ldr	r3, [pc, #264]	@ (8001a4c <parse_frame+0x134>)
 8001942:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <parse_frame+0x130>)
 8001946:	891b      	ldrh	r3, [r3, #8]
 8001948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <parse_frame+0x138>)
 8001958:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <parse_frame+0x130>)
 800195c:	891b      	ldrh	r3, [r3, #8]
 800195e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <parse_frame+0x13c>)
 800196e:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <parse_frame+0x130>)
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <parse_frame+0x140>)
 8001984:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001986:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <parse_frame+0x130>)
 8001988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <parse_frame+0x144>)
 800199a:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <parse_frame+0x130>)
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <parse_frame+0x148>)
 80019b0:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <parse_frame+0x130>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <parse_frame+0x14c>)
 80019c6:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <parse_frame+0x130>)
 80019ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <parse_frame+0x150>)
 80019dc:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <parse_frame+0x130>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <parse_frame+0x154>)
 80019f2:	701a      	strb	r2, [r3, #0]
    isBatteryWarning = frame.showLights & DL_BATTERY;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <parse_frame+0x130>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <parse_frame+0x158>)
 8001a08:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <parse_frame+0x130>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <parse_frame+0x15c>)
 8001a1e:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <parse_frame+0x130>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <parse_frame+0x160>)
 8001a34:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);  // Diagnostyka
 8001a36:	2110      	movs	r1, #16
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <parse_frame+0x164>)
 8001a3a:	f003 faab 	bl	8004f94 <HAL_GPIO_TogglePin>
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200002fc 	.word	0x200002fc
 8001a4c:	2000036c 	.word	0x2000036c
 8001a50:	2000036d 	.word	0x2000036d
 8001a54:	2000036e 	.word	0x2000036e
 8001a58:	2000036f 	.word	0x2000036f
 8001a5c:	20000370 	.word	0x20000370
 8001a60:	20000371 	.word	0x20000371
 8001a64:	20000372 	.word	0x20000372
 8001a68:	20000373 	.word	0x20000373
 8001a6c:	20000374 	.word	0x20000374
 8001a70:	20000375 	.word	0x20000375
 8001a74:	20000376 	.word	0x20000376
 8001a78:	20000377 	.word	0x20000377
 8001a7c:	42020400 	.word	0x42020400

08001a80 <Modify_Speed_RPM>:
void Modify_Speed_RPM(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
speed = frame.speed * 3.6;
 8001a86:	4b36      	ldr	r3, [pc, #216]	@ (8001b60 <Modify_Speed_RPM+0xe0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd70 	bl	8000570 <__aeabi_f2d>
 8001a90:	a331      	add	r3, pc, #196	@ (adr r3, 8001b58 <Modify_Speed_RPM+0xd8>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdc3 	bl	8000620 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7fe ffef 	bl	8000a84 <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <Modify_Speed_RPM+0xe4>)
 8001aaa:	6013      	str	r3, [r2, #0]
    Set_PWM_Frequency(speed);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <Modify_Speed_RPM+0xe4>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab6:	ee17 3a90 	vmov	r3, s15
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fdd3 	bl	8001668 <Set_PWM_Frequency>

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 8001ac2:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <Modify_Speed_RPM+0xe0>)
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd52 	bl	8000570 <__aeabi_f2d>
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <Modify_Speed_RPM+0xe8>)
 8001ad2:	f7fe fecf 	bl	8000874 <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ffb1 	bl	8000a44 <__aeabi_d2uiz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	717b      	strb	r3, [r7, #5]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	713b      	strb	r3, [r7, #4]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <Modify_Speed_RPM+0xe0>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd3a 	bl	8000570 <__aeabi_f2d>
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <Modify_Speed_RPM+0xec>)
 8001b02:	f7fe fbd7 	bl	80002b4 <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <Modify_Speed_RPM+0xf0>)
 8001b14:	f7fe feae 	bl	8000874 <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7fe ff90 	bl	8000a44 <__aeabi_d2uiz>
 8001b24:	4603      	mov	r3, r0
 8001b26:	70fb      	strb	r3, [r7, #3]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001b28:	797b      	ldrb	r3, [r7, #5]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff fae4 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 8001b34:	793b      	ldrb	r3, [r7, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	2103      	movs	r1, #3
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fade 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	461a      	mov	r2, r3
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fad8 	bl	80010fc <modify_can_frame_byte>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	cccccccd 	.word	0xcccccccd
 8001b5c:	400ccccc 	.word	0x400ccccc
 8001b60:	200002fc 	.word	0x200002fc
 8001b64:	20000368 	.word	0x20000368
 8001b68:	3fc40000 	.word	0x3fc40000
 8001b6c:	40480000 	.word	0x40480000
 8001b70:	3fe80000 	.word	0x3fe80000

08001b74 <Modify_Values>:
void Modify_Values(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0


    if(frame.engTemp >= 129)
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <Modify_Values+0x178>)
 8001b7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b80:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001cf0 <Modify_Values+0x17c>
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	db06      	blt.n	8001b9c <Modify_Values+0x28>
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 1);
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	2103      	movs	r1, #3
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7ff fadd 	bl	8001154 <modify_can_frame_bit>
 8001b9a:	e005      	b.n	8001ba8 <Modify_Values+0x34>
    }
    else
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 0);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f7ff fad6 	bl	8001154 <modify_can_frame_bit>
    }

    if (mpgloop == 0xFFFF) {
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <Modify_Values+0x180>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d103      	bne.n	8001bbc <Modify_Values+0x48>
        mpgloop = 0x0;
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf4 <Modify_Values+0x180>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	e059      	b.n	8001c70 <Modify_Values+0xfc>
    } else {
        // Oblicz zmianę RPM (pochodną)
        int16_t rpm_delta = frame.rpm - prev_rpm;
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <Modify_Values+0x178>)
 8001bbe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf8 <Modify_Values+0x184>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd6:	ee17 3a90 	vmov	r3, s15
 8001bda:	82fb      	strh	r3, [r7, #22]

        // Część dynamiczna - reaguje na zmiany obrotów
        int16_t dynamic_component = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	83fb      	strh	r3, [r7, #30]
        if (rpm_delta > 0) {
 8001be0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dd07      	ble.n	8001bf8 <Modify_Values+0x84>
        	dynamic_component = (rpm_delta << 1) + rpm_delta; // zamiast * 3 // Silna reakcja na przyspieszenie
 8001be8:	8afb      	ldrh	r3, [r7, #22]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	83fb      	strh	r3, [r7, #30]
 8001bf6:	e005      	b.n	8001c04 <Modify_Values+0x90>
        } else if (rpm_delta < 0) {
 8001bf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da01      	bge.n	8001c04 <Modify_Values+0x90>
            dynamic_component = rpm_delta; // Słabsza reakcja na zwalnianie
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	83fb      	strh	r3, [r7, #30]
        }

        // Część statyczna - zależy od aktualnych obrotów
        uint16_t static_component = frame.rpm / 50; // Dostosuj dzielnik
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <Modify_Values+0x178>)
 8001c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c0a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001cfc <Modify_Values+0x188>
 8001c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c16:	ee17 3a90 	vmov	r3, s15
 8001c1a:	82bb      	strh	r3, [r7, #20]

        // Suma obu komponentów
        int32_t new_mpgloop = mpgloop + dynamic_component + static_component;
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <Modify_Values+0x180>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c26:	441a      	add	r2, r3
 8001c28:	8abb      	ldrh	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]

        // Jeśli pedał gazu puszczony - szybkie zmniejszanie
        uint8_t throttle_pct = (uint8_t)(frame.throttle * 100.0f);
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <Modify_Values+0x178>)
 8001c30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001c34:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d00 <Modify_Values+0x18c>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c40:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c44:	793b      	ldrb	r3, [r7, #4]
 8001c46:	74fb      	strb	r3, [r7, #19]
        if (throttle_pct <= 20) {
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	2b14      	cmp	r3, #20
 8001c4c:	d801      	bhi.n	8001c52 <Modify_Values+0xde>
            new_mpgloop = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
        }


        // Ograniczenia wartości
        new_mpgloop = (new_mpgloop < 0) ? 0 : new_mpgloop;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c58:	61bb      	str	r3, [r7, #24]
        mpgloop = (new_mpgloop > 0xFFFF) ? 0xFFFF : (uint16_t)new_mpgloop;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	da02      	bge.n	8001c68 <Modify_Values+0xf4>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	e001      	b.n	8001c6c <Modify_Values+0xf8>
 8001c68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6c:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <Modify_Values+0x180>)
 8001c6e:	8013      	strh	r3, [r2, #0]
//        modify_can_frame_byte(FRAME_545, 1, mpgloop & 0xFF);
//        modify_can_frame_byte(FRAME_545, 2, mpgloop >> 8);
//    }


    if(isTractionCtrl)
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <Modify_Values+0x190>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <Modify_Values+0x11a>
    {
	 modify_can_frame_byte(FRAME_153, 0, 0x06); // brak błędu //06 //ff to turn on
 8001c78:	2206      	movs	r2, #6
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f7ff fa3d 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0xff); // brak aktywnej interwencji DSC
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	2101      	movs	r1, #1
 8001c86:	2003      	movs	r0, #3
 8001c88:	f7ff fa38 	bl	80010fc <modify_can_frame_byte>
 8001c8c:	e009      	b.n	8001ca2 <Modify_Values+0x12e>
    }
    else
    {
   	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2003      	movs	r0, #3
 8001c94:	f7ff fa32 	bl	80010fc <modify_can_frame_byte>
   	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f7ff fa2d 	bl	80010fc <modify_can_frame_byte>
//	   // Przelicz fuel na kąt z zakresu 45–115
//	   float angle = 45.0f + fuel * (115.0f - 45.0f);  // czyli 45 + fuel * 70
//
//	   Servo_SetAngle(&servo1, angle);

    uint16_t fuel_int = (uint16_t)(frame.fuel * 65535.0f + 0.5f);
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <Modify_Values+0x178>)
 8001ca4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ca8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d08 <Modify_Values+0x194>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	823b      	strh	r3, [r7, #16]
    uint8_t angle = 105 - ((fuel_int * 95) >> 16); // 95 = 105 - 10
 8001cc2:	8a3a      	ldrh	r2, [r7, #16]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	141b      	asrs	r3, r3, #16
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f1c3 0369 	rsb	r3, r3, #105	@ 0x69
 8001cd6:	73fb      	strb	r3, [r7, #15]


    Servo_SetAngle(&servo1, angle);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480b      	ldr	r0, [pc, #44]	@ (8001d0c <Modify_Values+0x198>)
 8001cde:	f7ff fc2d 	bl	800153c <Servo_SetAngle>
}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002fc 	.word	0x200002fc
 8001cf0:	43010000 	.word	0x43010000
 8001cf4:	2000037a 	.word	0x2000037a
 8001cf8:	2000037c 	.word	0x2000037c
 8001cfc:	42480000 	.word	0x42480000
 8001d00:	42c80000 	.word	0x42c80000
 8001d04:	20000372 	.word	0x20000372
 8001d08:	477fff00 	.word	0x477fff00
 8001d0c:	2000035c 	.word	0x2000035c

08001d10 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	73bb      	strb	r3, [r7, #14]
 8001d24:	e009      	b.n	8001d3a <calculate_checksum+0x2a>
        checksum ^= data[i];
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	4053      	eors	r3, r2
 8001d32:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73bb      	strb	r3, [r7, #14]
 8001d3a:	7bba      	ldrb	r2, [r7, #14]
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3f1      	bcc.n	8001d26 <calculate_checksum+0x16>
    }
    return checksum;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	4603      	mov	r3, r0
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	460b      	mov	r3, r1
 8001d68:	717b      	strb	r3, [r7, #5]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 8001d7a:	793b      	ldrb	r3, [r7, #4]
 8001d7c:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 8001d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d82:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 8001d84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d88:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 8001d8a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d8e:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 8001d94:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d98:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 8001d9a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffb1 	bl	8001d10 <calculate_checksum>
 8001dae:	4603      	mov	r3, r0
 8001db0:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 8001db2:	230a      	movs	r3, #10
 8001db4:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 8001db6:	f107 010c 	add.w	r1, r7, #12
 8001dba:	2364      	movs	r3, #100	@ 0x64
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <Send_KBUS_frame+0x7c>)
 8001dc0:	f009 fa6a 	bl	800b298 <HAL_UART_Transmit>
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	20000594 	.word	0x20000594

08001dd0 <process_frame>:


void process_frame(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
    if (frameReady) {
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <process_frame+0x1c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <process_frame+0x20>)
 8001dde:	f7ff fd9b 	bl	8001918 <parse_frame>
        frameReady = false;
 8001de2:	4b02      	ldr	r3, [pc, #8]	@ (8001dec <process_frame+0x1c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    }
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200002fa 	.word	0x200002fa
 8001df0:	20000298 	.word	0x20000298

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f001 f91c 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f868 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f7ff fa3a 	bl	8001278 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001e04:	f7ff fa18 	bl	8001238 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001e08:	f000 ff48 	bl	8002c9c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e0c:	f000 fbe0 	bl	80025d0 <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001e10:	f7ff fb80 	bl	8001514 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001e14:	f7ff f812 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001e18:	f000 fc8c 	bl	8002734 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001e1c:	f000 ff8a 	bl	8002d34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001e20:	f000 fcfc 	bl	800281c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001e24:	f7ff facc 	bl	80013c0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001e28:	f000 fd48 	bl	80028bc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e2c:	f000 fdba 	bl	80029a4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e30:	2104      	movs	r1, #4
 8001e32:	481d      	ldr	r0, [pc, #116]	@ (8001ea8 <main+0xb4>)
 8001e34:	f007 fde6 	bl	8009a04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	481c      	ldr	r0, [pc, #112]	@ (8001eac <main+0xb8>)
 8001e3c:	f007 fde2 	bl	8009a04 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001e40:	481b      	ldr	r0, [pc, #108]	@ (8001eb0 <main+0xbc>)
 8001e42:	f7ff fc67 	bl	8001714 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Wi-Fi //AT+CWJAP="PLAY_Swiatlowod_19A1","t8Xv9auf7Z#D" - if connection lost/MCU replaced
  HAL_Delay(5000);
 8001e46:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e4a:	f001 f9b1 	bl	80031b0 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001e4e:	4819      	ldr	r0, [pc, #100]	@ (8001eb4 <main+0xc0>)
 8001e50:	f7ff fc60 	bl	8001714 <ESP32_SendCommand>
  HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e58:	f001 f9aa 	bl	80031b0 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4916      	ldr	r1, [pc, #88]	@ (8001eb8 <main+0xc4>)
 8001e60:	4816      	ldr	r0, [pc, #88]	@ (8001ebc <main+0xc8>)
 8001e62:	f009 fab7 	bl	800b3d4 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e66:	4816      	ldr	r0, [pc, #88]	@ (8001ec0 <main+0xcc>)
 8001e68:	f007 fc66 	bl	8009738 <HAL_TIM_Base_Start_IT>
  HAL_Delay(5);
 8001e6c:	2005      	movs	r0, #5
 8001e6e:	f001 f99f 	bl	80031b0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 8001e72:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <main+0xd0>)
 8001e74:	f007 fc60 	bl	8009738 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e78:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <main+0xd4>)
 8001e7a:	f007 fc5d 	bl	8009738 <HAL_TIM_Base_Start_IT>
  Servo_Init(&servo1, &htim5, TIM_CHANNEL_1);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	490a      	ldr	r1, [pc, #40]	@ (8001eac <main+0xb8>)
 8001e82:	4812      	ldr	r0, [pc, #72]	@ (8001ecc <main+0xd8>)
 8001e84:	f7ff fbbe 	bl	8001604 <Servo_Init>
  InitCANFrames();
 8001e88:	f7ff f8bc 	bl	8001004 <InitCANFrames>
  InitAnalogIndicators();
 8001e8c:	f7ff fc64 	bl	8001758 <InitAnalogIndicators>
  Servo_SetAngle(&servo1,10);
 8001e90:	210a      	movs	r1, #10
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <main+0xd8>)
 8001e94:	f7ff fb52 	bl	800153c <Servo_SetAngle>
//	              angle = 0;
//	              direction = 1;
//	          }
//	          HAL_Delay(50);

	 process_frame();
 8001e98:	f7ff ff9a 	bl	8001dd0 <process_frame>
	 Modify_Speed_RPM();
 8001e9c:	f7ff fdf0 	bl	8001a80 <Modify_Speed_RPM>
	 Modify_Values();
 8001ea0:	f7ff fe68 	bl	8001b74 <Modify_Values>
	 process_frame();
 8001ea4:	bf00      	nop
 8001ea6:	e7f7      	b.n	8001e98 <main+0xa4>
 8001ea8:	20000384 	.word	0x20000384
 8001eac:	200004b4 	.word	0x200004b4
 8001eb0:	0800d950 	.word	0x0800d950
 8001eb4:	0800d958 	.word	0x0800d958
 8001eb8:	20000218 	.word	0x20000218
 8001ebc:	20000500 	.word	0x20000500
 8001ec0:	200003d0 	.word	0x200003d0
 8001ec4:	20000468 	.word	0x20000468
 8001ec8:	2000041c 	.word	0x2000041c
 8001ecc:	2000035c 	.word	0x2000035c

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b09c      	sub	sp, #112	@ 0x70
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2250      	movs	r2, #80	@ 0x50
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00a ff2a 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <SystemClock_Config+0xdc>)
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4a2c      	ldr	r2, [pc, #176]	@ (8001fac <SystemClock_Config+0xdc>)
 8001efc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001f00:	6113      	str	r3, [r2, #16]
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <SystemClock_Config+0xdc>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f0e:	bf00      	nop
 8001f10:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <SystemClock_Config+0xdc>)
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d1f9      	bne.n	8001f10 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f26:	2302      	movs	r3, #2
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001f32:	233e      	movs	r3, #62	@ 0x3e
 8001f34:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001f42:	230c      	movs	r3, #12
 8001f44:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 f999 	bl	800528c <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f60:	f000 f966 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	231f      	movs	r3, #31
 8001f66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	2105      	movs	r1, #5
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fdba 	bl	8005afc <HAL_RCC_ClockConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8e:	f000 f94f 	bl	8002230 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001f92:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <SystemClock_Config+0xe0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <SystemClock_Config+0xe0>)
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	6013      	str	r3, [r2, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	3770      	adds	r7, #112	@ 0x70
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	44020800 	.word	0x44020800
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	482e      	ldr	r0, [pc, #184]	@ (8002078 <HAL_UART_RxCpltCallback+0xc4>)
 8001fc0:	f002 ffe8 	bl	8004f94 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800207c <HAL_UART_RxCpltCallback+0xc8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d150      	bne.n	8002070 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <HAL_UART_RxCpltCallback+0xcc>)
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002084 <HAL_UART_RxCpltCallback+0xd0>)
 8001fd4:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d813      	bhi.n	8002006 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001fde:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b29      	ldr	r3, [pc, #164]	@ (800208c <HAL_UART_RxCpltCallback+0xd8>)
 8001fe6:	5c9a      	ldrb	r2, [r3, r2]
 8001fe8:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_UART_RxCpltCallback+0xd0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e033      	b.n	8002066 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e02f      	b.n	8002066 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d10d      	bne.n	800202a <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_UART_RxCpltCallback+0xd0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b3a      	cmp	r3, #58	@ 0x3a
 8002014:	d127      	bne.n	8002066 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8002016:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 8002020:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8002022:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e01d      	b.n	8002066 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b5f      	cmp	r3, #95	@ 0x5f
 8002030:	d80a      	bhi.n	8002048 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	b2d1      	uxtb	r1, r2
 800203a:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 800203c:	7011      	strb	r1, [r2, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_UART_RxCpltCallback+0xd0>)
 8002042:	7819      	ldrb	r1, [r3, #0]
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_UART_RxCpltCallback+0xe0>)
 8002046:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b5f      	cmp	r3, #95	@ 0x5f
 800204e:	d90a      	bls.n	8002066 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_UART_RxCpltCallback+0xe4>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
                process_frame();
 8002056:	f7ff febb 	bl	8001dd0 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_UART_RxCpltCallback+0xd4>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_UART_RxCpltCallback+0xdc>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8002066:	2201      	movs	r2, #1
 8002068:	4905      	ldr	r1, [pc, #20]	@ (8002080 <HAL_UART_RxCpltCallback+0xcc>)
 800206a:	480c      	ldr	r0, [pc, #48]	@ (800209c <HAL_UART_RxCpltCallback+0xe8>)
 800206c:	f009 f9b2 	bl	800b3d4 <HAL_UART_Receive_DMA>
    }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	42020400 	.word	0x42020400
 800207c:	40013800 	.word	0x40013800
 8002080:	20000218 	.word	0x20000218
 8002084:	2000037e 	.word	0x2000037e
 8002088:	200002f8 	.word	0x200002f8
 800208c:	0800d984 	.word	0x0800d984
 8002090:	200002f9 	.word	0x200002f9
 8002094:	20000298 	.word	0x20000298
 8002098:	200002fa 	.word	0x200002fa
 800209c:	20000500 	.word	0x20000500

080020a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a54      	ldr	r2, [pc, #336]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d108      	bne.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7fe fffb 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7fe fff8 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 80020bc:	2002      	movs	r0, #2
 80020be:	f7fe fff5 	bl	80010ac <SendCANFrame>
	 }
	 if (htim == &htim4)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d112      	bne.n	80020f0 <HAL_TIM_PeriodElapsedCallback+0x50>
	 {
	     SendCANFrame(FRAME_153);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f7fe ffee 	bl	80010ac <SendCANFrame>

	     frame1F3_counter++;
 80020d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020da:	701a      	strb	r2, [r3, #0]
	     if (frame1F3_counter >= 2) {
 80020dc:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d905      	bls.n	80020f0 <HAL_TIM_PeriodElapsedCallback+0x50>
	         SendCANFrame(FRAME_1F3);
 80020e4:	2004      	movs	r0, #4
 80020e6:	f7fe ffe1 	bl	80010ac <SendCANFrame>
	         frame1F3_counter = 0;
 80020ea:	4b46      	ldr	r3, [pc, #280]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
	     }
	 }
	 if (htim == &htim3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a45      	ldr	r2, [pc, #276]	@ (8002208 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d17d      	bne.n	80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>
	 {
		bool anyConditionMet = false;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 80020fc:	2300      	movs	r3, #0
 80020fe:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 8002100:	4b42      	ldr	r3, [pc, #264]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x70>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8002108:	2307      	movs	r3, #7
 800210a:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 8002110:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_TIM_PeriodElapsedCallback+0x84>
			command = command | TURN_LEFT;
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	f043 0320 	orr.w	r3, r3, #32
 800211e:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8002124:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x98>
			command = command | TURN_RIGHT;
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002132:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_TIM_PeriodElapsedCallback+0xc0>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 8002144:	2307      	movs	r3, #7
 8002146:	9303      	str	r3, [sp, #12]
 8002148:	2300      	movs	r3, #0
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	225b      	movs	r2, #91	@ 0x5b
 8002158:	21bf      	movs	r1, #191	@ 0xbf
 800215a:	20d0      	movs	r0, #208	@ 0xd0
 800215c:	f7ff fdf8 	bl	8001d50 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	2207      	movs	r2, #7
 8002164:	9203      	str	r2, [sp, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	9201      	str	r2, [sp, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	9200      	str	r2, [sp, #0]
 8002172:	225b      	movs	r2, #91	@ 0x5b
 8002174:	21bf      	movs	r1, #191	@ 0xbf
 8002176:	20d0      	movs	r0, #208	@ 0xd0
 8002178:	f7ff fdea 	bl	8001d50 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_TIM_PeriodElapsedCallback+0xf0>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 8002184:	2201      	movs	r2, #1
 8002186:	2104      	movs	r1, #4
 8002188:	4824      	ldr	r0, [pc, #144]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800218a:	f002 feeb 	bl	8004f64 <HAL_GPIO_WritePin>
 800218e:	e004      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0xfa>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8002190:	2200      	movs	r2, #0
 8002192:	2104      	movs	r1, #4
 8002194:	4821      	ldr	r0, [pc, #132]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002196:	f002 fee5 	bl	8004f64 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 800219a:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_TIM_PeriodElapsedCallback+0x10e>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 80021a2:	2201      	movs	r2, #1
 80021a4:	2140      	movs	r1, #64	@ 0x40
 80021a6:	481f      	ldr	r0, [pc, #124]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80021a8:	f002 fedc 	bl	8004f64 <HAL_GPIO_WritePin>
 80021ac:	e004      	b.n	80021b8 <HAL_TIM_PeriodElapsedCallback+0x118>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 80021ae:	2200      	movs	r2, #0
 80021b0:	2140      	movs	r1, #64	@ 0x40
 80021b2:	481c      	ldr	r0, [pc, #112]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80021b4:	f002 fed6 	bl	8004f64 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_TIM_PeriodElapsedCallback+0x12c>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2120      	movs	r1, #32
 80021c4:	4817      	ldr	r0, [pc, #92]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80021c6:	f002 fecd 	bl	8004f64 <HAL_GPIO_WritePin>
 80021ca:	e004      	b.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x136>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2120      	movs	r1, #32
 80021d0:	4814      	ldr	r0, [pc, #80]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80021d2:	f002 fec7 	bl	8004f64 <HAL_GPIO_WritePin>
		if (isABSActive) {
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x14a>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2102      	movs	r1, #2
 80021e2:	480e      	ldr	r0, [pc, #56]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80021e4:	f002 febe 	bl	8004f64 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 80021e8:	e004      	b.n	80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2102      	movs	r1, #2
 80021ee:	480b      	ldr	r0, [pc, #44]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80021f0:	f002 feb8 	bl	8004f64 <HAL_GPIO_WritePin>
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003d0 	.word	0x200003d0
 8002200:	20000468 	.word	0x20000468
 8002204:	20000378 	.word	0x20000378
 8002208:	2000041c 	.word	0x2000041c
 800220c:	20000370 	.word	0x20000370
 8002210:	20000376 	.word	0x20000376
 8002214:	20000377 	.word	0x20000377
 8002218:	20000371 	.word	0x20000371
 800221c:	42020400 	.word	0x42020400
 8002220:	20000374 	.word	0x20000374
 8002224:	42020000 	.word	0x42020000
 8002228:	20000375 	.word	0x20000375
 800222c:	20000373 	.word	0x20000373

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8002238:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800223c:	4801      	ldr	r0, [pc, #4]	@ (8002244 <Error_Handler+0x14>)
 800223e:	f002 fea9 	bl	8004f94 <HAL_GPIO_TogglePin>
 8002242:	e7f9      	b.n	8002238 <Error_Handler+0x8>
 8002244:	42020000 	.word	0x42020000

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800225a:	bf00      	nop
 800225c:	e7fd      	b.n	800225a <NMI_Handler+0x4>

0800225e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <HardFault_Handler+0x4>

08002266 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <MemManage_Handler+0x4>

0800226e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002272:	bf00      	nop
 8002274:	e7fd      	b.n	8002272 <BusFault_Handler+0x4>

08002276 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227a:	bf00      	nop
 800227c:	e7fd      	b.n	800227a <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ac:	f000 ff60 	bl	8003170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80022ba:	f001 fb5e 	bl	800397a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000628 	.word	0x20000628

080022c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <FDCAN1_IT0_IRQHandler+0x10>)
 80022ce:	f002 fa7f 	bl	80047d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000160 	.word	0x20000160

080022dc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <FDCAN1_IT1_IRQHandler+0x10>)
 80022e2:	f002 fa75 	bl	80047d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000160 	.word	0x20000160

080022f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f4:	4802      	ldr	r0, [pc, #8]	@ (8002300 <TIM1_BRK_IRQHandler+0x10>)
 80022f6:	f007 fcc9 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000384 	.word	0x20000384

08002304 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <TIM1_UP_IRQHandler+0x10>)
 800230a:	f007 fcbf 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000384 	.word	0x20000384

08002318 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <TIM1_TRG_COM_IRQHandler+0x10>)
 800231e:	f007 fcb5 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000384 	.word	0x20000384

0800232c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <TIM1_CC_IRQHandler+0x10>)
 8002332:	f007 fcab 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000384 	.word	0x20000384

08002340 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <TIM2_IRQHandler+0x10>)
 8002346:	f007 fca1 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200003d0 	.word	0x200003d0

08002354 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <TIM3_IRQHandler+0x10>)
 800235a:	f007 fc97 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000041c 	.word	0x2000041c

08002368 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <TIM4_IRQHandler+0x10>)
 800236e:	f007 fc8d 	bl	8009c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000468 	.word	0x20000468

0800237c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <USART1_IRQHandler+0x10>)
 8002382:	f009 f879 	bl	800b478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000500 	.word	0x20000500

08002390 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e00a      	b.n	80023b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a2:	f3af 8000 	nop.w
 80023a6:	4601      	mov	r1, r0
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	60ba      	str	r2, [r7, #8]
 80023ae:	b2ca      	uxtb	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbf0      	blt.n	80023a2 <_read+0x12>
  }

  return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e009      	b.n	80023f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	60ba      	str	r2, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f927 	bl	8001638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf1      	blt.n	80023dc <_write+0x12>
  }
  return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_close>:

int _close(int file)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242a:	605a      	str	r2, [r3, #4]
  return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_isatty>:

int _isatty(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f00a fc9a 	bl	800cdd4 <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20044000 	.word	0x20044000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	20000380 	.word	0x20000380
 80024d4:	200007f0 	.word	0x200007f0

080024d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024de:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <SystemInit+0xdc>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	4a33      	ldr	r2, [pc, #204]	@ (80025b4 <SystemInit+0xdc>)
 80024e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80024ee:	4b32      	ldr	r3, [pc, #200]	@ (80025b8 <SystemInit+0xe0>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80024f4:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <SystemInit+0xe0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <SystemInit+0xe0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002500:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <SystemInit+0xe0>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	492c      	ldr	r1, [pc, #176]	@ (80025b8 <SystemInit+0xe0>)
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <SystemInit+0xe4>)
 8002508:	4013      	ands	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800250c:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <SystemInit+0xe0>)
 800250e:	2200      	movs	r2, #0
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002512:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <SystemInit+0xe0>)
 8002514:	2200      	movs	r2, #0
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <SystemInit+0xe0>)
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800251e:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <SystemInit+0xe0>)
 8002520:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <SystemInit+0xe8>)
 8002522:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002524:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <SystemInit+0xe0>)
 8002526:	2200      	movs	r2, #0
 8002528:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <SystemInit+0xe0>)
 800252c:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <SystemInit+0xe8>)
 800252e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <SystemInit+0xe0>)
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <SystemInit+0xe0>)
 8002538:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <SystemInit+0xe8>)
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <SystemInit+0xe0>)
 800253e:	2200      	movs	r2, #0
 8002540:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <SystemInit+0xe0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <SystemInit+0xe0>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <SystemInit+0xe0>)
 8002550:	2200      	movs	r2, #0
 8002552:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002554:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <SystemInit+0xdc>)
 8002556:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800255a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <SystemInit+0xec>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002564:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800256c:	d003      	beq.n	8002576 <SystemInit+0x9e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002574:	d117      	bne.n	80025a6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <SystemInit+0xec>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <SystemInit+0xec>)
 8002584:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <SystemInit+0xf0>)
 8002586:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <SystemInit+0xec>)
 800258a:	4a10      	ldr	r2, [pc, #64]	@ (80025cc <SystemInit+0xf4>)
 800258c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <SystemInit+0xec>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a0c      	ldr	r2, [pc, #48]	@ (80025c4 <SystemInit+0xec>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <SystemInit+0xec>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <SystemInit+0xec>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	61d3      	str	r3, [r2, #28]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00
 80025b8:	44020c00 	.word	0x44020c00
 80025bc:	eae2eae3 	.word	0xeae2eae3
 80025c0:	01010280 	.word	0x01010280
 80025c4:	40022000 	.word	0x40022000
 80025c8:	08192a3b 	.word	0x08192a3b
 80025cc:	4c5d6e7f 	.word	0x4c5d6e7f

080025d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b09c      	sub	sp, #112	@ 0x70
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
 8002600:	615a      	str	r2, [r3, #20]
 8002602:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2234      	movs	r2, #52	@ 0x34
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f00a fb94 	bl	800cd38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002610:	4b46      	ldr	r3, [pc, #280]	@ (800272c <MX_TIM1_Init+0x15c>)
 8002612:	4a47      	ldr	r2, [pc, #284]	@ (8002730 <MX_TIM1_Init+0x160>)
 8002614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8002616:	4b45      	ldr	r3, [pc, #276]	@ (800272c <MX_TIM1_Init+0x15c>)
 8002618:	2231      	movs	r2, #49	@ 0x31
 800261a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261c:	4b43      	ldr	r3, [pc, #268]	@ (800272c <MX_TIM1_Init+0x15c>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002622:	4b42      	ldr	r3, [pc, #264]	@ (800272c <MX_TIM1_Init+0x15c>)
 8002624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262a:	4b40      	ldr	r3, [pc, #256]	@ (800272c <MX_TIM1_Init+0x15c>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002630:	4b3e      	ldr	r3, [pc, #248]	@ (800272c <MX_TIM1_Init+0x15c>)
 8002632:	2200      	movs	r2, #0
 8002634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <MX_TIM1_Init+0x15c>)
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800263c:	483b      	ldr	r0, [pc, #236]	@ (800272c <MX_TIM1_Init+0x15c>)
 800263e:	f007 f823 	bl	8009688 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002648:	f7ff fdf2 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002652:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002656:	4619      	mov	r1, r3
 8002658:	4834      	ldr	r0, [pc, #208]	@ (800272c <MX_TIM1_Init+0x15c>)
 800265a:	f007 fdf5 	bl	800a248 <HAL_TIM_ConfigClockSource>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002664:	f7ff fde4 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002668:	4830      	ldr	r0, [pc, #192]	@ (800272c <MX_TIM1_Init+0x15c>)
 800266a:	f007 f974 	bl	8009956 <HAL_TIM_PWM_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002674:	f7ff fddc 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002688:	4619      	mov	r1, r3
 800268a:	4828      	ldr	r0, [pc, #160]	@ (800272c <MX_TIM1_Init+0x15c>)
 800268c:	f008 fc04 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002696:	f7ff fdcb 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269a:	2360      	movs	r3, #96	@ 0x60
 800269c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800269e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a8:	2300      	movs	r3, #0
 80026aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026bc:	2204      	movs	r2, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	481a      	ldr	r0, [pc, #104]	@ (800272c <MX_TIM1_Init+0x15c>)
 80026c2:	f007 fcad 	bl	800a020 <HAL_TIM_PWM_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80026cc:	f7ff fdb0 	bl	8002230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4807      	ldr	r0, [pc, #28]	@ (800272c <MX_TIM1_Init+0x15c>)
 800270e:	f008 fc93 	bl	800b038 <HAL_TIMEx_ConfigBreakDeadTime>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002718:	f7ff fd8a 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800271c:	4803      	ldr	r0, [pc, #12]	@ (800272c <MX_TIM1_Init+0x15c>)
 800271e:	f000 fa5b 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8002722:	bf00      	nop
 8002724:	3770      	adds	r7, #112	@ 0x70
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000384 	.word	0x20000384
 8002730:	40012c00 	.word	0x40012c00

08002734 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	@ 0x38
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002754:	463b      	mov	r3, r7
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	615a      	str	r2, [r3, #20]
 8002764:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002766:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800276c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002770:	2231      	movs	r2, #49	@ 0x31
 8002772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800277a:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <MX_TIM2_Init+0xe4>)
 800277c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <MX_TIM2_Init+0xe4>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800278e:	4822      	ldr	r0, [pc, #136]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002790:	f006 ff7a 	bl	8009688 <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800279a:	f7ff fd49 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027a8:	4619      	mov	r1, r3
 80027aa:	481b      	ldr	r0, [pc, #108]	@ (8002818 <MX_TIM2_Init+0xe4>)
 80027ac:	f007 fd4c 	bl	800a248 <HAL_TIM_ConfigClockSource>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80027b6:	f7ff fd3b 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80027ba:	4817      	ldr	r0, [pc, #92]	@ (8002818 <MX_TIM2_Init+0xe4>)
 80027bc:	f007 f86a 	bl	8009894 <HAL_TIM_OC_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80027c6:	f7ff fd33 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	480f      	ldr	r0, [pc, #60]	@ (8002818 <MX_TIM2_Init+0xe4>)
 80027da:	f008 fb5d 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80027e4:	f7ff fd24 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80027e8:	2300      	movs	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	2204      	movs	r2, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4806      	ldr	r0, [pc, #24]	@ (8002818 <MX_TIM2_Init+0xe4>)
 8002800:	f007 fb94 	bl	8009f2c <HAL_TIM_OC_ConfigChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800280a:	f7ff fd11 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	3738      	adds	r7, #56	@ 0x38
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200003d0 	.word	0x200003d0

0800281c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0310 	add.w	r3, r7, #16
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <MX_TIM3_Init+0x98>)
 800283c:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <MX_TIM3_Init+0x9c>)
 800283e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002840:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <MX_TIM3_Init+0x98>)
 8002842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MX_TIM3_Init+0x98>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800284e:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <MX_TIM3_Init+0x98>)
 8002850:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002854:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <MX_TIM3_Init+0x98>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285c:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <MX_TIM3_Init+0x98>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002862:	4814      	ldr	r0, [pc, #80]	@ (80028b4 <MX_TIM3_Init+0x98>)
 8002864:	f006 ff10 	bl	8009688 <HAL_TIM_Base_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800286e:	f7ff fcdf 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4619      	mov	r1, r3
 800287e:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <MX_TIM3_Init+0x98>)
 8002880:	f007 fce2 	bl	800a248 <HAL_TIM_ConfigClockSource>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800288a:	f7ff fcd1 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <MX_TIM3_Init+0x98>)
 800289c:	f008 fafc 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80028a6:	f7ff fcc3 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000041c 	.word	0x2000041c
 80028b8:	40000400 	.word	0x40000400

080028bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	@ 0x38
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028dc:	463b      	mov	r3, r7
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
 80028ea:	615a      	str	r2, [r3, #20]
 80028ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <MX_TIM4_Init+0xe0>)
 80028f0:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <MX_TIM4_Init+0xe4>)
 80028f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 80028f4:	4b29      	ldr	r3, [pc, #164]	@ (800299c <MX_TIM4_Init+0xe0>)
 80028f6:	2231      	movs	r2, #49	@ 0x31
 80028f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <MX_TIM4_Init+0xe0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002902:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002906:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <MX_TIM4_Init+0xe0>)
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002914:	4821      	ldr	r0, [pc, #132]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002916:	f006 feb7 	bl	8009688 <HAL_TIM_Base_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002920:	f7ff fc86 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800292a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800292e:	4619      	mov	r1, r3
 8002930:	481a      	ldr	r0, [pc, #104]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002932:	f007 fc89 	bl	800a248 <HAL_TIM_ConfigClockSource>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800293c:	f7ff fc78 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002940:	4816      	ldr	r0, [pc, #88]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002942:	f006 ffa7 	bl	8009894 <HAL_TIM_OC_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800294c:	f7ff fc70 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	480f      	ldr	r0, [pc, #60]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002960:	f008 fa9a 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800296a:	f7ff fc61 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800297e:	463b      	mov	r3, r7
 8002980:	2204      	movs	r2, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_TIM4_Init+0xe0>)
 8002986:	f007 fad1 	bl	8009f2c <HAL_TIM_OC_ConfigChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002990:	f7ff fc4e 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	3738      	adds	r7, #56	@ 0x38
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000468 	.word	0x20000468
 80029a0:	40000800 	.word	0x40000800

080029a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b6:	463b      	mov	r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029c8:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029ca:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <MX_TIM5_Init+0xb4>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029d0:	22f9      	movs	r2, #249	@ 0xf9
 80029d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80029da:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80029e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80029ee:	4819      	ldr	r0, [pc, #100]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 80029f0:	f006 ffb1 	bl	8009956 <HAL_TIM_PWM_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80029fa:	f7ff fc19 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4811      	ldr	r0, [pc, #68]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 8002a0e:	f008 fa43 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002a18:	f7ff fc0a 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a1c:	2360      	movs	r3, #96	@ 0x60
 8002a1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002a20:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002a24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	4619      	mov	r1, r3
 8002a34:	4807      	ldr	r0, [pc, #28]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 8002a36:	f007 faf3 	bl	800a020 <HAL_TIM_PWM_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002a40:	f7ff fbf6 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002a44:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <MX_TIM5_Init+0xb0>)
 8002a46:	f000 f8c7 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200004b4 	.word	0x200004b4
 8002a58:	40000c00 	.word	0x40000c00

08002a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a46      	ldr	r2, [pc, #280]	@ (8002b84 <HAL_TIM_Base_MspInit+0x128>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12f      	bne.n	8002ace <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6e:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a74:	4a44      	ldr	r2, [pc, #272]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002a76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a7a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a7e:	4b42      	ldr	r3, [pc, #264]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2029      	movs	r0, #41	@ 0x29
 8002a92:	f000 fc69 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002a96:	2029      	movs	r0, #41	@ 0x29
 8002a98:	f000 fc80 	bl	800339c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	202a      	movs	r0, #42	@ 0x2a
 8002aa2:	f000 fc61 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aa6:	202a      	movs	r0, #42	@ 0x2a
 8002aa8:	f000 fc78 	bl	800339c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2102      	movs	r1, #2
 8002ab0:	202b      	movs	r0, #43	@ 0x2b
 8002ab2:	f000 fc59 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002ab6:	202b      	movs	r0, #43	@ 0x2b
 8002ab8:	f000 fc70 	bl	800339c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2102      	movs	r1, #2
 8002ac0:	202c      	movs	r0, #44	@ 0x2c
 8002ac2:	f000 fc51 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ac6:	202c      	movs	r0, #44	@ 0x2c
 8002ac8:	f000 fc68 	bl	800339c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002acc:	e055      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad6:	d117      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ade:	4a2a      	ldr	r2, [pc, #168]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2103      	movs	r1, #3
 8002afa:	202d      	movs	r0, #45	@ 0x2d
 8002afc:	f000 fc34 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b00:	202d      	movs	r0, #45	@ 0x2d
 8002b02:	f000 fc4b 	bl	800339c <HAL_NVIC_EnableIRQ>
}
 8002b06:	e038      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <HAL_TIM_Base_MspInit+0x130>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d117      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b18:	4a1b      	ldr	r2, [pc, #108]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2106      	movs	r1, #6
 8002b34:	202e      	movs	r0, #46	@ 0x2e
 8002b36:	f000 fc17 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b3a:	202e      	movs	r0, #46	@ 0x2e
 8002b3c:	f000 fc2e 	bl	800339c <HAL_NVIC_EnableIRQ>
}
 8002b40:	e01b      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <HAL_TIM_Base_MspInit+0x134>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d116      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b52:	4a0d      	ldr	r2, [pc, #52]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_TIM_Base_MspInit+0x12c>)
 8002b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	202f      	movs	r0, #47	@ 0x2f
 8002b70:	f000 fbfa 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b74:	202f      	movs	r0, #47	@ 0x2f
 8002b76:	f000 fc11 	bl	800339c <HAL_NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	44020c00 	.word	0x44020c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800

08002b94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8002ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bac:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8002bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	44020c00 	.word	0x44020c00

08002bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	@ (8002c8c <HAL_TIM_MspPostInit+0xb4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d120      	bne.n	8002c3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c00:	4a23      	ldr	r2, [pc, #140]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	4817      	ldr	r0, [pc, #92]	@ (8002c94 <HAL_TIM_MspPostInit+0xbc>)
 8002c36:	f002 f843 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002c3a:	e023      	b.n	8002c84 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM5)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a15      	ldr	r2, [pc, #84]	@ (8002c98 <HAL_TIM_MspPostInit+0xc0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11e      	bne.n	8002c84 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4c:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_TIM_MspPostInit+0xb8>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c74:	2302      	movs	r3, #2
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <HAL_TIM_MspPostInit+0xbc>)
 8002c80:	f002 f81e 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002c84:	bf00      	nop
 8002c86:	3728      	adds	r7, #40	@ 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	44020c00 	.word	0x44020c00
 8002c94:	42020000 	.word	0x42020000
 8002c98:	40000c00 	.word	0x40000c00

08002c9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ca0:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002ca2:	4a23      	ldr	r2, [pc, #140]	@ (8002d30 <MX_USART1_UART_Init+0x94>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ca6:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce4:	4811      	ldr	r0, [pc, #68]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002ce6:	f008 fa87 	bl	800b1f8 <HAL_UART_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002cf0:	f7ff fa9e 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002cf8:	f009 fd49 	bl	800c78e <HAL_UARTEx_SetTxFifoThreshold>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d02:	f7ff fa95 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d06:	2100      	movs	r1, #0
 8002d08:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002d0a:	f009 fd7e 	bl	800c80a <HAL_UARTEx_SetRxFifoThreshold>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d14:	f7ff fa8c 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d18:	4804      	ldr	r0, [pc, #16]	@ (8002d2c <MX_USART1_UART_Init+0x90>)
 8002d1a:	f009 fcff 	bl	800c71c <HAL_UARTEx_DisableFifoMode>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d24:	f7ff fa84 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000500 	.word	0x20000500
 8002d30:	40013800 	.word	0x40013800

08002d34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d3a:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <MX_USART2_UART_Init+0x98>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d3e:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d4c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d5e:	220c      	movs	r2, #12
 8002d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d68:	4b17      	ldr	r3, [pc, #92]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d80:	4811      	ldr	r0, [pc, #68]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d82:	f008 fa39 	bl	800b1f8 <HAL_UART_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002d8c:	f7ff fa50 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d90:	2100      	movs	r1, #0
 8002d92:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002d94:	f009 fcfb 	bl	800c78e <HAL_UARTEx_SetTxFifoThreshold>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f7ff fa47 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da2:	2100      	movs	r1, #0
 8002da4:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002da6:	f009 fd30 	bl	800c80a <HAL_UARTEx_SetRxFifoThreshold>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002db0:	f7ff fa3e 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002db4:	4804      	ldr	r0, [pc, #16]	@ (8002dc8 <MX_USART2_UART_Init+0x94>)
 8002db6:	f009 fcb1 	bl	800c71c <HAL_UARTEx_DisableFifoMode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002dc0:	f7ff fa36 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000594 	.word	0x20000594
 8002dcc:	40004400 	.word	0x40004400

08002dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0c0      	sub	sp, #256	@ 0x100
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	22d0      	movs	r2, #208	@ 0xd0
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f009 ffa1 	bl	800cd38 <memset>
  if(uartHandle->Instance==USART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	@ (8002fc4 <HAL_UART_MspInit+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f040 8091 	bne.w	8002f24 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e02:	f04f 0201 	mov.w	r2, #1
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e12:	f107 0318 	add.w	r3, r7, #24
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 f9b2 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002e22:	f7ff fa05 	bl	8002230 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e26:	4b68      	ldr	r3, [pc, #416]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e2c:	4a66      	ldr	r2, [pc, #408]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e32:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e36:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e44:	4b60      	ldr	r3, [pc, #384]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e54:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e86:	4619      	mov	r1, r3
 8002e88:	4850      	ldr	r0, [pc, #320]	@ (8002fcc <HAL_UART_MspInit+0x1fc>)
 8002e8a:	f001 ff19 	bl	8004cc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002e8e:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002e90:	4a50      	ldr	r2, [pc, #320]	@ (8002fd4 <HAL_UART_MspInit+0x204>)
 8002e92:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8002e94:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002e96:	2215      	movs	r2, #21
 8002e98:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002eac:	4b48      	ldr	r3, [pc, #288]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002eb2:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002eb8:	4b45      	ldr	r3, [pc, #276]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002ebe:	4b44      	ldr	r3, [pc, #272]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002ec4:	4b42      	ldr	r3, [pc, #264]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002eca:	4b41      	ldr	r3, [pc, #260]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002edc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002ee2:	483b      	ldr	r0, [pc, #236]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ee4:	f000 fb18 	bl	8003518 <HAL_DMA_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8002eee:	f7ff f99f 	bl	8002230 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002efa:	4a35      	ldr	r2, [pc, #212]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f00:	2110      	movs	r1, #16
 8002f02:	4833      	ldr	r0, [pc, #204]	@ (8002fd0 <HAL_UART_MspInit+0x200>)
 8002f04:	f000 fe9a 	bl	8003c3c <HAL_DMA_ConfigChannelAttributes>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002f0e:	f7ff f98f 	bl	8002230 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2101      	movs	r1, #1
 8002f16:	203a      	movs	r0, #58	@ 0x3a
 8002f18:	f000 fa26 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f1c:	203a      	movs	r0, #58	@ 0x3a
 8002f1e:	f000 fa3d 	bl	800339c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f22:	e049      	b.n	8002fb8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <HAL_UART_MspInit+0x208>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d144      	bne.n	8002fb8 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f2e:	f04f 0202 	mov.w	r2, #2
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f3e:	f107 0318 	add.w	r3, r7, #24
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 f91c 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002f4e:	f7ff f96f 	bl	8002230 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f52:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f58:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f62:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f76:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_UART_MspInit+0x1f8>)
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f8e:	230c      	movs	r3, #12
 8002f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480a      	ldr	r0, [pc, #40]	@ (8002fdc <HAL_UART_MspInit+0x20c>)
 8002fb4:	f001 fe84 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002fb8:	bf00      	nop
 8002fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	44020c00 	.word	0x44020c00
 8002fcc:	42020400 	.word	0x42020400
 8002fd0:	20000628 	.word	0x20000628
 8002fd4:	40020050 	.word	0x40020050
 8002fd8:	40004400 	.word	0x40004400
 8002fdc:	42020000 	.word	0x42020000

08002fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fe0:	480d      	ldr	r0, [pc, #52]	@ (8003018 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fe2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe4:	f7ff fa78 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	@ (800301c <LoopForever+0x6>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	@ (8003020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <LoopForever+0xe>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	@ (800302c <LoopForever+0x16>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800300e:	f009 fee7 	bl	800cde0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003012:	f7fe feef 	bl	8001df4 <main>

08003016 <LoopForever>:

LoopForever:
    b LoopForever
 8003016:	e7fe      	b.n	8003016 <LoopForever>
  ldr   r0, =_estack
 8003018:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003020:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8003024:	0800da20 	.word	0x0800da20
  ldr r2, =_sbss
 8003028:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 800302c:	200007f0 	.word	0x200007f0

08003030 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC1_IRQHandler>
	...

08003034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003038:	2003      	movs	r0, #3
 800303a:	f000 f98a 	bl	8003352 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800303e:	f002 ff15 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <HAL_Init+0x44>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_Init+0x48>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <HAL_Init+0x4c>)
 8003056:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003058:	2004      	movs	r0, #4
 800305a:	f000 f9cf 	bl	80033fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305e:	2000      	movs	r0, #0
 8003060:	f000 f810 	bl	8003084 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e002      	b.n	8003074 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800306e:	f7ff f8eb 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	44020c00 	.word	0x44020c00
 800307c:	0800d98c 	.word	0x0800d98c
 8003080:	200000dc 	.word	0x200000dc

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003090:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <HAL_InitTick+0xdc>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e05c      	b.n	8003156 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_InitTick+0xe0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d10c      	bne.n	80030c2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80030a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_InitTick+0xe4>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003160 <HAL_InitTick+0xdc>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e037      	b.n	8003132 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80030c2:	f000 f9f3 	bl	80034ac <HAL_SYSTICK_GetCLKSourceConfig>
 80030c6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d023      	beq.n	8003116 <HAL_InitTick+0x92>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d82d      	bhi.n	8003130 <HAL_InitTick+0xac>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_InitTick+0x5e>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00d      	beq.n	80030fc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80030e0:	e026      	b.n	8003130 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80030e2:	4b21      	ldr	r3, [pc, #132]	@ (8003168 <HAL_InitTick+0xe4>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003160 <HAL_InitTick+0xdc>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80030f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	60fb      	str	r3, [r7, #12]
        break;
 80030fa:	e01a      	b.n	8003132 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80030fc:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <HAL_InitTick+0xdc>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003106:	fbb3 f3f2 	udiv	r3, r3, r2
 800310a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
        break;
 8003114:	e00d      	b.n	8003132 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003116:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <HAL_InitTick+0xdc>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003120:	fbb3 f3f2 	udiv	r3, r3, r2
 8003124:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	60fb      	str	r3, [r7, #12]
        break;
 800312e:	e000      	b.n	8003132 <HAL_InitTick+0xae>
        break;
 8003130:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f940 	bl	80033b8 <HAL_SYSTICK_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e009      	b.n	8003156 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003142:	2200      	movs	r2, #0
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	f000 f90d 	bl	8003368 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_InitTick+0xe8>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200000e4 	.word	0x200000e4
 8003164:	e000e010 	.word	0xe000e010
 8003168:	200000dc 	.word	0x200000dc
 800316c:	200000e0 	.word	0x200000e0

08003170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_IncTick+0x20>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_IncTick+0x24>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4413      	add	r3, r2
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <HAL_IncTick+0x24>)
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	200000e4 	.word	0x200000e4
 8003194:	200006a0 	.word	0x200006a0

08003198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return uwTick;
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <HAL_GetTick+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200006a0 	.word	0x200006a0

080031b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff ffee 	bl	8003198 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d005      	beq.n	80031d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <HAL_Delay+0x44>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031d6:	bf00      	nop
 80031d8:	f7ff ffde 	bl	8003198 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d8f7      	bhi.n	80031d8 <HAL_Delay+0x28>
  {
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200000e4 	.word	0x200000e4

080031f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	@ (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003244:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <__NVIC_GetPriorityGrouping+0x18>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 0307 	and.w	r3, r3, #7
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4907      	ldr	r1, [pc, #28]	@ (8003294 <__NVIC_EnableIRQ+0x38>)
 8003276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	@ (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	@ (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff4c 	bl	80031f8 <__NVIC_SetPriorityGrouping>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003376:	f7ff ff63 	bl	8003240 <__NVIC_GetPriorityGrouping>
 800337a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7ff ffb3 	bl	80032ec <NVIC_EncodePriority>
 8003386:	4602      	mov	r2, r0
 8003388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff82 	bl	8003298 <__NVIC_SetPriority>
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff56 	bl	800325c <__NVIC_EnableIRQ>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c8:	d301      	bcc.n	80033ce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00d      	b.n	80033ea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_SYSTICK_Config+0x40>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_SYSTICK_Config+0x40>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HAL_SYSTICK_Config+0x40>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a05      	ldr	r2, [pc, #20]	@ (80033f8 <HAL_SYSTICK_Config+0x40>)
 80033e2:	f043 0303 	orr.w	r3, r3, #3
 80033e6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e010 	.word	0xe000e010

080033fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d844      	bhi.n	8003494 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800340a:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003433 	.word	0x08003433
 8003414:	08003451 	.word	0x08003451
 8003418:	08003473 	.word	0x08003473
 800341c:	08003495 	.word	0x08003495
 8003420:	08003425 	.word	0x08003425
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6013      	str	r3, [r2, #0]
      break;
 8003430:	e031      	b.n	8003496 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003432:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003444:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003446:	f023 030c 	bic.w	r3, r3, #12
 800344a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800344e:	e022      	b.n	8003496 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800345c:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800345e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003462:	f023 030c 	bic.w	r3, r3, #12
 8003466:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003470:	e011      	b.n	8003496 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003472:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003484:	f023 030c 	bic.w	r3, r3, #12
 8003488:	4a07      	ldr	r2, [pc, #28]	@ (80034a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003492:	e000      	b.n	8003496 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003494:	bf00      	nop
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010
 80034a8:	44020c00 	.word	0x44020c00

080034ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80034be:	2304      	movs	r3, #4
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	e01e      	b.n	8003502 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80034c4:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80034c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d00f      	beq.n	80034f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d80f      	bhi.n	80034fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d003      	beq.n	80034f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80034e8:	e008      	b.n	80034fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
        break;
 80034ee:	e008      	b.n	8003502 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80034f0:	2301      	movs	r3, #1
 80034f2:	607b      	str	r3, [r7, #4]
        break;
 80034f4:	e005      	b.n	8003502 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80034f6:	2302      	movs	r3, #2
 80034f8:	607b      	str	r3, [r7, #4]
        break;
 80034fa:	e002      	b.n	8003502 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80034fc:	2300      	movs	r3, #0
 80034fe:	607b      	str	r3, [r7, #4]
        break;
 8003500:	bf00      	nop
    }
  }
  return systick_source;
 8003502:	687b      	ldr	r3, [r7, #4]
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e010 	.word	0xe000e010
 8003514:	44020c00 	.word	0x44020c00

08003518 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fe3a 	bl	8003198 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0db      	b.n	80036e8 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6e      	ldr	r2, [pc, #440]	@ (80036f0 <HAL_DMA_Init+0x1d8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	f000 809f 	beq.w	800367a <HAL_DMA_Init+0x162>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6c      	ldr	r2, [pc, #432]	@ (80036f4 <HAL_DMA_Init+0x1dc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f000 8099 	beq.w	800367a <HAL_DMA_Init+0x162>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6a      	ldr	r2, [pc, #424]	@ (80036f8 <HAL_DMA_Init+0x1e0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	f000 8093 	beq.w	800367a <HAL_DMA_Init+0x162>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a68      	ldr	r2, [pc, #416]	@ (80036fc <HAL_DMA_Init+0x1e4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	f000 808d 	beq.w	800367a <HAL_DMA_Init+0x162>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a66      	ldr	r2, [pc, #408]	@ (8003700 <HAL_DMA_Init+0x1e8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	f000 8087 	beq.w	800367a <HAL_DMA_Init+0x162>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a64      	ldr	r2, [pc, #400]	@ (8003704 <HAL_DMA_Init+0x1ec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	f000 8081 	beq.w	800367a <HAL_DMA_Init+0x162>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a62      	ldr	r2, [pc, #392]	@ (8003708 <HAL_DMA_Init+0x1f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d07b      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a61      	ldr	r2, [pc, #388]	@ (800370c <HAL_DMA_Init+0x1f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d076      	beq.n	800367a <HAL_DMA_Init+0x162>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5f      	ldr	r2, [pc, #380]	@ (8003710 <HAL_DMA_Init+0x1f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d071      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5e      	ldr	r2, [pc, #376]	@ (8003714 <HAL_DMA_Init+0x1fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d06c      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003718 <HAL_DMA_Init+0x200>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d067      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5b      	ldr	r2, [pc, #364]	@ (800371c <HAL_DMA_Init+0x204>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d062      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a59      	ldr	r2, [pc, #356]	@ (8003720 <HAL_DMA_Init+0x208>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d05d      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a58      	ldr	r2, [pc, #352]	@ (8003724 <HAL_DMA_Init+0x20c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d058      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a56      	ldr	r2, [pc, #344]	@ (8003728 <HAL_DMA_Init+0x210>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d053      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a55      	ldr	r2, [pc, #340]	@ (800372c <HAL_DMA_Init+0x214>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04e      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a53      	ldr	r2, [pc, #332]	@ (8003730 <HAL_DMA_Init+0x218>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d049      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_DMA_Init+0x21c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d044      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a50      	ldr	r2, [pc, #320]	@ (8003738 <HAL_DMA_Init+0x220>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d03f      	beq.n	800367a <HAL_DMA_Init+0x162>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4f      	ldr	r2, [pc, #316]	@ (800373c <HAL_DMA_Init+0x224>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03a      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4d      	ldr	r2, [pc, #308]	@ (8003740 <HAL_DMA_Init+0x228>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d035      	beq.n	800367a <HAL_DMA_Init+0x162>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4c      	ldr	r2, [pc, #304]	@ (8003744 <HAL_DMA_Init+0x22c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d030      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4a      	ldr	r2, [pc, #296]	@ (8003748 <HAL_DMA_Init+0x230>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02b      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a49      	ldr	r2, [pc, #292]	@ (800374c <HAL_DMA_Init+0x234>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d026      	beq.n	800367a <HAL_DMA_Init+0x162>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a47      	ldr	r2, [pc, #284]	@ (8003750 <HAL_DMA_Init+0x238>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d021      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a46      	ldr	r2, [pc, #280]	@ (8003754 <HAL_DMA_Init+0x23c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01c      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a44      	ldr	r2, [pc, #272]	@ (8003758 <HAL_DMA_Init+0x240>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d017      	beq.n	800367a <HAL_DMA_Init+0x162>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a43      	ldr	r2, [pc, #268]	@ (800375c <HAL_DMA_Init+0x244>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d012      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a41      	ldr	r2, [pc, #260]	@ (8003760 <HAL_DMA_Init+0x248>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00d      	beq.n	800367a <HAL_DMA_Init+0x162>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a40      	ldr	r2, [pc, #256]	@ (8003764 <HAL_DMA_Init+0x24c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d008      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3e      	ldr	r2, [pc, #248]	@ (8003768 <HAL_DMA_Init+0x250>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <HAL_DMA_Init+0x162>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3d      	ldr	r2, [pc, #244]	@ (800376c <HAL_DMA_Init+0x254>)
 8003678:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0206 	orr.w	r2, r2, #6
 8003698:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800369a:	e00f      	b.n	80036bc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800369c:	f7ff fd7c 	bl	8003198 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d908      	bls.n	80036bc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2210      	movs	r2, #16
 80036ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2203      	movs	r2, #3
 80036b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e015      	b.n	80036e8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e8      	bne.n	800369c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fb18 	bl	8003d00 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40020050 	.word	0x40020050
 80036f4:	50020050 	.word	0x50020050
 80036f8:	400200d0 	.word	0x400200d0
 80036fc:	500200d0 	.word	0x500200d0
 8003700:	40020150 	.word	0x40020150
 8003704:	50020150 	.word	0x50020150
 8003708:	400201d0 	.word	0x400201d0
 800370c:	500201d0 	.word	0x500201d0
 8003710:	40020250 	.word	0x40020250
 8003714:	50020250 	.word	0x50020250
 8003718:	400202d0 	.word	0x400202d0
 800371c:	500202d0 	.word	0x500202d0
 8003720:	40020350 	.word	0x40020350
 8003724:	50020350 	.word	0x50020350
 8003728:	400203d0 	.word	0x400203d0
 800372c:	500203d0 	.word	0x500203d0
 8003730:	40021050 	.word	0x40021050
 8003734:	50021050 	.word	0x50021050
 8003738:	400210d0 	.word	0x400210d0
 800373c:	500210d0 	.word	0x500210d0
 8003740:	40021150 	.word	0x40021150
 8003744:	50021150 	.word	0x50021150
 8003748:	400211d0 	.word	0x400211d0
 800374c:	500211d0 	.word	0x500211d0
 8003750:	40021250 	.word	0x40021250
 8003754:	50021250 	.word	0x50021250
 8003758:	400212d0 	.word	0x400212d0
 800375c:	500212d0 	.word	0x500212d0
 8003760:	40021350 	.word	0x40021350
 8003764:	50021350 	.word	0x50021350
 8003768:	400213d0 	.word	0x400213d0
 800376c:	500213d0 	.word	0x500213d0

08003770 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e04f      	b.n	8003828 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Start_IT+0x26>
 8003792:	2302      	movs	r3, #2
 8003794:	e048      	b.n	8003828 <HAL_DMA_Start_IT+0xb8>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d136      	bne.n	8003818 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa78 	bl	8003cb4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80037d2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ea:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003802:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e007      	b.n	8003828 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003838:	f7ff fcae 	bl	8003198 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e06b      	b.n	8003920 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e05c      	b.n	8003920 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800387e:	e020      	b.n	80038c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003880:	f7ff fc8a 	bl	8003198 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b05      	cmp	r3, #5
 800388c:	d919      	bls.n	80038c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f043 0210 	orr.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b2:	2201      	movs	r2, #1
 80038b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e02e      	b.n	8003920 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0d7      	beq.n	8003880 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0202 	orr.w	r2, r2, #2
 80038de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80038f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	2201      	movs	r2, #1
 800390c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e019      	b.n	800396e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e00e      	b.n	800396e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800398a:	f023 030f 	bic.w	r3, r3, #15
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	3b50      	subs	r3, #80	@ 0x50
 800399a:	09db      	lsrs	r3, r3, #7
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2201      	movs	r2, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 813b 	beq.w	8003c30 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d011      	beq.n	80039ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d011      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a10:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d011      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a42:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d011      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a74:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	f043 0208 	orr.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aa6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04c      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d045      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d12e      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0202 	orr.w	r2, r2, #2
 8003b08:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	2201      	movs	r2, #1
 8003b24:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d07a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
        }

        return;
 8003b46:	e075      	b.n	8003c34 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d039      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba8:	2201      	movs	r2, #1
 8003baa:	731a      	strb	r2, [r3, #12]
 8003bac:	e008      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003bc8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d025      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0202 	orr.w	r2, r2, #2
 8003bf8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c12:	2201      	movs	r2, #1
 8003c14:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
 8003c2e:	e002      	b.n	8003c36 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003c34:	bf00      	nop
    }
  }
}
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e02b      	b.n	8003ca8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003c58:	f023 030f 	bic.w	r3, r3, #15
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	3b50      	subs	r3, #80	@ 0x50
 8003c68:	09db      	lsrs	r3, r3, #7
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2201      	movs	r2, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f003 0311 	and.w	r3, r3, #17
 8003c86:	2b11      	cmp	r3, #17
 8003c88:	d106      	bne.n	8003c98 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e006      	b.n	8003ca6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	b291      	uxth	r1, r2
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003ce0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a53      	ldr	r2, [pc, #332]	@ (8003e8c <DMA_Init+0x18c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	f000 80a0 	beq.w	8003e86 <DMA_Init+0x186>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a51      	ldr	r2, [pc, #324]	@ (8003e90 <DMA_Init+0x190>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f000 809a 	beq.w	8003e86 <DMA_Init+0x186>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a4f      	ldr	r2, [pc, #316]	@ (8003e94 <DMA_Init+0x194>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f000 8094 	beq.w	8003e86 <DMA_Init+0x186>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <DMA_Init+0x198>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f000 808e 	beq.w	8003e86 <DMA_Init+0x186>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4b      	ldr	r2, [pc, #300]	@ (8003e9c <DMA_Init+0x19c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	f000 8088 	beq.w	8003e86 <DMA_Init+0x186>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a49      	ldr	r2, [pc, #292]	@ (8003ea0 <DMA_Init+0x1a0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	f000 8082 	beq.w	8003e86 <DMA_Init+0x186>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a47      	ldr	r2, [pc, #284]	@ (8003ea4 <DMA_Init+0x1a4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d07c      	beq.n	8003e86 <DMA_Init+0x186>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a45      	ldr	r2, [pc, #276]	@ (8003ea8 <DMA_Init+0x1a8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d077      	beq.n	8003e86 <DMA_Init+0x186>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a44      	ldr	r2, [pc, #272]	@ (8003eac <DMA_Init+0x1ac>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d072      	beq.n	8003e86 <DMA_Init+0x186>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a42      	ldr	r2, [pc, #264]	@ (8003eb0 <DMA_Init+0x1b0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d06d      	beq.n	8003e86 <DMA_Init+0x186>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a41      	ldr	r2, [pc, #260]	@ (8003eb4 <DMA_Init+0x1b4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d068      	beq.n	8003e86 <DMA_Init+0x186>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb8 <DMA_Init+0x1b8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d063      	beq.n	8003e86 <DMA_Init+0x186>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ebc <DMA_Init+0x1bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d05e      	beq.n	8003e86 <DMA_Init+0x186>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec0 <DMA_Init+0x1c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d059      	beq.n	8003e86 <DMA_Init+0x186>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec4 <DMA_Init+0x1c4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d054      	beq.n	8003e86 <DMA_Init+0x186>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a39      	ldr	r2, [pc, #228]	@ (8003ec8 <DMA_Init+0x1c8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d04f      	beq.n	8003e86 <DMA_Init+0x186>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a38      	ldr	r2, [pc, #224]	@ (8003ecc <DMA_Init+0x1cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d04a      	beq.n	8003e86 <DMA_Init+0x186>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a36      	ldr	r2, [pc, #216]	@ (8003ed0 <DMA_Init+0x1d0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d045      	beq.n	8003e86 <DMA_Init+0x186>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a35      	ldr	r2, [pc, #212]	@ (8003ed4 <DMA_Init+0x1d4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d040      	beq.n	8003e86 <DMA_Init+0x186>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a33      	ldr	r2, [pc, #204]	@ (8003ed8 <DMA_Init+0x1d8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d03b      	beq.n	8003e86 <DMA_Init+0x186>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a32      	ldr	r2, [pc, #200]	@ (8003edc <DMA_Init+0x1dc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d036      	beq.n	8003e86 <DMA_Init+0x186>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a30      	ldr	r2, [pc, #192]	@ (8003ee0 <DMA_Init+0x1e0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d031      	beq.n	8003e86 <DMA_Init+0x186>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee4 <DMA_Init+0x1e4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d02c      	beq.n	8003e86 <DMA_Init+0x186>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee8 <DMA_Init+0x1e8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d027      	beq.n	8003e86 <DMA_Init+0x186>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003eec <DMA_Init+0x1ec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d022      	beq.n	8003e86 <DMA_Init+0x186>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef0 <DMA_Init+0x1f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01d      	beq.n	8003e86 <DMA_Init+0x186>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a29      	ldr	r2, [pc, #164]	@ (8003ef4 <DMA_Init+0x1f4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d018      	beq.n	8003e86 <DMA_Init+0x186>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <DMA_Init+0x1f8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <DMA_Init+0x186>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <DMA_Init+0x1fc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00e      	beq.n	8003e86 <DMA_Init+0x186>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a24      	ldr	r2, [pc, #144]	@ (8003f00 <DMA_Init+0x200>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d009      	beq.n	8003e86 <DMA_Init+0x186>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a23      	ldr	r2, [pc, #140]	@ (8003f04 <DMA_Init+0x204>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <DMA_Init+0x186>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a21      	ldr	r2, [pc, #132]	@ (8003f08 <DMA_Init+0x208>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d142      	bne.n	8003f0c <DMA_Init+0x20c>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <DMA_Init+0x20e>
 8003e8a:	bf00      	nop
 8003e8c:	40020050 	.word	0x40020050
 8003e90:	50020050 	.word	0x50020050
 8003e94:	400200d0 	.word	0x400200d0
 8003e98:	500200d0 	.word	0x500200d0
 8003e9c:	40020150 	.word	0x40020150
 8003ea0:	50020150 	.word	0x50020150
 8003ea4:	400201d0 	.word	0x400201d0
 8003ea8:	500201d0 	.word	0x500201d0
 8003eac:	40020250 	.word	0x40020250
 8003eb0:	50020250 	.word	0x50020250
 8003eb4:	400202d0 	.word	0x400202d0
 8003eb8:	500202d0 	.word	0x500202d0
 8003ebc:	40020350 	.word	0x40020350
 8003ec0:	50020350 	.word	0x50020350
 8003ec4:	400203d0 	.word	0x400203d0
 8003ec8:	500203d0 	.word	0x500203d0
 8003ecc:	40021050 	.word	0x40021050
 8003ed0:	50021050 	.word	0x50021050
 8003ed4:	400210d0 	.word	0x400210d0
 8003ed8:	500210d0 	.word	0x500210d0
 8003edc:	40021150 	.word	0x40021150
 8003ee0:	50021150 	.word	0x50021150
 8003ee4:	400211d0 	.word	0x400211d0
 8003ee8:	500211d0 	.word	0x500211d0
 8003eec:	40021250 	.word	0x40021250
 8003ef0:	50021250 	.word	0x50021250
 8003ef4:	400212d0 	.word	0x400212d0
 8003ef8:	500212d0 	.word	0x500212d0
 8003efc:	40021350 	.word	0x40021350
 8003f00:	50021350 	.word	0x50021350
 8003f04:	400213d0 	.word	0x400213d0
 8003f08:	500213d0 	.word	0x500213d0
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d012      	beq.n	8003f38 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003f22:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003f30:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f68:	f040 80b0 	bne.w	80040cc <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a84      	ldr	r2, [pc, #528]	@ (8004184 <DMA_Init+0x484>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f000 80a0 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a82      	ldr	r2, [pc, #520]	@ (8004188 <DMA_Init+0x488>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	f000 809a 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a80      	ldr	r2, [pc, #512]	@ (800418c <DMA_Init+0x48c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f000 8094 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7e      	ldr	r2, [pc, #504]	@ (8004190 <DMA_Init+0x490>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f000 808e 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8004194 <DMA_Init+0x494>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f000 8088 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a7a      	ldr	r2, [pc, #488]	@ (8004198 <DMA_Init+0x498>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	f000 8082 	beq.w	80040b8 <DMA_Init+0x3b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a78      	ldr	r2, [pc, #480]	@ (800419c <DMA_Init+0x49c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d07c      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a77      	ldr	r2, [pc, #476]	@ (80041a0 <DMA_Init+0x4a0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d077      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <DMA_Init+0x4a4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d072      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a74      	ldr	r2, [pc, #464]	@ (80041a8 <DMA_Init+0x4a8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d06d      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a72      	ldr	r2, [pc, #456]	@ (80041ac <DMA_Init+0x4ac>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d068      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a71      	ldr	r2, [pc, #452]	@ (80041b0 <DMA_Init+0x4b0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d063      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6f      	ldr	r2, [pc, #444]	@ (80041b4 <DMA_Init+0x4b4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d05e      	beq.n	80040b8 <DMA_Init+0x3b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <DMA_Init+0x4b8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d059      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6c      	ldr	r2, [pc, #432]	@ (80041bc <DMA_Init+0x4bc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d054      	beq.n	80040b8 <DMA_Init+0x3b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6b      	ldr	r2, [pc, #428]	@ (80041c0 <DMA_Init+0x4c0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d04f      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a69      	ldr	r2, [pc, #420]	@ (80041c4 <DMA_Init+0x4c4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04a      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a68      	ldr	r2, [pc, #416]	@ (80041c8 <DMA_Init+0x4c8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d045      	beq.n	80040b8 <DMA_Init+0x3b8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a66      	ldr	r2, [pc, #408]	@ (80041cc <DMA_Init+0x4cc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d040      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a65      	ldr	r2, [pc, #404]	@ (80041d0 <DMA_Init+0x4d0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d03b      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a63      	ldr	r2, [pc, #396]	@ (80041d4 <DMA_Init+0x4d4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d036      	beq.n	80040b8 <DMA_Init+0x3b8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a62      	ldr	r2, [pc, #392]	@ (80041d8 <DMA_Init+0x4d8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d031      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a60      	ldr	r2, [pc, #384]	@ (80041dc <DMA_Init+0x4dc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02c      	beq.n	80040b8 <DMA_Init+0x3b8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5f      	ldr	r2, [pc, #380]	@ (80041e0 <DMA_Init+0x4e0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d027      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5d      	ldr	r2, [pc, #372]	@ (80041e4 <DMA_Init+0x4e4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5c      	ldr	r2, [pc, #368]	@ (80041e8 <DMA_Init+0x4e8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d01d      	beq.n	80040b8 <DMA_Init+0x3b8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5a      	ldr	r2, [pc, #360]	@ (80041ec <DMA_Init+0x4ec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a59      	ldr	r2, [pc, #356]	@ (80041f0 <DMA_Init+0x4f0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <DMA_Init+0x3b8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a57      	ldr	r2, [pc, #348]	@ (80041f4 <DMA_Init+0x4f4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <DMA_Init+0x3b8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a56      	ldr	r2, [pc, #344]	@ (80041f8 <DMA_Init+0x4f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <DMA_Init+0x3b8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a54      	ldr	r2, [pc, #336]	@ (80041fc <DMA_Init+0x4fc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <DMA_Init+0x3b8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a53      	ldr	r2, [pc, #332]	@ (8004200 <DMA_Init+0x500>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <DMA_Init+0x3bc>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <DMA_Init+0x3be>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e008      	b.n	80040de <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d4:	d103      	bne.n	80040de <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040dc:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ee:	4b45      	ldr	r3, [pc, #276]	@ (8004204 <DMA_Init+0x504>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <DMA_Init+0x4b4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <DMA_Init+0x454>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a29      	ldr	r2, [pc, #164]	@ (80041b8 <DMA_Init+0x4b8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <DMA_Init+0x454>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <DMA_Init+0x4bc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <DMA_Init+0x454>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <DMA_Init+0x4c0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <DMA_Init+0x454>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a30      	ldr	r2, [pc, #192]	@ (80041f4 <DMA_Init+0x4f4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <DMA_Init+0x454>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2f      	ldr	r2, [pc, #188]	@ (80041f8 <DMA_Init+0x4f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <DMA_Init+0x454>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2d      	ldr	r2, [pc, #180]	@ (80041fc <DMA_Init+0x4fc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <DMA_Init+0x454>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <DMA_Init+0x500>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <DMA_Init+0x458>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <DMA_Init+0x45a>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40020050 	.word	0x40020050
 8004188:	50020050 	.word	0x50020050
 800418c:	400200d0 	.word	0x400200d0
 8004190:	500200d0 	.word	0x500200d0
 8004194:	40020150 	.word	0x40020150
 8004198:	50020150 	.word	0x50020150
 800419c:	400201d0 	.word	0x400201d0
 80041a0:	500201d0 	.word	0x500201d0
 80041a4:	40020250 	.word	0x40020250
 80041a8:	50020250 	.word	0x50020250
 80041ac:	400202d0 	.word	0x400202d0
 80041b0:	500202d0 	.word	0x500202d0
 80041b4:	40020350 	.word	0x40020350
 80041b8:	50020350 	.word	0x50020350
 80041bc:	400203d0 	.word	0x400203d0
 80041c0:	500203d0 	.word	0x500203d0
 80041c4:	40021050 	.word	0x40021050
 80041c8:	50021050 	.word	0x50021050
 80041cc:	400210d0 	.word	0x400210d0
 80041d0:	500210d0 	.word	0x500210d0
 80041d4:	40021150 	.word	0x40021150
 80041d8:	50021150 	.word	0x50021150
 80041dc:	400211d0 	.word	0x400211d0
 80041e0:	500211d0 	.word	0x500211d0
 80041e4:	40021250 	.word	0x40021250
 80041e8:	50021250 	.word	0x50021250
 80041ec:	400212d0 	.word	0x400212d0
 80041f0:	500212d0 	.word	0x500212d0
 80041f4:	40021350 	.word	0x40021350
 80041f8:	50021350 	.word	0x50021350
 80041fc:	400213d0 	.word	0x400213d0
 8004200:	500213d0 	.word	0x500213d0
 8004204:	3cc02100 	.word	0x3cc02100

08004208 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_DMAEx_List_Start_IT+0x16>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e082      	b.n	8004328 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004228:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004234:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_DMAEx_List_Start_IT+0x40>
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d16a      	bne.n	8004318 <HAL_DMAEx_List_Start_IT+0x110>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d067      	beq.n	8004318 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d157      	bne.n	8004304 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_DMAEx_List_Start_IT+0x5a>
 800425e:	2302      	movs	r3, #2
 8004260:	e062      	b.n	8004328 <HAL_DMAEx_List_Start_IT+0x120>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004276:	2202      	movs	r2, #2
 8004278:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004296:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ae:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f107 010c 	add.w	r1, r7, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f82b 	bl	8004330 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	0c0b      	lsrs	r3, r1, #16
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042f8:	4013      	ands	r3, r2
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e007      	b.n	8004328 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2240      	movs	r2, #64	@ 0x40
 800431c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004352:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00f      	beq.n	800437a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004360:	e00b      	b.n	800437a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800436c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2205      	movs	r2, #5
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	fe010000 	.word	0xfe010000
 800438c:	f8010000 	.word	0xf8010000

08004390 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e147      	b.n	8004632 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fdaa 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043cc:	f7fe fee4 	bl	8003198 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043d2:	e012      	b.n	80043fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043d4:	f7fe fee0 	bl	8003198 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d90b      	bls.n	80043fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e11b      	b.n	8004632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b08      	cmp	r3, #8
 8004406:	d0e5      	beq.n	80043d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004418:	f7fe febe 	bl	8003198 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800441e:	e012      	b.n	8004446 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004420:	f7fe feba 	bl	8003198 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b0a      	cmp	r3, #10
 800442c:	d90b      	bls.n	8004446 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0f5      	b.n	8004632 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0e5      	beq.n	8004420 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0202 	orr.w	r2, r2, #2
 8004462:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a74      	ldr	r2, [pc, #464]	@ (800463c <HAL_FDCAN_Init+0x2ac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d103      	bne.n	8004476 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800446e:	4a74      	ldr	r2, [pc, #464]	@ (8004640 <HAL_FDCAN_Init+0x2b0>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7c1b      	ldrb	r3, [r3, #16]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800448c:	619a      	str	r2, [r3, #24]
 800448e:	e007      	b.n	80044a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800449e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7c5b      	ldrb	r3, [r3, #17]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d108      	bne.n	80044ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	e007      	b.n	80044ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7c9b      	ldrb	r3, [r3, #18]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d108      	bne.n	80044e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044e0:	619a      	str	r2, [r3, #24]
 80044e2:	e007      	b.n	80044f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004518:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0210 	bic.w	r2, r2, #16
 8004528:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d108      	bne.n	8004544 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0204 	orr.w	r2, r2, #4
 8004540:	619a      	str	r2, [r3, #24]
 8004542:	e02c      	b.n	800459e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d028      	beq.n	800459e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d01c      	beq.n	800458e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004562:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0210 	orr.w	r2, r2, #16
 8004572:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d110      	bne.n	800459e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0220 	orr.w	r2, r2, #32
 800458a:	619a      	str	r2, [r3, #24]
 800458c:	e007      	b.n	800459e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80045b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	3b01      	subs	r3, #1
 80045c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d2:	d115      	bne.n	8004600 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	3b01      	subs	r3, #1
 80045e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80045e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	3b01      	subs	r3, #1
 80045ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80045ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	3b01      	subs	r3, #1
 80045f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80045fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80045fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa74 	bl	8004b04 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	4000a400 	.word	0x4000a400
 8004640:	4000a500 	.word	0x4000a500

08004644 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004654:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d002      	beq.n	8004662 <HAL_FDCAN_ConfigFilter+0x1e>
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d13d      	bne.n	80046de <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004676:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800467e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e01d      	b.n	80046da <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	075a      	lsls	r2, r3, #29
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	079a      	lsls	r2, r3, #30
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3304      	adds	r3, #4
 80046d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e006      	b.n	80046ec <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d110      	bne.n	800472e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e006      	b.n	800473c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d12c      	bne.n	80047ba <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004774:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e023      	b.n	80047c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa16 	bl	8004bc8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80047ac:	2201      	movs	r2, #1
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	409a      	lsls	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e006      	b.n	80047c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047be:	f043 0208 	orr.w	r2, r3, #8
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	@ 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047de:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ec:	4013      	ands	r3, r2
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004804:	4013      	ands	r3, r2
 8004806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	4013      	ands	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004826:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800482a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	4013      	ands	r3, r2
 8004836:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004842:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	4013      	ands	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f921 	bl	8004ac4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d019      	beq.n	80048c0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d014      	beq.n	80048c0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800489e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8e3 	bl	8004a86 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80048c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80048ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8a2 	bl	8004a1a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80048e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8a2 	bl	8004a30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80048fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8a2 	bl	8004a46 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800491e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f89b 	bl	8004a5c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492c:	2b00      	cmp	r3, #0
 800492e:	d018      	beq.n	8004962 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d013      	beq.n	8004962 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004942:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f887 	bl	8004a70 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800497e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f88b 	bl	8004a9c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f883 	bl	8004ab0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00f      	beq.n	80049d4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80049c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f881 	bl	8004aec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f863 	bl	8004ad8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004a12:	bf00      	nop
 8004a14:	3730      	adds	r7, #48	@ 0x30
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004b0e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d103      	bne.n	8004b22 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004b20:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b30:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b56:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	061a      	lsls	r2, r3, #24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e005      	b.n	8004ba4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3f3      	bcc.n	8004b98 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	4000ac00 	.word	0x4000ac00
 8004bc4:	4000a800 	.word	0x4000a800

08004bc8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004be6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	e00a      	b.n	8004c0a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004bfc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004c02:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c08:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c14:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004c1a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004c20:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	3304      	adds	r3, #4
 8004c48:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	3304      	adds	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e020      	b.n	8004c9e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3303      	adds	r3, #3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	440b      	add	r3, r1
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c74:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	440b      	add	r3, r1
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004c82:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	440a      	add	r2, r1
 8004c8a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004c8c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3304      	adds	r3, #4
 8004c96:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <FDCAN_CopyMessageToRAM+0xf4>)
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d3d6      	bcc.n	8004c5c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	3724      	adds	r7, #36	@ 0x24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	0800d9a4 	.word	0x0800d9a4

08004cc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cce:	e136      	b.n	8004f3e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8128 	beq.w	8004f38 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x38>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b12      	cmp	r3, #18
 8004cf6:	d125      	bne.n	8004d44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3208      	adds	r2, #8
 8004d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	220f      	movs	r2, #15
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	08da      	lsrs	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3208      	adds	r2, #8
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2203      	movs	r2, #3
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0203 	and.w	r2, r3, #3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d00b      	beq.n	8004d98 <HAL_GPIO_Init+0xd8>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d007      	beq.n	8004d98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d8c:	2b11      	cmp	r3, #17
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b12      	cmp	r3, #18
 8004d96:	d130      	bne.n	8004dfa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2203      	movs	r2, #3
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4013      	ands	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dce:	2201      	movs	r2, #1
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	f003 0201 	and.w	r2, r3, #1
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d017      	beq.n	8004e32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4013      	ands	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d07c      	beq.n	8004f38 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004e3e:	4a47      	ldr	r2, [pc, #284]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3318      	adds	r3, #24
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	220f      	movs	r2, #15
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0a9a      	lsrs	r2, r3, #10
 8004e66:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <HAL_GPIO_Init+0x2a0>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	f002 0203 	and.w	r2, r2, #3
 8004e70:	00d2      	lsls	r2, r2, #3
 8004e72:	4093      	lsls	r3, r2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004e7a:	4938      	ldr	r1, [pc, #224]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3318      	adds	r3, #24
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004e88:	4b34      	ldr	r3, [pc, #208]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4013      	ands	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004eac:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004ed6:	4a21      	ldr	r2, [pc, #132]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004edc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4013      	ands	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004f02:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004f0a:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004f30:	4a0a      	ldr	r2, [pc, #40]	@ (8004f5c <HAL_GPIO_Init+0x29c>)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f47f aec1 	bne.w	8004cd0 <HAL_GPIO_Init+0x10>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	44022000 	.word	0x44022000
 8004f60:	002f7f7f 	.word	0x002f7f7f

08004f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
 8004f70:	4613      	mov	r3, r2
 8004f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f80:	e002      	b.n	8004f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4013      	ands	r3, r2
 8004fac:	041a      	lsls	r2, r3, #16
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	43d9      	mvns	r1, r3
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	619a      	str	r2, [r3, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08d      	b.n	80050f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fa26 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	@ 0x24
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	e006      	b.n	8005050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800504e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d108      	bne.n	800506a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	e007      	b.n	800507a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800508c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800509c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	d138      	bne.n	8005186 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800511e:	2302      	movs	r3, #2
 8005120:	e032      	b.n	8005188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2224      	movs	r2, #36	@ 0x24
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005150:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d139      	bne.n	800521e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e033      	b.n	8005220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	@ 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e000      	b.n	8005220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	e007      	b.n	800525a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800524a:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 0204 	bic.w	r2, r3, #4
 8005252:	4905      	ldr	r1, [pc, #20]	@ (8005268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
  }

  return status;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40030400 	.word	0x40030400

0800526c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_ICACHE_Enable+0x1c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <HAL_ICACHE_Enable+0x1c>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40030400 	.word	0x40030400

0800528c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f000 bc28 	b.w	8005af0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a0:	4b94      	ldr	r3, [pc, #592]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 0318 	and.w	r3, r3, #24
 80052a8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80052aa:	4b92      	ldr	r3, [pc, #584]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x46>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b18      	cmp	r3, #24
 80052ca:	d114      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d111      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 bc08 	b.w	8005af0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80052e0:	4b84      	ldr	r3, [pc, #528]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	4981      	ldr	r1, [pc, #516]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80052f4:	e040      	b.n	8005378 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d023      	beq.n	8005346 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052fe:	4b7d      	ldr	r3, [pc, #500]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a7c      	ldr	r2, [pc, #496]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fd ff45 	bl	8003198 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005312:	f7fd ff41 	bl	8003198 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e3e5      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005324:	4b73      	ldr	r3, [pc, #460]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005330:	4b70      	ldr	r3, [pc, #448]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	496d      	ldr	r1, [pc, #436]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005340:	4313      	orrs	r3, r2
 8005342:	618b      	str	r3, [r1, #24]
 8005344:	e018      	b.n	8005378 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005346:	4b6b      	ldr	r3, [pc, #428]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6a      	ldr	r2, [pc, #424]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800534c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fd ff21 	bl	8003198 <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800535a:	f7fd ff1d 	bl	8003198 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e3c1      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800536c:	4b61      	ldr	r3, [pc, #388]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a0 	beq.w	80054c6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b10      	cmp	r3, #16
 800538a:	d005      	beq.n	8005398 <HAL_RCC_OscConfig+0x10c>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b18      	cmp	r3, #24
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d106      	bne.n	80053a6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8092 	bne.w	80054c6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e3a4      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ae:	d106      	bne.n	80053be <HAL_RCC_OscConfig+0x132>
 80053b0:	4b50      	ldr	r3, [pc, #320]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e058      	b.n	8005470 <HAL_RCC_OscConfig+0x1e4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d112      	bne.n	80053ec <HAL_RCC_OscConfig+0x160>
 80053c6:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a4a      	ldr	r2, [pc, #296]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b48      	ldr	r3, [pc, #288]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a47      	ldr	r2, [pc, #284]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b45      	ldr	r3, [pc, #276]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a44      	ldr	r2, [pc, #272]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e041      	b.n	8005470 <HAL_RCC_OscConfig+0x1e4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053f4:	d112      	bne.n	800541c <HAL_RCC_OscConfig+0x190>
 80053f6:	4b3f      	ldr	r3, [pc, #252]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80053fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4b3c      	ldr	r3, [pc, #240]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3b      	ldr	r2, [pc, #236]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005408:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b39      	ldr	r3, [pc, #228]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a38      	ldr	r2, [pc, #224]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e029      	b.n	8005470 <HAL_RCC_OscConfig+0x1e4>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005424:	d112      	bne.n	800544c <HAL_RCC_OscConfig+0x1c0>
 8005426:	4b33      	ldr	r3, [pc, #204]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a32      	ldr	r2, [pc, #200]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b30      	ldr	r3, [pc, #192]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2f      	ldr	r2, [pc, #188]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b2d      	ldr	r3, [pc, #180]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e011      	b.n	8005470 <HAL_RCC_OscConfig+0x1e4>
 800544c:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a28      	ldr	r2, [pc, #160]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a25      	ldr	r2, [pc, #148]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a22      	ldr	r2, [pc, #136]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 800546a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800546e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fd fe8e 	bl	8003198 <HAL_GetTick>
 800547c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005480:	f7fd fe8a 	bl	8003198 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e32e      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005492:	4b18      	ldr	r3, [pc, #96]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x1f4>
 800549e:	e012      	b.n	80054c6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd fe7a 	bl	8003198 <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80054a8:	f7fd fe76 	bl	8003198 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	@ 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e31a      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ba:	4b0e      	ldr	r3, [pc, #56]	@ (80054f4 <HAL_RCC_OscConfig+0x268>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 809a 	beq.w	8005608 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x25a>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b18      	cmp	r3, #24
 80054de:	d149      	bne.n	8005574 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d146      	bne.n	8005574 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e2fe      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
 80054f2:	bf00      	nop
 80054f4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11c      	bne.n	8005538 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80054fe:	4b9a      	ldr	r3, [pc, #616]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0218 	and.w	r2, r3, #24
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d014      	beq.n	8005538 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800550e:	4b96      	ldr	r3, [pc, #600]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0218 	bic.w	r2, r3, #24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4993      	ldr	r1, [pc, #588]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005520:	f000 fdd0 	bl	80060c4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005524:	4b91      	ldr	r3, [pc, #580]	@ (800576c <HAL_RCC_OscConfig+0x4e0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fdab 	bl	8003084 <HAL_InitTick>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e2db      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd fe2e 	bl	8003198 <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005540:	f7fd fe2a 	bl	8003198 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e2ce      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005552:	4b85      	ldr	r3, [pc, #532]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800555e:	4b82      	ldr	r3, [pc, #520]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	497e      	ldr	r1, [pc, #504]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005572:	e049      	b.n	8005608 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02c      	beq.n	80055d6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800557c:	4b7a      	ldr	r3, [pc, #488]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 0218 	bic.w	r2, r3, #24
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	4977      	ldr	r1, [pc, #476]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800558e:	4b76      	ldr	r3, [pc, #472]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a75      	ldr	r2, [pc, #468]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fd fdfd 	bl	8003198 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80055a2:	f7fd fdf9 	bl	8003198 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e29d      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80055c0:	4b69      	ldr	r3, [pc, #420]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4966      	ldr	r1, [pc, #408]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
 80055d4:	e018      	b.n	8005608 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b64      	ldr	r3, [pc, #400]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a63      	ldr	r2, [pc, #396]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fd fdd9 	bl	8003198 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80055ea:	f7fd fdd5 	bl	8003198 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e279      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03c      	beq.n	800568e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01c      	beq.n	8005656 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800561c:	4b52      	ldr	r3, [pc, #328]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800561e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005622:	4a51      	ldr	r2, [pc, #324]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005624:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005628:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fd fdb4 	bl	8003198 <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005634:	f7fd fdb0 	bl	8003198 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e254      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005646:	4b48      	ldr	r3, [pc, #288]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800564c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <HAL_RCC_OscConfig+0x3a8>
 8005654:	e01b      	b.n	800568e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005656:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800565c:	4a42      	ldr	r2, [pc, #264]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800565e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fd fd97 	bl	8003198 <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800566e:	f7fd fd93 	bl	8003198 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e237      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005680:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1ef      	bne.n	800566e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80d2 	beq.w	8005840 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800569c:	4b34      	ldr	r3, [pc, #208]	@ (8005770 <HAL_RCC_OscConfig+0x4e4>)
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d118      	bne.n	80056da <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80056a8:	4b31      	ldr	r3, [pc, #196]	@ (8005770 <HAL_RCC_OscConfig+0x4e4>)
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <HAL_RCC_OscConfig+0x4e4>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b4:	f7fd fd70 	bl	8003198 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fd fd6c 	bl	8003198 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e210      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80056ce:	4b28      	ldr	r3, [pc, #160]	@ (8005770 <HAL_RCC_OscConfig+0x4e4>)
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d108      	bne.n	80056f4 <HAL_RCC_OscConfig+0x468>
 80056e2:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80056e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056f2:	e074      	b.n	80057de <HAL_RCC_OscConfig+0x552>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d118      	bne.n	800572e <HAL_RCC_OscConfig+0x4a2>
 80056fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 80056fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005702:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800570c:	4b16      	ldr	r3, [pc, #88]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800570e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005712:	4a15      	ldr	r2, [pc, #84]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005718:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800571e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005722:	4a11      	ldr	r2, [pc, #68]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800572c:	e057      	b.n	80057de <HAL_RCC_OscConfig+0x552>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b05      	cmp	r3, #5
 8005734:	d11e      	bne.n	8005774 <HAL_RCC_OscConfig+0x4e8>
 8005736:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800573c:	4a0a      	ldr	r2, [pc, #40]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800573e:	f043 0304 	orr.w	r3, r3, #4
 8005742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005746:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800574c:	4a06      	ldr	r2, [pc, #24]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800574e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 8005758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800575c:	4a02      	ldr	r2, [pc, #8]	@ (8005768 <HAL_RCC_OscConfig+0x4dc>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005766:	e03a      	b.n	80057de <HAL_RCC_OscConfig+0x552>
 8005768:	44020c00 	.word	0x44020c00
 800576c:	200000e0 	.word	0x200000e0
 8005770:	44020800 	.word	0x44020800
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b85      	cmp	r3, #133	@ 0x85
 800577a:	d118      	bne.n	80057ae <HAL_RCC_OscConfig+0x522>
 800577c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800577e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005782:	4aa1      	ldr	r2, [pc, #644]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800578c:	4b9e      	ldr	r3, [pc, #632]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800578e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005792:	4a9d      	ldr	r2, [pc, #628]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005798:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800579c:	4b9a      	ldr	r3, [pc, #616]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800579e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057a2:	4a99      	ldr	r2, [pc, #612]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ac:	e017      	b.n	80057de <HAL_RCC_OscConfig+0x552>
 80057ae:	4b96      	ldr	r3, [pc, #600]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057b4:	4a94      	ldr	r2, [pc, #592]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057be:	4b92      	ldr	r3, [pc, #584]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c4:	4a90      	ldr	r2, [pc, #576]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057d4:	4a8c      	ldr	r2, [pc, #560]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80057d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d016      	beq.n	8005814 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd fcd7 	bl	8003198 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fd fcd3 	bl	8003198 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e175      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005804:	4b80      	ldr	r3, [pc, #512]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0ed      	beq.n	80057ee <HAL_RCC_OscConfig+0x562>
 8005812:	e015      	b.n	8005840 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fd fcc0 	bl	8003198 <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fd fcbc 	bl	8003198 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e15e      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005832:	4b75      	ldr	r3, [pc, #468]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ed      	bne.n	800581c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d036      	beq.n	80058ba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d019      	beq.n	8005888 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005854:	4b6c      	ldr	r3, [pc, #432]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800585a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800585e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fd fc9a 	bl	8003198 <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005868:	f7fd fc96 	bl	8003198 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e13a      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800587a:	4b63      	ldr	r3, [pc, #396]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x5dc>
 8005886:	e018      	b.n	80058ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005888:	4b5f      	ldr	r3, [pc, #380]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a5e      	ldr	r2, [pc, #376]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800588e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fd fc80 	bl	8003198 <HAL_GetTick>
 8005898:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800589c:	f7fd fc7c 	bl	8003198 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e120      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058ae:	4b56      	ldr	r3, [pc, #344]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8115 	beq.w	8005aee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b18      	cmp	r3, #24
 80058c8:	f000 80af 	beq.w	8005a2a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	f040 8086 	bne.w	80059e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80058d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4b      	ldr	r2, [pc, #300]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80058dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fd fc59 	bl	8003198 <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80058ea:	f7fd fc55 	bl	8003198 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0f9      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058fc:	4b42      	ldr	r3, [pc, #264]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005908:	4b3f      	ldr	r3, [pc, #252]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005910:	f023 0303 	bic.w	r3, r3, #3
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800591c:	0212      	lsls	r2, r2, #8
 800591e:	430a      	orrs	r2, r1
 8005920:	4939      	ldr	r1, [pc, #228]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	628b      	str	r3, [r1, #40]	@ 0x28
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	3b01      	subs	r3, #1
 800592c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	3b01      	subs	r3, #1
 8005936:	025b      	lsls	r3, r3, #9
 8005938:	b29b      	uxth	r3, r3
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	3b01      	subs	r3, #1
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005956:	492c      	ldr	r1, [pc, #176]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800595c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	4a29      	ldr	r2, [pc, #164]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596c:	4a26      	ldr	r2, [pc, #152]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005972:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005978:	f043 0310 	orr.w	r3, r3, #16
 800597c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800597e:	4b22      	ldr	r3, [pc, #136]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	f023 020c 	bic.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	491f      	ldr	r1, [pc, #124]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005990:	4b1d      	ldr	r3, [pc, #116]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	f023 0220 	bic.w	r2, r3, #32
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800599c:	491a      	ldr	r1, [pc, #104]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059a2:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	4a18      	ldr	r2, [pc, #96]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80059ae:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fd fbed 	bl	8003198 <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80059c2:	f7fd fbe9 	bl	8003198 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e08d      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCC_OscConfig+0x736>
 80059e0:	e085      	b.n	8005aee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80059e2:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a08      	ldr	r2, [pc, #32]	@ (8005a08 <HAL_RCC_OscConfig+0x77c>)
 80059e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fd fbd3 	bl	8003198 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80059f6:	f7fd fbcf 	bl	8003198 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d903      	bls.n	8005a0c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e073      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
 8005a08:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ee      	bne.n	80059f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005a18:	4b37      	ldr	r3, [pc, #220]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	4a36      	ldr	r2, [pc, #216]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005a1e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	6293      	str	r3, [r2, #40]	@ 0x28
 8005a28:	e061      	b.n	8005aee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005a2a:	4b33      	ldr	r3, [pc, #204]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a30:	4b31      	ldr	r3, [pc, #196]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d031      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 0203 	and.w	r2, r3, #3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d12a      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d122      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a66:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d11a      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d111      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d108      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	0e1b      	lsrs	r3, r3, #24
 8005a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e024      	b.n	8005af0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005aa6:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d01a      	beq.n	8005aee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	4a0e      	ldr	r2, [pc, #56]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005abe:	f023 0310 	bic.w	r3, r3, #16
 8005ac2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd fb68 	bl	8003198 <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005aca:	bf00      	nop
 8005acc:	f7fd fb64 	bl	8003198 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d0f9      	beq.n	8005acc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005adc:	4a06      	ldr	r2, [pc, #24]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005ae2:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	4a04      	ldr	r2, [pc, #16]	@ (8005af8 <HAL_RCC_OscConfig+0x86c>)
 8005ae8:	f043 0310 	orr.w	r3, r3, #16
 8005aec:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	44020c00 	.word	0x44020c00

08005afc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e19e      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b10:	4b83      	ldr	r3, [pc, #524]	@ (8005d20 <HAL_RCC_ClockConfig+0x224>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d910      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	4b80      	ldr	r3, [pc, #512]	@ (8005d20 <HAL_RCC_ClockConfig+0x224>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	497e      	ldr	r1, [pc, #504]	@ (8005d20 <HAL_RCC_ClockConfig+0x224>)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d20 <HAL_RCC_ClockConfig+0x224>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e186      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	4b74      	ldr	r3, [pc, #464]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d909      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005b5e:	4b71      	ldr	r3, [pc, #452]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	496d      	ldr	r1, [pc, #436]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d012      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	4b68      	ldr	r3, [pc, #416]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d909      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005b90:	4b64      	ldr	r3, [pc, #400]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4961      	ldr	r1, [pc, #388]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d010      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d908      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005bc0:	4b58      	ldr	r3, [pc, #352]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4955      	ldr	r1, [pc, #340]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	4b50      	ldr	r3, [pc, #320]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d908      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005bee:	4b4d      	ldr	r3, [pc, #308]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 020f 	bic.w	r2, r3, #15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	494a      	ldr	r1, [pc, #296]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8093 	beq.w	8005d34 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c16:	4b43      	ldr	r3, [pc, #268]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d121      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e113      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e107      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005c46:	4b37      	ldr	r3, [pc, #220]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0fb      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0f3      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005c66:	4b2f      	ldr	r3, [pc, #188]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f023 0203 	bic.w	r2, r3, #3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	492c      	ldr	r1, [pc, #176]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c78:	f7fd fa8e 	bl	8003198 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d112      	bne.n	8005cac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fd fa86 	bl	8003198 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0d7      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c9e:	4b21      	ldr	r3, [pc, #132]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 0318 	and.w	r3, r3, #24
 8005ca6:	2b18      	cmp	r3, #24
 8005ca8:	d1ee      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x18c>
 8005caa:	e043      	b.n	8005d34 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d112      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb6:	f7fd fa6f 	bl	8003198 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0c0      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ccc:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f003 0318 	and.w	r3, r3, #24
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d1ee      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x1ba>
 8005cd8:	e02c      	b.n	8005d34 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d122      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce4:	f7fd fa58 	bl	8003198 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0a9      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005d24 <HAL_RCC_ClockConfig+0x228>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0318 	and.w	r3, r3, #24
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x1e8>
 8005d06:	e015      	b.n	8005d34 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fd fa46 	bl	8003198 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d906      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e097      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
 8005d1e:	bf00      	nop
 8005d20:	40022000 	.word	0x40022000
 8005d24:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d28:	4b4b      	ldr	r3, [pc, #300]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0318 	and.w	r3, r3, #24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e9      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d010      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	4b44      	ldr	r3, [pc, #272]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d208      	bcs.n	8005d62 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005d50:	4b41      	ldr	r3, [pc, #260]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 020f 	bic.w	r2, r3, #15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	493e      	ldr	r1, [pc, #248]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d62:	4b3e      	ldr	r3, [pc, #248]	@ (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d210      	bcs.n	8005d92 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d70:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f023 020f 	bic.w	r2, r3, #15
 8005d78:	4938      	ldr	r1, [pc, #224]	@ (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d80:	4b36      	ldr	r3, [pc, #216]	@ (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e05d      	b.n	8005e4e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d208      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005dae:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4927      	ldr	r1, [pc, #156]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	4b21      	ldr	r3, [pc, #132]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d209      	bcs.n	8005df2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005dde:	4b1e      	ldr	r3, [pc, #120]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	491a      	ldr	r1, [pc, #104]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	4b15      	ldr	r3, [pc, #84]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d209      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005e10:	4b11      	ldr	r3, [pc, #68]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	490e      	ldr	r1, [pc, #56]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e24:	f000 f822 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	490b      	ldr	r1, [pc, #44]	@ (8005e60 <HAL_RCC_ClockConfig+0x364>)
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e64 <HAL_RCC_ClockConfig+0x368>)
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <HAL_RCC_ClockConfig+0x36c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fd f91e 	bl	8003084 <HAL_InitTick>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	44020c00 	.word	0x44020c00
 8005e5c:	40022000 	.word	0x40022000
 8005e60:	0800d98c 	.word	0x0800d98c
 8005e64:	200000dc 	.word	0x200000dc
 8005e68:	200000e0 	.word	0x200000e0

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	@ 0x24
 8005e70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005e72:	4b8c      	ldr	r3, [pc, #560]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0318 	and.w	r3, r3, #24
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e7e:	4b8a      	ldr	r3, [pc, #552]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e107      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e84:	4b87      	ldr	r3, [pc, #540]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 0318 	and.w	r3, r3, #24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d112      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005e90:	4b84      	ldr	r3, [pc, #528]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	08db      	lsrs	r3, r3, #3
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	4a81      	ldr	r2, [pc, #516]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x240>)
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e0f1      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x240>)
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e0ee      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f003 0318 	and.w	r3, r3, #24
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d102      	bne.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x244>)
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e0e5      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ec8:	4b76      	ldr	r3, [pc, #472]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f003 0318 	and.w	r3, r3, #24
 8005ed0:	2b18      	cmp	r3, #24
 8005ed2:	f040 80dd 	bne.w	8006090 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ed6:	4b73      	ldr	r3, [pc, #460]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005ee0:	4b70      	ldr	r3, [pc, #448]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005eec:	4b6d      	ldr	r3, [pc, #436]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80b7 	beq.w	800608a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d003      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0xbe>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d056      	beq.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x16a>
 8005f28:	e077      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02d      	beq.n	8005f92 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f36:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	08db      	lsrs	r3, r3, #3
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	4a5a      	ldr	r2, [pc, #360]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x240>)
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f60:	4b50      	ldr	r3, [pc, #320]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f70:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f74:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80060b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005f90:	e065      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80060b8 <HAL_RCC_GetSysClockFreq+0x24c>
 8005fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80060b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005fd4:	e043      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80060bc <HAL_RCC_GetSysClockFreq+0x250>
 8005fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ffc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80060b4 <HAL_RCC_GetSysClockFreq+0x248>
 8006000:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006004:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006014:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006018:	e021      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006024:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060c0 <HAL_RCC_GetSysClockFreq+0x254>
 8006028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602c:	4b1d      	ldr	r3, [pc, #116]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800602e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800603c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006040:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80060b4 <HAL_RCC_GetSysClockFreq+0x248>
 8006044:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006048:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800604c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006050:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006058:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800605c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800605e:	4b11      	ldr	r3, [pc, #68]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	0a5b      	lsrs	r3, r3, #9
 8006064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006068:	3301      	adds	r3, #1
 800606a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006076:	edd7 6a06 	vldr	s13, [r7, #24]
 800607a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006082:	ee17 3a90 	vmov	r3, s15
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	e004      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e001      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006090:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x240>)
 8006092:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006094:	69fb      	ldr	r3, [r7, #28]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3724      	adds	r7, #36	@ 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	44020c00 	.word	0x44020c00
 80060a8:	003d0900 	.word	0x003d0900
 80060ac:	03d09000 	.word	0x03d09000
 80060b0:	007a1200 	.word	0x007a1200
 80060b4:	46000000 	.word	0x46000000
 80060b8:	4c742400 	.word	0x4c742400
 80060bc:	4af42400 	.word	0x4af42400
 80060c0:	4a742400 	.word	0x4a742400

080060c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060c8:	f7ff fed0 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060d2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060d6:	4907      	ldr	r1, [pc, #28]	@ (80060f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80060d8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060da:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a05      	ldr	r2, [pc, #20]	@ (80060f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80060e4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80060e6:	4b04      	ldr	r3, [pc, #16]	@ (80060f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80060e8:	681b      	ldr	r3, [r3, #0]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	44020c00 	.word	0x44020c00
 80060f4:	0800d98c 	.word	0x0800d98c
 80060f8:	200000dc 	.word	0x200000dc

080060fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006100:	f7ff ffe0 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4904      	ldr	r1, [pc, #16]	@ (8006124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800611c:	4618      	mov	r0, r3
 800611e:	bd80      	pop	{r7, pc}
 8006120:	44020c00 	.word	0x44020c00
 8006124:	0800d99c 	.word	0x0800d99c

08006128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800612c:	f7ff ffca 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b06      	ldr	r3, [pc, #24]	@ (800614c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	4904      	ldr	r1, [pc, #16]	@ (8006150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	bd80      	pop	{r7, pc}
 800614c:	44020c00 	.word	0x44020c00
 8006150:	0800d99c 	.word	0x0800d99c

08006154 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006158:	f7ff ffb4 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	0b1b      	lsrs	r3, r3, #12
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4904      	ldr	r1, [pc, #16]	@ (800617c <HAL_RCC_GetPCLK3Freq+0x28>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	44020c00 	.word	0x44020c00
 800617c:	0800d99c 	.word	0x0800d99c

08006180 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006184:	b0ba      	sub	sp, #232	@ 0xe8
 8006186:	af00      	add	r7, sp, #0
 8006188:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800618c:	2300      	movs	r3, #0
 800618e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006192:	2300      	movs	r3, #0
 8006194:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80061a4:	2500      	movs	r5, #0
 80061a6:	ea54 0305 	orrs.w	r3, r4, r5
 80061aa:	d00b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80061ac:	4bcd      	ldr	r3, [pc, #820]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061b2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80061b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	4ac9      	ldr	r2, [pc, #804]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 0801 	and.w	r8, r2, #1
 80061d0:	f04f 0900 	mov.w	r9, #0
 80061d4:	ea58 0309 	orrs.w	r3, r8, r9
 80061d8:	d042      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80061da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d823      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80061e4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006205 	.word	0x08006205
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006235 	.word	0x08006235
 80061fc:	08006235 	.word	0x08006235
 8006200:	08006235 	.word	0x08006235
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006208:	3308      	adds	r3, #8
 800620a:	4618      	mov	r0, r3
 800620c:	f003 f90c 	bl	8009428 <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006216:	e00e      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800621c:	3330      	adds	r3, #48	@ 0x30
 800621e:	4618      	mov	r0, r3
 8006220:	f003 f99a 	bl	8009558 <RCCEx_PLL3_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800623e:	4ba9      	ldr	r3, [pc, #676]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006244:	f023 0107 	bic.w	r1, r3, #7
 8006248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800624c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624e:	4aa5      	ldr	r2, [pc, #660]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006250:	430b      	orrs	r3, r1
 8006252:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800625c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 0a02 	and.w	sl, r2, #2
 800626c:	f04f 0b00 	mov.w	fp, #0
 8006270:	ea5a 030b 	orrs.w	r3, sl, fp
 8006274:	f000 8088 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	2b28      	cmp	r3, #40	@ 0x28
 8006280:	d868      	bhi.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	0800635d 	.word	0x0800635d
 800628c:	08006355 	.word	0x08006355
 8006290:	08006355 	.word	0x08006355
 8006294:	08006355 	.word	0x08006355
 8006298:	08006355 	.word	0x08006355
 800629c:	08006355 	.word	0x08006355
 80062a0:	08006355 	.word	0x08006355
 80062a4:	08006355 	.word	0x08006355
 80062a8:	0800632d 	.word	0x0800632d
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006355 	.word	0x08006355
 80062b4:	08006355 	.word	0x08006355
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006355 	.word	0x08006355
 80062c0:	08006355 	.word	0x08006355
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006341 	.word	0x08006341
 80062cc:	08006355 	.word	0x08006355
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006355 	.word	0x08006355
 80062d8:	08006355 	.word	0x08006355
 80062dc:	08006355 	.word	0x08006355
 80062e0:	08006355 	.word	0x08006355
 80062e4:	08006355 	.word	0x08006355
 80062e8:	0800635d 	.word	0x0800635d
 80062ec:	08006355 	.word	0x08006355
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006355 	.word	0x08006355
 80062f8:	08006355 	.word	0x08006355
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006355 	.word	0x08006355
 8006304:	08006355 	.word	0x08006355
 8006308:	0800635d 	.word	0x0800635d
 800630c:	08006355 	.word	0x08006355
 8006310:	08006355 	.word	0x08006355
 8006314:	08006355 	.word	0x08006355
 8006318:	08006355 	.word	0x08006355
 800631c:	08006355 	.word	0x08006355
 8006320:	08006355 	.word	0x08006355
 8006324:	08006355 	.word	0x08006355
 8006328:	0800635d 	.word	0x0800635d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800632c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006330:	3308      	adds	r3, #8
 8006332:	4618      	mov	r0, r3
 8006334:	f003 f878 	bl	8009428 <RCCEx_PLL2_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800633e:	e00e      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006344:	3330      	adds	r3, #48	@ 0x30
 8006346:	4618      	mov	r0, r3
 8006348:	f003 f906 	bl	8009558 <RCCEx_PLL3_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006352:	e004      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800635c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006366:	4b5f      	ldr	r3, [pc, #380]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006368:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800636c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006376:	4a5b      	ldr	r2, [pc, #364]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006378:	430b      	orrs	r3, r1
 800637a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006384:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f002 0304 	and.w	r3, r2, #4
 8006394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800639e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d04e      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80063a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063b2:	d02c      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80063b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063b8:	d825      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063be:	d028      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c4:	d81f      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063c8:	d025      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80063ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80063cc:	d81b      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063ce:	2b80      	cmp	r3, #128	@ 0x80
 80063d0:	d00f      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80063d2:	2b80      	cmp	r3, #128	@ 0x80
 80063d4:	d817      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01f      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80063da:	2b40      	cmp	r3, #64	@ 0x40
 80063dc:	d113      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063e2:	3308      	adds	r3, #8
 80063e4:	4618      	mov	r0, r3
 80063e6:	f003 f81f 	bl	8009428 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80063f0:	e014      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063f6:	3330      	adds	r3, #48	@ 0x30
 80063f8:	4618      	mov	r0, r3
 80063fa:	f003 f8ad 	bl	8009558 <RCCEx_PLL3_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006404:	e00a      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800641a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10c      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006424:	4b2f      	ldr	r3, [pc, #188]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006426:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800642a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006434:	4a2b      	ldr	r2, [pc, #172]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006436:	430b      	orrs	r3, r1
 8006438:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800643c:	e003      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006442:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f002 0308 	and.w	r3, r2, #8
 8006452:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006456:	2300      	movs	r3, #0
 8006458:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800645c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d056      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800646a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800646c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006470:	d031      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006472:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006476:	d82a      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647c:	d02d      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800647e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006482:	d824      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006484:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006488:	d029      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800648a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800648e:	d81e      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006494:	d011      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649a:	d818      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d023      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064a4:	d113      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064aa:	3308      	adds	r3, #8
 80064ac:	4618      	mov	r0, r3
 80064ae:	f002 ffbb 	bl	8009428 <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80064b8:	e017      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064be:	3330      	adds	r3, #48	@ 0x30
 80064c0:	4618      	mov	r0, r3
 80064c2:	f003 f849 	bl	8009558 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80064cc:	e00d      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80064d4:	e009      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064d6:	bf00      	nop
 80064d8:	e007      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064da:	bf00      	nop
 80064dc:	e005      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064de:	bf00      	nop
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80064e2:	bf00      	nop
 80064e4:	44020c00 	.word	0x44020c00
        break;
 80064e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10c      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80064f2:	4bb9      	ldr	r3, [pc, #740]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80064fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006502:	4ab5      	ldr	r2, [pc, #724]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006504:	430b      	orrs	r3, r1
 8006506:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800650a:	e003      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006510:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 0310 	and.w	r3, r2, #16
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006524:	2300      	movs	r3, #0
 8006526:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800652a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800652e:	460b      	mov	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	d053      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800653a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800653e:	d031      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006540:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006544:	d82a      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800654a:	d02d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800654c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006550:	d824      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006552:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006556:	d029      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006558:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800655c:	d81e      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006562:	d011      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006568:	d818      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d020      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006572:	d113      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006578:	3308      	adds	r3, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f002 ff54 	bl	8009428 <RCCEx_PLL2_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006586:	e014      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800658c:	3330      	adds	r3, #48	@ 0x30
 800658e:	4618      	mov	r0, r3
 8006590:	f002 ffe2 	bl	8009558 <RCCEx_PLL3_Config>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800659a:	e00a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80065a2:	e006      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065a4:	bf00      	nop
 80065a6:	e004      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065a8:	bf00      	nop
 80065aa:	e002      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80065ba:	4b87      	ldr	r3, [pc, #540]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ca:	4a83      	ldr	r2, [pc, #524]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f002 0320 	and.w	r3, r2, #32
 80065e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065ec:	2300      	movs	r3, #0
 80065ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d053      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80065fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006602:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006606:	d031      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006608:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800660c:	d82a      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800660e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006612:	d02d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006618:	d824      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800661a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800661e:	d029      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006620:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006624:	d81e      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662a:	d011      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006630:	d818      	bhi.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800663a:	d113      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800663c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006640:	3308      	adds	r3, #8
 8006642:	4618      	mov	r0, r3
 8006644:	f002 fef0 	bl	8009428 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800664e:	e014      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006654:	3330      	adds	r3, #48	@ 0x30
 8006656:	4618      	mov	r0, r3
 8006658:	f002 ff7e 	bl	8009558 <RCCEx_PLL3_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006662:	e00a      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800666a:	e006      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800666c:	bf00      	nop
 800666e:	e004      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006670:	bf00      	nop
 8006672:	e002      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10c      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006682:	4b55      	ldr	r3, [pc, #340]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006688:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800668c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	4a51      	ldr	r2, [pc, #324]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006694:	430b      	orrs	r3, r1
 8006696:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80066b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d053      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80066c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80066ce:	d031      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80066d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80066d4:	d82a      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066da:	d02d      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80066dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066e0:	d824      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066e6:	d029      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80066e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066ec:	d81e      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066f2:	d011      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80066f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066f8:	d818      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d020      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006702:	d113      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006708:	3308      	adds	r3, #8
 800670a:	4618      	mov	r0, r3
 800670c:	f002 fe8c 	bl	8009428 <RCCEx_PLL2_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006716:	e014      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671c:	3330      	adds	r3, #48	@ 0x30
 800671e:	4618      	mov	r0, r3
 8006720:	f002 ff1a 	bl	8009558 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800672a:	e00a      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006734:	bf00      	nop
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006742:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800674a:	4b23      	ldr	r3, [pc, #140]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800674c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006750:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675a:	4a1f      	ldr	r2, [pc, #124]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800675c:	430b      	orrs	r3, r1
 800675e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006768:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800676c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800677c:	2300      	movs	r3, #0
 800677e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006782:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	d03d      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800678c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006796:	d01b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800679c:	d814      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800679e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a2:	d017      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80067a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a8:	d80e      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80067ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b2:	d109      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067b8:	3330      	adds	r3, #48	@ 0x30
 80067ba:	4618      	mov	r0, r3
 80067bc:	f002 fecc 	bl	8009558 <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80067c6:	e00a      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80067ce:	e006      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80067d0:	bf00      	nop
 80067d2:	e004      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80067d4:	bf00      	nop
 80067d6:	e002      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80067d8:	44020c00 	.word	0x44020c00
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10c      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80067e6:	4b99      	ldr	r3, [pc, #612]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067f6:	4a95      	ldr	r2, [pc, #596]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006804:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800681e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d03b      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800682c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006832:	d01b      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006834:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006838:	d814      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800683a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800683e:	d017      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006840:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006844:	d80e      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800684a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800684e:	d109      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006854:	3330      	adds	r3, #48	@ 0x30
 8006856:	4618      	mov	r0, r3
 8006858:	f002 fe7e 	bl	8009558 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006862:	e008      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800686a:	e004      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800686c:	bf00      	nop
 800686e:	e002      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006870:	bf00      	nop
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006876:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800687e:	4b73      	ldr	r3, [pc, #460]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006884:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800688c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800688e:	4a6f      	ldr	r2, [pc, #444]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006890:	430b      	orrs	r3, r1
 8006892:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006896:	e003      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800689c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068ba:	460b      	mov	r3, r1
 80068bc:	4313      	orrs	r3, r2
 80068be:	d03d      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80068c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068cc:	d01b      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x786>
 80068ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068d2:	d814      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80068d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068d8:	d017      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80068da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068de:	d80e      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d014      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80068e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e8:	d109      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ee:	3330      	adds	r3, #48	@ 0x30
 80068f0:	4618      	mov	r0, r3
 80068f2:	f002 fe31 	bl	8009558 <RCCEx_PLL3_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80068fc:	e008      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006904:	e004      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006906:	bf00      	nop
 8006908:	e002      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800690a:	bf00      	nop
 800690c:	e000      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800690e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006910:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10d      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006918:	4b4c      	ldr	r3, [pc, #304]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800691e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692a:	4a48      	ldr	r2, [pc, #288]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800692c:	430b      	orrs	r3, r1
 800692e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006938:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800693c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800694c:	2300      	movs	r3, #0
 800694e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006952:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d035      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800695c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006968:	d015      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800696a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800696e:	d80e      	bhi.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006978:	d109      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800697e:	3330      	adds	r3, #48	@ 0x30
 8006980:	4618      	mov	r0, r3
 8006982:	f002 fde9 	bl	8009558 <RCCEx_PLL3_Config>
 8006986:	4603      	mov	r3, r0
 8006988:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800698c:	e006      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006994:	e002      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800699a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800699c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80069a4:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069aa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b6:	4a25      	ldr	r2, [pc, #148]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069b8:	430b      	orrs	r3, r1
 80069ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80069c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80069c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	2100      	movs	r1, #0
 80069d2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80069d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d037      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80069e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069f4:	d015      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80069f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069fa:	d80e      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d012      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a04:	d109      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a0a:	3330      	adds	r3, #48	@ 0x30
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 fda3 	bl	8009558 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006a22:	bf00      	nop
 8006a24:	e000      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006a26:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10f      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a36:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a4a:	e005      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8006a4c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	2100      	movs	r1, #0
 8006a62:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006a74:	4bb8      	ldr	r3, [pc, #736]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4ab7      	ldr	r2, [pc, #732]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a7e:	61d3      	str	r3, [r2, #28]
 8006a80:	4bb5      	ldr	r3, [pc, #724]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a88:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006a8c:	4ab2      	ldr	r2, [pc, #712]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006aa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d055      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006aba:	d031      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006abc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ac0:	d82a      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac6:	d02d      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006acc:	d824      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad2:	d029      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad8:	d81e      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ade:	d011      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae4:	d818      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d020      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8006aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aee:	d113      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006af4:	3308      	adds	r3, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fc96 	bl	8009428 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006b02:	e014      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b08:	3330      	adds	r3, #48	@ 0x30
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 fd24 	bl	8009558 <RCCEx_PLL3_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006b16:	e00a      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b1e:	e006      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006b20:	bf00      	nop
 8006b22:	e004      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10d      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006b36:	4b88      	ldr	r3, [pc, #544]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b3c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b48:	4a83      	ldr	r2, [pc, #524]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b50:	e003      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b56:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b68:	2300      	movs	r3, #0
 8006b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b70:	460b      	mov	r3, r1
 8006b72:	4313      	orrs	r3, r2
 8006b74:	d055      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b82:	d031      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8006b84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b88:	d82a      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b8e:	d02d      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b94:	d824      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006b96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b9a:	d029      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006b9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba0:	d81e      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba6:	d011      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bac:	d818      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d020      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	d113      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 fc32 	bl	8009428 <RCCEx_PLL2_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006bca:	e014      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd0:	3330      	adds	r3, #48	@ 0x30
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fcc0 	bl	8009558 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006be6:	e006      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006be8:	bf00      	nop
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10d      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006bfe:	4b56      	ldr	r3, [pc, #344]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	4a51      	ldr	r2, [pc, #324]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c12:	430b      	orrs	r3, r1
 8006c14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006c18:	e003      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c1e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c30:	2300      	movs	r3, #0
 8006c32:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d032      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	d80f      	bhi.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d211      	bcs.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d911      	bls.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d109      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f002 fbe3 	bl	8009428 <RCCEx_PLL2_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c68:	e006      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c70:	e002      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006c72:	bf00      	nop
 8006c74:	e000      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006c80:	4b35      	ldr	r3, [pc, #212]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c86:	f023 0107 	bic.w	r1, r3, #7
 8006c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c92:	4a31      	ldr	r2, [pc, #196]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006c94:	430b      	orrs	r3, r1
 8006c96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ca0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	2100      	movs	r1, #0
 8006cae:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d024      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d005      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006cd6:	e002      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10d      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cec:	f023 0108 	bic.w	r1, r3, #8
 8006cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cf8:	4a17      	ldr	r2, [pc, #92]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d18:	2300      	movs	r3, #0
 8006d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d1c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d20:	460b      	mov	r3, r1
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f000 80b9 	beq.w	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006d28:	4b0c      	ldr	r3, [pc, #48]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d34:	f7fc fa30 	bl	8003198 <HAL_GetTick>
 8006d38:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d3c:	e010      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3e:	f7fc fa2b 	bl	8003198 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d908      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d54:	e00a      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006d56:	bf00      	nop
 8006d58:	44020c00 	.word	0x44020c00
 8006d5c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d60:	4bba      	ldr	r3, [pc, #744]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0e8      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8006d6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 808e 	bne.w	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d76:	4bb6      	ldr	r3, [pc, #728]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d023      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d90:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d01b      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d9c:	4bac      	ldr	r3, [pc, #688]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006daa:	4ba9      	ldr	r3, [pc, #676]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db0:	4aa7      	ldr	r2, [pc, #668]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dba:	4ba5      	ldr	r3, [pc, #660]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc0:	4aa3      	ldr	r2, [pc, #652]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dca:	4aa1      	ldr	r2, [pc, #644]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d019      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fc f9da 	bl	8003198 <HAL_GetTick>
 8006de4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de8:	e00d      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fc f9d5 	bl	8003198 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d903      	bls.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8006e04:	e006      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e06:	4b92      	ldr	r3, [pc, #584]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ea      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8006e14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d135      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2c:	d110      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8006e2e:	4b88      	ldr	r3, [pc, #544]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e3e:	091b      	lsrs	r3, r3, #4
 8006e40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006e44:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006e48:	4a81      	ldr	r2, [pc, #516]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	61d3      	str	r3, [r2, #28]
 8006e4e:	e005      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006e50:	4b7f      	ldr	r3, [pc, #508]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	4a7e      	ldr	r2, [pc, #504]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e5a:	61d3      	str	r3, [r2, #28]
 8006e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e62:	4a7b      	ldr	r2, [pc, #492]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e6c:	4b78      	ldr	r3, [pc, #480]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e6e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7e:	4a74      	ldr	r2, [pc, #464]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e86:	e008      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e96:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d035      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ebe:	2b30      	cmp	r3, #48	@ 0x30
 8006ec0:	d014      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8006ec2:	2b30      	cmp	r3, #48	@ 0x30
 8006ec4:	d80e      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d012      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d80a      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d106      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	4a5d      	ldr	r2, [pc, #372]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006eea:	e004      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006efe:	4b54      	ldr	r3, [pc, #336]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f10:	4a4f      	ldr	r2, [pc, #316]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f12:	430b      	orrs	r3, r1
 8006f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f18:	e003      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f1e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f30:	2300      	movs	r3, #0
 8006f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d033      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8006f4a:	2b40      	cmp	r3, #64	@ 0x40
 8006f4c:	d007      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f4e:	e010      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f50:	4b3f      	ldr	r3, [pc, #252]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	4a3e      	ldr	r2, [pc, #248]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006f5c:	e00d      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f62:	3308      	adds	r3, #8
 8006f64:	4618      	mov	r0, r3
 8006f66:	f002 fa5f 	bl	8009428 <RCCEx_PLL2_Config>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006f70:	e003      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006f82:	4b33      	ldr	r3, [pc, #204]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f88:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f94:	4a2e      	ldr	r2, [pc, #184]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f96:	430b      	orrs	r3, r1
 8006f98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fa2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	d04c      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d827      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006fce:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fe9 	.word	0x08006fe9
 8006fd8:	08006ff7 	.word	0x08006ff7
 8006fdc:	0800700b 	.word	0x0800700b
 8006fe0:	08007027 	.word	0x08007027
 8006fe4:	08007027 	.word	0x08007027
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4b19      	ldr	r3, [pc, #100]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	4a18      	ldr	r2, [pc, #96]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e018      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 fa13 	bl	8009428 <RCCEx_PLL2_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007008:	e00e      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800700e:	3330      	adds	r3, #48	@ 0x30
 8007010:	4618      	mov	r0, r3
 8007012:	f002 faa1 	bl	8009558 <RCCEx_PLL3_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800701c:	e004      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007028:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d111      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007030:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007036:	f023 0107 	bic.w	r1, r3, #7
 800703a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800703e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007042:	4a03      	ldr	r2, [pc, #12]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007044:	430b      	orrs	r3, r1
 8007046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800704a:	e007      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800704c:	44020800 	.word	0x44020800
 8007050:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007058:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800705c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007068:	633b      	str	r3, [r7, #48]	@ 0x30
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
 800706e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	f000 8081 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800707a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800707e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007082:	2b20      	cmp	r3, #32
 8007084:	d85f      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	08007111 	.word	0x08007111
 8007090:	08007147 	.word	0x08007147
 8007094:	08007147 	.word	0x08007147
 8007098:	08007147 	.word	0x08007147
 800709c:	08007147 	.word	0x08007147
 80070a0:	08007147 	.word	0x08007147
 80070a4:	08007147 	.word	0x08007147
 80070a8:	08007147 	.word	0x08007147
 80070ac:	0800711f 	.word	0x0800711f
 80070b0:	08007147 	.word	0x08007147
 80070b4:	08007147 	.word	0x08007147
 80070b8:	08007147 	.word	0x08007147
 80070bc:	08007147 	.word	0x08007147
 80070c0:	08007147 	.word	0x08007147
 80070c4:	08007147 	.word	0x08007147
 80070c8:	08007147 	.word	0x08007147
 80070cc:	08007133 	.word	0x08007133
 80070d0:	08007147 	.word	0x08007147
 80070d4:	08007147 	.word	0x08007147
 80070d8:	08007147 	.word	0x08007147
 80070dc:	08007147 	.word	0x08007147
 80070e0:	08007147 	.word	0x08007147
 80070e4:	08007147 	.word	0x08007147
 80070e8:	08007147 	.word	0x08007147
 80070ec:	0800714f 	.word	0x0800714f
 80070f0:	08007147 	.word	0x08007147
 80070f4:	08007147 	.word	0x08007147
 80070f8:	08007147 	.word	0x08007147
 80070fc:	08007147 	.word	0x08007147
 8007100:	08007147 	.word	0x08007147
 8007104:	08007147 	.word	0x08007147
 8007108:	08007147 	.word	0x08007147
 800710c:	0800714f 	.word	0x0800714f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007110:	4bb9      	ldr	r3, [pc, #740]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	4ab8      	ldr	r2, [pc, #736]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800711c:	e018      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800711e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007122:	3308      	adds	r3, #8
 8007124:	4618      	mov	r0, r3
 8007126:	f002 f97f 	bl	8009428 <RCCEx_PLL2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007130:	e00e      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007136:	3330      	adds	r3, #48	@ 0x30
 8007138:	4618      	mov	r0, r3
 800713a:	f002 fa0d 	bl	8009558 <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007144:	e004      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800714e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007150:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007158:	4ba7      	ldr	r3, [pc, #668]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800715a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800715e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800716a:	4aa3      	ldr	r2, [pc, #652]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800716c:	430b      	orrs	r3, r1
 800716e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007172:	e003      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007178:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800717c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800718a:	2300      	movs	r3, #0
 800718c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800718e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007192:	460b      	mov	r3, r1
 8007194:	4313      	orrs	r3, r2
 8007196:	d04e      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a4:	d02e      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80071a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071aa:	d827      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80071ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ae:	d02b      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80071b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80071b2:	d823      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80071b4:	2b80      	cmp	r3, #128	@ 0x80
 80071b6:	d017      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80071b8:	2b80      	cmp	r3, #128	@ 0x80
 80071ba:	d81f      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80071c0:	2b40      	cmp	r3, #64	@ 0x40
 80071c2:	d007      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80071c4:	e01a      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c6:	4b8c      	ldr	r3, [pc, #560]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	4a8b      	ldr	r2, [pc, #556]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80071d2:	e01a      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d8:	3308      	adds	r3, #8
 80071da:	4618      	mov	r0, r3
 80071dc:	f002 f924 	bl	8009428 <RCCEx_PLL2_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80071e6:	e010      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071ec:	3330      	adds	r3, #48	@ 0x30
 80071ee:	4618      	mov	r0, r3
 80071f0:	f002 f9b2 	bl	8009558 <RCCEx_PLL3_Config>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80071fa:	e006      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007202:	e002      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007212:	4b79      	ldr	r3, [pc, #484]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007218:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800721c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007224:	4974      	ldr	r1, [pc, #464]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800722c:	e003      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007232:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007242:	623b      	str	r3, [r7, #32]
 8007244:	2300      	movs	r3, #0
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
 8007248:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d055      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800725a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800725e:	d031      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007260:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007264:	d82a      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800726a:	d02d      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d824      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007272:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007276:	d029      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007278:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800727c:	d81e      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800727e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007282:	d011      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007288:	d818      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d020      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800728e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007292:	d113      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007298:	3308      	adds	r3, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f002 f8c4 	bl	8009428 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80072a6:	e014      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072ac:	3330      	adds	r3, #48	@ 0x30
 80072ae:	4618      	mov	r0, r3
 80072b0:	f002 f952 	bl	8009558 <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80072ba:	e00a      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80072c2:	e006      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80072c4:	bf00      	nop
 80072c6:	e004      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80072c8:	bf00      	nop
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80072cc:	bf00      	nop
 80072ce:	e000      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80072d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10d      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80072da:	4b47      	ldr	r3, [pc, #284]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072e0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80072e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072ec:	4942      	ldr	r1, [pc, #264]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072fa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	2100      	movs	r1, #0
 8007308:	61b9      	str	r1, [r7, #24]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007314:	460b      	mov	r3, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	d03c      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800731a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800731e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007322:	2b03      	cmp	r3, #3
 8007324:	d81b      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007367 	.word	0x08007367
 8007330:	0800733d 	.word	0x0800733d
 8007334:	0800734b 	.word	0x0800734b
 8007338:	08007367 	.word	0x08007367
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733c:	4b2e      	ldr	r3, [pc, #184]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007346:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007348:	e00e      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800734a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800734e:	3308      	adds	r3, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f002 f869 	bl	8009428 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800735c:	e004      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007368:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007370:	4b21      	ldr	r3, [pc, #132]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007372:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007376:	f023 0203 	bic.w	r2, r3, #3
 800737a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800737e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007382:	491d      	ldr	r1, [pc, #116]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007390:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	2100      	movs	r1, #0
 800739e:	6139      	str	r1, [r7, #16]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d03c      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80073b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073bc:	d00e      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80073be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c2:	d815      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d019      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073cc:	d110      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ce:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	4a09      	ldr	r2, [pc, #36]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80073d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80073da:	e010      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073e0:	3308      	adds	r3, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 f820 	bl	8009428 <RCCEx_PLL2_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80073ee:	e006      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80073f8:	44020c00 	.word	0x44020c00
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007406:	4b3d      	ldr	r3, [pc, #244]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800740c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007418:	4938      	ldr	r1, [pc, #224]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007426:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800742a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	2100      	movs	r1, #0
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d038      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800744a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800744e:	2b30      	cmp	r3, #48	@ 0x30
 8007450:	d01b      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007452:	2b30      	cmp	r3, #48	@ 0x30
 8007454:	d815      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007456:	2b10      	cmp	r3, #16
 8007458:	d002      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800745a:	2b20      	cmp	r3, #32
 800745c:	d007      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800745e:	e010      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007460:	4b26      	ldr	r3, [pc, #152]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	4a25      	ldr	r2, [pc, #148]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800746c:	e00e      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800746e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007472:	3330      	adds	r3, #48	@ 0x30
 8007474:	4618      	mov	r0, r3
 8007476:	f002 f86f 	bl	8009558 <RCCEx_PLL3_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007480:	e004      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007488:	e000      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800748a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10d      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007494:	4b19      	ldr	r3, [pc, #100]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800749a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800749e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80074a6:	4915      	ldr	r1, [pc, #84]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80074ae:	e003      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	2100      	movs	r1, #0
 80074c2:	6039      	str	r1, [r7, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	607b      	str	r3, [r7, #4]
 80074ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074ce:	460b      	mov	r3, r1
 80074d0:	4313      	orrs	r3, r2
 80074d2:	d00c      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80074d4:	4b09      	ldr	r3, [pc, #36]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80074d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80074e6:	4905      	ldr	r1, [pc, #20]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80074ee:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	37e8      	adds	r7, #232	@ 0xe8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fc:	44020c00 	.word	0x44020c00

08007500 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007500:	b480      	push	{r7}
 8007502:	b08b      	sub	sp, #44	@ 0x2c
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007508:	4bae      	ldr	r3, [pc, #696]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800750a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007512:	4bac      	ldr	r3, [pc, #688]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800751c:	4ba9      	ldr	r3, [pc, #676]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007526:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007528:	4ba6      	ldr	r3, [pc, #664]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007534:	4ba3      	ldr	r3, [pc, #652]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	fb02 f303 	mul.w	r3, r2, r3
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 8126 	beq.w	80077a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d053      	beq.n	8007606 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d86f      	bhi.n	8007644 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d003      	beq.n	8007572 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d02b      	beq.n	80075c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007570:	e068      	b.n	8007644 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007572:	4b94      	ldr	r3, [pc, #592]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	4a92      	ldr	r2, [pc, #584]	@ (80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800757e:	fa22 f303 	lsr.w	r3, r2, r3
 8007582:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80075aa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80075c6:	e068      	b.n	800769a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80077d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80075e8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80075ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007600:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007604:	e049      	b.n	800769a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a04 	vldr	s12, [r7, #16]
 8007626:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007642:	e02a      	b.n	800769a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007644:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a5e      	ldr	r2, [pc, #376]	@ (80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007678:	ed97 6a04 	vldr	s12, [r7, #16]
 800767c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007694:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007698:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800769a:	4b4a      	ldr	r3, [pc, #296]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076a6:	d121      	bne.n	80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80076a8:	4b46      	ldr	r3, [pc, #280]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d017      	beq.n	80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80076b4:	4b43      	ldr	r3, [pc, #268]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80076b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b8:	0a5b      	lsrs	r3, r3, #9
 80076ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80076ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80076d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e006      	b.n	80076f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e002      	b.n	80076f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076f2:	4b34      	ldr	r3, [pc, #208]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076fe:	d121      	bne.n	8007744 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007700:	4b30      	ldr	r3, [pc, #192]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800770c:	4b2d      	ldr	r3, [pc, #180]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800770e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007710:	0c1b      	lsrs	r3, r3, #16
 8007712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800771e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007722:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007726:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800772a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007732:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	e006      	b.n	800774a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	e002      	b.n	800774a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800774a:	4b1e      	ldr	r3, [pc, #120]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007752:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007756:	d121      	bne.n	800779c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007758:	4b1a      	ldr	r3, [pc, #104]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007764:	4b17      	ldr	r3, [pc, #92]	@ (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007768:	0e1b      	lsrs	r3, r3, #24
 800776a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800777a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800777e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007792:	e010      	b.n	80077b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
}
 800779a:	e00c      	b.n	80077b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
}
 80077a2:	e008      	b.n	80077b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	609a      	str	r2, [r3, #8]
}
 80077b6:	bf00      	nop
 80077b8:	372c      	adds	r7, #44	@ 0x2c
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	44020c00 	.word	0x44020c00
 80077c8:	03d09000 	.word	0x03d09000
 80077cc:	46000000 	.word	0x46000000
 80077d0:	4a742400 	.word	0x4a742400
 80077d4:	4af42400 	.word	0x4af42400

080077d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80077d8:	b480      	push	{r7}
 80077da:	b08b      	sub	sp, #44	@ 0x2c
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80077e0:	4bae      	ldr	r3, [pc, #696]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80077ea:	4bac      	ldr	r3, [pc, #688]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80077f4:	4ba9      	ldr	r3, [pc, #676]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077fe:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007800:	4ba6      	ldr	r3, [pc, #664]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	091b      	lsrs	r3, r3, #4
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800780c:	4ba3      	ldr	r3, [pc, #652]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	08db      	lsrs	r3, r3, #3
 8007812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007824:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8126 	beq.w	8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d053      	beq.n	80078de <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d86f      	bhi.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d003      	beq.n	800784a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d02b      	beq.n	80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007848:	e068      	b.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800784a:	4b94      	ldr	r3, [pc, #592]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	08db      	lsrs	r3, r3, #3
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	4a92      	ldr	r2, [pc, #584]	@ (8007aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007882:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800789e:	e068      	b.n	8007972 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80078c0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80078c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80078dc:	e049      	b.n	8007972 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80078ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80078fe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800791a:	e02a      	b.n	8007972 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800791c:	4b5f      	ldr	r3, [pc, #380]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	08db      	lsrs	r3, r3, #3
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	4a5e      	ldr	r2, [pc, #376]	@ (8007aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	ed97 6a04 	vldr	s12, [r7, #16]
 8007954:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007970:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007972:	4b4a      	ldr	r3, [pc, #296]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797e:	d121      	bne.n	80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007980:	4b46      	ldr	r3, [pc, #280]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800798c:	4b43      	ldr	r3, [pc, #268]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800798e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007990:	0a5b      	lsrs	r3, r3, #9
 8007992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800799e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80079a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80079aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e006      	b.n	80079ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e002      	b.n	80079ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ca:	4b34      	ldr	r3, [pc, #208]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d6:	d121      	bne.n	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80079d8:	4b30      	ldr	r3, [pc, #192]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d017      	beq.n	8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80079e4:	4b2d      	ldr	r3, [pc, #180]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80079f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80079fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a22:	4b1e      	ldr	r3, [pc, #120]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2e:	d121      	bne.n	8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007a30:	4b1a      	ldr	r3, [pc, #104]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a3c:	4b17      	ldr	r3, [pc, #92]	@ (8007a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007a56:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a6a:	e010      	b.n	8007a8e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	609a      	str	r2, [r3, #8]
}
 8007a72:	e00c      	b.n	8007a8e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	609a      	str	r2, [r3, #8]
}
 8007a7a:	e008      	b.n	8007a8e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	609a      	str	r2, [r3, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	372c      	adds	r7, #44	@ 0x2c
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	44020c00 	.word	0x44020c00
 8007aa0:	03d09000 	.word	0x03d09000
 8007aa4:	46000000 	.word	0x46000000
 8007aa8:	4a742400 	.word	0x4a742400
 8007aac:	4af42400 	.word	0x4af42400

08007ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b08b      	sub	sp, #44	@ 0x2c
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007ab8:	4bae      	ldr	r3, [pc, #696]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007ac2:	4bac      	ldr	r3, [pc, #688]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007acc:	4ba9      	ldr	r3, [pc, #676]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad0:	0a1b      	lsrs	r3, r3, #8
 8007ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ad6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007ad8:	4ba6      	ldr	r3, [pc, #664]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007adc:	091b      	lsrs	r3, r3, #4
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007ae4:	4ba3      	ldr	r3, [pc, #652]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae8:	08db      	lsrs	r3, r3, #3
 8007aea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	fb02 f303 	mul.w	r3, r2, r3
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8126 	beq.w	8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d053      	beq.n	8007bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d86f      	bhi.n	8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d003      	beq.n	8007b22 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d02b      	beq.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007b20:	e068      	b.n	8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b22:	4b94      	ldr	r3, [pc, #592]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	08db      	lsrs	r3, r3, #3
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	4a92      	ldr	r2, [pc, #584]	@ (8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b32:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b5a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b76:	e068      	b.n	8007c4a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b94:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b98:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bb4:	e049      	b.n	8007c4a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007bd6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bf2:	e02a      	b.n	8007c4a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	08db      	lsrs	r3, r3, #3
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c28:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c2c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c48:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c56:	d121      	bne.n	8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007c58:	4b46      	ldr	r3, [pc, #280]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d017      	beq.n	8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c64:	4b43      	ldr	r3, [pc, #268]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c68:	0a5b      	lsrs	r3, r3, #9
 8007c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007c7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e006      	b.n	8007ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e002      	b.n	8007ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ca2:	4b34      	ldr	r3, [pc, #208]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cae:	d121      	bne.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007cb0:	4b30      	ldr	r3, [pc, #192]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d017      	beq.n	8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc0:	0c1b      	lsrs	r3, r3, #16
 8007cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007cd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	605a      	str	r2, [r3, #4]
 8007cea:	e006      	b.n	8007cfa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	e002      	b.n	8007cfa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d06:	d121      	bne.n	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007d08:	4b1a      	ldr	r3, [pc, #104]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d017      	beq.n	8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d14:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d18:	0e1b      	lsrs	r3, r3, #24
 8007d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007d2e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d3a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007d42:	e010      	b.n	8007d66 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	609a      	str	r2, [r3, #8]
}
 8007d4a:	e00c      	b.n	8007d66 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	609a      	str	r2, [r3, #8]
}
 8007d52:	e008      	b.n	8007d66 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
}
 8007d66:	bf00      	nop
 8007d68:	372c      	adds	r7, #44	@ 0x2c
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	44020c00 	.word	0x44020c00
 8007d78:	03d09000 	.word	0x03d09000
 8007d7c:	46000000 	.word	0x46000000
 8007d80:	4a742400 	.word	0x4a742400
 8007d84:	4af42400 	.word	0x4af42400

08007d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b08f      	sub	sp, #60	@ 0x3c
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d96:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007d9a:	4321      	orrs	r1, r4
 8007d9c:	d150      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007d9e:	4b26      	ldr	r3, [pc, #152]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007daa:	4b23      	ldr	r3, [pc, #140]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d108      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dbe:	d104      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc6:	f001 bb20 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007dca:	4b1b      	ldr	r3, [pc, #108]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd8:	d108      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de0:	d104      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007de2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de8:	f001 bb0f 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007df8:	d119      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e00:	d115      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007e02:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e0e:	d30a      	bcc.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007e10:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e1a:	4a08      	ldr	r2, [pc, #32]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007e22:	f001 baf2 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007e2a:	f001 baee 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e32:	f001 baea 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007e36:	bf00      	nop
 8007e38:	44020c00 	.word	0x44020c00
 8007e3c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e44:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8007e48:	ea50 0104 	orrs.w	r1, r0, r4
 8007e4c:	f000 8615 	beq.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8007e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e54:	2801      	cmp	r0, #1
 8007e56:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8007e5a:	f081 82d3 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e62:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007e66:	ea50 0104 	orrs.w	r1, r0, r4
 8007e6a:	f000 84d8 	beq.w	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e72:	2801      	cmp	r0, #1
 8007e74:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007e78:	f081 82c4 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e80:	f1a1 0410 	sub.w	r4, r1, #16
 8007e84:	ea50 0104 	orrs.w	r1, r0, r4
 8007e88:	f001 8288 	beq.w	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8007e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e90:	2801      	cmp	r0, #1
 8007e92:	f171 0110 	sbcs.w	r1, r1, #16
 8007e96:	f081 82b5 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9e:	f1a1 0408 	sub.w	r4, r1, #8
 8007ea2:	ea50 0104 	orrs.w	r1, r0, r4
 8007ea6:	f001 81fe 	beq.w	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eae:	2801      	cmp	r0, #1
 8007eb0:	f171 0108 	sbcs.w	r1, r1, #8
 8007eb4:	f081 82a6 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	ea50 0104 	orrs.w	r1, r0, r4
 8007ec2:	f000 8753 	beq.w	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8007ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eca:	2801      	cmp	r0, #1
 8007ecc:	f171 0104 	sbcs.w	r1, r1, #4
 8007ed0:	f081 8298 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed8:	1e8c      	subs	r4, r1, #2
 8007eda:	ea50 0104 	orrs.w	r1, r0, r4
 8007ede:	f001 8173 	beq.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8007ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee6:	2801      	cmp	r0, #1
 8007ee8:	f171 0102 	sbcs.w	r1, r1, #2
 8007eec:	f081 828a 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007ef8:	4321      	orrs	r1, r4
 8007efa:	f001 80fe 	beq.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f02:	4ccb      	ldr	r4, [pc, #812]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007f04:	42a0      	cmp	r0, r4
 8007f06:	f171 0100 	sbcs.w	r1, r1, #0
 8007f0a:	f081 827b 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f12:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007f16:	4321      	orrs	r1, r4
 8007f18:	f001 8076 	beq.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8007f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f20:	4cc4      	ldr	r4, [pc, #784]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8007f22:	42a0      	cmp	r0, r4
 8007f24:	f171 0100 	sbcs.w	r1, r1, #0
 8007f28:	f081 826c 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f30:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007f34:	4321      	orrs	r1, r4
 8007f36:	f000 87b5 	beq.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8007f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3e:	4cbe      	ldr	r4, [pc, #760]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8007f40:	42a0      	cmp	r0, r4
 8007f42:	f171 0100 	sbcs.w	r1, r1, #0
 8007f46:	f081 825d 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007f52:	4321      	orrs	r1, r4
 8007f54:	f000 8738 	beq.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5c:	4cb7      	ldr	r4, [pc, #732]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8007f5e:	42a0      	cmp	r0, r4
 8007f60:	f171 0100 	sbcs.w	r1, r1, #0
 8007f64:	f081 824e 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f6c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007f70:	4321      	orrs	r1, r4
 8007f72:	f001 81cd 	beq.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8007f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7a:	4cb1      	ldr	r4, [pc, #708]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8007f7c:	42a0      	cmp	r0, r4
 8007f7e:	f171 0100 	sbcs.w	r1, r1, #0
 8007f82:	f081 823f 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f8a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007f8e:	4321      	orrs	r1, r4
 8007f90:	f000 80d9 	beq.w	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f98:	4caa      	ldr	r4, [pc, #680]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8007f9a:	42a0      	cmp	r0, r4
 8007f9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007fa0:	f081 8230 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007fac:	4321      	orrs	r1, r4
 8007fae:	f000 83da 	beq.w	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb6:	4ca4      	ldr	r4, [pc, #656]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	f171 0100 	sbcs.w	r1, r1, #0
 8007fbe:	f081 8221 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007fca:	4321      	orrs	r1, r4
 8007fcc:	f000 8627 	beq.w	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8007fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd4:	4c9d      	ldr	r4, [pc, #628]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8007fd6:	42a0      	cmp	r0, r4
 8007fd8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fdc:	f081 8212 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007fe8:	4321      	orrs	r1, r4
 8007fea:	f000 857a 	beq.w	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff2:	4c97      	ldr	r4, [pc, #604]	@ (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8007ff4:	42a0      	cmp	r0, r4
 8007ff6:	f171 0100 	sbcs.w	r1, r1, #0
 8007ffa:	f081 8203 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008002:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008006:	4321      	orrs	r1, r4
 8008008:	f000 84fb 	beq.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800800c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008010:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008014:	f171 0100 	sbcs.w	r1, r1, #0
 8008018:	f081 81f4 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800801c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008020:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008024:	4321      	orrs	r1, r4
 8008026:	f000 84a9 	beq.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800802a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800802e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008032:	42a0      	cmp	r0, r4
 8008034:	f171 0100 	sbcs.w	r1, r1, #0
 8008038:	f081 81e4 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800803c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008040:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008044:	4321      	orrs	r1, r4
 8008046:	f000 8456 	beq.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800804a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800804e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008052:	42a0      	cmp	r0, r4
 8008054:	f171 0100 	sbcs.w	r1, r1, #0
 8008058:	f081 81d4 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800805c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008060:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008064:	4321      	orrs	r1, r4
 8008066:	f000 8403 	beq.w	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800806a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800806e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008072:	42a0      	cmp	r0, r4
 8008074:	f171 0100 	sbcs.w	r1, r1, #0
 8008078:	f081 81c4 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800807c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008080:	2821      	cmp	r0, #33	@ 0x21
 8008082:	f171 0100 	sbcs.w	r1, r1, #0
 8008086:	d255      	bcs.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	4301      	orrs	r1, r0
 800808e:	f001 81b9 	beq.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008096:	1e42      	subs	r2, r0, #1
 8008098:	f141 33ff 	adc.w	r3, r1, #4294967295
 800809c:	2a20      	cmp	r2, #32
 800809e:	f173 0100 	sbcs.w	r1, r3, #0
 80080a2:	f081 81af 	bcs.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80080a6:	2a1f      	cmp	r2, #31
 80080a8:	f201 81ac 	bhi.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80080ac:	a101      	add	r1, pc, #4	@ (adr r1, 80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80080ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	0800818b 	.word	0x0800818b
 80080b8:	08008289 	.word	0x08008289
 80080bc:	08009405 	.word	0x08009405
 80080c0:	08008349 	.word	0x08008349
 80080c4:	08009405 	.word	0x08009405
 80080c8:	08009405 	.word	0x08009405
 80080cc:	08009405 	.word	0x08009405
 80080d0:	08008419 	.word	0x08008419
 80080d4:	08009405 	.word	0x08009405
 80080d8:	08009405 	.word	0x08009405
 80080dc:	08009405 	.word	0x08009405
 80080e0:	08009405 	.word	0x08009405
 80080e4:	08009405 	.word	0x08009405
 80080e8:	08009405 	.word	0x08009405
 80080ec:	08009405 	.word	0x08009405
 80080f0:	080084fd 	.word	0x080084fd
 80080f4:	08009405 	.word	0x08009405
 80080f8:	08009405 	.word	0x08009405
 80080fc:	08009405 	.word	0x08009405
 8008100:	08009405 	.word	0x08009405
 8008104:	08009405 	.word	0x08009405
 8008108:	08009405 	.word	0x08009405
 800810c:	08009405 	.word	0x08009405
 8008110:	08009405 	.word	0x08009405
 8008114:	08009405 	.word	0x08009405
 8008118:	08009405 	.word	0x08009405
 800811c:	08009405 	.word	0x08009405
 8008120:	08009405 	.word	0x08009405
 8008124:	08009405 	.word	0x08009405
 8008128:	08009405 	.word	0x08009405
 800812c:	08009405 	.word	0x08009405
 8008130:	080085d3 	.word	0x080085d3
 8008134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008138:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800813c:	430b      	orrs	r3, r1
 800813e:	f000 82b3 	beq.w	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008142:	f001 b95f 	b.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008146:	4b43      	ldr	r3, [pc, #268]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	2b00      	cmp	r3, #0
 8008156:	d108      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008158:	f107 0320 	add.w	r3, r7, #32
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff f9cf 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008166:	f001 b950 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	2b40      	cmp	r3, #64	@ 0x40
 800816e:	d108      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fb2f 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800817e:	f001 b944 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008186:	f001 b940 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800818a:	4b32      	ldr	r3, [pc, #200]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800818c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fd ffc4 	bl	8006128 <HAL_RCC_GetPCLK2Freq>
 80081a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80081a2:	f001 b932 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80081a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b2:	d10a      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d107      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ba:	f107 0314 	add.w	r3, r7, #20
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fb0a 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c8:	e05c      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80081ca:	4b22      	ldr	r3, [pc, #136]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d6:	d10a      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d107      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081de:	f107 0308 	add.w	r3, r7, #8
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fc64 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ec:	e04a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80081ee:	4b19      	ldr	r3, [pc, #100]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d10c      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008200:	4b14      	ldr	r3, [pc, #80]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	4a13      	ldr	r2, [pc, #76]	@ (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
 8008212:	e037      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008214:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800821c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008220:	d11e      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	2b04      	cmp	r3, #4
 8008226:	d11b      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008228:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
 800822c:	e02a      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800822e:	bf00      	nop
 8008230:	40000001 	.word	0x40000001
 8008234:	20000001 	.word	0x20000001
 8008238:	10000001 	.word	0x10000001
 800823c:	08000001 	.word	0x08000001
 8008240:	04000001 	.word	0x04000001
 8008244:	00400001 	.word	0x00400001
 8008248:	00200001 	.word	0x00200001
 800824c:	00040001 	.word	0x00040001
 8008250:	00020001 	.word	0x00020001
 8008254:	44020c00 	.word	0x44020c00
 8008258:	03d09000 	.word	0x03d09000
 800825c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008260:	4ba3      	ldr	r3, [pc, #652]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b02      	cmp	r3, #2
 800826c:	d106      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800826e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008270:	2b05      	cmp	r3, #5
 8008272:	d103      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008278:	637b      	str	r3, [r7, #52]	@ 0x34
 800827a:	e003      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008280:	f001 b8c3 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008284:	f001 b8c1 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008288:	4b99      	ldr	r3, [pc, #612]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800828a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800828e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008292:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800829a:	f7fd ff2f 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 800829e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80082a0:	f001 b8b3 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80082a4:	4b92      	ldr	r3, [pc, #584]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b0:	d10a      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d107      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b8:	f107 0314 	add.w	r3, r7, #20
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fa8b 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c6:	e03d      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d108      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ce:	f107 0308 	add.w	r3, r7, #8
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fbec 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082dc:	f001 b895 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80082e0:	4b83      	ldr	r3, [pc, #524]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d10c      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	2b18      	cmp	r3, #24
 80082f0:	d109      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082f2:	4b7f      	ldr	r3, [pc, #508]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	08db      	lsrs	r3, r3, #3
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	4a7d      	ldr	r2, [pc, #500]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80082fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
 8008304:	e01e      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008306:	4b7a      	ldr	r3, [pc, #488]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800830e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008312:	d105      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008316:	2b20      	cmp	r3, #32
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800831a:	4b77      	ldr	r3, [pc, #476]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
 800831e:	e011      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008320:	4b73      	ldr	r3, [pc, #460]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d106      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	2b28      	cmp	r3, #40	@ 0x28
 8008332:	d103      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	e003      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008340:	f001 b863 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008344:	f001 b861 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008348:	4b69      	ldr	r3, [pc, #420]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800834a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800834e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008352:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800835a:	f7fd fecf 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 800835e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008360:	f001 b853 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008364:	4b62      	ldr	r3, [pc, #392]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800836c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008370:	d10a      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	2b40      	cmp	r3, #64	@ 0x40
 8008376:	d107      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fa2b 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
 8008386:	e045      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008388:	4b59      	ldr	r3, [pc, #356]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008394:	d10a      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	2b80      	cmp	r3, #128	@ 0x80
 800839a:	d107      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fb85 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083aa:	e033      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80083ac:	4b50      	ldr	r3, [pc, #320]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d10c      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80083bc:	d109      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083be:	4b4c      	ldr	r3, [pc, #304]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	4a4a      	ldr	r2, [pc, #296]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d0:	e020      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80083d2:	4b47      	ldr	r3, [pc, #284]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083de:	d106      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083e6:	d102      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80083e8:	4b43      	ldr	r3, [pc, #268]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ec:	e012      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80083ee:	4b40      	ldr	r3, [pc, #256]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d107      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008402:	d103      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008408:	637b      	str	r3, [r7, #52]	@ 0x34
 800840a:	e003      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008410:	f000 bffb 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008414:	f000 bff9 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008418:	4b35      	ldr	r3, [pc, #212]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800841a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800841e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008422:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800842a:	f7fd fe67 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 800842e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008430:	f000 bfeb 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008434:	4b2e      	ldr	r3, [pc, #184]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800843c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008440:	d10b      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008448:	d107      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844a:	f107 0314 	add.w	r3, r7, #20
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff f9c2 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
 8008458:	e047      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800845a:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008466:	d10b      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800846e:	d107      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008470:	f107 0308 	add.w	r3, r7, #8
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fb1b 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
 800847e:	e034      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008480:	4b1b      	ldr	r3, [pc, #108]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d10d      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008492:	d109      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008494:	4b16      	ldr	r3, [pc, #88]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	08db      	lsrs	r3, r3, #3
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	4a15      	ldr	r2, [pc, #84]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
 80084a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a6:	e020      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80084a8:	4b11      	ldr	r3, [pc, #68]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b4:	d106      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084bc:	d102      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80084be:	4b0e      	ldr	r3, [pc, #56]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c2:	e012      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80084c4:	4b0a      	ldr	r3, [pc, #40]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80084c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d107      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80084d8:	d103      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e0:	e003      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084e6:	f000 bf90 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80084ea:	f000 bf8e 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80084ee:	bf00      	nop
 80084f0:	44020c00 	.word	0x44020c00
 80084f4:	03d09000 	.word	0x03d09000
 80084f8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80084fc:	4ba5      	ldr	r3, [pc, #660]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80084fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008502:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008506:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fd fdf5 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008512:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008514:	f000 bf79 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008518:	4b9e      	ldr	r3, [pc, #632]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008524:	d10b      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f950 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	637b      	str	r3, [r7, #52]	@ 0x34
 800853c:	e047      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800853e:	4b95      	ldr	r3, [pc, #596]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854a:	d10b      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008552:	d107      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff faa9 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	637b      	str	r3, [r7, #52]	@ 0x34
 8008562:	e034      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008564:	4b8b      	ldr	r3, [pc, #556]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b02      	cmp	r3, #2
 800856e:	d10d      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008576:	d109      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008578:	4b86      	ldr	r3, [pc, #536]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	08db      	lsrs	r3, r3, #3
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	4a85      	ldr	r2, [pc, #532]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
 8008588:	637b      	str	r3, [r7, #52]	@ 0x34
 800858a:	e020      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800858c:	4b81      	ldr	r3, [pc, #516]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008598:	d106      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a0:	d102      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80085a2:	4b7e      	ldr	r3, [pc, #504]	@ (800879c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a6:	e012      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80085a8:	4b7a      	ldr	r3, [pc, #488]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085bc:	d103      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80085be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c4:	e003      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ca:	f000 bf1e 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80085ce:	f000 bf1c 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80085d2:	4b70      	ldr	r3, [pc, #448]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085d8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80085dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d104      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085e4:	f7fd fd8a 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 80085e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80085ea:	f000 bf0e 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80085ee:	4b69      	ldr	r3, [pc, #420]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fa:	d10b      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008602:	d107      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff f8e5 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	637b      	str	r3, [r7, #52]	@ 0x34
 8008612:	e047      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008614:	4b5f      	ldr	r3, [pc, #380]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008620:	d10b      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008628:	d107      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fa3e 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
 8008638:	e034      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800863a:	4b56      	ldr	r3, [pc, #344]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b02      	cmp	r3, #2
 8008644:	d10d      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800864c:	d109      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800864e:	4b51      	ldr	r3, [pc, #324]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	4a4f      	ldr	r2, [pc, #316]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008660:	e020      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008662:	4b4c      	ldr	r3, [pc, #304]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800866a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800866e:	d106      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8008678:	4b48      	ldr	r3, [pc, #288]	@ (800879c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	e012      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800867e:	4b45      	ldr	r3, [pc, #276]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b02      	cmp	r3, #2
 800868a:	d107      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008692:	d103      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
 800869a:	e003      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a0:	f000 beb3 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80086a4:	f000 beb1 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80086a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80086aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086ae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80086ba:	f7fd fd4b 	bl	8006154 <HAL_RCC_GetPCLK3Freq>
 80086be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80086c0:	f000 bea3 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ca:	d108      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086cc:	f107 0314 	add.w	r3, r7, #20
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff f881 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086da:	f000 be96 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086e4:	d108      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e6:	f107 0308 	add.w	r3, r7, #8
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff f9e0 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f4:	f000 be89 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80086f8:	4b26      	ldr	r3, [pc, #152]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b02      	cmp	r3, #2
 8008702:	d10d      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008706:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800870a:	d109      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800870c:	4b21      	ldr	r3, [pc, #132]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	08db      	lsrs	r3, r3, #3
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	4a20      	ldr	r2, [pc, #128]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008718:	fa22 f303 	lsr.w	r3, r2, r3
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
 800871e:	e020      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008720:	4b1c      	ldr	r3, [pc, #112]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800872c:	d106      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008734:	d102      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8008736:	4b19      	ldr	r3, [pc, #100]	@ (800879c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
 800873a:	e012      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800873c:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800873e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b02      	cmp	r3, #2
 8008748:	d107      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008750:	d103      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8008752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
 8008758:	e003      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800875e:	f000 be54 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008762:	f000 be52 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008766:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008778:	f7fd fca4 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 800877c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800877e:	f000 be44 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10b      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8008788:	f7fd fb70 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 800878c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800878e:	f000 be3c 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008792:	bf00      	nop
 8008794:	44020c00 	.word	0x44020c00
 8008798:	03d09000 	.word	0x03d09000
 800879c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80087a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d108      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff f814 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b4:	f000 be29 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80087b8:	4b9f      	ldr	r3, [pc, #636]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c4:	d105      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d102      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80087cc:	4b9b      	ldr	r3, [pc, #620]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d0:	e023      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80087d2:	4b99      	ldr	r3, [pc, #612]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d10c      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d109      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087e4:	4b94      	ldr	r3, [pc, #592]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	08db      	lsrs	r3, r3, #3
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	4a94      	ldr	r2, [pc, #592]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f6:	e010      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80087f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008804:	d105      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	2b05      	cmp	r3, #5
 800880a:	d102      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 800880c:	4b8d      	ldr	r3, [pc, #564]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008810:	e003      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008816:	f000 bdf8 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800881a:	f000 bdf6 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800881e:	4b86      	ldr	r3, [pc, #536]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800882a:	4b83      	ldr	r3, [pc, #524]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800882c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b02      	cmp	r3, #2
 8008836:	d106      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 800883e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008842:	637b      	str	r3, [r7, #52]	@ 0x34
 8008844:	e012      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008846:	4b7c      	ldr	r3, [pc, #496]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800884c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008854:	d106      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	2b08      	cmp	r3, #8
 800885a:	d103      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 800885c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
 8008862:	e003      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008868:	f000 bdcf 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800886c:	f000 bdcd 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008870:	4b71      	ldr	r3, [pc, #452]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800887a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	2b00      	cmp	r3, #0
 8008880:	d104      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008882:	f7fd fc3b 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008886:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008888:	f000 bdbf 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008892:	d108      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008894:	f107 0308 	add.w	r3, r7, #8
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff f909 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a2:	f000 bdb2 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80088a6:	4b64      	ldr	r3, [pc, #400]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d10d      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80088cc:	e011      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80088ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088da:	d106      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088e2:	d102      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80088e4:	4b57      	ldr	r3, [pc, #348]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e8:	e003      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ee:	f000 bd8c 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80088f2:	f000 bd8a 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80088f6:	4b50      	ldr	r3, [pc, #320]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008900:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	2b00      	cmp	r3, #0
 8008906:	d104      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008908:	f7fd fbf8 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 800890c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800890e:	f000 bd7c 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008918:	d108      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f8c6 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008928:	f000 bd6f 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800892c:	4b42      	ldr	r3, [pc, #264]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b02      	cmp	r3, #2
 8008936:	d10d      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800893e:	d109      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008940:	4b3d      	ldr	r3, [pc, #244]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	4a3d      	ldr	r2, [pc, #244]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
 8008952:	e011      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008954:	4b38      	ldr	r3, [pc, #224]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800895c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008960:	d106      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008968:	d102      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800896a:	4b36      	ldr	r3, [pc, #216]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800896c:	637b      	str	r3, [r7, #52]	@ 0x34
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008974:	f000 bd49 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008978:	f000 bd47 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800897c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800897e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008982:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008986:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800898e:	f7fd fbe1 	bl	8006154 <HAL_RCC_GetPCLK3Freq>
 8008992:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008994:	f000 bd39 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899e:	d108      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff f883 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ae:	f000 bd2c 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80089b2:	4b21      	ldr	r3, [pc, #132]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d10d      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089c4:	d109      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	08db      	lsrs	r3, r3, #3
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80089d2:	fa22 f303 	lsr.w	r3, r2, r3
 80089d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d8:	e011      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80089da:	4b17      	ldr	r3, [pc, #92]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e6:	d106      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089ee:	d102      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80089f0:	4b14      	ldr	r3, [pc, #80]	@ (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f4:	e003      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089fa:	f000 bd06 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80089fe:	f000 bd04 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008a02:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a08:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008a0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a14:	f7fd fb72 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008a18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a1a:	f000 bcf6 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a24:	d110      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff f840 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a34:	f000 bce9 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a38:	44020c00 	.word	0x44020c00
 8008a3c:	007a1200 	.word	0x007a1200
 8008a40:	03d09000 	.word	0x03d09000
 8008a44:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008a48:	4ba4      	ldr	r3, [pc, #656]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d10e      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a5a:	d10a      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a5c:	4b9f      	ldr	r3, [pc, #636]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a9e      	ldr	r2, [pc, #632]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a6e:	f000 bccc 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a76:	f000 bcc8 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8008a7a:	4b98      	ldr	r3, [pc, #608]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a80:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008a84:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008a8c:	f7fd fb62 	bl	8006154 <HAL_RCC_GetPCLK3Freq>
 8008a90:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a92:	f000 bcba 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a9c:	d108      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff f804 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008aac:	f000 bcad 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8008ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d10e      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ac2:	d10a      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ac4:	4b85      	ldr	r3, [pc, #532]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	4a84      	ldr	r2, [pc, #528]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad6:	f000 bc98 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ade:	f000 bc94 	b.w	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ae4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008af4:	d056      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008afc:	f200 808b 	bhi.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b06:	d03e      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b0e:	f200 8082 	bhi.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b18:	d027      	beq.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b20:	d879      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b28:	d017      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b30:	d871      	bhi.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b3e:	d004      	beq.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8008b40:	e069      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008b42:	f7fd fb07 	bl	8006154 <HAL_RCC_GetPCLK3Freq>
 8008b46:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b48:	e068      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4a:	f107 0314 	add.w	r3, r7, #20
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fe42 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b58:	e060      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe ffa6 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b68:	e058      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d103      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8008b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b7e:	e04d      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b84:	e04a      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b86:	4b55      	ldr	r3, [pc, #340]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b94:	d103      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8008b96:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b9c:	e03e      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ba2:	e03b      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008baa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d10c      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8008bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bc2:	4b46      	ldr	r3, [pc, #280]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	08db      	lsrs	r3, r3, #3
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	4a44      	ldr	r2, [pc, #272]	@ (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd4:	e01e      	b.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd6:	4b41      	ldr	r3, [pc, #260]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be2:	d106      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bea:	d102      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bec:	4b3d      	ldr	r3, [pc, #244]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf0:	e010      	b.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c06:	d102      	bne.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c08:	4b37      	ldr	r3, [pc, #220]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0c:	e002      	b.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008c12:	e003      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8008c14:	e002      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c1a:	bf00      	nop
          }
        }
        break;
 8008c1c:	e3f5      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c24:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c30:	d05f      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c38:	f200 8094 	bhi.w	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c42:	d03f      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c4a:	f200 808b 	bhi.w	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c54:	d028      	beq.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c5c:	f200 8082 	bhi.w	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c66:	d017      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c6e:	d879      	bhi.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d004      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7c:	d004      	beq.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8008c7e:	e071      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008c80:	f7fd fa3c 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008c84:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c86:	e070      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fda3 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c96:	e068      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe ff07 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca6:	e060      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d103      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cbc:	e055      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cc2:	e052      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008cc4:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd2:	d10b      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008cd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cda:	e046      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008cdc:	44020c00 	.word	0x44020c00
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	003d0900 	.word	0x003d0900
 8008ce8:	007a1200 	.word	0x007a1200
              frequency = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cf0:	e03b      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cf2:	4bae      	ldr	r3, [pc, #696]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cf8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cfe:	4bab      	ldr	r3, [pc, #684]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d10c      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d10:	4ba6      	ldr	r3, [pc, #664]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	08db      	lsrs	r3, r3, #3
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	4aa5      	ldr	r2, [pc, #660]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d22:	e01e      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d24:	4ba1      	ldr	r3, [pc, #644]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d30:	d106      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d38:	d102      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d3a:	4b9e      	ldr	r3, [pc, #632]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d3e:	e010      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d40:	4b9a      	ldr	r3, [pc, #616]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d4c:	d106      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d54:	d102      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d56:	4b98      	ldr	r3, [pc, #608]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5a:	e002      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d60:	e003      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008d62:	e002      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d68:	bf00      	nop
          }
        }
        break;
 8008d6a:	e34e      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d76:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008d78:	4b8c      	ldr	r3, [pc, #560]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d84:	d105      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8008d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008d90:	e33b      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d98:	d107      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d9a:	f107 0320 	add.w	r3, r7, #32
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fbae 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008da8:	e32f      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008db0:	d107      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fd0e 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc0:	e323      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc6:	e320      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008dc8:	4b78      	ldr	r3, [pc, #480]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d860      	bhi.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008df5 	.word	0x08008df5
 8008de4:	08008e05 	.word	0x08008e05
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e2b 	.word	0x08008e2b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df4:	f107 0320 	add.w	r3, r7, #32
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fb81 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e02:	e04e      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe fce5 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e12:	e046      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fe49 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e22:	e03e      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008e24:	4b65      	ldr	r3, [pc, #404]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e28:	e03b      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e2a:	4b60      	ldr	r3, [pc, #384]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e36:	4b5d      	ldr	r3, [pc, #372]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d10c      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d109      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e48:	4b58      	ldr	r3, [pc, #352]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	08db      	lsrs	r3, r3, #3
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	4a57      	ldr	r2, [pc, #348]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5a:	e01e      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e5c:	4b53      	ldr	r3, [pc, #332]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e70:	d102      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e72:	4b50      	ldr	r3, [pc, #320]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e010      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e78:	4b4c      	ldr	r3, [pc, #304]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8008e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e92:	e002      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e98:	e003      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ea0:	bf00      	nop
          }
        }
        break;
 8008ea2:	e2b2      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008ea4:	4b41      	ldr	r3, [pc, #260]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	f200 80a4 	bhi.w	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8008eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	08009001 	.word	0x08009001
 8008ec8:	08009001 	.word	0x08009001
 8008ecc:	08009001 	.word	0x08009001
 8008ed0:	08009001 	.word	0x08009001
 8008ed4:	08009001 	.word	0x08009001
 8008ed8:	08009001 	.word	0x08009001
 8008edc:	08009001 	.word	0x08009001
 8008ee0:	08008f55 	.word	0x08008f55
 8008ee4:	08009001 	.word	0x08009001
 8008ee8:	08009001 	.word	0x08009001
 8008eec:	08009001 	.word	0x08009001
 8008ef0:	08009001 	.word	0x08009001
 8008ef4:	08009001 	.word	0x08009001
 8008ef8:	08009001 	.word	0x08009001
 8008efc:	08009001 	.word	0x08009001
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08009001 	.word	0x08009001
 8008f08:	08009001 	.word	0x08009001
 8008f0c:	08009001 	.word	0x08009001
 8008f10:	08009001 	.word	0x08009001
 8008f14:	08009001 	.word	0x08009001
 8008f18:	08009001 	.word	0x08009001
 8008f1c:	08009001 	.word	0x08009001
 8008f20:	08008f75 	.word	0x08008f75
 8008f24:	08009001 	.word	0x08009001
 8008f28:	08009001 	.word	0x08009001
 8008f2c:	08009001 	.word	0x08009001
 8008f30:	08009001 	.word	0x08009001
 8008f34:	08009001 	.word	0x08009001
 8008f38:	08009001 	.word	0x08009001
 8008f3c:	08009001 	.word	0x08009001
 8008f40:	08008f7b 	.word	0x08008f7b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f44:	f107 0320 	add.w	r3, r7, #32
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fad9 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f52:	e058      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f54:	f107 0314 	add.w	r3, r7, #20
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fc3d 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f62:	e050      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f64:	f107 0308 	add.w	r3, r7, #8
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fda1 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f72:	e048      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f74:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f78:	e045      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f84:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f86:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d116      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d113      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f98:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	08db      	lsrs	r3, r3, #3
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	4a03      	ldr	r2, [pc, #12]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008faa:	e028      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008fac:	44020c00 	.word	0x44020c00
 8008fb0:	03d09000 	.word	0x03d09000
 8008fb4:	003d0900 	.word	0x003d0900
 8008fb8:	007a1200 	.word	0x007a1200
 8008fbc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc0:	4b95      	ldr	r3, [pc, #596]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fcc:	d106      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8008fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fd4:	d102      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fd6:	4b91      	ldr	r3, [pc, #580]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fda:	e010      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe8:	d106      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ff0:	d102      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff6:	e002      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ffc:	e003      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008ffe:	e002      	b.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009004:	bf00      	nop
          }
        }
        break;
 8009006:	e200      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009008:	4b83      	ldr	r3, [pc, #524]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800900a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800900e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009012:	633b      	str	r3, [r7, #48]	@ 0x30
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800901a:	d031      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009022:	d866      	bhi.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	2bc0      	cmp	r3, #192	@ 0xc0
 8009028:	d027      	beq.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	2bc0      	cmp	r3, #192	@ 0xc0
 800902e:	d860      	bhi.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	2b80      	cmp	r3, #128	@ 0x80
 8009034:	d019      	beq.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	2b80      	cmp	r3, #128	@ 0x80
 800903a:	d85a      	bhi.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	2b40      	cmp	r3, #64	@ 0x40
 8009046:	d008      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009048:	e053      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800904a:	f107 0320 	add.w	r3, r7, #32
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fa56 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009058:	e04e      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905a:	f107 0314 	add.w	r3, r7, #20
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe fbba 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009068:	e046      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fd1e 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009078:	e03e      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800907a:	4b6a      	ldr	r3, [pc, #424]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800907e:	e03b      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009080:	4b65      	ldr	r3, [pc, #404]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009086:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800908a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800908c:	4b62      	ldr	r3, [pc, #392]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b02      	cmp	r3, #2
 8009096:	d10c      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800909e:	4b5e      	ldr	r3, [pc, #376]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	08db      	lsrs	r3, r3, #3
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	4a5f      	ldr	r2, [pc, #380]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80090aa:	fa22 f303 	lsr.w	r3, r2, r3
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b0:	e01e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090b2:	4b59      	ldr	r3, [pc, #356]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090be:	d106      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c6:	d102      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090c8:	4b54      	ldr	r3, [pc, #336]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80090cc:	e010      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ce:	4b52      	ldr	r3, [pc, #328]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090da:	d106      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80090dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e2:	d102      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090e4:	4b4e      	ldr	r3, [pc, #312]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80090e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090ee:	e003      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80090f0:	e002      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090f6:	bf00      	nop
          }
        }
        break;
 80090f8:	e187      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80090fa:	4b47      	ldr	r3, [pc, #284]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009100:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009104:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800910c:	f7fd f80c 	bl	8006128 <HAL_RCC_GetPCLK2Freq>
 8009110:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009112:	e17a      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009114:	4b40      	ldr	r3, [pc, #256]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800911c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009120:	d10b      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009128:	d107      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800912a:	f107 0314 	add.w	r3, r7, #20
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fb52 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	637b      	str	r3, [r7, #52]	@ 0x34
 8009138:	e045      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800913a:	4b37      	ldr	r3, [pc, #220]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009146:	d10b      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800914e:	d107      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fcab 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	637b      	str	r3, [r7, #52]	@ 0x34
 800915e:	e032      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009160:	4b2d      	ldr	r3, [pc, #180]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b02      	cmp	r3, #2
 800916a:	d10d      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009172:	d109      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009174:	4b28      	ldr	r3, [pc, #160]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	08db      	lsrs	r3, r3, #3
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	4a2a      	ldr	r2, [pc, #168]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
 8009184:	637b      	str	r3, [r7, #52]	@ 0x34
 8009186:	e01e      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009188:	4b23      	ldr	r3, [pc, #140]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009194:	d106      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800919c:	d102      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800919e:	4b1f      	ldr	r3, [pc, #124]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a2:	e010      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80091a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b0:	d106      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80091b8:	d102      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80091ba:	4b19      	ldr	r3, [pc, #100]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091be:	e002      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091c4:	e121      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80091c6:	e120      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80091c8:	4b13      	ldr	r3, [pc, #76]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80091ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d861      	bhi.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80091da:	a201      	add	r2, pc, #4	@ (adr r2, 80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	080091f9 	.word	0x080091f9
 80091e8:	08009209 	.word	0x08009209
 80091ec:	0800922d 	.word	0x0800922d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80091f0:	f7fc ff68 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 80091f4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80091f6:	e055      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091f8:	f107 0320 	add.w	r3, r7, #32
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe f97f 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009206:	e04d      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fae3 	bl	80077d8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009216:	e045      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009218:	44020c00 	.word	0x44020c00
 800921c:	003d0900 	.word	0x003d0900
 8009220:	007a1200 	.word	0x007a1200
 8009224:	00bb8000 	.word	0x00bb8000
 8009228:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800922c:	4b79      	ldr	r3, [pc, #484]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800922e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009232:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009236:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009238:	4b76      	ldr	r3, [pc, #472]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d10c      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800924a:	4b72      	ldr	r3, [pc, #456]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	08db      	lsrs	r3, r3, #3
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	4a70      	ldr	r2, [pc, #448]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009256:	fa22 f303 	lsr.w	r3, r2, r3
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
 800925c:	e01e      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800925e:	4b6d      	ldr	r3, [pc, #436]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800926a:	d106      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800926c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009272:	d102      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009274:	4b69      	ldr	r3, [pc, #420]	@ (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	e010      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800927a:	4b66      	ldr	r3, [pc, #408]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009286:	d106      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800928e:	d102      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009290:	4b63      	ldr	r3, [pc, #396]	@ (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
 8009294:	e002      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800929a:	e003      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800929c:	e002      	b.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092a2:	bf00      	nop
          }
        }
        break;
 80092a4:	e0b1      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80092a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80092b2:	4b58      	ldr	r3, [pc, #352]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d106      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d103      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80092c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80092cc:	e01f      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80092ce:	4b51      	ldr	r3, [pc, #324]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092dc:	d106      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	2b40      	cmp	r3, #64	@ 0x40
 80092e2:	d103      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80092e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ea:	e010      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80092ec:	4b49      	ldr	r3, [pc, #292]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f8:	d106      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d103      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009300:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
 8009306:	e002      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800930c:	e07d      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800930e:	e07c      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009310:	4b40      	ldr	r3, [pc, #256]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009316:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800931a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800931c:	4b3d      	ldr	r3, [pc, #244]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009328:	d105      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009330:	4b3c      	ldr	r3, [pc, #240]	@ (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
 8009334:	e031      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009336:	4b37      	ldr	r3, [pc, #220]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800933e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009342:	d10a      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2b10      	cmp	r3, #16
 8009348:	d107      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800934a:	f107 0320 	add.w	r3, r7, #32
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe f8d6 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	637b      	str	r3, [r7, #52]	@ 0x34
 8009358:	e01f      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800935a:	4b2e      	ldr	r3, [pc, #184]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800935c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d106      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2b20      	cmp	r3, #32
 800936c:	d103      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800936e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
 8009374:	e011      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009376:	4b27      	ldr	r3, [pc, #156]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800937c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009384:	d106      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	2b30      	cmp	r3, #48	@ 0x30
 800938a:	d103      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800938c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
 8009392:	e002      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009398:	e037      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800939a:	e036      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800939c:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800939e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ae:	f107 0320 	add.w	r3, r7, #32
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe f8a4 	bl	8007500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80093bc:	e025      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80093be:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ca:	d10a      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d107      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fb6a 	bl	8007ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e0:	e00f      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80093e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ee:	d105      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	2b30      	cmp	r3, #48	@ 0x30
 80093f4:	d102      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fa:	e002      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009400:	e003      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009402:	e002      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009408:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800940a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800940c:	4618      	mov	r0, r3
 800940e:	373c      	adds	r7, #60	@ 0x3c
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}
 8009414:	44020c00 	.word	0x44020c00
 8009418:	03d09000 	.word	0x03d09000
 800941c:	003d0900 	.word	0x003d0900
 8009420:	007a1200 	.word	0x007a1200
 8009424:	02dc6c00 	.word	0x02dc6c00

08009428 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009430:	4b48      	ldr	r3, [pc, #288]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a47      	ldr	r2, [pc, #284]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009436:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800943a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800943c:	f7f9 feac 	bl	8003198 <HAL_GetTick>
 8009440:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009442:	e008      	b.n	8009456 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009444:	f7f9 fea8 	bl	8003198 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e07a      	b.n	800954c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009456:	4b3f      	ldr	r3, [pc, #252]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f0      	bne.n	8009444 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009462:	4b3c      	ldr	r3, [pc, #240]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6811      	ldr	r1, [r2, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6852      	ldr	r2, [r2, #4]
 8009476:	0212      	lsls	r2, r2, #8
 8009478:	430a      	orrs	r2, r1
 800947a:	4936      	ldr	r1, [pc, #216]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 800947c:	4313      	orrs	r3, r2
 800947e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	3b01      	subs	r3, #1
 8009486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	3b01      	subs	r3, #1
 8009490:	025b      	lsls	r3, r3, #9
 8009492:	b29b      	uxth	r3, r3
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	3b01      	subs	r3, #1
 800949c:	041b      	lsls	r3, r3, #16
 800949e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	3b01      	subs	r3, #1
 80094aa:	061b      	lsls	r3, r3, #24
 80094ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094b0:	4928      	ldr	r1, [pc, #160]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80094b6:	4b27      	ldr	r3, [pc, #156]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	f023 020c 	bic.w	r2, r3, #12
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	4924      	ldr	r1, [pc, #144]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80094c8:	4b22      	ldr	r3, [pc, #136]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	f023 0220 	bic.w	r2, r3, #32
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	491f      	ldr	r1, [pc, #124]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80094da:	4b1e      	ldr	r3, [pc, #120]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	491c      	ldr	r1, [pc, #112]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80094e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4a19      	ldr	r2, [pc, #100]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094ee:	f023 0310 	bic.w	r3, r3, #16
 80094f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80094f4:	4b17      	ldr	r3, [pc, #92]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6a12      	ldr	r2, [r2, #32]
 8009504:	00d2      	lsls	r2, r2, #3
 8009506:	4913      	ldr	r1, [pc, #76]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009508:	4313      	orrs	r3, r2
 800950a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800950c:	4b11      	ldr	r3, [pc, #68]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	4a10      	ldr	r2, [pc, #64]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009512:	f043 0310 	orr.w	r3, r3, #16
 8009516:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009518:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0d      	ldr	r2, [pc, #52]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 800951e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009522:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009524:	f7f9 fe38 	bl	8003198 <HAL_GetTick>
 8009528:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800952a:	e008      	b.n	800953e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800952c:	f7f9 fe34 	bl	8003198 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e006      	b.n	800954c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800953e:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <RCCEx_PLL2_Config+0x12c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800954a:	2300      	movs	r3, #0

}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	44020c00 	.word	0x44020c00

08009558 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009560:	4b48      	ldr	r3, [pc, #288]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a47      	ldr	r2, [pc, #284]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800956a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800956c:	f7f9 fe14 	bl	8003198 <HAL_GetTick>
 8009570:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009572:	e008      	b.n	8009586 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009574:	f7f9 fe10 	bl	8003198 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e07a      	b.n	800967c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009586:	4b3f      	ldr	r3, [pc, #252]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009592:	4b3c      	ldr	r3, [pc, #240]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009596:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6852      	ldr	r2, [r2, #4]
 80095a6:	0212      	lsls	r2, r2, #8
 80095a8:	430a      	orrs	r2, r1
 80095aa:	4936      	ldr	r1, [pc, #216]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	630b      	str	r3, [r1, #48]	@ 0x30
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	3b01      	subs	r3, #1
 80095c0:	025b      	lsls	r3, r3, #9
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	3b01      	subs	r3, #1
 80095da:	061b      	lsls	r3, r3, #24
 80095dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095e0:	4928      	ldr	r1, [pc, #160]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095e6:	4b27      	ldr	r3, [pc, #156]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ea:	f023 020c 	bic.w	r2, r3, #12
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	4924      	ldr	r1, [pc, #144]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80095f8:	4b22      	ldr	r3, [pc, #136]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fc:	f023 0220 	bic.w	r2, r3, #32
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	491f      	ldr	r1, [pc, #124]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009606:	4313      	orrs	r3, r2
 8009608:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800960a:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800960c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009612:	491c      	ldr	r1, [pc, #112]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009614:	4313      	orrs	r3, r2
 8009616:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009618:	4b1a      	ldr	r3, [pc, #104]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800961a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961c:	4a19      	ldr	r2, [pc, #100]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800961e:	f023 0310 	bic.w	r3, r3, #16
 8009622:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009624:	4b17      	ldr	r3, [pc, #92]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009628:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800962c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6a12      	ldr	r2, [r2, #32]
 8009634:	00d2      	lsls	r2, r2, #3
 8009636:	4913      	ldr	r1, [pc, #76]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800963c:	4b11      	ldr	r3, [pc, #68]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	4a10      	ldr	r2, [pc, #64]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009642:	f043 0310 	orr.w	r3, r3, #16
 8009646:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009648:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a0d      	ldr	r2, [pc, #52]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 800964e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009652:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009654:	f7f9 fda0 	bl	8003198 <HAL_GetTick>
 8009658:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800965a:	e008      	b.n	800966e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800965c:	f7f9 fd9c 	bl	8003198 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d901      	bls.n	800966e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e006      	b.n	800967c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800966e:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <RCCEx_PLL3_Config+0x12c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0f0      	beq.n	800965c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	44020c00 	.word	0x44020c00

08009688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e049      	b.n	800972e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f9 f9d4 	bl	8002a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	f000 ff04 	bl	800a4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	d001      	beq.n	8009750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e07c      	b.n	800984a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a3a      	ldr	r2, [pc, #232]	@ (8009858 <HAL_TIM_Base_Start_IT+0x120>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d04a      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a39      	ldr	r2, [pc, #228]	@ (800985c <HAL_TIM_Base_Start_IT+0x124>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d045      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009784:	d040      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800978e:	d03b      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a32      	ldr	r2, [pc, #200]	@ (8009860 <HAL_TIM_Base_Start_IT+0x128>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d036      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a31      	ldr	r2, [pc, #196]	@ (8009864 <HAL_TIM_Base_Start_IT+0x12c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d031      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a2f      	ldr	r2, [pc, #188]	@ (8009868 <HAL_TIM_Base_Start_IT+0x130>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d02c      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a2e      	ldr	r2, [pc, #184]	@ (800986c <HAL_TIM_Base_Start_IT+0x134>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d027      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a2c      	ldr	r2, [pc, #176]	@ (8009870 <HAL_TIM_Base_Start_IT+0x138>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d022      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009874 <HAL_TIM_Base_Start_IT+0x13c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d01d      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a29      	ldr	r2, [pc, #164]	@ (8009878 <HAL_TIM_Base_Start_IT+0x140>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d018      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a28      	ldr	r2, [pc, #160]	@ (800987c <HAL_TIM_Base_Start_IT+0x144>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d013      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a26      	ldr	r2, [pc, #152]	@ (8009880 <HAL_TIM_Base_Start_IT+0x148>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00e      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a25      	ldr	r2, [pc, #148]	@ (8009884 <HAL_TIM_Base_Start_IT+0x14c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d009      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a23      	ldr	r2, [pc, #140]	@ (8009888 <HAL_TIM_Base_Start_IT+0x150>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d004      	beq.n	8009808 <HAL_TIM_Base_Start_IT+0xd0>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a22      	ldr	r2, [pc, #136]	@ (800988c <HAL_TIM_Base_Start_IT+0x154>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d115      	bne.n	8009834 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	4b20      	ldr	r3, [pc, #128]	@ (8009890 <HAL_TIM_Base_Start_IT+0x158>)
 8009810:	4013      	ands	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b06      	cmp	r3, #6
 8009818:	d015      	beq.n	8009846 <HAL_TIM_Base_Start_IT+0x10e>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009820:	d011      	beq.n	8009846 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0201 	orr.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009832:	e008      	b.n	8009846 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	e000      	b.n	8009848 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40012c00 	.word	0x40012c00
 800985c:	50012c00 	.word	0x50012c00
 8009860:	40000400 	.word	0x40000400
 8009864:	50000400 	.word	0x50000400
 8009868:	40000800 	.word	0x40000800
 800986c:	50000800 	.word	0x50000800
 8009870:	40000c00 	.word	0x40000c00
 8009874:	50000c00 	.word	0x50000c00
 8009878:	40013400 	.word	0x40013400
 800987c:	50013400 	.word	0x50013400
 8009880:	40001800 	.word	0x40001800
 8009884:	50001800 	.word	0x50001800
 8009888:	40014000 	.word	0x40014000
 800988c:	50014000 	.word	0x50014000
 8009890:	00010007 	.word	0x00010007

08009894 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e049      	b.n	800993a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d106      	bne.n	80098c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f841 	bl	8009942 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4619      	mov	r1, r3
 80098d2:	4610      	mov	r0, r2
 80098d4:	f000 fdfe 	bl	800a4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e049      	b.n	80099fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7f9 f909 	bl	8002b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3304      	adds	r3, #4
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f000 fd9d 	bl	800a4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <HAL_TIM_PWM_Start+0x24>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	bf14      	ite	ne
 8009a20:	2301      	movne	r3, #1
 8009a22:	2300      	moveq	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e03c      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d109      	bne.n	8009a42 <HAL_TIM_PWM_Start+0x3e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	bf14      	ite	ne
 8009a3a:	2301      	movne	r3, #1
 8009a3c:	2300      	moveq	r3, #0
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	e02f      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d109      	bne.n	8009a5c <HAL_TIM_PWM_Start+0x58>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	bf14      	ite	ne
 8009a54:	2301      	movne	r3, #1
 8009a56:	2300      	moveq	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	e022      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b0c      	cmp	r3, #12
 8009a60:	d109      	bne.n	8009a76 <HAL_TIM_PWM_Start+0x72>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	bf14      	ite	ne
 8009a6e:	2301      	movne	r3, #1
 8009a70:	2300      	moveq	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	e015      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d109      	bne.n	8009a90 <HAL_TIM_PWM_Start+0x8c>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	bf14      	ite	ne
 8009a88:	2301      	movne	r3, #1
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e008      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e0ce      	b.n	8009c48 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <HAL_TIM_PWM_Start+0xb6>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ab8:	e023      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d104      	bne.n	8009aca <HAL_TIM_PWM_Start+0xc6>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ac8:	e01b      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_PWM_Start+0xd6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ad8:	e013      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b0c      	cmp	r3, #12
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_PWM_Start+0xe6>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ae8:	e00b      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b10      	cmp	r3, #16
 8009aee:	d104      	bne.n	8009afa <HAL_TIM_PWM_Start+0xf6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009af8:	e003      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2202      	movs	r2, #2
 8009afe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2201      	movs	r2, #1
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 f99e 	bl	800ae4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a4e      	ldr	r2, [pc, #312]	@ (8009c50 <HAL_TIM_PWM_Start+0x24c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d018      	beq.n	8009b4c <HAL_TIM_PWM_Start+0x148>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8009c54 <HAL_TIM_PWM_Start+0x250>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d013      	beq.n	8009b4c <HAL_TIM_PWM_Start+0x148>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a4b      	ldr	r2, [pc, #300]	@ (8009c58 <HAL_TIM_PWM_Start+0x254>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00e      	beq.n	8009b4c <HAL_TIM_PWM_Start+0x148>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a4a      	ldr	r2, [pc, #296]	@ (8009c5c <HAL_TIM_PWM_Start+0x258>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d009      	beq.n	8009b4c <HAL_TIM_PWM_Start+0x148>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a48      	ldr	r2, [pc, #288]	@ (8009c60 <HAL_TIM_PWM_Start+0x25c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d004      	beq.n	8009b4c <HAL_TIM_PWM_Start+0x148>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a47      	ldr	r2, [pc, #284]	@ (8009c64 <HAL_TIM_PWM_Start+0x260>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIM_PWM_Start+0x14c>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <HAL_TIM_PWM_Start+0x14e>
 8009b50:	2300      	movs	r3, #0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a39      	ldr	r2, [pc, #228]	@ (8009c50 <HAL_TIM_PWM_Start+0x24c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d04a      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a37      	ldr	r2, [pc, #220]	@ (8009c54 <HAL_TIM_PWM_Start+0x250>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d045      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b82:	d040      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b8c:	d03b      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a35      	ldr	r2, [pc, #212]	@ (8009c68 <HAL_TIM_PWM_Start+0x264>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d036      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a33      	ldr	r2, [pc, #204]	@ (8009c6c <HAL_TIM_PWM_Start+0x268>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d031      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a32      	ldr	r2, [pc, #200]	@ (8009c70 <HAL_TIM_PWM_Start+0x26c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d02c      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a30      	ldr	r2, [pc, #192]	@ (8009c74 <HAL_TIM_PWM_Start+0x270>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d027      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a2f      	ldr	r2, [pc, #188]	@ (8009c78 <HAL_TIM_PWM_Start+0x274>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c7c <HAL_TIM_PWM_Start+0x278>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01d      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a22      	ldr	r2, [pc, #136]	@ (8009c58 <HAL_TIM_PWM_Start+0x254>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d018      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a20      	ldr	r2, [pc, #128]	@ (8009c5c <HAL_TIM_PWM_Start+0x258>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a27      	ldr	r2, [pc, #156]	@ (8009c80 <HAL_TIM_PWM_Start+0x27c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00e      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a25      	ldr	r2, [pc, #148]	@ (8009c84 <HAL_TIM_PWM_Start+0x280>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d009      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c60 <HAL_TIM_PWM_Start+0x25c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d004      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x202>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a18      	ldr	r2, [pc, #96]	@ (8009c64 <HAL_TIM_PWM_Start+0x260>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d115      	bne.n	8009c32 <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c88 <HAL_TIM_PWM_Start+0x284>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b06      	cmp	r3, #6
 8009c16:	d015      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x240>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c1e:	d011      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c30:	e008      	b.n	8009c44 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e000      	b.n	8009c46 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40012c00 	.word	0x40012c00
 8009c54:	50012c00 	.word	0x50012c00
 8009c58:	40013400 	.word	0x40013400
 8009c5c:	50013400 	.word	0x50013400
 8009c60:	40014000 	.word	0x40014000
 8009c64:	50014000 	.word	0x50014000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	50000400 	.word	0x50000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	50000800 	.word	0x50000800
 8009c78:	40000c00 	.word	0x40000c00
 8009c7c:	50000c00 	.word	0x50000c00
 8009c80:	40001800 	.word	0x40001800
 8009c84:	50001800 	.word	0x50001800
 8009c88:	00010007 	.word	0x00010007

08009c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d020      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01b      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0202 	mvn.w	r2, #2
 8009cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fbde 	bl	800a498 <HAL_TIM_IC_CaptureCallback>
 8009cdc:	e005      	b.n	8009cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fbd0 	bl	800a484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fbe1 	bl	800a4ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d020      	beq.n	8009d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01b      	beq.n	8009d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0204 	mvn.w	r2, #4
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fbb8 	bl	800a498 <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fbaa 	bl	800a484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fbbb 	bl	800a4ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d020      	beq.n	8009d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f003 0308 	and.w	r3, r3, #8
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01b      	beq.n	8009d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0208 	mvn.w	r2, #8
 8009d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fb92 	bl	800a498 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e005      	b.n	8009d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb84 	bl	800a484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fb95 	bl	800a4ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d020      	beq.n	8009dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01b      	beq.n	8009dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0210 	mvn.w	r2, #16
 8009da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2208      	movs	r2, #8
 8009daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fb6c 	bl	800a498 <HAL_TIM_IC_CaptureCallback>
 8009dc0:	e005      	b.n	8009dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb5e 	bl	800a484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fb6f 	bl	800a4ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f06f 0201 	mvn.w	r2, #1
 8009df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7f8 f954 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d104      	bne.n	8009e0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00c      	beq.n	8009e26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 f9ad 	bl	800b180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00c      	beq.n	8009e4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 f9a5 	bl	800b194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00c      	beq.n	8009e6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fb29 	bl	800a4c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f003 0320 	and.w	r3, r3, #32
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00c      	beq.n	8009e92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d007      	beq.n	8009e92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f06f 0220 	mvn.w	r2, #32
 8009e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f96d 	bl	800b16c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00c      	beq.n	8009eb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d007      	beq.n	8009eb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f979 	bl	800b1a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d007      	beq.n	8009eda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f971 	bl	800b1bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00c      	beq.n	8009efe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f969 	bl	800b1d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00c      	beq.n	8009f22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 f961 	bl	800b1e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e066      	b.n	800a018 <HAL_TIM_OC_ConfigChannel+0xec>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b14      	cmp	r3, #20
 8009f56:	d857      	bhi.n	800a008 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009f58:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009fb5 	.word	0x08009fb5
 8009f64:	0800a009 	.word	0x0800a009
 8009f68:	0800a009 	.word	0x0800a009
 8009f6c:	0800a009 	.word	0x0800a009
 8009f70:	08009fc3 	.word	0x08009fc3
 8009f74:	0800a009 	.word	0x0800a009
 8009f78:	0800a009 	.word	0x0800a009
 8009f7c:	0800a009 	.word	0x0800a009
 8009f80:	08009fd1 	.word	0x08009fd1
 8009f84:	0800a009 	.word	0x0800a009
 8009f88:	0800a009 	.word	0x0800a009
 8009f8c:	0800a009 	.word	0x0800a009
 8009f90:	08009fdf 	.word	0x08009fdf
 8009f94:	0800a009 	.word	0x0800a009
 8009f98:	0800a009 	.word	0x0800a009
 8009f9c:	0800a009 	.word	0x0800a009
 8009fa0:	08009fed 	.word	0x08009fed
 8009fa4:	0800a009 	.word	0x0800a009
 8009fa8:	0800a009 	.word	0x0800a009
 8009fac:	0800a009 	.word	0x0800a009
 8009fb0:	08009ffb 	.word	0x08009ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fb74 	bl	800a6a8 <TIM_OC1_SetConfig>
      break;
 8009fc0:	e025      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 fc07 	bl	800a7dc <TIM_OC2_SetConfig>
      break;
 8009fce:	e01e      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fc98 	bl	800a90c <TIM_OC3_SetConfig>
      break;
 8009fdc:	e017      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fd27 	bl	800aa38 <TIM_OC4_SetConfig>
      break;
 8009fea:	e010      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 fdb8 	bl	800ab68 <TIM_OC5_SetConfig>
      break;
 8009ff8:	e009      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe1b 	bl	800ac3c <TIM_OC6_SetConfig>
      break;
 800a006:	e002      	b.n	800a00e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e0ff      	b.n	800a23e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b14      	cmp	r3, #20
 800a04a:	f200 80f0 	bhi.w	800a22e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a04e:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a0a9 	.word	0x0800a0a9
 800a058:	0800a22f 	.word	0x0800a22f
 800a05c:	0800a22f 	.word	0x0800a22f
 800a060:	0800a22f 	.word	0x0800a22f
 800a064:	0800a0e9 	.word	0x0800a0e9
 800a068:	0800a22f 	.word	0x0800a22f
 800a06c:	0800a22f 	.word	0x0800a22f
 800a070:	0800a22f 	.word	0x0800a22f
 800a074:	0800a12b 	.word	0x0800a12b
 800a078:	0800a22f 	.word	0x0800a22f
 800a07c:	0800a22f 	.word	0x0800a22f
 800a080:	0800a22f 	.word	0x0800a22f
 800a084:	0800a16b 	.word	0x0800a16b
 800a088:	0800a22f 	.word	0x0800a22f
 800a08c:	0800a22f 	.word	0x0800a22f
 800a090:	0800a22f 	.word	0x0800a22f
 800a094:	0800a1ad 	.word	0x0800a1ad
 800a098:	0800a22f 	.word	0x0800a22f
 800a09c:	0800a22f 	.word	0x0800a22f
 800a0a0:	0800a22f 	.word	0x0800a22f
 800a0a4:	0800a1ed 	.word	0x0800a1ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fafa 	bl	800a6a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0208 	orr.w	r2, r2, #8
 800a0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0204 	bic.w	r2, r2, #4
 800a0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6999      	ldr	r1, [r3, #24]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	619a      	str	r2, [r3, #24]
      break;
 800a0e6:	e0a5      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fb74 	bl	800a7dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699a      	ldr	r2, [r3, #24]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6999      	ldr	r1, [r3, #24]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	021a      	lsls	r2, r3, #8
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	430a      	orrs	r2, r1
 800a126:	619a      	str	r2, [r3, #24]
      break;
 800a128:	e084      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fbeb 	bl	800a90c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0208 	orr.w	r2, r2, #8
 800a144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0204 	bic.w	r2, r2, #4
 800a154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69d9      	ldr	r1, [r3, #28]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	61da      	str	r2, [r3, #28]
      break;
 800a168:	e064      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68b9      	ldr	r1, [r7, #8]
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fc61 	bl	800aa38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69d9      	ldr	r1, [r3, #28]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	021a      	lsls	r2, r3, #8
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	61da      	str	r2, [r3, #28]
      break;
 800a1aa:	e043      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fcd8 	bl	800ab68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0208 	orr.w	r2, r2, #8
 800a1c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0204 	bic.w	r2, r2, #4
 800a1d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	691a      	ldr	r2, [r3, #16]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a1ea:	e023      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fd22 	bl	800ac3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a216:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	021a      	lsls	r2, r3, #8
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	430a      	orrs	r2, r1
 800a22a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a22c:	e002      	b.n	800a234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]
      break;
 800a232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop

0800a248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_TIM_ConfigClockSource+0x1c>
 800a260:	2302      	movs	r3, #2
 800a262:	e0fe      	b.n	800a462 <HAL_TIM_ConfigClockSource+0x21a>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2a0:	f000 80c9 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2a8:	f200 80ce 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2ac:	4a6f      	ldr	r2, [pc, #444]	@ (800a46c <HAL_TIM_ConfigClockSource+0x224>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	f000 80c1 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2b4:	4a6d      	ldr	r2, [pc, #436]	@ (800a46c <HAL_TIM_ConfigClockSource+0x224>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	f200 80c6 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2bc:	4a6c      	ldr	r2, [pc, #432]	@ (800a470 <HAL_TIM_ConfigClockSource+0x228>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	f000 80b9 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2c4:	4a6a      	ldr	r2, [pc, #424]	@ (800a470 <HAL_TIM_ConfigClockSource+0x228>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	f200 80be 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2cc:	4a69      	ldr	r2, [pc, #420]	@ (800a474 <HAL_TIM_ConfigClockSource+0x22c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	f000 80b1 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2d4:	4a67      	ldr	r2, [pc, #412]	@ (800a474 <HAL_TIM_ConfigClockSource+0x22c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	f200 80b6 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2dc:	4a66      	ldr	r2, [pc, #408]	@ (800a478 <HAL_TIM_ConfigClockSource+0x230>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	f000 80a9 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2e4:	4a64      	ldr	r2, [pc, #400]	@ (800a478 <HAL_TIM_ConfigClockSource+0x230>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	f200 80ae 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2ec:	4a63      	ldr	r2, [pc, #396]	@ (800a47c <HAL_TIM_ConfigClockSource+0x234>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f000 80a1 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a2f4:	4a61      	ldr	r2, [pc, #388]	@ (800a47c <HAL_TIM_ConfigClockSource+0x234>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f200 80a6 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a2fc:	4a60      	ldr	r2, [pc, #384]	@ (800a480 <HAL_TIM_ConfigClockSource+0x238>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f000 8099 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a304:	4a5e      	ldr	r2, [pc, #376]	@ (800a480 <HAL_TIM_ConfigClockSource+0x238>)
 800a306:	4293      	cmp	r3, r2
 800a308:	f200 809e 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a30c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a310:	f000 8091 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a318:	f200 8096 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	f000 8089 	beq.w	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a328:	f200 808e 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a32c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a330:	d03e      	beq.n	800a3b0 <HAL_TIM_ConfigClockSource+0x168>
 800a332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a336:	f200 8087 	bhi.w	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33e:	f000 8086 	beq.w	800a44e <HAL_TIM_ConfigClockSource+0x206>
 800a342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a346:	d87f      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a348:	2b70      	cmp	r3, #112	@ 0x70
 800a34a:	d01a      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x13a>
 800a34c:	2b70      	cmp	r3, #112	@ 0x70
 800a34e:	d87b      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a350:	2b60      	cmp	r3, #96	@ 0x60
 800a352:	d050      	beq.n	800a3f6 <HAL_TIM_ConfigClockSource+0x1ae>
 800a354:	2b60      	cmp	r3, #96	@ 0x60
 800a356:	d877      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a358:	2b50      	cmp	r3, #80	@ 0x50
 800a35a:	d03c      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x18e>
 800a35c:	2b50      	cmp	r3, #80	@ 0x50
 800a35e:	d873      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a360:	2b40      	cmp	r3, #64	@ 0x40
 800a362:	d058      	beq.n	800a416 <HAL_TIM_ConfigClockSource+0x1ce>
 800a364:	2b40      	cmp	r3, #64	@ 0x40
 800a366:	d86f      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a368:	2b30      	cmp	r3, #48	@ 0x30
 800a36a:	d064      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a36c:	2b30      	cmp	r3, #48	@ 0x30
 800a36e:	d86b      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d060      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d867      	bhi.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d05c      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d05a      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x1ee>
 800a380:	e062      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a392:	f000 fd3b 	bl	800ae0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	609a      	str	r2, [r3, #8]
      break;
 800a3ae:	e04f      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3c0:	f000 fd24 	bl	800ae0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3d2:	609a      	str	r2, [r3, #8]
      break;
 800a3d4:	e03c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f000 fc96 	bl	800ad14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2150      	movs	r1, #80	@ 0x50
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fcef 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800a3f4:	e02c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a402:	461a      	mov	r2, r3
 800a404:	f000 fcb5 	bl	800ad72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2160      	movs	r1, #96	@ 0x60
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fcdf 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800a414:	e01c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a422:	461a      	mov	r2, r3
 800a424:	f000 fc76 	bl	800ad14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2140      	movs	r1, #64	@ 0x40
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fccf 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800a434:	e00c      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f000 fcc6 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800a446:	e003      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
      break;
 800a44c:	e000      	b.n	800a450 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a44e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	00100070 	.word	0x00100070
 800a470:	00100060 	.word	0x00100060
 800a474:	00100050 	.word	0x00100050
 800a478:	00100040 	.word	0x00100040
 800a47c:	00100030 	.word	0x00100030
 800a480:	00100020 	.word	0x00100020

0800a484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a62      	ldr	r2, [pc, #392]	@ (800a670 <TIM_Base_SetConfig+0x19c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d02b      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a61      	ldr	r2, [pc, #388]	@ (800a674 <TIM_Base_SetConfig+0x1a0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d027      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4fa:	d023      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a502:	d01f      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a5c      	ldr	r2, [pc, #368]	@ (800a678 <TIM_Base_SetConfig+0x1a4>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d01b      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a5b      	ldr	r2, [pc, #364]	@ (800a67c <TIM_Base_SetConfig+0x1a8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d017      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a5a      	ldr	r2, [pc, #360]	@ (800a680 <TIM_Base_SetConfig+0x1ac>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d013      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a59      	ldr	r2, [pc, #356]	@ (800a684 <TIM_Base_SetConfig+0x1b0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00f      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a58      	ldr	r2, [pc, #352]	@ (800a688 <TIM_Base_SetConfig+0x1b4>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00b      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a57      	ldr	r2, [pc, #348]	@ (800a68c <TIM_Base_SetConfig+0x1b8>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d007      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a56      	ldr	r2, [pc, #344]	@ (800a690 <TIM_Base_SetConfig+0x1bc>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d003      	beq.n	800a544 <TIM_Base_SetConfig+0x70>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a55      	ldr	r2, [pc, #340]	@ (800a694 <TIM_Base_SetConfig+0x1c0>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d108      	bne.n	800a556 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a54a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a45      	ldr	r2, [pc, #276]	@ (800a670 <TIM_Base_SetConfig+0x19c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d03b      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a44      	ldr	r2, [pc, #272]	@ (800a674 <TIM_Base_SetConfig+0x1a0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d037      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a56c:	d033      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a574:	d02f      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a3f      	ldr	r2, [pc, #252]	@ (800a678 <TIM_Base_SetConfig+0x1a4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d02b      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a3e      	ldr	r2, [pc, #248]	@ (800a67c <TIM_Base_SetConfig+0x1a8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d027      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a3d      	ldr	r2, [pc, #244]	@ (800a680 <TIM_Base_SetConfig+0x1ac>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d023      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a3c      	ldr	r2, [pc, #240]	@ (800a684 <TIM_Base_SetConfig+0x1b0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d01f      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a3b      	ldr	r2, [pc, #236]	@ (800a688 <TIM_Base_SetConfig+0x1b4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d01b      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a3a      	ldr	r2, [pc, #232]	@ (800a68c <TIM_Base_SetConfig+0x1b8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d017      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a39      	ldr	r2, [pc, #228]	@ (800a690 <TIM_Base_SetConfig+0x1bc>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d013      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a38      	ldr	r2, [pc, #224]	@ (800a694 <TIM_Base_SetConfig+0x1c0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d00f      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a37      	ldr	r2, [pc, #220]	@ (800a698 <TIM_Base_SetConfig+0x1c4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00b      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a36      	ldr	r2, [pc, #216]	@ (800a69c <TIM_Base_SetConfig+0x1c8>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d007      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a35      	ldr	r2, [pc, #212]	@ (800a6a0 <TIM_Base_SetConfig+0x1cc>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d003      	beq.n	800a5d6 <TIM_Base_SetConfig+0x102>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a34      	ldr	r2, [pc, #208]	@ (800a6a4 <TIM_Base_SetConfig+0x1d0>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d108      	bne.n	800a5e8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a18      	ldr	r2, [pc, #96]	@ (800a670 <TIM_Base_SetConfig+0x19c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d013      	beq.n	800a63c <TIM_Base_SetConfig+0x168>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a17      	ldr	r2, [pc, #92]	@ (800a674 <TIM_Base_SetConfig+0x1a0>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00f      	beq.n	800a63c <TIM_Base_SetConfig+0x168>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a1c      	ldr	r2, [pc, #112]	@ (800a690 <TIM_Base_SetConfig+0x1bc>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d00b      	beq.n	800a63c <TIM_Base_SetConfig+0x168>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a1b      	ldr	r2, [pc, #108]	@ (800a694 <TIM_Base_SetConfig+0x1c0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d007      	beq.n	800a63c <TIM_Base_SetConfig+0x168>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a0 <TIM_Base_SetConfig+0x1cc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d003      	beq.n	800a63c <TIM_Base_SetConfig+0x168>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a4 <TIM_Base_SetConfig+0x1d0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d103      	bne.n	800a644 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b01      	cmp	r3, #1
 800a654:	d105      	bne.n	800a662 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f023 0201 	bic.w	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	611a      	str	r2, [r3, #16]
  }
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	40012c00 	.word	0x40012c00
 800a674:	50012c00 	.word	0x50012c00
 800a678:	40000400 	.word	0x40000400
 800a67c:	50000400 	.word	0x50000400
 800a680:	40000800 	.word	0x40000800
 800a684:	50000800 	.word	0x50000800
 800a688:	40000c00 	.word	0x40000c00
 800a68c:	50000c00 	.word	0x50000c00
 800a690:	40013400 	.word	0x40013400
 800a694:	50013400 	.word	0x50013400
 800a698:	40001800 	.word	0x40001800
 800a69c:	50001800 	.word	0x50001800
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	50014000 	.word	0x50014000

0800a6a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	f023 0201 	bic.w	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 0302 	bic.w	r3, r3, #2
 800a6f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a30      	ldr	r2, [pc, #192]	@ (800a7c4 <TIM_OC1_SetConfig+0x11c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d013      	beq.n	800a730 <TIM_OC1_SetConfig+0x88>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a2f      	ldr	r2, [pc, #188]	@ (800a7c8 <TIM_OC1_SetConfig+0x120>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d00f      	beq.n	800a730 <TIM_OC1_SetConfig+0x88>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a2e      	ldr	r2, [pc, #184]	@ (800a7cc <TIM_OC1_SetConfig+0x124>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00b      	beq.n	800a730 <TIM_OC1_SetConfig+0x88>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a2d      	ldr	r2, [pc, #180]	@ (800a7d0 <TIM_OC1_SetConfig+0x128>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d007      	beq.n	800a730 <TIM_OC1_SetConfig+0x88>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a2c      	ldr	r2, [pc, #176]	@ (800a7d4 <TIM_OC1_SetConfig+0x12c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d003      	beq.n	800a730 <TIM_OC1_SetConfig+0x88>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a2b      	ldr	r2, [pc, #172]	@ (800a7d8 <TIM_OC1_SetConfig+0x130>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d10c      	bne.n	800a74a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f023 0308 	bic.w	r3, r3, #8
 800a736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f023 0304 	bic.w	r3, r3, #4
 800a748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c4 <TIM_OC1_SetConfig+0x11c>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d013      	beq.n	800a77a <TIM_OC1_SetConfig+0xd2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c8 <TIM_OC1_SetConfig+0x120>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00f      	beq.n	800a77a <TIM_OC1_SetConfig+0xd2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7cc <TIM_OC1_SetConfig+0x124>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d00b      	beq.n	800a77a <TIM_OC1_SetConfig+0xd2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d0 <TIM_OC1_SetConfig+0x128>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d007      	beq.n	800a77a <TIM_OC1_SetConfig+0xd2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a19      	ldr	r2, [pc, #100]	@ (800a7d4 <TIM_OC1_SetConfig+0x12c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d003      	beq.n	800a77a <TIM_OC1_SetConfig+0xd2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a18      	ldr	r2, [pc, #96]	@ (800a7d8 <TIM_OC1_SetConfig+0x130>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d111      	bne.n	800a79e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	4313      	orrs	r3, r2
 800a792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	621a      	str	r2, [r3, #32]
}
 800a7b8:	bf00      	nop
 800a7ba:	371c      	adds	r7, #28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	40012c00 	.word	0x40012c00
 800a7c8:	50012c00 	.word	0x50012c00
 800a7cc:	40013400 	.word	0x40013400
 800a7d0:	50013400 	.word	0x50013400
 800a7d4:	40014000 	.word	0x40014000
 800a7d8:	50014000 	.word	0x50014000

0800a7dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	f023 0210 	bic.w	r2, r3, #16
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	4313      	orrs	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0320 	bic.w	r3, r3, #32
 800a82a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f4 <TIM_OC2_SetConfig+0x118>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00b      	beq.n	800a858 <TIM_OC2_SetConfig+0x7c>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a2d      	ldr	r2, [pc, #180]	@ (800a8f8 <TIM_OC2_SetConfig+0x11c>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d007      	beq.n	800a858 <TIM_OC2_SetConfig+0x7c>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a2c      	ldr	r2, [pc, #176]	@ (800a8fc <TIM_OC2_SetConfig+0x120>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d003      	beq.n	800a858 <TIM_OC2_SetConfig+0x7c>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a2b      	ldr	r2, [pc, #172]	@ (800a900 <TIM_OC2_SetConfig+0x124>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d10d      	bne.n	800a874 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a872:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f4 <TIM_OC2_SetConfig+0x118>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d013      	beq.n	800a8a4 <TIM_OC2_SetConfig+0xc8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f8 <TIM_OC2_SetConfig+0x11c>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d00f      	beq.n	800a8a4 <TIM_OC2_SetConfig+0xc8>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a1d      	ldr	r2, [pc, #116]	@ (800a8fc <TIM_OC2_SetConfig+0x120>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d00b      	beq.n	800a8a4 <TIM_OC2_SetConfig+0xc8>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a1c      	ldr	r2, [pc, #112]	@ (800a900 <TIM_OC2_SetConfig+0x124>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d007      	beq.n	800a8a4 <TIM_OC2_SetConfig+0xc8>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a1b      	ldr	r2, [pc, #108]	@ (800a904 <TIM_OC2_SetConfig+0x128>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d003      	beq.n	800a8a4 <TIM_OC2_SetConfig+0xc8>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a1a      	ldr	r2, [pc, #104]	@ (800a908 <TIM_OC2_SetConfig+0x12c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d113      	bne.n	800a8cc <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	621a      	str	r2, [r3, #32]
}
 800a8e6:	bf00      	nop
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	40012c00 	.word	0x40012c00
 800a8f8:	50012c00 	.word	0x50012c00
 800a8fc:	40013400 	.word	0x40013400
 800a900:	50013400 	.word	0x50013400
 800a904:	40014000 	.word	0x40014000
 800a908:	50014000 	.word	0x50014000

0800a90c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a93a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	021b      	lsls	r3, r3, #8
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a2d      	ldr	r2, [pc, #180]	@ (800aa20 <TIM_OC3_SetConfig+0x114>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_OC3_SetConfig+0x7a>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a2c      	ldr	r2, [pc, #176]	@ (800aa24 <TIM_OC3_SetConfig+0x118>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_OC3_SetConfig+0x7a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a2b      	ldr	r2, [pc, #172]	@ (800aa28 <TIM_OC3_SetConfig+0x11c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_OC3_SetConfig+0x7a>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a2a      	ldr	r2, [pc, #168]	@ (800aa2c <TIM_OC3_SetConfig+0x120>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d10d      	bne.n	800a9a2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a98c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a1e      	ldr	r2, [pc, #120]	@ (800aa20 <TIM_OC3_SetConfig+0x114>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d013      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xc6>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800aa24 <TIM_OC3_SetConfig+0x118>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00f      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xc6>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800aa28 <TIM_OC3_SetConfig+0x11c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00b      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xc6>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa2c <TIM_OC3_SetConfig+0x120>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d007      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xc6>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a1a      	ldr	r2, [pc, #104]	@ (800aa30 <TIM_OC3_SetConfig+0x124>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d003      	beq.n	800a9d2 <TIM_OC3_SetConfig+0xc6>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a19      	ldr	r2, [pc, #100]	@ (800aa34 <TIM_OC3_SetConfig+0x128>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d113      	bne.n	800a9fa <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	621a      	str	r2, [r3, #32]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	40012c00 	.word	0x40012c00
 800aa24:	50012c00 	.word	0x50012c00
 800aa28:	40013400 	.word	0x40013400
 800aa2c:	50013400 	.word	0x50013400
 800aa30:	40014000 	.word	0x40014000
 800aa34:	50014000 	.word	0x50014000

0800aa38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	031b      	lsls	r3, r3, #12
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a2e      	ldr	r2, [pc, #184]	@ (800ab50 <TIM_OC4_SetConfig+0x118>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00b      	beq.n	800aab4 <TIM_OC4_SetConfig+0x7c>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ab54 <TIM_OC4_SetConfig+0x11c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d007      	beq.n	800aab4 <TIM_OC4_SetConfig+0x7c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a2c      	ldr	r2, [pc, #176]	@ (800ab58 <TIM_OC4_SetConfig+0x120>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d003      	beq.n	800aab4 <TIM_OC4_SetConfig+0x7c>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a2b      	ldr	r2, [pc, #172]	@ (800ab5c <TIM_OC4_SetConfig+0x124>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d10d      	bne.n	800aad0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aaba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	031b      	lsls	r3, r3, #12
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a1f      	ldr	r2, [pc, #124]	@ (800ab50 <TIM_OC4_SetConfig+0x118>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d013      	beq.n	800ab00 <TIM_OC4_SetConfig+0xc8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a1e      	ldr	r2, [pc, #120]	@ (800ab54 <TIM_OC4_SetConfig+0x11c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00f      	beq.n	800ab00 <TIM_OC4_SetConfig+0xc8>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	@ (800ab58 <TIM_OC4_SetConfig+0x120>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00b      	beq.n	800ab00 <TIM_OC4_SetConfig+0xc8>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a1c      	ldr	r2, [pc, #112]	@ (800ab5c <TIM_OC4_SetConfig+0x124>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d007      	beq.n	800ab00 <TIM_OC4_SetConfig+0xc8>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab60 <TIM_OC4_SetConfig+0x128>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_OC4_SetConfig+0xc8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a1a      	ldr	r2, [pc, #104]	@ (800ab64 <TIM_OC4_SetConfig+0x12c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d113      	bne.n	800ab28 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	019b      	lsls	r3, r3, #6
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	019b      	lsls	r3, r3, #6
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	621a      	str	r2, [r3, #32]
}
 800ab42:	bf00      	nop
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40012c00 	.word	0x40012c00
 800ab54:	50012c00 	.word	0x50012c00
 800ab58:	40013400 	.word	0x40013400
 800ab5c:	50013400 	.word	0x50013400
 800ab60:	40014000 	.word	0x40014000
 800ab64:	50014000 	.word	0x50014000

0800ab68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800abac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	041b      	lsls	r3, r3, #16
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a19      	ldr	r2, [pc, #100]	@ (800ac24 <TIM_OC5_SetConfig+0xbc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d013      	beq.n	800abea <TIM_OC5_SetConfig+0x82>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a18      	ldr	r2, [pc, #96]	@ (800ac28 <TIM_OC5_SetConfig+0xc0>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00f      	beq.n	800abea <TIM_OC5_SetConfig+0x82>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a17      	ldr	r2, [pc, #92]	@ (800ac2c <TIM_OC5_SetConfig+0xc4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00b      	beq.n	800abea <TIM_OC5_SetConfig+0x82>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a16      	ldr	r2, [pc, #88]	@ (800ac30 <TIM_OC5_SetConfig+0xc8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d007      	beq.n	800abea <TIM_OC5_SetConfig+0x82>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a15      	ldr	r2, [pc, #84]	@ (800ac34 <TIM_OC5_SetConfig+0xcc>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC5_SetConfig+0x82>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a14      	ldr	r2, [pc, #80]	@ (800ac38 <TIM_OC5_SetConfig+0xd0>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d109      	bne.n	800abfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	40012c00 	.word	0x40012c00
 800ac28:	50012c00 	.word	0x50012c00
 800ac2c:	40013400 	.word	0x40013400
 800ac30:	50013400 	.word	0x50013400
 800ac34:	40014000 	.word	0x40014000
 800ac38:	50014000 	.word	0x50014000

0800ac3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	051b      	lsls	r3, r3, #20
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a1a      	ldr	r2, [pc, #104]	@ (800acfc <TIM_OC6_SetConfig+0xc0>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d013      	beq.n	800acc0 <TIM_OC6_SetConfig+0x84>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a19      	ldr	r2, [pc, #100]	@ (800ad00 <TIM_OC6_SetConfig+0xc4>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00f      	beq.n	800acc0 <TIM_OC6_SetConfig+0x84>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a18      	ldr	r2, [pc, #96]	@ (800ad04 <TIM_OC6_SetConfig+0xc8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00b      	beq.n	800acc0 <TIM_OC6_SetConfig+0x84>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a17      	ldr	r2, [pc, #92]	@ (800ad08 <TIM_OC6_SetConfig+0xcc>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d007      	beq.n	800acc0 <TIM_OC6_SetConfig+0x84>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a16      	ldr	r2, [pc, #88]	@ (800ad0c <TIM_OC6_SetConfig+0xd0>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d003      	beq.n	800acc0 <TIM_OC6_SetConfig+0x84>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a15      	ldr	r2, [pc, #84]	@ (800ad10 <TIM_OC6_SetConfig+0xd4>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d109      	bne.n	800acd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	029b      	lsls	r3, r3, #10
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	621a      	str	r2, [r3, #32]
}
 800acee:	bf00      	nop
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	40012c00 	.word	0x40012c00
 800ad00:	50012c00 	.word	0x50012c00
 800ad04:	40013400 	.word	0x40013400
 800ad08:	50013400 	.word	0x50013400
 800ad0c:	40014000 	.word	0x40014000
 800ad10:	50014000 	.word	0x50014000

0800ad14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f023 0201 	bic.w	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	011b      	lsls	r3, r3, #4
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f023 030a 	bic.w	r3, r3, #10
 800ad50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b087      	sub	sp, #28
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f023 0210 	bic.w	r2, r3, #16
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	031b      	lsls	r3, r3, #12
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	011b      	lsls	r3, r3, #4
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ade8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	f043 0307 	orr.w	r3, r3, #7
 800adf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	609a      	str	r2, [r3, #8]
}
 800ae00:	bf00      	nop
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	021a      	lsls	r2, r3, #8
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	609a      	str	r2, [r3, #8]
}
 800ae40:	bf00      	nop
 800ae42:	371c      	adds	r7, #28
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	f003 031f 	and.w	r3, r3, #31
 800ae5e:	2201      	movs	r2, #1
 800ae60:	fa02 f303 	lsl.w	r3, r2, r3
 800ae64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a1a      	ldr	r2, [r3, #32]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	43db      	mvns	r3, r3
 800ae6e:	401a      	ands	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a1a      	ldr	r2, [r3, #32]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	fa01 f303 	lsl.w	r3, r1, r3
 800ae84:	431a      	orrs	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	621a      	str	r2, [r3, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e0a1      	b.n	800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a4a      	ldr	r2, [pc, #296]	@ (800b000 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d00e      	beq.n	800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a49      	ldr	r2, [pc, #292]	@ (800b004 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d009      	beq.n	800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a47      	ldr	r2, [pc, #284]	@ (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d004      	beq.n	800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a46      	ldr	r2, [pc, #280]	@ (800b00c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d108      	bne.n	800af0a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aefe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800af10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a34      	ldr	r2, [pc, #208]	@ (800b000 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d04a      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a33      	ldr	r2, [pc, #204]	@ (800b004 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d045      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af44:	d040      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af4e:	d03b      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a2e      	ldr	r2, [pc, #184]	@ (800b010 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d036      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a2d      	ldr	r2, [pc, #180]	@ (800b014 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d031      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a2b      	ldr	r2, [pc, #172]	@ (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d02c      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a2a      	ldr	r2, [pc, #168]	@ (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d027      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a28      	ldr	r2, [pc, #160]	@ (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d022      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a27      	ldr	r2, [pc, #156]	@ (800b024 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d01d      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1d      	ldr	r2, [pc, #116]	@ (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d018      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a1c      	ldr	r2, [pc, #112]	@ (800b00c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d013      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a20      	ldr	r2, [pc, #128]	@ (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00e      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a1f      	ldr	r2, [pc, #124]	@ (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d009      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a1d      	ldr	r2, [pc, #116]	@ (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d004      	beq.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a1c      	ldr	r2, [pc, #112]	@ (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d10c      	bne.n	800afe2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	40012c00 	.word	0x40012c00
 800b004:	50012c00 	.word	0x50012c00
 800b008:	40013400 	.word	0x40013400
 800b00c:	50013400 	.word	0x50013400
 800b010:	40000400 	.word	0x40000400
 800b014:	50000400 	.word	0x50000400
 800b018:	40000800 	.word	0x40000800
 800b01c:	50000800 	.word	0x50000800
 800b020:	40000c00 	.word	0x40000c00
 800b024:	50000c00 	.word	0x50000c00
 800b028:	40001800 	.word	0x40001800
 800b02c:	50001800 	.word	0x50001800
 800b030:	40014000 	.word	0x40014000
 800b034:	50014000 	.word	0x50014000

0800b038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b050:	2302      	movs	r3, #2
 800b052:	e07d      	b.n	800b150 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	4313      	orrs	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800b15c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d00e      	beq.n	800b104 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800b160 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d009      	beq.n	800b104 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b164 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d004      	beq.n	800b104 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a1a      	ldr	r2, [pc, #104]	@ (800b168 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d11c      	bne.n	800b13e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10e:	051b      	lsls	r3, r3, #20
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	4313      	orrs	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40012c00 	.word	0x40012c00
 800b160:	50012c00 	.word	0x50012c00
 800b164:	40013400 	.word	0x40013400
 800b168:	50013400 	.word	0x50013400

0800b16c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e042      	b.n	800b290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7f7 fdd7 	bl	8002dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2224      	movs	r2, #36	@ 0x24
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0201 	bic.w	r2, r2, #1
 800b238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fdde 	bl	800be04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc2d 	bl	800baa8 <UART_SetConfig>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b01      	cmp	r3, #1
 800b252:	d101      	bne.n	800b258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e01b      	b.n	800b290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fe5d 	bl	800bf48 <UART_CheckIdleState>
 800b28e:	4603      	mov	r3, r0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08a      	sub	sp, #40	@ 0x28
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	f040 808b 	bne.w	800b3ca <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d002      	beq.n	800b2c0 <HAL_UART_Transmit+0x28>
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e083      	b.n	800b3cc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ce:	2b80      	cmp	r3, #128	@ 0x80
 800b2d0:	d107      	bne.n	800b2e2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b2e0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2221      	movs	r2, #33	@ 0x21
 800b2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2f2:	f7f7 ff51 	bl	8003198 <HAL_GetTick>
 800b2f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	88fa      	ldrh	r2, [r7, #6]
 800b2fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	88fa      	ldrh	r2, [r7, #6]
 800b304:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b310:	d108      	bne.n	800b324 <HAL_UART_Transmit+0x8c>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d104      	bne.n	800b324 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	e003      	b.n	800b32c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b32c:	e030      	b.n	800b390 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2200      	movs	r2, #0
 800b336:	2180      	movs	r1, #128	@ 0x80
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 feaf 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d005      	beq.n	800b350 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2220      	movs	r2, #32
 800b348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e03d      	b.n	800b3cc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10b      	bne.n	800b36e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b364:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	3302      	adds	r3, #2
 800b36a:	61bb      	str	r3, [r7, #24]
 800b36c:	e007      	b.n	800b37e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	3301      	adds	r3, #1
 800b37c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b384:	b29b      	uxth	r3, r3
 800b386:	3b01      	subs	r3, #1
 800b388:	b29a      	uxth	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b396:	b29b      	uxth	r3, r3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1c8      	bne.n	800b32e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2140      	movs	r1, #64	@ 0x40
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 fe78 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d005      	beq.n	800b3be <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e006      	b.n	800b3cc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e000      	b.n	800b3cc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b3ca:	2302      	movs	r3, #2
  }
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	@ 0x28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3e8:	2b20      	cmp	r3, #32
 800b3ea:	d13c      	bne.n	800b466 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <HAL_UART_Receive_DMA+0x24>
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e035      	b.n	800b468 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a1a      	ldr	r2, [pc, #104]	@ (800b470 <HAL_UART_Receive_DMA+0x9c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d024      	beq.n	800b456 <HAL_UART_Receive_DMA+0x82>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a18      	ldr	r2, [pc, #96]	@ (800b474 <HAL_UART_Receive_DMA+0xa0>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d01f      	beq.n	800b456 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d018      	beq.n	800b456 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	613b      	str	r3, [r7, #16]
   return(result);
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b438:	627b      	str	r3, [r7, #36]	@ 0x24
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	623b      	str	r3, [r7, #32]
 800b444:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	69f9      	ldr	r1, [r7, #28]
 800b448:	6a3a      	ldr	r2, [r7, #32]
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e6      	bne.n	800b424 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b456:	88fb      	ldrh	r3, [r7, #6]
 800b458:	461a      	mov	r2, r3
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f000 fe8b 	bl	800c178 <UART_Start_Receive_DMA>
 800b462:	4603      	mov	r3, r0
 800b464:	e000      	b.n	800b468 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b466:	2302      	movs	r3, #2
  }
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3728      	adds	r7, #40	@ 0x28
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	44002400 	.word	0x44002400
 800b474:	54002400 	.word	0x54002400

0800b478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b0ae      	sub	sp, #184	@ 0xb8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b4ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11b      	bne.n	800b4ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4b8:	f003 0320 	and.w	r3, r3, #32
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d015      	beq.n	800b4ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d105      	bne.n	800b4d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d009      	beq.n	800b4ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 82ac 	beq.w	800ba3a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	4798      	blx	r3
      }
      return;
 800b4ea:	e2a6      	b.n	800ba3a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80fd 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b4fa:	4b7a      	ldr	r3, [pc, #488]	@ (800b6e4 <HAL_UART_IRQHandler+0x26c>)
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b506:	4b78      	ldr	r3, [pc, #480]	@ (800b6e8 <HAL_UART_IRQHandler+0x270>)
 800b508:	4013      	ands	r3, r2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 80f0 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b514:	f003 0301 	and.w	r3, r3, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d011      	beq.n	800b540 <HAL_UART_IRQHandler+0xc8>
 800b51c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2201      	movs	r2, #1
 800b52e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b536:	f043 0201 	orr.w	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d011      	beq.n	800b570 <HAL_UART_IRQHandler+0xf8>
 800b54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00b      	beq.n	800b570 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2202      	movs	r2, #2
 800b55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b566:	f043 0204 	orr.w	r2, r3, #4
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d011      	beq.n	800b5a0 <HAL_UART_IRQHandler+0x128>
 800b57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00b      	beq.n	800b5a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2204      	movs	r2, #4
 800b58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b596:	f043 0202 	orr.w	r2, r3, #2
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b5a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d017      	beq.n	800b5dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b5ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d105      	bne.n	800b5c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b5b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5bc:	4b49      	ldr	r3, [pc, #292]	@ (800b6e4 <HAL_UART_IRQHandler+0x26c>)
 800b5be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2208      	movs	r2, #8
 800b5ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5d2:	f043 0208 	orr.w	r2, r3, #8
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b5dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d012      	beq.n	800b60e <HAL_UART_IRQHandler+0x196>
 800b5e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00c      	beq.n	800b60e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b604:	f043 0220 	orr.w	r2, r3, #32
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8212 	beq.w	800ba3e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b00      	cmp	r3, #0
 800b624:	d013      	beq.n	800b64e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d007      	beq.n	800b64e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b662:	2b40      	cmp	r3, #64	@ 0x40
 800b664:	d005      	beq.n	800b672 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b66a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d02e      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 feb9 	bl	800c3ea <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b682:	2b40      	cmp	r3, #64	@ 0x40
 800b684:	d120      	bne.n	800b6c8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d017      	beq.n	800b6c0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b696:	4a15      	ldr	r2, [pc, #84]	@ (800b6ec <HAL_UART_IRQHandler+0x274>)
 800b698:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f8 f941 	bl	8003928 <HAL_DMA_Abort_IT>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d019      	beq.n	800b6e0 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6be:	e00f      	b.n	800b6e0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f9db 	bl	800ba7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6c6:	e00b      	b.n	800b6e0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9d7 	bl	800ba7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ce:	e007      	b.n	800b6e0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f9d3 	bl	800ba7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b6de:	e1ae      	b.n	800ba3e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e0:	bf00      	nop
    return;
 800b6e2:	e1ac      	b.n	800ba3e <HAL_UART_IRQHandler+0x5c6>
 800b6e4:	10000001 	.word	0x10000001
 800b6e8:	04000120 	.word	0x04000120
 800b6ec:	0800c667 	.word	0x0800c667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	f040 8142 	bne.w	800b97e <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 813b 	beq.w	800b97e <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 8134 	beq.w	800b97e <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2210      	movs	r2, #16
 800b71c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b728:	2b40      	cmp	r3, #64	@ 0x40
 800b72a:	f040 80aa 	bne.w	800b882 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b738:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b73c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8084 	beq.w	800b84e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b74c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b750:	429a      	cmp	r2, r3
 800b752:	d27c      	bcs.n	800b84e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b75a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b766:	2b81      	cmp	r3, #129	@ 0x81
 800b768:	d060      	beq.n	800b82c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b772:	e853 3f00 	ldrex	r3, [r3]
 800b776:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b77a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b77e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b78c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b790:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b792:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b794:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b79e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e2      	bne.n	800b76a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b7b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7b6:	f023 0301 	bic.w	r3, r3, #1
 800b7ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b7c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b7ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b7ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b7d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e3      	bne.n	800b7a4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2220      	movs	r2, #32
 800b7e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b80c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b80e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e4      	bne.n	800b7ea <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b826:	4618      	mov	r0, r3
 800b828:	f7f8 f802 	bl	8003830 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b83e:	b29b      	uxth	r3, r3
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	b29b      	uxth	r3, r3
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f922 	bl	800ba90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b84c:	e0f9      	b.n	800ba42 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b854:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b858:	429a      	cmp	r2, r3
 800b85a:	f040 80f2 	bne.w	800ba42 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b866:	2b81      	cmp	r3, #129	@ 0x81
 800b868:	f040 80eb 	bne.w	800ba42 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f908 	bl	800ba90 <HAL_UARTEx_RxEventCallback>
      return;
 800b880:	e0df      	b.n	800ba42 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b88e:	b29b      	uxth	r3, r3
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 80d1 	beq.w	800ba46 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800b8a4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80cc 	beq.w	800ba46 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b6:	e853 3f00 	ldrex	r3, [r3]
 800b8ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e4      	bne.n	800b8ae <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8fa:	f023 0301 	bic.w	r3, r3, #1
 800b8fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3308      	adds	r3, #8
 800b908:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b90c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e1      	bne.n	800b8e4 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	e853 3f00 	ldrex	r3, [r3]
 800b940:	60fb      	str	r3, [r7, #12]
   return(result);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f023 0310 	bic.w	r3, r3, #16
 800b948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	461a      	mov	r2, r3
 800b952:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	69b9      	ldr	r1, [r7, #24]
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	617b      	str	r3, [r7, #20]
   return(result);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e4      	bne.n	800b934 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2202      	movs	r2, #2
 800b96e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b970:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f88a 	bl	800ba90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b97c:	e063      	b.n	800ba46 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b97e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00e      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x530>
 800b98a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b98e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d008      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b99e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fe9d 	bl	800c6e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9a6:	e051      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b9a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d014      	beq.n	800b9de <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b9b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b9c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d008      	beq.n	800b9de <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d03a      	beq.n	800ba4a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	4798      	blx	r3
    }
    return;
 800b9dc:	e035      	b.n	800ba4a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b9de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <HAL_UART_IRQHandler+0x586>
 800b9ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fe47 	bl	800c68a <UART_EndTransmit_IT>
    return;
 800b9fc:	e026      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b9fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d009      	beq.n	800ba1e <HAL_UART_IRQHandler+0x5a6>
 800ba0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fe76 	bl	800c708 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba1c:	e016      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ba1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d010      	beq.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
 800ba2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da0c      	bge.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fe5e 	bl	800c6f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba38:	e008      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
      return;
 800ba3a:	bf00      	nop
 800ba3c:	e006      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
    return;
 800ba3e:	bf00      	nop
 800ba40:	e004      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
      return;
 800ba42:	bf00      	nop
 800ba44:	e002      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
      return;
 800ba46:	bf00      	nop
 800ba48:	e000      	b.n	800ba4c <HAL_UART_IRQHandler+0x5d4>
    return;
 800ba4a:	bf00      	nop
  }
}
 800ba4c:	37b8      	adds	r7, #184	@ 0xb8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop

0800ba54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800baa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baac:	b094      	sub	sp, #80	@ 0x50
 800baae:	af00      	add	r7, sp, #0
 800bab0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b83      	ldr	r3, [pc, #524]	@ (800bccc <UART_SetConfig+0x224>)
 800babe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	689a      	ldr	r2, [r3, #8]
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	431a      	orrs	r2, r3
 800baca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	431a      	orrs	r2, r3
 800bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad2:	69db      	ldr	r3, [r3, #28]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	497c      	ldr	r1, [pc, #496]	@ (800bcd0 <UART_SetConfig+0x228>)
 800bae0:	4019      	ands	r1, r3
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae8:	430b      	orrs	r3, r1
 800baea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800baec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800baf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf8:	68d9      	ldr	r1, [r3, #12]
 800bafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	ea40 0301 	orr.w	r3, r0, r1
 800bb02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	4b6f      	ldr	r3, [pc, #444]	@ (800bccc <UART_SetConfig+0x224>)
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d009      	beq.n	800bb28 <UART_SetConfig+0x80>
 800bb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	4b6e      	ldr	r3, [pc, #440]	@ (800bcd4 <UART_SetConfig+0x22c>)
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d004      	beq.n	800bb28 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb20:	6a1a      	ldr	r2, [r3, #32]
 800bb22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb24:	4313      	orrs	r3, r2
 800bb26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bb32:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb46:	f023 000f 	bic.w	r0, r3, #15
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	ea40 0301 	orr.w	r3, r0, r1
 800bb56:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b5e      	ldr	r3, [pc, #376]	@ (800bcd8 <UART_SetConfig+0x230>)
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d102      	bne.n	800bb68 <UART_SetConfig+0xc0>
 800bb62:	2301      	movs	r3, #1
 800bb64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb66:	e032      	b.n	800bbce <UART_SetConfig+0x126>
 800bb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcdc <UART_SetConfig+0x234>)
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d102      	bne.n	800bb78 <UART_SetConfig+0xd0>
 800bb72:	2302      	movs	r3, #2
 800bb74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb76:	e02a      	b.n	800bbce <UART_SetConfig+0x126>
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	4b58      	ldr	r3, [pc, #352]	@ (800bce0 <UART_SetConfig+0x238>)
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d102      	bne.n	800bb88 <UART_SetConfig+0xe0>
 800bb82:	2304      	movs	r3, #4
 800bb84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb86:	e022      	b.n	800bbce <UART_SetConfig+0x126>
 800bb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	4b55      	ldr	r3, [pc, #340]	@ (800bce4 <UART_SetConfig+0x23c>)
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d102      	bne.n	800bb98 <UART_SetConfig+0xf0>
 800bb92:	2308      	movs	r3, #8
 800bb94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb96:	e01a      	b.n	800bbce <UART_SetConfig+0x126>
 800bb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	4b52      	ldr	r3, [pc, #328]	@ (800bce8 <UART_SetConfig+0x240>)
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d102      	bne.n	800bba8 <UART_SetConfig+0x100>
 800bba2:	2310      	movs	r3, #16
 800bba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bba6:	e012      	b.n	800bbce <UART_SetConfig+0x126>
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	4b4f      	ldr	r3, [pc, #316]	@ (800bcec <UART_SetConfig+0x244>)
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d102      	bne.n	800bbb8 <UART_SetConfig+0x110>
 800bbb2:	2320      	movs	r3, #32
 800bbb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbb6:	e00a      	b.n	800bbce <UART_SetConfig+0x126>
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	4b43      	ldr	r3, [pc, #268]	@ (800bccc <UART_SetConfig+0x224>)
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d103      	bne.n	800bbca <UART_SetConfig+0x122>
 800bbc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbc8:	e001      	b.n	800bbce <UART_SetConfig+0x126>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b3e      	ldr	r3, [pc, #248]	@ (800bccc <UART_SetConfig+0x224>)
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d005      	beq.n	800bbe4 <UART_SetConfig+0x13c>
 800bbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	4b3d      	ldr	r3, [pc, #244]	@ (800bcd4 <UART_SetConfig+0x22c>)
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	f040 8088 	bne.w	800bcf4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bbe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbf0:	f7fc f8ca 	bl	8007d88 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbf4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 80eb 	beq.w	800bdd4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc02:	4a3b      	ldr	r2, [pc, #236]	@ (800bcf0 <UART_SetConfig+0x248>)
 800bc04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4613      	mov	r3, r2
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	4413      	add	r3, r2
 800bc1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d305      	bcc.n	800bc2e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d903      	bls.n	800bc36 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc34:	e048      	b.n	800bcc8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc38:	2200      	movs	r2, #0
 800bc3a:	61bb      	str	r3, [r7, #24]
 800bc3c:	61fa      	str	r2, [r7, #28]
 800bc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc42:	4a2b      	ldr	r2, [pc, #172]	@ (800bcf0 <UART_SetConfig+0x248>)
 800bc44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	617a      	str	r2, [r7, #20]
 800bc50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc58:	f7f4 ff64 	bl	8000b24 <__aeabi_uldivmod>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4610      	mov	r0, r2
 800bc62:	4619      	mov	r1, r3
 800bc64:	f04f 0200 	mov.w	r2, #0
 800bc68:	f04f 0300 	mov.w	r3, #0
 800bc6c:	020b      	lsls	r3, r1, #8
 800bc6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc72:	0202      	lsls	r2, r0, #8
 800bc74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc76:	6849      	ldr	r1, [r1, #4]
 800bc78:	0849      	lsrs	r1, r1, #1
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	4605      	mov	r5, r0
 800bc80:	eb12 0804 	adds.w	r8, r2, r4
 800bc84:	eb43 0905 	adc.w	r9, r3, r5
 800bc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	60bb      	str	r3, [r7, #8]
 800bc90:	60fa      	str	r2, [r7, #12]
 800bc92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 ff43 	bl	8000b24 <__aeabi_uldivmod>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4613      	mov	r3, r2
 800bca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcac:	d308      	bcc.n	800bcc0 <UART_SetConfig+0x218>
 800bcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcb4:	d204      	bcs.n	800bcc0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800bcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bcbc:	60da      	str	r2, [r3, #12]
 800bcbe:	e003      	b.n	800bcc8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bcc6:	e085      	b.n	800bdd4 <UART_SetConfig+0x32c>
 800bcc8:	e084      	b.n	800bdd4 <UART_SetConfig+0x32c>
 800bcca:	bf00      	nop
 800bccc:	44002400 	.word	0x44002400
 800bcd0:	cfff69f3 	.word	0xcfff69f3
 800bcd4:	54002400 	.word	0x54002400
 800bcd8:	40013800 	.word	0x40013800
 800bcdc:	40004400 	.word	0x40004400
 800bce0:	40004800 	.word	0x40004800
 800bce4:	40004c00 	.word	0x40004c00
 800bce8:	40005000 	.word	0x40005000
 800bcec:	40006400 	.word	0x40006400
 800bcf0:	0800d9b4 	.word	0x0800d9b4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcfc:	d13c      	bne.n	800bd78 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd00:	2200      	movs	r2, #0
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd0a:	f7fc f83d 	bl	8007d88 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd0e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d05e      	beq.n	800bdd4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd1a:	4a39      	ldr	r2, [pc, #228]	@ (800be00 <UART_SetConfig+0x358>)
 800bd1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd20:	461a      	mov	r2, r3
 800bd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd24:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd28:	005a      	lsls	r2, r3, #1
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	085b      	lsrs	r3, r3, #1
 800bd30:	441a      	add	r2, r3
 800bd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd3e:	2b0f      	cmp	r3, #15
 800bd40:	d916      	bls.n	800bd70 <UART_SetConfig+0x2c8>
 800bd42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd48:	d212      	bcs.n	800bd70 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f023 030f 	bic.w	r3, r3, #15
 800bd52:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd56:	085b      	lsrs	r3, r3, #1
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f003 0307 	and.w	r3, r3, #7
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bd62:	4313      	orrs	r3, r2
 800bd64:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bd6c:	60da      	str	r2, [r3, #12]
 800bd6e:	e031      	b.n	800bdd4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd76:	e02d      	b.n	800bdd4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	469a      	mov	sl, r3
 800bd7e:	4693      	mov	fp, r2
 800bd80:	4650      	mov	r0, sl
 800bd82:	4659      	mov	r1, fp
 800bd84:	f7fc f800 	bl	8007d88 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd88:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bd8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d021      	beq.n	800bdd4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd94:	4a1a      	ldr	r2, [pc, #104]	@ (800be00 <UART_SetConfig+0x358>)
 800bd96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	085b      	lsrs	r3, r3, #1
 800bda8:	441a      	add	r2, r3
 800bdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d909      	bls.n	800bdce <UART_SetConfig+0x326>
 800bdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdc0:	d205      	bcs.n	800bdce <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	60da      	str	r2, [r3, #12]
 800bdcc:	e002      	b.n	800bdd4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdde:	2201      	movs	r2, #1
 800bde0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	2200      	movs	r2, #0
 800bde8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	2200      	movs	r2, #0
 800bdee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bdf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3750      	adds	r7, #80	@ 0x50
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdfe:	bf00      	nop
 800be00:	0800d9b4 	.word	0x0800d9b4

0800be04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00a      	beq.n	800be2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	430a      	orrs	r2, r1
 800be4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00a      	beq.n	800be72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be98:	f003 0310 	and.w	r3, r3, #16
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beba:	f003 0320 	and.w	r3, r3, #32
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00a      	beq.n	800bed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01a      	beq.n	800bf1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800befe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf02:	d10a      	bne.n	800bf1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	605a      	str	r2, [r3, #4]
  }
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b098      	sub	sp, #96	@ 0x60
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf58:	f7f7 f91e 	bl	8003198 <HAL_GetTick>
 800bf5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d12f      	bne.n	800bfcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf74:	2200      	movs	r2, #0
 800bf76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f88e 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d022      	beq.n	800bfcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e063      	b.n	800c094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0304 	and.w	r3, r3, #4
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d149      	bne.n	800c06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f857 	bl	800c09c <UART_WaitOnFlagUntilTimeout>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d03c      	beq.n	800c06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	e853 3f00 	ldrex	r3, [r3]
 800c000:	623b      	str	r3, [r7, #32]
   return(result);
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c012:	633b      	str	r3, [r7, #48]	@ 0x30
 800c014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e6      	bne.n	800bff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3308      	adds	r3, #8
 800c02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	60fb      	str	r3, [r7, #12]
   return(result);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f023 0301 	bic.w	r3, r3, #1
 800c03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c046:	61fa      	str	r2, [r7, #28]
 800c048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	69b9      	ldr	r1, [r7, #24]
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	617b      	str	r3, [r7, #20]
   return(result);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2220      	movs	r2, #32
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e012      	b.n	800c094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2220      	movs	r2, #32
 800c07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3758      	adds	r7, #88	@ 0x58
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0ac:	e04f      	b.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d04b      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0b6:	f7f7 f86f 	bl	8003198 <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d302      	bcc.n	800c0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e04e      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d037      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b80      	cmp	r3, #128	@ 0x80
 800c0e2:	d034      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2b40      	cmp	r3, #64	@ 0x40
 800c0e8:	d031      	beq.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	f003 0308 	and.w	r3, r3, #8
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d110      	bne.n	800c11a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2208      	movs	r2, #8
 800c0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 f972 	bl	800c3ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2208      	movs	r2, #8
 800c10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e029      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c128:	d111      	bne.n	800c14e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f958 	bl	800c3ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	e00f      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	69da      	ldr	r2, [r3, #28]
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4013      	ands	r3, r2
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	bf0c      	ite	eq
 800c15e:	2301      	moveq	r3, #1
 800c160:	2300      	movne	r3, #0
 800c162:	b2db      	uxtb	r3, r3
 800c164:	461a      	mov	r2, r3
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d0a0      	beq.n	800c0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
	...

0800c178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b098      	sub	sp, #96	@ 0x60
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c186:	88fb      	ldrh	r3, [r7, #6]
 800c188:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	88fa      	ldrh	r2, [r7, #6]
 800c196:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2222      	movs	r2, #34	@ 0x22
 800c1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d07c      	beq.n	800c2ae <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1ba:	4a68      	ldr	r2, [pc, #416]	@ (800c35c <UART_Start_Receive_DMA+0x1e4>)
 800c1bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1c4:	4a66      	ldr	r2, [pc, #408]	@ (800c360 <UART_Start_Receive_DMA+0x1e8>)
 800c1c6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1ce:	4a65      	ldr	r2, [pc, #404]	@ (800c364 <UART_Start_Receive_DMA+0x1ec>)
 800c1d0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1d8:	2200      	movs	r2, #0
 800c1da:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e4:	d107      	bne.n	800c1f6 <UART_Start_Receive_DMA+0x7e>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c1ee:	88fb      	ldrh	r3, [r7, #6]
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c202:	2b00      	cmp	r3, #0
 800c204:	d034      	beq.n	800c270 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d02a      	beq.n	800c268 <UART_Start_Receive_DMA+0xf0>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d023      	beq.n	800c268 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c22e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c23e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f7 ffd4 	bl	8004208 <HAL_DMAEx_List_Start_IT>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c266:	e014      	b.n	800c292 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c26e:	e010      	b.n	800c292 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	3324      	adds	r3, #36	@ 0x24
 800c27c:	4619      	mov	r1, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c282:	461a      	mov	r2, r3
 800c284:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c288:	f7f7 fa72 	bl	8003770 <HAL_DMA_Start_IT>
 800c28c:	4603      	mov	r3, r0
 800c28e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c292:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c296:	2b00      	cmp	r3, #0
 800c298:	d009      	beq.n	800c2ae <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2210      	movs	r2, #16
 800c29e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e051      	b.n	800c352 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d018      	beq.n	800c2e8 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2d6:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c2da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2dc:	e841 2300 	strex	r3, r2, [r1]
 800c2e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c2e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e6      	bne.n	800c2b6 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fa:	f043 0301 	orr.w	r3, r3, #1
 800c2fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3308      	adds	r3, #8
 800c306:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c308:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c30a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c30e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e5      	bne.n	800c2e8 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3308      	adds	r3, #8
 800c322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	e853 3f00 	ldrex	r3, [r3]
 800c32a:	617b      	str	r3, [r7, #20]
   return(result);
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c332:	653b      	str	r3, [r7, #80]	@ 0x50
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3308      	adds	r3, #8
 800c33a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c33c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c33e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c340:	6a39      	ldr	r1, [r7, #32]
 800c342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c344:	e841 2300 	strex	r3, r2, [r1]
 800c348:	61fb      	str	r3, [r7, #28]
   return(result);
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1e5      	bne.n	800c31c <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3760      	adds	r7, #96	@ 0x60
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	0800c4b7 	.word	0x0800c4b7
 800c360:	0800c5a9 	.word	0x0800c5a9
 800c364:	0800c5e7 	.word	0x0800c5e7

0800c368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c368:	b480      	push	{r7}
 800c36a:	b08f      	sub	sp, #60	@ 0x3c
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	e853 3f00 	ldrex	r3, [r3]
 800c37c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c384:	637b      	str	r3, [r7, #52]	@ 0x34
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c390:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c396:	e841 2300 	strex	r3, r2, [r1]
 800c39a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1e6      	bne.n	800c370 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	e853 3f00 	ldrex	r3, [r3]
 800c3b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c3b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c2:	61ba      	str	r2, [r7, #24]
 800c3c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c6:	6979      	ldr	r1, [r7, #20]
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	e841 2300 	strex	r3, r2, [r1]
 800c3ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1e5      	bne.n	800c3a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c3de:	bf00      	nop
 800c3e0:	373c      	adds	r7, #60	@ 0x3c
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b095      	sub	sp, #84	@ 0x54
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c410:	643b      	str	r3, [r7, #64]	@ 0x40
 800c412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e6      	bne.n	800c3f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3308      	adds	r3, #8
 800c42a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	61fb      	str	r3, [r7, #28]
   return(result);
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c43a:	f023 0301 	bic.w	r3, r3, #1
 800c43e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3308      	adds	r3, #8
 800c446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c44a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c44e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c450:	e841 2300 	strex	r3, r2, [r1]
 800c454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e3      	bne.n	800c424 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c460:	2b01      	cmp	r3, #1
 800c462:	d118      	bne.n	800c496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	e853 3f00 	ldrex	r3, [r3]
 800c470:	60bb      	str	r3, [r7, #8]
   return(result);
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	f023 0310 	bic.w	r3, r3, #16
 800c478:	647b      	str	r3, [r7, #68]	@ 0x44
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c482:	61bb      	str	r3, [r7, #24]
 800c484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	6979      	ldr	r1, [r7, #20]
 800c488:	69ba      	ldr	r2, [r7, #24]
 800c48a:	e841 2300 	strex	r3, r2, [r1]
 800c48e:	613b      	str	r3, [r7, #16]
   return(result);
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1e6      	bne.n	800c464 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2220      	movs	r2, #32
 800c49a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c4aa:	bf00      	nop
 800c4ac:	3754      	adds	r7, #84	@ 0x54
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b096      	sub	sp, #88	@ 0x58
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4c2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4c8:	2b81      	cmp	r3, #129	@ 0x81
 800c4ca:	d057      	beq.n	800c57c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800c4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e6      	bne.n	800c4d4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3308      	adds	r3, #8
 800c50c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	623b      	str	r3, [r7, #32]
   return(result);
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	f023 0301 	bic.w	r3, r3, #1
 800c51c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c526:	633a      	str	r2, [r7, #48]	@ 0x30
 800c528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e5      	bne.n	800c506 <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c53c:	2220      	movs	r2, #32
 800c53e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c546:	2b01      	cmp	r3, #1
 800c548:	d118      	bne.n	800c57c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	60fb      	str	r3, [r7, #12]
   return(result);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0310 	bic.w	r3, r3, #16
 800c55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	461a      	mov	r2, r3
 800c566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	69b9      	ldr	r1, [r7, #24]
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	617b      	str	r3, [r7, #20]
   return(result);
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e6      	bne.n	800c54a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c57e:	2200      	movs	r2, #0
 800c580:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c586:	2b01      	cmp	r3, #1
 800c588:	d107      	bne.n	800c59a <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c590:	4619      	mov	r1, r3
 800c592:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c594:	f7ff fa7c 	bl	800ba90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c598:	e002      	b.n	800c5a0 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800c59a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c59c:	f7f5 fd0a 	bl	8001fb4 <HAL_UART_RxCpltCallback>
}
 800c5a0:	bf00      	nop
 800c5a2:	3758      	adds	r7, #88	@ 0x58
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d109      	bne.n	800c5d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5ca:	085b      	lsrs	r3, r3, #1
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f7ff fa5d 	bl	800ba90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5d6:	e002      	b.n	800c5de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff fa45 	bl	800ba68 <HAL_UART_RxHalfCpltCallback>
}
 800c5de:	bf00      	nop
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b086      	sub	sp, #24
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c602:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c60e:	2b80      	cmp	r3, #128	@ 0x80
 800c610:	d109      	bne.n	800c626 <UART_DMAError+0x40>
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b21      	cmp	r3, #33	@ 0x21
 800c616:	d106      	bne.n	800c626 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c620:	6978      	ldr	r0, [r7, #20]
 800c622:	f7ff fea1 	bl	800c368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b40      	cmp	r3, #64	@ 0x40
 800c632:	d109      	bne.n	800c648 <UART_DMAError+0x62>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b22      	cmp	r3, #34	@ 0x22
 800c638:	d106      	bne.n	800c648 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c642:	6978      	ldr	r0, [r7, #20]
 800c644:	f7ff fed1 	bl	800c3ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c64e:	f043 0210 	orr.w	r2, r3, #16
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c658:	6978      	ldr	r0, [r7, #20]
 800c65a:	f7ff fa0f 	bl	800ba7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c65e:	bf00      	nop
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f7ff f9fd 	bl	800ba7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b088      	sub	sp, #32
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	61bb      	str	r3, [r7, #24]
 800c6b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6979      	ldr	r1, [r7, #20]
 800c6b6:	69ba      	ldr	r2, [r7, #24]
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e6      	bne.n	800c692 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff f9be 	bl	800ba54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6d8:	bf00      	nop
 800c6da:	3720      	adds	r7, #32
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d101      	bne.n	800c732 <HAL_UARTEx_DisableFifoMode+0x16>
 800c72e:	2302      	movs	r3, #2
 800c730:	e027      	b.n	800c782 <HAL_UARTEx_DisableFifoMode+0x66>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2224      	movs	r2, #36	@ 0x24
 800c73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0201 	bic.w	r2, r2, #1
 800c758:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c760:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2220      	movs	r2, #32
 800c774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d101      	bne.n	800c7a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e02d      	b.n	800c802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2224      	movs	r2, #36	@ 0x24
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0201 	bic.w	r2, r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f850 	bl	800c888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2220      	movs	r2, #32
 800c7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d101      	bne.n	800c822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c81e:	2302      	movs	r3, #2
 800c820:	e02d      	b.n	800c87e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2224      	movs	r2, #36	@ 0x24
 800c82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	430a      	orrs	r2, r1
 800c85c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f812 	bl	800c888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2220      	movs	r2, #32
 800c870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
	...

0800c888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c894:	2b00      	cmp	r3, #0
 800c896:	d108      	bne.n	800c8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8a8:	e031      	b.n	800c90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8aa:	2308      	movs	r3, #8
 800c8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8ae:	2308      	movs	r3, #8
 800c8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	0e5b      	lsrs	r3, r3, #25
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	0f5b      	lsrs	r3, r3, #29
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	7b3a      	ldrb	r2, [r7, #12]
 800c8d6:	4911      	ldr	r1, [pc, #68]	@ (800c91c <UARTEx_SetNbDataToProcess+0x94>)
 800c8d8:	5c8a      	ldrb	r2, [r1, r2]
 800c8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8de:	7b3a      	ldrb	r2, [r7, #12]
 800c8e0:	490f      	ldr	r1, [pc, #60]	@ (800c920 <UARTEx_SetNbDataToProcess+0x98>)
 800c8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	7b7a      	ldrb	r2, [r7, #13]
 800c8f4:	4909      	ldr	r1, [pc, #36]	@ (800c91c <UARTEx_SetNbDataToProcess+0x94>)
 800c8f6:	5c8a      	ldrb	r2, [r1, r2]
 800c8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8fc:	7b7a      	ldrb	r2, [r7, #13]
 800c8fe:	4908      	ldr	r1, [pc, #32]	@ (800c920 <UARTEx_SetNbDataToProcess+0x98>)
 800c900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c902:	fb93 f3f2 	sdiv	r3, r3, r2
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	0800d9cc 	.word	0x0800d9cc
 800c920:	0800d9d4 	.word	0x0800d9d4

0800c924 <std>:
 800c924:	2300      	movs	r3, #0
 800c926:	b510      	push	{r4, lr}
 800c928:	4604      	mov	r4, r0
 800c92a:	6083      	str	r3, [r0, #8]
 800c92c:	8181      	strh	r1, [r0, #12]
 800c92e:	4619      	mov	r1, r3
 800c930:	6643      	str	r3, [r0, #100]	@ 0x64
 800c932:	81c2      	strh	r2, [r0, #14]
 800c934:	2208      	movs	r2, #8
 800c936:	6183      	str	r3, [r0, #24]
 800c938:	e9c0 3300 	strd	r3, r3, [r0]
 800c93c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c940:	305c      	adds	r0, #92	@ 0x5c
 800c942:	f000 f9f9 	bl	800cd38 <memset>
 800c946:	4b0d      	ldr	r3, [pc, #52]	@ (800c97c <std+0x58>)
 800c948:	6224      	str	r4, [r4, #32]
 800c94a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c94c:	4b0c      	ldr	r3, [pc, #48]	@ (800c980 <std+0x5c>)
 800c94e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c950:	4b0c      	ldr	r3, [pc, #48]	@ (800c984 <std+0x60>)
 800c952:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c954:	4b0c      	ldr	r3, [pc, #48]	@ (800c988 <std+0x64>)
 800c956:	6323      	str	r3, [r4, #48]	@ 0x30
 800c958:	4b0c      	ldr	r3, [pc, #48]	@ (800c98c <std+0x68>)
 800c95a:	429c      	cmp	r4, r3
 800c95c:	d006      	beq.n	800c96c <std+0x48>
 800c95e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c962:	4294      	cmp	r4, r2
 800c964:	d002      	beq.n	800c96c <std+0x48>
 800c966:	33d0      	adds	r3, #208	@ 0xd0
 800c968:	429c      	cmp	r4, r3
 800c96a:	d105      	bne.n	800c978 <std+0x54>
 800c96c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c974:	f000 ba58 	b.w	800ce28 <__retarget_lock_init_recursive>
 800c978:	bd10      	pop	{r4, pc}
 800c97a:	bf00      	nop
 800c97c:	0800cb89 	.word	0x0800cb89
 800c980:	0800cbab 	.word	0x0800cbab
 800c984:	0800cbe3 	.word	0x0800cbe3
 800c988:	0800cc07 	.word	0x0800cc07
 800c98c:	200006a4 	.word	0x200006a4

0800c990 <stdio_exit_handler>:
 800c990:	4a02      	ldr	r2, [pc, #8]	@ (800c99c <stdio_exit_handler+0xc>)
 800c992:	4903      	ldr	r1, [pc, #12]	@ (800c9a0 <stdio_exit_handler+0x10>)
 800c994:	4803      	ldr	r0, [pc, #12]	@ (800c9a4 <stdio_exit_handler+0x14>)
 800c996:	f000 b869 	b.w	800ca6c <_fwalk_sglue>
 800c99a:	bf00      	nop
 800c99c:	200000e8 	.word	0x200000e8
 800c9a0:	0800d6e9 	.word	0x0800d6e9
 800c9a4:	200000f8 	.word	0x200000f8

0800c9a8 <cleanup_stdio>:
 800c9a8:	6841      	ldr	r1, [r0, #4]
 800c9aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c9dc <cleanup_stdio+0x34>)
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	b510      	push	{r4, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	d001      	beq.n	800c9b8 <cleanup_stdio+0x10>
 800c9b4:	f000 fe98 	bl	800d6e8 <_fflush_r>
 800c9b8:	68a1      	ldr	r1, [r4, #8]
 800c9ba:	4b09      	ldr	r3, [pc, #36]	@ (800c9e0 <cleanup_stdio+0x38>)
 800c9bc:	4299      	cmp	r1, r3
 800c9be:	d002      	beq.n	800c9c6 <cleanup_stdio+0x1e>
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fe91 	bl	800d6e8 <_fflush_r>
 800c9c6:	68e1      	ldr	r1, [r4, #12]
 800c9c8:	4b06      	ldr	r3, [pc, #24]	@ (800c9e4 <cleanup_stdio+0x3c>)
 800c9ca:	4299      	cmp	r1, r3
 800c9cc:	d004      	beq.n	800c9d8 <cleanup_stdio+0x30>
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9d4:	f000 be88 	b.w	800d6e8 <_fflush_r>
 800c9d8:	bd10      	pop	{r4, pc}
 800c9da:	bf00      	nop
 800c9dc:	200006a4 	.word	0x200006a4
 800c9e0:	2000070c 	.word	0x2000070c
 800c9e4:	20000774 	.word	0x20000774

0800c9e8 <global_stdio_init.part.0>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800ca18 <global_stdio_init.part.0+0x30>)
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	4c0b      	ldr	r4, [pc, #44]	@ (800ca1c <global_stdio_init.part.0+0x34>)
 800c9f0:	4a0b      	ldr	r2, [pc, #44]	@ (800ca20 <global_stdio_init.part.0+0x38>)
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f7ff ff94 	bl	800c924 <std>
 800c9fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca00:	2201      	movs	r2, #1
 800ca02:	2109      	movs	r1, #9
 800ca04:	f7ff ff8e 	bl	800c924 <std>
 800ca08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca0c:	2202      	movs	r2, #2
 800ca0e:	2112      	movs	r1, #18
 800ca10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca14:	f7ff bf86 	b.w	800c924 <std>
 800ca18:	200007dc 	.word	0x200007dc
 800ca1c:	200006a4 	.word	0x200006a4
 800ca20:	0800c991 	.word	0x0800c991

0800ca24 <__sfp_lock_acquire>:
 800ca24:	4801      	ldr	r0, [pc, #4]	@ (800ca2c <__sfp_lock_acquire+0x8>)
 800ca26:	f000 ba00 	b.w	800ce2a <__retarget_lock_acquire_recursive>
 800ca2a:	bf00      	nop
 800ca2c:	200007e5 	.word	0x200007e5

0800ca30 <__sfp_lock_release>:
 800ca30:	4801      	ldr	r0, [pc, #4]	@ (800ca38 <__sfp_lock_release+0x8>)
 800ca32:	f000 b9fb 	b.w	800ce2c <__retarget_lock_release_recursive>
 800ca36:	bf00      	nop
 800ca38:	200007e5 	.word	0x200007e5

0800ca3c <__sinit>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	4604      	mov	r4, r0
 800ca40:	f7ff fff0 	bl	800ca24 <__sfp_lock_acquire>
 800ca44:	6a23      	ldr	r3, [r4, #32]
 800ca46:	b11b      	cbz	r3, 800ca50 <__sinit+0x14>
 800ca48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca4c:	f7ff bff0 	b.w	800ca30 <__sfp_lock_release>
 800ca50:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <__sinit+0x28>)
 800ca52:	6223      	str	r3, [r4, #32]
 800ca54:	4b04      	ldr	r3, [pc, #16]	@ (800ca68 <__sinit+0x2c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1f5      	bne.n	800ca48 <__sinit+0xc>
 800ca5c:	f7ff ffc4 	bl	800c9e8 <global_stdio_init.part.0>
 800ca60:	e7f2      	b.n	800ca48 <__sinit+0xc>
 800ca62:	bf00      	nop
 800ca64:	0800c9a9 	.word	0x0800c9a9
 800ca68:	200007dc 	.word	0x200007dc

0800ca6c <_fwalk_sglue>:
 800ca6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca70:	4607      	mov	r7, r0
 800ca72:	4688      	mov	r8, r1
 800ca74:	4614      	mov	r4, r2
 800ca76:	2600      	movs	r6, #0
 800ca78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ca80:	d505      	bpl.n	800ca8e <_fwalk_sglue+0x22>
 800ca82:	6824      	ldr	r4, [r4, #0]
 800ca84:	2c00      	cmp	r4, #0
 800ca86:	d1f7      	bne.n	800ca78 <_fwalk_sglue+0xc>
 800ca88:	4630      	mov	r0, r6
 800ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8e:	89ab      	ldrh	r3, [r5, #12]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d907      	bls.n	800caa4 <_fwalk_sglue+0x38>
 800ca94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	d003      	beq.n	800caa4 <_fwalk_sglue+0x38>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4638      	mov	r0, r7
 800caa0:	47c0      	blx	r8
 800caa2:	4306      	orrs	r6, r0
 800caa4:	3568      	adds	r5, #104	@ 0x68
 800caa6:	e7e9      	b.n	800ca7c <_fwalk_sglue+0x10>

0800caa8 <iprintf>:
 800caa8:	b40f      	push	{r0, r1, r2, r3}
 800caaa:	b507      	push	{r0, r1, r2, lr}
 800caac:	4906      	ldr	r1, [pc, #24]	@ (800cac8 <iprintf+0x20>)
 800caae:	ab04      	add	r3, sp, #16
 800cab0:	6808      	ldr	r0, [r1, #0]
 800cab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab6:	6881      	ldr	r1, [r0, #8]
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	f000 fae7 	bl	800d08c <_vfiprintf_r>
 800cabe:	b003      	add	sp, #12
 800cac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac4:	b004      	add	sp, #16
 800cac6:	4770      	bx	lr
 800cac8:	200000f4 	.word	0x200000f4

0800cacc <_puts_r>:
 800cacc:	6a03      	ldr	r3, [r0, #32]
 800cace:	b570      	push	{r4, r5, r6, lr}
 800cad0:	4605      	mov	r5, r0
 800cad2:	460e      	mov	r6, r1
 800cad4:	6884      	ldr	r4, [r0, #8]
 800cad6:	b90b      	cbnz	r3, 800cadc <_puts_r+0x10>
 800cad8:	f7ff ffb0 	bl	800ca3c <__sinit>
 800cadc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cade:	07db      	lsls	r3, r3, #31
 800cae0:	d405      	bmi.n	800caee <_puts_r+0x22>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	0598      	lsls	r0, r3, #22
 800cae6:	d402      	bmi.n	800caee <_puts_r+0x22>
 800cae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caea:	f000 f99e 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800caee:	89a3      	ldrh	r3, [r4, #12]
 800caf0:	0719      	lsls	r1, r3, #28
 800caf2:	d502      	bpl.n	800cafa <_puts_r+0x2e>
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d135      	bne.n	800cb66 <_puts_r+0x9a>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4628      	mov	r0, r5
 800cafe:	f000 f8c5 	bl	800cc8c <__swsetup_r>
 800cb02:	b380      	cbz	r0, 800cb66 <_puts_r+0x9a>
 800cb04:	f04f 35ff 	mov.w	r5, #4294967295
 800cb08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb0a:	07da      	lsls	r2, r3, #31
 800cb0c:	d405      	bmi.n	800cb1a <_puts_r+0x4e>
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	059b      	lsls	r3, r3, #22
 800cb12:	d402      	bmi.n	800cb1a <_puts_r+0x4e>
 800cb14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb16:	f000 f989 	bl	800ce2c <__retarget_lock_release_recursive>
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da04      	bge.n	800cb2c <_puts_r+0x60>
 800cb22:	69a2      	ldr	r2, [r4, #24]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	dc17      	bgt.n	800cb58 <_puts_r+0x8c>
 800cb28:	290a      	cmp	r1, #10
 800cb2a:	d015      	beq.n	800cb58 <_puts_r+0x8c>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	6022      	str	r2, [r4, #0]
 800cb32:	7019      	strb	r1, [r3, #0]
 800cb34:	68a3      	ldr	r3, [r4, #8]
 800cb36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	60a3      	str	r3, [r4, #8]
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d1ed      	bne.n	800cb1e <_puts_r+0x52>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	da11      	bge.n	800cb6a <_puts_r+0x9e>
 800cb46:	4622      	mov	r2, r4
 800cb48:	210a      	movs	r1, #10
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f000 f85f 	bl	800cc0e <__swbuf_r>
 800cb50:	3001      	adds	r0, #1
 800cb52:	d0d7      	beq.n	800cb04 <_puts_r+0x38>
 800cb54:	250a      	movs	r5, #10
 800cb56:	e7d7      	b.n	800cb08 <_puts_r+0x3c>
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f000 f857 	bl	800cc0e <__swbuf_r>
 800cb60:	3001      	adds	r0, #1
 800cb62:	d1e7      	bne.n	800cb34 <_puts_r+0x68>
 800cb64:	e7ce      	b.n	800cb04 <_puts_r+0x38>
 800cb66:	3e01      	subs	r6, #1
 800cb68:	e7e4      	b.n	800cb34 <_puts_r+0x68>
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	6022      	str	r2, [r4, #0]
 800cb70:	220a      	movs	r2, #10
 800cb72:	701a      	strb	r2, [r3, #0]
 800cb74:	e7ee      	b.n	800cb54 <_puts_r+0x88>
	...

0800cb78 <puts>:
 800cb78:	4b02      	ldr	r3, [pc, #8]	@ (800cb84 <puts+0xc>)
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	f7ff bfa5 	b.w	800cacc <_puts_r>
 800cb82:	bf00      	nop
 800cb84:	200000f4 	.word	0x200000f4

0800cb88 <__sread>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	460c      	mov	r4, r1
 800cb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb90:	f000 f8fc 	bl	800cd8c <_read_r>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	bfab      	itete	ge
 800cb98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb9a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb9c:	181b      	addge	r3, r3, r0
 800cb9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cba2:	bfac      	ite	ge
 800cba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cba6:	81a3      	strhlt	r3, [r4, #12]
 800cba8:	bd10      	pop	{r4, pc}

0800cbaa <__swrite>:
 800cbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbae:	461f      	mov	r7, r3
 800cbb0:	898b      	ldrh	r3, [r1, #12]
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	05db      	lsls	r3, r3, #23
 800cbb8:	4616      	mov	r6, r2
 800cbba:	d505      	bpl.n	800cbc8 <__swrite+0x1e>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	f000 f8d0 	bl	800cd68 <_lseek_r>
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	4632      	mov	r2, r6
 800cbcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	463b      	mov	r3, r7
 800cbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	f000 b8e7 	b.w	800cdb0 <_write_r>

0800cbe2 <__sseek>:
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbea:	f000 f8bd 	bl	800cd68 <_lseek_r>
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	bf15      	itete	ne
 800cbf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cbf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cbfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cbfe:	81a3      	strheq	r3, [r4, #12]
 800cc00:	bf18      	it	ne
 800cc02:	81a3      	strhne	r3, [r4, #12]
 800cc04:	bd10      	pop	{r4, pc}

0800cc06 <__sclose>:
 800cc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0a:	f000 b89d 	b.w	800cd48 <_close_r>

0800cc0e <__swbuf_r>:
 800cc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc10:	460e      	mov	r6, r1
 800cc12:	4614      	mov	r4, r2
 800cc14:	4605      	mov	r5, r0
 800cc16:	b118      	cbz	r0, 800cc20 <__swbuf_r+0x12>
 800cc18:	6a03      	ldr	r3, [r0, #32]
 800cc1a:	b90b      	cbnz	r3, 800cc20 <__swbuf_r+0x12>
 800cc1c:	f7ff ff0e 	bl	800ca3c <__sinit>
 800cc20:	69a3      	ldr	r3, [r4, #24]
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	071a      	lsls	r2, r3, #28
 800cc28:	d501      	bpl.n	800cc2e <__swbuf_r+0x20>
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	b943      	cbnz	r3, 800cc40 <__swbuf_r+0x32>
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4628      	mov	r0, r5
 800cc32:	f000 f82b 	bl	800cc8c <__swsetup_r>
 800cc36:	b118      	cbz	r0, 800cc40 <__swbuf_r+0x32>
 800cc38:	f04f 37ff 	mov.w	r7, #4294967295
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	b2f6      	uxtb	r6, r6
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	4637      	mov	r7, r6
 800cc48:	1a98      	subs	r0, r3, r2
 800cc4a:	6963      	ldr	r3, [r4, #20]
 800cc4c:	4283      	cmp	r3, r0
 800cc4e:	dc05      	bgt.n	800cc5c <__swbuf_r+0x4e>
 800cc50:	4621      	mov	r1, r4
 800cc52:	4628      	mov	r0, r5
 800cc54:	f000 fd48 	bl	800d6e8 <_fflush_r>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1ed      	bne.n	800cc38 <__swbuf_r+0x2a>
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	701e      	strb	r6, [r3, #0]
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	6962      	ldr	r2, [r4, #20]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d004      	beq.n	800cc7c <__swbuf_r+0x6e>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	07db      	lsls	r3, r3, #31
 800cc76:	d5e1      	bpl.n	800cc3c <__swbuf_r+0x2e>
 800cc78:	2e0a      	cmp	r6, #10
 800cc7a:	d1df      	bne.n	800cc3c <__swbuf_r+0x2e>
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 fd32 	bl	800d6e8 <_fflush_r>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d0d9      	beq.n	800cc3c <__swbuf_r+0x2e>
 800cc88:	e7d6      	b.n	800cc38 <__swbuf_r+0x2a>
	...

0800cc8c <__swsetup_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <__swsetup_r+0xa8>)
 800cc90:	4605      	mov	r5, r0
 800cc92:	460c      	mov	r4, r1
 800cc94:	6818      	ldr	r0, [r3, #0]
 800cc96:	b118      	cbz	r0, 800cca0 <__swsetup_r+0x14>
 800cc98:	6a03      	ldr	r3, [r0, #32]
 800cc9a:	b90b      	cbnz	r3, 800cca0 <__swsetup_r+0x14>
 800cc9c:	f7ff fece 	bl	800ca3c <__sinit>
 800cca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca4:	0719      	lsls	r1, r3, #28
 800cca6:	d422      	bmi.n	800ccee <__swsetup_r+0x62>
 800cca8:	06da      	lsls	r2, r3, #27
 800ccaa:	d407      	bmi.n	800ccbc <__swsetup_r+0x30>
 800ccac:	2209      	movs	r2, #9
 800ccae:	602a      	str	r2, [r5, #0]
 800ccb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb8:	81a3      	strh	r3, [r4, #12]
 800ccba:	e033      	b.n	800cd24 <__swsetup_r+0x98>
 800ccbc:	0758      	lsls	r0, r3, #29
 800ccbe:	d512      	bpl.n	800cce6 <__swsetup_r+0x5a>
 800ccc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccc2:	b141      	cbz	r1, 800ccd6 <__swsetup_r+0x4a>
 800ccc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc8:	4299      	cmp	r1, r3
 800ccca:	d002      	beq.n	800ccd2 <__swsetup_r+0x46>
 800cccc:	4628      	mov	r0, r5
 800ccce:	f000 f8bb 	bl	800ce48 <_free_r>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	2300      	movs	r3, #0
 800cce0:	6063      	str	r3, [r4, #4]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f043 0308 	orr.w	r3, r3, #8
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	b94b      	cbnz	r3, 800cd06 <__swsetup_r+0x7a>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccfc:	d003      	beq.n	800cd06 <__swsetup_r+0x7a>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 fd3e 	bl	800d782 <__smakebuf_r>
 800cd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0a:	f013 0201 	ands.w	r2, r3, #1
 800cd0e:	d00a      	beq.n	800cd26 <__swsetup_r+0x9a>
 800cd10:	2200      	movs	r2, #0
 800cd12:	60a2      	str	r2, [r4, #8]
 800cd14:	6962      	ldr	r2, [r4, #20]
 800cd16:	4252      	negs	r2, r2
 800cd18:	61a2      	str	r2, [r4, #24]
 800cd1a:	6922      	ldr	r2, [r4, #16]
 800cd1c:	b942      	cbnz	r2, 800cd30 <__swsetup_r+0xa4>
 800cd1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd22:	d1c5      	bne.n	800ccb0 <__swsetup_r+0x24>
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	0799      	lsls	r1, r3, #30
 800cd28:	bf58      	it	pl
 800cd2a:	6962      	ldrpl	r2, [r4, #20]
 800cd2c:	60a2      	str	r2, [r4, #8]
 800cd2e:	e7f4      	b.n	800cd1a <__swsetup_r+0x8e>
 800cd30:	2000      	movs	r0, #0
 800cd32:	e7f7      	b.n	800cd24 <__swsetup_r+0x98>
 800cd34:	200000f4 	.word	0x200000f4

0800cd38 <memset>:
 800cd38:	4402      	add	r2, r0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <_close_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4d05      	ldr	r5, [pc, #20]	@ (800cd64 <_close_r+0x1c>)
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f5 fb55 	bl	8002402 <_close>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_close_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_close_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	200007e0 	.word	0x200007e0

0800cd68 <_lseek_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4d06      	ldr	r5, [pc, #24]	@ (800cd88 <_lseek_r+0x20>)
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4611      	mov	r1, r2
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f5 fb6a 	bl	8002450 <_lseek>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_lseek_r+0x1e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_lseek_r+0x1e>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	200007e0 	.word	0x200007e0

0800cd8c <_read_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4604      	mov	r4, r0
 800cd90:	4d06      	ldr	r5, [pc, #24]	@ (800cdac <_read_r+0x20>)
 800cd92:	4608      	mov	r0, r1
 800cd94:	4611      	mov	r1, r2
 800cd96:	2200      	movs	r2, #0
 800cd98:	602a      	str	r2, [r5, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	f7f5 faf8 	bl	8002390 <_read>
 800cda0:	1c43      	adds	r3, r0, #1
 800cda2:	d102      	bne.n	800cdaa <_read_r+0x1e>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	b103      	cbz	r3, 800cdaa <_read_r+0x1e>
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	200007e0 	.word	0x200007e0

0800cdb0 <_write_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	4d06      	ldr	r5, [pc, #24]	@ (800cdd0 <_write_r+0x20>)
 800cdb6:	4608      	mov	r0, r1
 800cdb8:	4611      	mov	r1, r2
 800cdba:	2200      	movs	r2, #0
 800cdbc:	602a      	str	r2, [r5, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f7f5 fb03 	bl	80023ca <_write>
 800cdc4:	1c43      	adds	r3, r0, #1
 800cdc6:	d102      	bne.n	800cdce <_write_r+0x1e>
 800cdc8:	682b      	ldr	r3, [r5, #0]
 800cdca:	b103      	cbz	r3, 800cdce <_write_r+0x1e>
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	200007e0 	.word	0x200007e0

0800cdd4 <__errno>:
 800cdd4:	4b01      	ldr	r3, [pc, #4]	@ (800cddc <__errno+0x8>)
 800cdd6:	6818      	ldr	r0, [r3, #0]
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	200000f4 	.word	0x200000f4

0800cde0 <__libc_init_array>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	4d0d      	ldr	r5, [pc, #52]	@ (800ce18 <__libc_init_array+0x38>)
 800cde4:	2600      	movs	r6, #0
 800cde6:	4c0d      	ldr	r4, [pc, #52]	@ (800ce1c <__libc_init_array+0x3c>)
 800cde8:	1b64      	subs	r4, r4, r5
 800cdea:	10a4      	asrs	r4, r4, #2
 800cdec:	42a6      	cmp	r6, r4
 800cdee:	d109      	bne.n	800ce04 <__libc_init_array+0x24>
 800cdf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ce20 <__libc_init_array+0x40>)
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	4c0b      	ldr	r4, [pc, #44]	@ (800ce24 <__libc_init_array+0x44>)
 800cdf6:	f000 fd41 	bl	800d87c <_init>
 800cdfa:	1b64      	subs	r4, r4, r5
 800cdfc:	10a4      	asrs	r4, r4, #2
 800cdfe:	42a6      	cmp	r6, r4
 800ce00:	d105      	bne.n	800ce0e <__libc_init_array+0x2e>
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce08:	3601      	adds	r6, #1
 800ce0a:	4798      	blx	r3
 800ce0c:	e7ee      	b.n	800cdec <__libc_init_array+0xc>
 800ce0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce12:	3601      	adds	r6, #1
 800ce14:	4798      	blx	r3
 800ce16:	e7f2      	b.n	800cdfe <__libc_init_array+0x1e>
 800ce18:	0800da18 	.word	0x0800da18
 800ce1c:	0800da18 	.word	0x0800da18
 800ce20:	0800da18 	.word	0x0800da18
 800ce24:	0800da1c 	.word	0x0800da1c

0800ce28 <__retarget_lock_init_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__retarget_lock_acquire_recursive>:
 800ce2a:	4770      	bx	lr

0800ce2c <__retarget_lock_release_recursive>:
 800ce2c:	4770      	bx	lr

0800ce2e <memcpy>:
 800ce2e:	440a      	add	r2, r1
 800ce30:	1e43      	subs	r3, r0, #1
 800ce32:	4291      	cmp	r1, r2
 800ce34:	d100      	bne.n	800ce38 <memcpy+0xa>
 800ce36:	4770      	bx	lr
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce44:	d1f9      	bne.n	800ce3a <memcpy+0xc>
 800ce46:	bd10      	pop	{r4, pc}

0800ce48 <_free_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	2900      	cmp	r1, #0
 800ce4e:	d041      	beq.n	800ced4 <_free_r+0x8c>
 800ce50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce54:	1f0c      	subs	r4, r1, #4
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	bfb8      	it	lt
 800ce5a:	18e4      	addlt	r4, r4, r3
 800ce5c:	f000 f8e0 	bl	800d020 <__malloc_lock>
 800ce60:	4a1d      	ldr	r2, [pc, #116]	@ (800ced8 <_free_r+0x90>)
 800ce62:	6813      	ldr	r3, [r2, #0]
 800ce64:	b933      	cbnz	r3, 800ce74 <_free_r+0x2c>
 800ce66:	6063      	str	r3, [r4, #4]
 800ce68:	6014      	str	r4, [r2, #0]
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce70:	f000 b8dc 	b.w	800d02c <__malloc_unlock>
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	d908      	bls.n	800ce8a <_free_r+0x42>
 800ce78:	6820      	ldr	r0, [r4, #0]
 800ce7a:	1821      	adds	r1, r4, r0
 800ce7c:	428b      	cmp	r3, r1
 800ce7e:	bf01      	itttt	eq
 800ce80:	6819      	ldreq	r1, [r3, #0]
 800ce82:	685b      	ldreq	r3, [r3, #4]
 800ce84:	1809      	addeq	r1, r1, r0
 800ce86:	6021      	streq	r1, [r4, #0]
 800ce88:	e7ed      	b.n	800ce66 <_free_r+0x1e>
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	b10b      	cbz	r3, 800ce94 <_free_r+0x4c>
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d9fa      	bls.n	800ce8a <_free_r+0x42>
 800ce94:	6811      	ldr	r1, [r2, #0]
 800ce96:	1850      	adds	r0, r2, r1
 800ce98:	42a0      	cmp	r0, r4
 800ce9a:	d10b      	bne.n	800ceb4 <_free_r+0x6c>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	4401      	add	r1, r0
 800cea0:	1850      	adds	r0, r2, r1
 800cea2:	6011      	str	r1, [r2, #0]
 800cea4:	4283      	cmp	r3, r0
 800cea6:	d1e0      	bne.n	800ce6a <_free_r+0x22>
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	4408      	add	r0, r1
 800ceae:	6053      	str	r3, [r2, #4]
 800ceb0:	6010      	str	r0, [r2, #0]
 800ceb2:	e7da      	b.n	800ce6a <_free_r+0x22>
 800ceb4:	d902      	bls.n	800cebc <_free_r+0x74>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	602b      	str	r3, [r5, #0]
 800ceba:	e7d6      	b.n	800ce6a <_free_r+0x22>
 800cebc:	6820      	ldr	r0, [r4, #0]
 800cebe:	1821      	adds	r1, r4, r0
 800cec0:	428b      	cmp	r3, r1
 800cec2:	bf02      	ittt	eq
 800cec4:	6819      	ldreq	r1, [r3, #0]
 800cec6:	685b      	ldreq	r3, [r3, #4]
 800cec8:	1809      	addeq	r1, r1, r0
 800ceca:	6063      	str	r3, [r4, #4]
 800cecc:	bf08      	it	eq
 800cece:	6021      	streq	r1, [r4, #0]
 800ced0:	6054      	str	r4, [r2, #4]
 800ced2:	e7ca      	b.n	800ce6a <_free_r+0x22>
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	200007ec 	.word	0x200007ec

0800cedc <sbrk_aligned>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	4e0f      	ldr	r6, [pc, #60]	@ (800cf1c <sbrk_aligned+0x40>)
 800cee0:	460c      	mov	r4, r1
 800cee2:	4605      	mov	r5, r0
 800cee4:	6831      	ldr	r1, [r6, #0]
 800cee6:	b911      	cbnz	r1, 800ceee <sbrk_aligned+0x12>
 800cee8:	f000 fcaa 	bl	800d840 <_sbrk_r>
 800ceec:	6030      	str	r0, [r6, #0]
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f000 fca5 	bl	800d840 <_sbrk_r>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	d103      	bne.n	800cf02 <sbrk_aligned+0x26>
 800cefa:	f04f 34ff 	mov.w	r4, #4294967295
 800cefe:	4620      	mov	r0, r4
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	1cc4      	adds	r4, r0, #3
 800cf04:	f024 0403 	bic.w	r4, r4, #3
 800cf08:	42a0      	cmp	r0, r4
 800cf0a:	d0f8      	beq.n	800cefe <sbrk_aligned+0x22>
 800cf0c:	1a21      	subs	r1, r4, r0
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f000 fc96 	bl	800d840 <_sbrk_r>
 800cf14:	3001      	adds	r0, #1
 800cf16:	d1f2      	bne.n	800cefe <sbrk_aligned+0x22>
 800cf18:	e7ef      	b.n	800cefa <sbrk_aligned+0x1e>
 800cf1a:	bf00      	nop
 800cf1c:	200007e8 	.word	0x200007e8

0800cf20 <_malloc_r>:
 800cf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf24:	1ccd      	adds	r5, r1, #3
 800cf26:	4606      	mov	r6, r0
 800cf28:	f025 0503 	bic.w	r5, r5, #3
 800cf2c:	3508      	adds	r5, #8
 800cf2e:	2d0c      	cmp	r5, #12
 800cf30:	bf38      	it	cc
 800cf32:	250c      	movcc	r5, #12
 800cf34:	2d00      	cmp	r5, #0
 800cf36:	db01      	blt.n	800cf3c <_malloc_r+0x1c>
 800cf38:	42a9      	cmp	r1, r5
 800cf3a:	d904      	bls.n	800cf46 <_malloc_r+0x26>
 800cf3c:	230c      	movs	r3, #12
 800cf3e:	6033      	str	r3, [r6, #0]
 800cf40:	2000      	movs	r0, #0
 800cf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d01c <_malloc_r+0xfc>
 800cf4a:	f000 f869 	bl	800d020 <__malloc_lock>
 800cf4e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf52:	461c      	mov	r4, r3
 800cf54:	bb44      	cbnz	r4, 800cfa8 <_malloc_r+0x88>
 800cf56:	4629      	mov	r1, r5
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7ff ffbf 	bl	800cedc <sbrk_aligned>
 800cf5e:	1c43      	adds	r3, r0, #1
 800cf60:	4604      	mov	r4, r0
 800cf62:	d158      	bne.n	800d016 <_malloc_r+0xf6>
 800cf64:	f8d8 4000 	ldr.w	r4, [r8]
 800cf68:	4627      	mov	r7, r4
 800cf6a:	2f00      	cmp	r7, #0
 800cf6c:	d143      	bne.n	800cff6 <_malloc_r+0xd6>
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d04b      	beq.n	800d00a <_malloc_r+0xea>
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	4639      	mov	r1, r7
 800cf76:	4630      	mov	r0, r6
 800cf78:	eb04 0903 	add.w	r9, r4, r3
 800cf7c:	f000 fc60 	bl	800d840 <_sbrk_r>
 800cf80:	4581      	cmp	r9, r0
 800cf82:	d142      	bne.n	800d00a <_malloc_r+0xea>
 800cf84:	6821      	ldr	r1, [r4, #0]
 800cf86:	4630      	mov	r0, r6
 800cf88:	1a6d      	subs	r5, r5, r1
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7ff ffa6 	bl	800cedc <sbrk_aligned>
 800cf90:	3001      	adds	r0, #1
 800cf92:	d03a      	beq.n	800d00a <_malloc_r+0xea>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	442b      	add	r3, r5
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	bb62      	cbnz	r2, 800cffc <_malloc_r+0xdc>
 800cfa2:	f8c8 7000 	str.w	r7, [r8]
 800cfa6:	e00f      	b.n	800cfc8 <_malloc_r+0xa8>
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	1b52      	subs	r2, r2, r5
 800cfac:	d420      	bmi.n	800cff0 <_malloc_r+0xd0>
 800cfae:	2a0b      	cmp	r2, #11
 800cfb0:	d917      	bls.n	800cfe2 <_malloc_r+0xc2>
 800cfb2:	1961      	adds	r1, r4, r5
 800cfb4:	42a3      	cmp	r3, r4
 800cfb6:	6025      	str	r5, [r4, #0]
 800cfb8:	bf18      	it	ne
 800cfba:	6059      	strne	r1, [r3, #4]
 800cfbc:	6863      	ldr	r3, [r4, #4]
 800cfbe:	bf08      	it	eq
 800cfc0:	f8c8 1000 	streq.w	r1, [r8]
 800cfc4:	5162      	str	r2, [r4, r5]
 800cfc6:	604b      	str	r3, [r1, #4]
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f000 f82f 	bl	800d02c <__malloc_unlock>
 800cfce:	f104 000b 	add.w	r0, r4, #11
 800cfd2:	1d23      	adds	r3, r4, #4
 800cfd4:	f020 0007 	bic.w	r0, r0, #7
 800cfd8:	1ac2      	subs	r2, r0, r3
 800cfda:	bf1c      	itt	ne
 800cfdc:	1a1b      	subne	r3, r3, r0
 800cfde:	50a3      	strne	r3, [r4, r2]
 800cfe0:	e7af      	b.n	800cf42 <_malloc_r+0x22>
 800cfe2:	6862      	ldr	r2, [r4, #4]
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	bf0c      	ite	eq
 800cfe8:	f8c8 2000 	streq.w	r2, [r8]
 800cfec:	605a      	strne	r2, [r3, #4]
 800cfee:	e7eb      	b.n	800cfc8 <_malloc_r+0xa8>
 800cff0:	4623      	mov	r3, r4
 800cff2:	6864      	ldr	r4, [r4, #4]
 800cff4:	e7ae      	b.n	800cf54 <_malloc_r+0x34>
 800cff6:	463c      	mov	r4, r7
 800cff8:	687f      	ldr	r7, [r7, #4]
 800cffa:	e7b6      	b.n	800cf6a <_malloc_r+0x4a>
 800cffc:	461a      	mov	r2, r3
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	42a3      	cmp	r3, r4
 800d002:	d1fb      	bne.n	800cffc <_malloc_r+0xdc>
 800d004:	2300      	movs	r3, #0
 800d006:	6053      	str	r3, [r2, #4]
 800d008:	e7de      	b.n	800cfc8 <_malloc_r+0xa8>
 800d00a:	230c      	movs	r3, #12
 800d00c:	4630      	mov	r0, r6
 800d00e:	6033      	str	r3, [r6, #0]
 800d010:	f000 f80c 	bl	800d02c <__malloc_unlock>
 800d014:	e794      	b.n	800cf40 <_malloc_r+0x20>
 800d016:	6005      	str	r5, [r0, #0]
 800d018:	e7d6      	b.n	800cfc8 <_malloc_r+0xa8>
 800d01a:	bf00      	nop
 800d01c:	200007ec 	.word	0x200007ec

0800d020 <__malloc_lock>:
 800d020:	4801      	ldr	r0, [pc, #4]	@ (800d028 <__malloc_lock+0x8>)
 800d022:	f7ff bf02 	b.w	800ce2a <__retarget_lock_acquire_recursive>
 800d026:	bf00      	nop
 800d028:	200007e4 	.word	0x200007e4

0800d02c <__malloc_unlock>:
 800d02c:	4801      	ldr	r0, [pc, #4]	@ (800d034 <__malloc_unlock+0x8>)
 800d02e:	f7ff befd 	b.w	800ce2c <__retarget_lock_release_recursive>
 800d032:	bf00      	nop
 800d034:	200007e4 	.word	0x200007e4

0800d038 <__sfputc_r>:
 800d038:	6893      	ldr	r3, [r2, #8]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	6093      	str	r3, [r2, #8]
 800d040:	b410      	push	{r4}
 800d042:	da08      	bge.n	800d056 <__sfputc_r+0x1e>
 800d044:	6994      	ldr	r4, [r2, #24]
 800d046:	42a3      	cmp	r3, r4
 800d048:	db01      	blt.n	800d04e <__sfputc_r+0x16>
 800d04a:	290a      	cmp	r1, #10
 800d04c:	d103      	bne.n	800d056 <__sfputc_r+0x1e>
 800d04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d052:	f7ff bddc 	b.w	800cc0e <__swbuf_r>
 800d056:	6813      	ldr	r3, [r2, #0]
 800d058:	1c58      	adds	r0, r3, #1
 800d05a:	6010      	str	r0, [r2, #0]
 800d05c:	4608      	mov	r0, r1
 800d05e:	7019      	strb	r1, [r3, #0]
 800d060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <__sfputs_r>:
 800d066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d068:	4606      	mov	r6, r0
 800d06a:	460f      	mov	r7, r1
 800d06c:	4614      	mov	r4, r2
 800d06e:	18d5      	adds	r5, r2, r3
 800d070:	42ac      	cmp	r4, r5
 800d072:	d101      	bne.n	800d078 <__sfputs_r+0x12>
 800d074:	2000      	movs	r0, #0
 800d076:	e007      	b.n	800d088 <__sfputs_r+0x22>
 800d078:	463a      	mov	r2, r7
 800d07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ffda 	bl	800d038 <__sfputc_r>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d1f3      	bne.n	800d070 <__sfputs_r+0xa>
 800d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d08c <_vfiprintf_r>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	460d      	mov	r5, r1
 800d092:	b09d      	sub	sp, #116	@ 0x74
 800d094:	4614      	mov	r4, r2
 800d096:	4698      	mov	r8, r3
 800d098:	4606      	mov	r6, r0
 800d09a:	b118      	cbz	r0, 800d0a4 <_vfiprintf_r+0x18>
 800d09c:	6a03      	ldr	r3, [r0, #32]
 800d09e:	b90b      	cbnz	r3, 800d0a4 <_vfiprintf_r+0x18>
 800d0a0:	f7ff fccc 	bl	800ca3c <__sinit>
 800d0a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0a6:	07d9      	lsls	r1, r3, #31
 800d0a8:	d405      	bmi.n	800d0b6 <_vfiprintf_r+0x2a>
 800d0aa:	89ab      	ldrh	r3, [r5, #12]
 800d0ac:	059a      	lsls	r2, r3, #22
 800d0ae:	d402      	bmi.n	800d0b6 <_vfiprintf_r+0x2a>
 800d0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0b2:	f7ff feba 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800d0b6:	89ab      	ldrh	r3, [r5, #12]
 800d0b8:	071b      	lsls	r3, r3, #28
 800d0ba:	d501      	bpl.n	800d0c0 <_vfiprintf_r+0x34>
 800d0bc:	692b      	ldr	r3, [r5, #16]
 800d0be:	b99b      	cbnz	r3, 800d0e8 <_vfiprintf_r+0x5c>
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff fde2 	bl	800cc8c <__swsetup_r>
 800d0c8:	b170      	cbz	r0, 800d0e8 <_vfiprintf_r+0x5c>
 800d0ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0cc:	07dc      	lsls	r4, r3, #31
 800d0ce:	d504      	bpl.n	800d0da <_vfiprintf_r+0x4e>
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	b01d      	add	sp, #116	@ 0x74
 800d0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0da:	89ab      	ldrh	r3, [r5, #12]
 800d0dc:	0598      	lsls	r0, r3, #22
 800d0de:	d4f7      	bmi.n	800d0d0 <_vfiprintf_r+0x44>
 800d0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0e2:	f7ff fea3 	bl	800ce2c <__retarget_lock_release_recursive>
 800d0e6:	e7f3      	b.n	800d0d0 <_vfiprintf_r+0x44>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0ee:	f04f 0901 	mov.w	r9, #1
 800d0f2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d2a8 <_vfiprintf_r+0x21c>
 800d0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0f8:	2320      	movs	r3, #32
 800d0fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0fe:	2330      	movs	r3, #48	@ 0x30
 800d100:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d104:	4623      	mov	r3, r4
 800d106:	469a      	mov	sl, r3
 800d108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d10c:	b10a      	cbz	r2, 800d112 <_vfiprintf_r+0x86>
 800d10e:	2a25      	cmp	r2, #37	@ 0x25
 800d110:	d1f9      	bne.n	800d106 <_vfiprintf_r+0x7a>
 800d112:	ebba 0b04 	subs.w	fp, sl, r4
 800d116:	d00b      	beq.n	800d130 <_vfiprintf_r+0xa4>
 800d118:	465b      	mov	r3, fp
 800d11a:	4622      	mov	r2, r4
 800d11c:	4629      	mov	r1, r5
 800d11e:	4630      	mov	r0, r6
 800d120:	f7ff ffa1 	bl	800d066 <__sfputs_r>
 800d124:	3001      	adds	r0, #1
 800d126:	f000 80a7 	beq.w	800d278 <_vfiprintf_r+0x1ec>
 800d12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d12c:	445a      	add	r2, fp
 800d12e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d130:	f89a 3000 	ldrb.w	r3, [sl]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 809f 	beq.w	800d278 <_vfiprintf_r+0x1ec>
 800d13a:	2300      	movs	r3, #0
 800d13c:	f04f 32ff 	mov.w	r2, #4294967295
 800d140:	f10a 0a01 	add.w	sl, sl, #1
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	9307      	str	r3, [sp, #28]
 800d148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d14e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d152:	4654      	mov	r4, sl
 800d154:	2205      	movs	r2, #5
 800d156:	4854      	ldr	r0, [pc, #336]	@ (800d2a8 <_vfiprintf_r+0x21c>)
 800d158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15c:	f000 fb80 	bl	800d860 <memchr>
 800d160:	9a04      	ldr	r2, [sp, #16]
 800d162:	b9d8      	cbnz	r0, 800d19c <_vfiprintf_r+0x110>
 800d164:	06d1      	lsls	r1, r2, #27
 800d166:	bf44      	itt	mi
 800d168:	2320      	movmi	r3, #32
 800d16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d16e:	0713      	lsls	r3, r2, #28
 800d170:	bf44      	itt	mi
 800d172:	232b      	movmi	r3, #43	@ 0x2b
 800d174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d178:	f89a 3000 	ldrb.w	r3, [sl]
 800d17c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d17e:	d015      	beq.n	800d1ac <_vfiprintf_r+0x120>
 800d180:	9a07      	ldr	r2, [sp, #28]
 800d182:	4654      	mov	r4, sl
 800d184:	2000      	movs	r0, #0
 800d186:	f04f 0c0a 	mov.w	ip, #10
 800d18a:	4621      	mov	r1, r4
 800d18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d190:	3b30      	subs	r3, #48	@ 0x30
 800d192:	2b09      	cmp	r3, #9
 800d194:	d94b      	bls.n	800d22e <_vfiprintf_r+0x1a2>
 800d196:	b1b0      	cbz	r0, 800d1c6 <_vfiprintf_r+0x13a>
 800d198:	9207      	str	r2, [sp, #28]
 800d19a:	e014      	b.n	800d1c6 <_vfiprintf_r+0x13a>
 800d19c:	eba0 0308 	sub.w	r3, r0, r8
 800d1a0:	46a2      	mov	sl, r4
 800d1a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	9304      	str	r3, [sp, #16]
 800d1aa:	e7d2      	b.n	800d152 <_vfiprintf_r+0xc6>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	1d19      	adds	r1, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	9103      	str	r1, [sp, #12]
 800d1b6:	bfbb      	ittet	lt
 800d1b8:	425b      	neglt	r3, r3
 800d1ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d1be:	9307      	strge	r3, [sp, #28]
 800d1c0:	9307      	strlt	r3, [sp, #28]
 800d1c2:	bfb8      	it	lt
 800d1c4:	9204      	strlt	r2, [sp, #16]
 800d1c6:	7823      	ldrb	r3, [r4, #0]
 800d1c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1ca:	d10a      	bne.n	800d1e2 <_vfiprintf_r+0x156>
 800d1cc:	7863      	ldrb	r3, [r4, #1]
 800d1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1d0:	d132      	bne.n	800d238 <_vfiprintf_r+0x1ac>
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	3402      	adds	r4, #2
 800d1d6:	1d1a      	adds	r2, r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1de:	9203      	str	r2, [sp, #12]
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2b8 <_vfiprintf_r+0x22c>
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	7821      	ldrb	r1, [r4, #0]
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	f000 fb38 	bl	800d860 <memchr>
 800d1f0:	b138      	cbz	r0, 800d202 <_vfiprintf_r+0x176>
 800d1f2:	eba0 000a 	sub.w	r0, r0, sl
 800d1f6:	2240      	movs	r2, #64	@ 0x40
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	3401      	adds	r4, #1
 800d1fc:	4082      	lsls	r2, r0
 800d1fe:	4313      	orrs	r3, r2
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d206:	2206      	movs	r2, #6
 800d208:	4828      	ldr	r0, [pc, #160]	@ (800d2ac <_vfiprintf_r+0x220>)
 800d20a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d20e:	f000 fb27 	bl	800d860 <memchr>
 800d212:	2800      	cmp	r0, #0
 800d214:	d03f      	beq.n	800d296 <_vfiprintf_r+0x20a>
 800d216:	4b26      	ldr	r3, [pc, #152]	@ (800d2b0 <_vfiprintf_r+0x224>)
 800d218:	bb1b      	cbnz	r3, 800d262 <_vfiprintf_r+0x1d6>
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	3307      	adds	r3, #7
 800d21e:	f023 0307 	bic.w	r3, r3, #7
 800d222:	3308      	adds	r3, #8
 800d224:	9303      	str	r3, [sp, #12]
 800d226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d228:	443b      	add	r3, r7
 800d22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d22c:	e76a      	b.n	800d104 <_vfiprintf_r+0x78>
 800d22e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d232:	460c      	mov	r4, r1
 800d234:	2001      	movs	r0, #1
 800d236:	e7a8      	b.n	800d18a <_vfiprintf_r+0xfe>
 800d238:	2300      	movs	r3, #0
 800d23a:	3401      	adds	r4, #1
 800d23c:	f04f 0c0a 	mov.w	ip, #10
 800d240:	4619      	mov	r1, r3
 800d242:	9305      	str	r3, [sp, #20]
 800d244:	4620      	mov	r0, r4
 800d246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d24a:	3a30      	subs	r2, #48	@ 0x30
 800d24c:	2a09      	cmp	r2, #9
 800d24e:	d903      	bls.n	800d258 <_vfiprintf_r+0x1cc>
 800d250:	2b00      	cmp	r3, #0
 800d252:	d0c6      	beq.n	800d1e2 <_vfiprintf_r+0x156>
 800d254:	9105      	str	r1, [sp, #20]
 800d256:	e7c4      	b.n	800d1e2 <_vfiprintf_r+0x156>
 800d258:	fb0c 2101 	mla	r1, ip, r1, r2
 800d25c:	4604      	mov	r4, r0
 800d25e:	2301      	movs	r3, #1
 800d260:	e7f0      	b.n	800d244 <_vfiprintf_r+0x1b8>
 800d262:	ab03      	add	r3, sp, #12
 800d264:	462a      	mov	r2, r5
 800d266:	a904      	add	r1, sp, #16
 800d268:	4630      	mov	r0, r6
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4b11      	ldr	r3, [pc, #68]	@ (800d2b4 <_vfiprintf_r+0x228>)
 800d26e:	f3af 8000 	nop.w
 800d272:	4607      	mov	r7, r0
 800d274:	1c78      	adds	r0, r7, #1
 800d276:	d1d6      	bne.n	800d226 <_vfiprintf_r+0x19a>
 800d278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	d405      	bmi.n	800d28a <_vfiprintf_r+0x1fe>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	059a      	lsls	r2, r3, #22
 800d282:	d402      	bmi.n	800d28a <_vfiprintf_r+0x1fe>
 800d284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d286:	f7ff fdd1 	bl	800ce2c <__retarget_lock_release_recursive>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	065b      	lsls	r3, r3, #25
 800d28e:	f53f af1f 	bmi.w	800d0d0 <_vfiprintf_r+0x44>
 800d292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d294:	e71e      	b.n	800d0d4 <_vfiprintf_r+0x48>
 800d296:	ab03      	add	r3, sp, #12
 800d298:	462a      	mov	r2, r5
 800d29a:	a904      	add	r1, sp, #16
 800d29c:	4630      	mov	r0, r6
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	4b04      	ldr	r3, [pc, #16]	@ (800d2b4 <_vfiprintf_r+0x228>)
 800d2a2:	f000 f87d 	bl	800d3a0 <_printf_i>
 800d2a6:	e7e4      	b.n	800d272 <_vfiprintf_r+0x1e6>
 800d2a8:	0800d9dc 	.word	0x0800d9dc
 800d2ac:	0800d9e6 	.word	0x0800d9e6
 800d2b0:	00000000 	.word	0x00000000
 800d2b4:	0800d067 	.word	0x0800d067
 800d2b8:	0800d9e2 	.word	0x0800d9e2

0800d2bc <_printf_common>:
 800d2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	4698      	mov	r8, r3
 800d2c4:	688a      	ldr	r2, [r1, #8]
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	690b      	ldr	r3, [r1, #16]
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	bfb8      	it	lt
 800d2d4:	4613      	movlt	r3, r2
 800d2d6:	6033      	str	r3, [r6, #0]
 800d2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2dc:	b10a      	cbz	r2, 800d2e2 <_printf_common+0x26>
 800d2de:	3301      	adds	r3, #1
 800d2e0:	6033      	str	r3, [r6, #0]
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	0699      	lsls	r1, r3, #26
 800d2e6:	bf42      	ittt	mi
 800d2e8:	6833      	ldrmi	r3, [r6, #0]
 800d2ea:	3302      	addmi	r3, #2
 800d2ec:	6033      	strmi	r3, [r6, #0]
 800d2ee:	6825      	ldr	r5, [r4, #0]
 800d2f0:	f015 0506 	ands.w	r5, r5, #6
 800d2f4:	d106      	bne.n	800d304 <_printf_common+0x48>
 800d2f6:	f104 0a19 	add.w	sl, r4, #25
 800d2fa:	68e3      	ldr	r3, [r4, #12]
 800d2fc:	6832      	ldr	r2, [r6, #0]
 800d2fe:	1a9b      	subs	r3, r3, r2
 800d300:	42ab      	cmp	r3, r5
 800d302:	dc2b      	bgt.n	800d35c <_printf_common+0xa0>
 800d304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d308:	6822      	ldr	r2, [r4, #0]
 800d30a:	3b00      	subs	r3, #0
 800d30c:	bf18      	it	ne
 800d30e:	2301      	movne	r3, #1
 800d310:	0692      	lsls	r2, r2, #26
 800d312:	d430      	bmi.n	800d376 <_printf_common+0xba>
 800d314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d318:	4641      	mov	r1, r8
 800d31a:	4638      	mov	r0, r7
 800d31c:	47c8      	blx	r9
 800d31e:	3001      	adds	r0, #1
 800d320:	d023      	beq.n	800d36a <_printf_common+0xae>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	341a      	adds	r4, #26
 800d326:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d32a:	f003 0306 	and.w	r3, r3, #6
 800d32e:	2b04      	cmp	r3, #4
 800d330:	bf0a      	itet	eq
 800d332:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d336:	2500      	movne	r5, #0
 800d338:	6833      	ldreq	r3, [r6, #0]
 800d33a:	f04f 0600 	mov.w	r6, #0
 800d33e:	bf08      	it	eq
 800d340:	1aed      	subeq	r5, r5, r3
 800d342:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d346:	bf08      	it	eq
 800d348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d34c:	4293      	cmp	r3, r2
 800d34e:	bfc4      	itt	gt
 800d350:	1a9b      	subgt	r3, r3, r2
 800d352:	18ed      	addgt	r5, r5, r3
 800d354:	42b5      	cmp	r5, r6
 800d356:	d11a      	bne.n	800d38e <_printf_common+0xd2>
 800d358:	2000      	movs	r0, #0
 800d35a:	e008      	b.n	800d36e <_printf_common+0xb2>
 800d35c:	2301      	movs	r3, #1
 800d35e:	4652      	mov	r2, sl
 800d360:	4641      	mov	r1, r8
 800d362:	4638      	mov	r0, r7
 800d364:	47c8      	blx	r9
 800d366:	3001      	adds	r0, #1
 800d368:	d103      	bne.n	800d372 <_printf_common+0xb6>
 800d36a:	f04f 30ff 	mov.w	r0, #4294967295
 800d36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d372:	3501      	adds	r5, #1
 800d374:	e7c1      	b.n	800d2fa <_printf_common+0x3e>
 800d376:	18e1      	adds	r1, r4, r3
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	2030      	movs	r0, #48	@ 0x30
 800d37c:	3302      	adds	r3, #2
 800d37e:	4422      	add	r2, r4
 800d380:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d38c:	e7c2      	b.n	800d314 <_printf_common+0x58>
 800d38e:	2301      	movs	r3, #1
 800d390:	4622      	mov	r2, r4
 800d392:	4641      	mov	r1, r8
 800d394:	4638      	mov	r0, r7
 800d396:	47c8      	blx	r9
 800d398:	3001      	adds	r0, #1
 800d39a:	d0e6      	beq.n	800d36a <_printf_common+0xae>
 800d39c:	3601      	adds	r6, #1
 800d39e:	e7d9      	b.n	800d354 <_printf_common+0x98>

0800d3a0 <_printf_i>:
 800d3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a4:	7e0f      	ldrb	r7, [r1, #24]
 800d3a6:	4691      	mov	r9, r2
 800d3a8:	4680      	mov	r8, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	2f78      	cmp	r7, #120	@ 0x78
 800d3ae:	469a      	mov	sl, r3
 800d3b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3b6:	d807      	bhi.n	800d3c8 <_printf_i+0x28>
 800d3b8:	2f62      	cmp	r7, #98	@ 0x62
 800d3ba:	d80a      	bhi.n	800d3d2 <_printf_i+0x32>
 800d3bc:	2f00      	cmp	r7, #0
 800d3be:	f000 80d2 	beq.w	800d566 <_printf_i+0x1c6>
 800d3c2:	2f58      	cmp	r7, #88	@ 0x58
 800d3c4:	f000 80b9 	beq.w	800d53a <_printf_i+0x19a>
 800d3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3d0:	e03a      	b.n	800d448 <_printf_i+0xa8>
 800d3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3d6:	2b15      	cmp	r3, #21
 800d3d8:	d8f6      	bhi.n	800d3c8 <_printf_i+0x28>
 800d3da:	a101      	add	r1, pc, #4	@ (adr r1, 800d3e0 <_printf_i+0x40>)
 800d3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3e0:	0800d439 	.word	0x0800d439
 800d3e4:	0800d44d 	.word	0x0800d44d
 800d3e8:	0800d3c9 	.word	0x0800d3c9
 800d3ec:	0800d3c9 	.word	0x0800d3c9
 800d3f0:	0800d3c9 	.word	0x0800d3c9
 800d3f4:	0800d3c9 	.word	0x0800d3c9
 800d3f8:	0800d44d 	.word	0x0800d44d
 800d3fc:	0800d3c9 	.word	0x0800d3c9
 800d400:	0800d3c9 	.word	0x0800d3c9
 800d404:	0800d3c9 	.word	0x0800d3c9
 800d408:	0800d3c9 	.word	0x0800d3c9
 800d40c:	0800d54d 	.word	0x0800d54d
 800d410:	0800d477 	.word	0x0800d477
 800d414:	0800d507 	.word	0x0800d507
 800d418:	0800d3c9 	.word	0x0800d3c9
 800d41c:	0800d3c9 	.word	0x0800d3c9
 800d420:	0800d56f 	.word	0x0800d56f
 800d424:	0800d3c9 	.word	0x0800d3c9
 800d428:	0800d477 	.word	0x0800d477
 800d42c:	0800d3c9 	.word	0x0800d3c9
 800d430:	0800d3c9 	.word	0x0800d3c9
 800d434:	0800d50f 	.word	0x0800d50f
 800d438:	6833      	ldr	r3, [r6, #0]
 800d43a:	1d1a      	adds	r2, r3, #4
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6032      	str	r2, [r6, #0]
 800d440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d448:	2301      	movs	r3, #1
 800d44a:	e09d      	b.n	800d588 <_printf_i+0x1e8>
 800d44c:	6833      	ldr	r3, [r6, #0]
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	1d19      	adds	r1, r3, #4
 800d452:	6031      	str	r1, [r6, #0]
 800d454:	0606      	lsls	r6, r0, #24
 800d456:	d501      	bpl.n	800d45c <_printf_i+0xbc>
 800d458:	681d      	ldr	r5, [r3, #0]
 800d45a:	e003      	b.n	800d464 <_printf_i+0xc4>
 800d45c:	0645      	lsls	r5, r0, #25
 800d45e:	d5fb      	bpl.n	800d458 <_printf_i+0xb8>
 800d460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d464:	2d00      	cmp	r5, #0
 800d466:	da03      	bge.n	800d470 <_printf_i+0xd0>
 800d468:	232d      	movs	r3, #45	@ 0x2d
 800d46a:	426d      	negs	r5, r5
 800d46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d470:	4859      	ldr	r0, [pc, #356]	@ (800d5d8 <_printf_i+0x238>)
 800d472:	230a      	movs	r3, #10
 800d474:	e011      	b.n	800d49a <_printf_i+0xfa>
 800d476:	6821      	ldr	r1, [r4, #0]
 800d478:	6833      	ldr	r3, [r6, #0]
 800d47a:	0608      	lsls	r0, r1, #24
 800d47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d480:	d402      	bmi.n	800d488 <_printf_i+0xe8>
 800d482:	0649      	lsls	r1, r1, #25
 800d484:	bf48      	it	mi
 800d486:	b2ad      	uxthmi	r5, r5
 800d488:	2f6f      	cmp	r7, #111	@ 0x6f
 800d48a:	6033      	str	r3, [r6, #0]
 800d48c:	4852      	ldr	r0, [pc, #328]	@ (800d5d8 <_printf_i+0x238>)
 800d48e:	bf14      	ite	ne
 800d490:	230a      	movne	r3, #10
 800d492:	2308      	moveq	r3, #8
 800d494:	2100      	movs	r1, #0
 800d496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d49a:	6866      	ldr	r6, [r4, #4]
 800d49c:	2e00      	cmp	r6, #0
 800d49e:	60a6      	str	r6, [r4, #8]
 800d4a0:	bfa2      	ittt	ge
 800d4a2:	6821      	ldrge	r1, [r4, #0]
 800d4a4:	f021 0104 	bicge.w	r1, r1, #4
 800d4a8:	6021      	strge	r1, [r4, #0]
 800d4aa:	b90d      	cbnz	r5, 800d4b0 <_printf_i+0x110>
 800d4ac:	2e00      	cmp	r6, #0
 800d4ae:	d04b      	beq.n	800d548 <_printf_i+0x1a8>
 800d4b0:	4616      	mov	r6, r2
 800d4b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4b6:	fb03 5711 	mls	r7, r3, r1, r5
 800d4ba:	5dc7      	ldrb	r7, [r0, r7]
 800d4bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4c0:	462f      	mov	r7, r5
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	42bb      	cmp	r3, r7
 800d4c6:	d9f4      	bls.n	800d4b2 <_printf_i+0x112>
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d10b      	bne.n	800d4e4 <_printf_i+0x144>
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	07df      	lsls	r7, r3, #31
 800d4d0:	d508      	bpl.n	800d4e4 <_printf_i+0x144>
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	6861      	ldr	r1, [r4, #4]
 800d4d6:	4299      	cmp	r1, r3
 800d4d8:	bfde      	ittt	le
 800d4da:	2330      	movle	r3, #48	@ 0x30
 800d4dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4e4:	1b92      	subs	r2, r2, r6
 800d4e6:	6122      	str	r2, [r4, #16]
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	aa03      	add	r2, sp, #12
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	f8cd a000 	str.w	sl, [sp]
 800d4f4:	f7ff fee2 	bl	800d2bc <_printf_common>
 800d4f8:	3001      	adds	r0, #1
 800d4fa:	d14a      	bne.n	800d592 <_printf_i+0x1f2>
 800d4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d500:	b004      	add	sp, #16
 800d502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	f043 0320 	orr.w	r3, r3, #32
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	2778      	movs	r7, #120	@ 0x78
 800d510:	4832      	ldr	r0, [pc, #200]	@ (800d5dc <_printf_i+0x23c>)
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d518:	061f      	lsls	r7, r3, #24
 800d51a:	6831      	ldr	r1, [r6, #0]
 800d51c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d520:	d402      	bmi.n	800d528 <_printf_i+0x188>
 800d522:	065f      	lsls	r7, r3, #25
 800d524:	bf48      	it	mi
 800d526:	b2ad      	uxthmi	r5, r5
 800d528:	6031      	str	r1, [r6, #0]
 800d52a:	07d9      	lsls	r1, r3, #31
 800d52c:	bf44      	itt	mi
 800d52e:	f043 0320 	orrmi.w	r3, r3, #32
 800d532:	6023      	strmi	r3, [r4, #0]
 800d534:	b11d      	cbz	r5, 800d53e <_printf_i+0x19e>
 800d536:	2310      	movs	r3, #16
 800d538:	e7ac      	b.n	800d494 <_printf_i+0xf4>
 800d53a:	4827      	ldr	r0, [pc, #156]	@ (800d5d8 <_printf_i+0x238>)
 800d53c:	e7e9      	b.n	800d512 <_printf_i+0x172>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	f023 0320 	bic.w	r3, r3, #32
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	e7f6      	b.n	800d536 <_printf_i+0x196>
 800d548:	4616      	mov	r6, r2
 800d54a:	e7bd      	b.n	800d4c8 <_printf_i+0x128>
 800d54c:	6833      	ldr	r3, [r6, #0]
 800d54e:	6825      	ldr	r5, [r4, #0]
 800d550:	1d18      	adds	r0, r3, #4
 800d552:	6961      	ldr	r1, [r4, #20]
 800d554:	6030      	str	r0, [r6, #0]
 800d556:	062e      	lsls	r6, r5, #24
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	d501      	bpl.n	800d560 <_printf_i+0x1c0>
 800d55c:	6019      	str	r1, [r3, #0]
 800d55e:	e002      	b.n	800d566 <_printf_i+0x1c6>
 800d560:	0668      	lsls	r0, r5, #25
 800d562:	d5fb      	bpl.n	800d55c <_printf_i+0x1bc>
 800d564:	8019      	strh	r1, [r3, #0]
 800d566:	2300      	movs	r3, #0
 800d568:	4616      	mov	r6, r2
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	e7bc      	b.n	800d4e8 <_printf_i+0x148>
 800d56e:	6833      	ldr	r3, [r6, #0]
 800d570:	2100      	movs	r1, #0
 800d572:	1d1a      	adds	r2, r3, #4
 800d574:	6032      	str	r2, [r6, #0]
 800d576:	681e      	ldr	r6, [r3, #0]
 800d578:	6862      	ldr	r2, [r4, #4]
 800d57a:	4630      	mov	r0, r6
 800d57c:	f000 f970 	bl	800d860 <memchr>
 800d580:	b108      	cbz	r0, 800d586 <_printf_i+0x1e6>
 800d582:	1b80      	subs	r0, r0, r6
 800d584:	6060      	str	r0, [r4, #4]
 800d586:	6863      	ldr	r3, [r4, #4]
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	2300      	movs	r3, #0
 800d58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d590:	e7aa      	b.n	800d4e8 <_printf_i+0x148>
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	4632      	mov	r2, r6
 800d596:	4649      	mov	r1, r9
 800d598:	4640      	mov	r0, r8
 800d59a:	47d0      	blx	sl
 800d59c:	3001      	adds	r0, #1
 800d59e:	d0ad      	beq.n	800d4fc <_printf_i+0x15c>
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	079b      	lsls	r3, r3, #30
 800d5a4:	d413      	bmi.n	800d5ce <_printf_i+0x22e>
 800d5a6:	68e0      	ldr	r0, [r4, #12]
 800d5a8:	9b03      	ldr	r3, [sp, #12]
 800d5aa:	4298      	cmp	r0, r3
 800d5ac:	bfb8      	it	lt
 800d5ae:	4618      	movlt	r0, r3
 800d5b0:	e7a6      	b.n	800d500 <_printf_i+0x160>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	4632      	mov	r2, r6
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	47d0      	blx	sl
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d09d      	beq.n	800d4fc <_printf_i+0x15c>
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	68e3      	ldr	r3, [r4, #12]
 800d5c4:	9903      	ldr	r1, [sp, #12]
 800d5c6:	1a5b      	subs	r3, r3, r1
 800d5c8:	42ab      	cmp	r3, r5
 800d5ca:	dcf2      	bgt.n	800d5b2 <_printf_i+0x212>
 800d5cc:	e7eb      	b.n	800d5a6 <_printf_i+0x206>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	f104 0619 	add.w	r6, r4, #25
 800d5d4:	e7f5      	b.n	800d5c2 <_printf_i+0x222>
 800d5d6:	bf00      	nop
 800d5d8:	0800d9ed 	.word	0x0800d9ed
 800d5dc:	0800d9fe 	.word	0x0800d9fe

0800d5e0 <__sflush_r>:
 800d5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e8:	0716      	lsls	r6, r2, #28
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	d454      	bmi.n	800d69a <__sflush_r+0xba>
 800d5f0:	684b      	ldr	r3, [r1, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	dc02      	bgt.n	800d5fc <__sflush_r+0x1c>
 800d5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dd48      	ble.n	800d68e <__sflush_r+0xae>
 800d5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5fe:	2e00      	cmp	r6, #0
 800d600:	d045      	beq.n	800d68e <__sflush_r+0xae>
 800d602:	2300      	movs	r3, #0
 800d604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d608:	682f      	ldr	r7, [r5, #0]
 800d60a:	6a21      	ldr	r1, [r4, #32]
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	d030      	beq.n	800d672 <__sflush_r+0x92>
 800d610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d612:	89a3      	ldrh	r3, [r4, #12]
 800d614:	0759      	lsls	r1, r3, #29
 800d616:	d505      	bpl.n	800d624 <__sflush_r+0x44>
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	1ad2      	subs	r2, r2, r3
 800d61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d61e:	b10b      	cbz	r3, 800d624 <__sflush_r+0x44>
 800d620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d622:	1ad2      	subs	r2, r2, r3
 800d624:	2300      	movs	r3, #0
 800d626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d628:	6a21      	ldr	r1, [r4, #32]
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b0      	blx	r6
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	d106      	bne.n	800d642 <__sflush_r+0x62>
 800d634:	6829      	ldr	r1, [r5, #0]
 800d636:	291d      	cmp	r1, #29
 800d638:	d82b      	bhi.n	800d692 <__sflush_r+0xb2>
 800d63a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6e4 <__sflush_r+0x104>)
 800d63c:	410a      	asrs	r2, r1
 800d63e:	07d6      	lsls	r6, r2, #31
 800d640:	d427      	bmi.n	800d692 <__sflush_r+0xb2>
 800d642:	2200      	movs	r2, #0
 800d644:	04d9      	lsls	r1, r3, #19
 800d646:	6062      	str	r2, [r4, #4]
 800d648:	6922      	ldr	r2, [r4, #16]
 800d64a:	6022      	str	r2, [r4, #0]
 800d64c:	d504      	bpl.n	800d658 <__sflush_r+0x78>
 800d64e:	1c42      	adds	r2, r0, #1
 800d650:	d101      	bne.n	800d656 <__sflush_r+0x76>
 800d652:	682b      	ldr	r3, [r5, #0]
 800d654:	b903      	cbnz	r3, 800d658 <__sflush_r+0x78>
 800d656:	6560      	str	r0, [r4, #84]	@ 0x54
 800d658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d65a:	602f      	str	r7, [r5, #0]
 800d65c:	b1b9      	cbz	r1, 800d68e <__sflush_r+0xae>
 800d65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d662:	4299      	cmp	r1, r3
 800d664:	d002      	beq.n	800d66c <__sflush_r+0x8c>
 800d666:	4628      	mov	r0, r5
 800d668:	f7ff fbee 	bl	800ce48 <_free_r>
 800d66c:	2300      	movs	r3, #0
 800d66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d670:	e00d      	b.n	800d68e <__sflush_r+0xae>
 800d672:	2301      	movs	r3, #1
 800d674:	4628      	mov	r0, r5
 800d676:	47b0      	blx	r6
 800d678:	4602      	mov	r2, r0
 800d67a:	1c50      	adds	r0, r2, #1
 800d67c:	d1c9      	bne.n	800d612 <__sflush_r+0x32>
 800d67e:	682b      	ldr	r3, [r5, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0c6      	beq.n	800d612 <__sflush_r+0x32>
 800d684:	2b1d      	cmp	r3, #29
 800d686:	d001      	beq.n	800d68c <__sflush_r+0xac>
 800d688:	2b16      	cmp	r3, #22
 800d68a:	d11d      	bne.n	800d6c8 <__sflush_r+0xe8>
 800d68c:	602f      	str	r7, [r5, #0]
 800d68e:	2000      	movs	r0, #0
 800d690:	e021      	b.n	800d6d6 <__sflush_r+0xf6>
 800d692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d696:	b21b      	sxth	r3, r3
 800d698:	e01a      	b.n	800d6d0 <__sflush_r+0xf0>
 800d69a:	690f      	ldr	r7, [r1, #16]
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	d0f6      	beq.n	800d68e <__sflush_r+0xae>
 800d6a0:	0793      	lsls	r3, r2, #30
 800d6a2:	680e      	ldr	r6, [r1, #0]
 800d6a4:	600f      	str	r7, [r1, #0]
 800d6a6:	bf0c      	ite	eq
 800d6a8:	694b      	ldreq	r3, [r1, #20]
 800d6aa:	2300      	movne	r3, #0
 800d6ac:	eba6 0807 	sub.w	r8, r6, r7
 800d6b0:	608b      	str	r3, [r1, #8]
 800d6b2:	f1b8 0f00 	cmp.w	r8, #0
 800d6b6:	ddea      	ble.n	800d68e <__sflush_r+0xae>
 800d6b8:	4643      	mov	r3, r8
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	6a21      	ldr	r1, [r4, #32]
 800d6be:	4628      	mov	r0, r5
 800d6c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6c2:	47b0      	blx	r6
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	dc08      	bgt.n	800d6da <__sflush_r+0xfa>
 800d6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	81a3      	strh	r3, [r4, #12]
 800d6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6da:	4407      	add	r7, r0
 800d6dc:	eba8 0800 	sub.w	r8, r8, r0
 800d6e0:	e7e7      	b.n	800d6b2 <__sflush_r+0xd2>
 800d6e2:	bf00      	nop
 800d6e4:	dfbffffe 	.word	0xdfbffffe

0800d6e8 <_fflush_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	690b      	ldr	r3, [r1, #16]
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	b913      	cbnz	r3, 800d6f8 <_fflush_r+0x10>
 800d6f2:	2500      	movs	r5, #0
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	bd38      	pop	{r3, r4, r5, pc}
 800d6f8:	b118      	cbz	r0, 800d702 <_fflush_r+0x1a>
 800d6fa:	6a03      	ldr	r3, [r0, #32]
 800d6fc:	b90b      	cbnz	r3, 800d702 <_fflush_r+0x1a>
 800d6fe:	f7ff f99d 	bl	800ca3c <__sinit>
 800d702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0f3      	beq.n	800d6f2 <_fflush_r+0xa>
 800d70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d70c:	07d0      	lsls	r0, r2, #31
 800d70e:	d404      	bmi.n	800d71a <_fflush_r+0x32>
 800d710:	0599      	lsls	r1, r3, #22
 800d712:	d402      	bmi.n	800d71a <_fflush_r+0x32>
 800d714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d716:	f7ff fb88 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800d71a:	4628      	mov	r0, r5
 800d71c:	4621      	mov	r1, r4
 800d71e:	f7ff ff5f 	bl	800d5e0 <__sflush_r>
 800d722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d724:	4605      	mov	r5, r0
 800d726:	07da      	lsls	r2, r3, #31
 800d728:	d4e4      	bmi.n	800d6f4 <_fflush_r+0xc>
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	059b      	lsls	r3, r3, #22
 800d72e:	d4e1      	bmi.n	800d6f4 <_fflush_r+0xc>
 800d730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d732:	f7ff fb7b 	bl	800ce2c <__retarget_lock_release_recursive>
 800d736:	e7dd      	b.n	800d6f4 <_fflush_r+0xc>

0800d738 <__swhatbuf_r>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	460c      	mov	r4, r1
 800d73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d740:	b096      	sub	sp, #88	@ 0x58
 800d742:	4615      	mov	r5, r2
 800d744:	2900      	cmp	r1, #0
 800d746:	461e      	mov	r6, r3
 800d748:	da0c      	bge.n	800d764 <__swhatbuf_r+0x2c>
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	2100      	movs	r1, #0
 800d74e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d752:	bf14      	ite	ne
 800d754:	2340      	movne	r3, #64	@ 0x40
 800d756:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d75a:	2000      	movs	r0, #0
 800d75c:	6031      	str	r1, [r6, #0]
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	b016      	add	sp, #88	@ 0x58
 800d762:	bd70      	pop	{r4, r5, r6, pc}
 800d764:	466a      	mov	r2, sp
 800d766:	f000 f849 	bl	800d7fc <_fstat_r>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	dbed      	blt.n	800d74a <__swhatbuf_r+0x12>
 800d76e:	9901      	ldr	r1, [sp, #4]
 800d770:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d774:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d778:	4259      	negs	r1, r3
 800d77a:	4159      	adcs	r1, r3
 800d77c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d780:	e7eb      	b.n	800d75a <__swhatbuf_r+0x22>

0800d782 <__smakebuf_r>:
 800d782:	898b      	ldrh	r3, [r1, #12]
 800d784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d786:	079d      	lsls	r5, r3, #30
 800d788:	4606      	mov	r6, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	d507      	bpl.n	800d79e <__smakebuf_r+0x1c>
 800d78e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d792:	6023      	str	r3, [r4, #0]
 800d794:	6123      	str	r3, [r4, #16]
 800d796:	2301      	movs	r3, #1
 800d798:	6163      	str	r3, [r4, #20]
 800d79a:	b003      	add	sp, #12
 800d79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79e:	ab01      	add	r3, sp, #4
 800d7a0:	466a      	mov	r2, sp
 800d7a2:	f7ff ffc9 	bl	800d738 <__swhatbuf_r>
 800d7a6:	9f00      	ldr	r7, [sp, #0]
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7ff fbb7 	bl	800cf20 <_malloc_r>
 800d7b2:	b948      	cbnz	r0, 800d7c8 <__smakebuf_r+0x46>
 800d7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b8:	059a      	lsls	r2, r3, #22
 800d7ba:	d4ee      	bmi.n	800d79a <__smakebuf_r+0x18>
 800d7bc:	f023 0303 	bic.w	r3, r3, #3
 800d7c0:	f043 0302 	orr.w	r3, r3, #2
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e7e2      	b.n	800d78e <__smakebuf_r+0xc>
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	6020      	str	r0, [r4, #0]
 800d7cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	9b01      	ldr	r3, [sp, #4]
 800d7d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7d8:	b15b      	cbz	r3, 800d7f2 <__smakebuf_r+0x70>
 800d7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f000 f81e 	bl	800d820 <_isatty_r>
 800d7e4:	b128      	cbz	r0, 800d7f2 <__smakebuf_r+0x70>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	f023 0303 	bic.w	r3, r3, #3
 800d7ec:	f043 0301 	orr.w	r3, r3, #1
 800d7f0:	81a3      	strh	r3, [r4, #12]
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	431d      	orrs	r5, r3
 800d7f6:	81a5      	strh	r5, [r4, #12]
 800d7f8:	e7cf      	b.n	800d79a <__smakebuf_r+0x18>
	...

0800d7fc <_fstat_r>:
 800d7fc:	b538      	push	{r3, r4, r5, lr}
 800d7fe:	2300      	movs	r3, #0
 800d800:	4d06      	ldr	r5, [pc, #24]	@ (800d81c <_fstat_r+0x20>)
 800d802:	4604      	mov	r4, r0
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	f7f4 fe06 	bl	800241a <_fstat>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d102      	bne.n	800d818 <_fstat_r+0x1c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	b103      	cbz	r3, 800d818 <_fstat_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	bf00      	nop
 800d81c:	200007e0 	.word	0x200007e0

0800d820 <_isatty_r>:
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	2300      	movs	r3, #0
 800d824:	4d05      	ldr	r5, [pc, #20]	@ (800d83c <_isatty_r+0x1c>)
 800d826:	4604      	mov	r4, r0
 800d828:	4608      	mov	r0, r1
 800d82a:	602b      	str	r3, [r5, #0]
 800d82c:	f7f4 fe05 	bl	800243a <_isatty>
 800d830:	1c43      	adds	r3, r0, #1
 800d832:	d102      	bne.n	800d83a <_isatty_r+0x1a>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	b103      	cbz	r3, 800d83a <_isatty_r+0x1a>
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	200007e0 	.word	0x200007e0

0800d840 <_sbrk_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	2300      	movs	r3, #0
 800d844:	4d05      	ldr	r5, [pc, #20]	@ (800d85c <_sbrk_r+0x1c>)
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	f7f4 fe0e 	bl	800246c <_sbrk>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d102      	bne.n	800d85a <_sbrk_r+0x1a>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	b103      	cbz	r3, 800d85a <_sbrk_r+0x1a>
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	200007e0 	.word	0x200007e0

0800d860 <memchr>:
 800d860:	b2c9      	uxtb	r1, r1
 800d862:	4603      	mov	r3, r0
 800d864:	4402      	add	r2, r0
 800d866:	b510      	push	{r4, lr}
 800d868:	4293      	cmp	r3, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	d101      	bne.n	800d872 <memchr+0x12>
 800d86e:	2000      	movs	r0, #0
 800d870:	e003      	b.n	800d87a <memchr+0x1a>
 800d872:	7804      	ldrb	r4, [r0, #0]
 800d874:	3301      	adds	r3, #1
 800d876:	428c      	cmp	r4, r1
 800d878:	d1f6      	bne.n	800d868 <memchr+0x8>
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <_init>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	bf00      	nop
 800d880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d882:	bc08      	pop	{r3}
 800d884:	469e      	mov	lr, r3
 800d886:	4770      	bx	lr

0800d888 <_fini>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	bf00      	nop
 800d88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88e:	bc08      	pop	{r3}
 800d890:	469e      	mov	lr, r3
 800d892:	4770      	bx	lr
