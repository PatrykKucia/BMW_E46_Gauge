
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e250  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800e4a8  0800e4a8  0000f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e624  0800e624  00010144  2**0
                  CONTENTS
  4 .ARM          00000008  0800e624  0800e624  0000f624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e62c  0800e62c  00010144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e62c  0800e62c  0000f62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e630  0800e630  0000f630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800e634  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000144  0800e778  00010144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800e778  00010798  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bba  00000000  00000000  0001017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae7  00000000  00000000  00030d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  00036270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6c4  00000000  00000000  0003770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024436  00000000  00000000  00065dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120ce7  00000000  00000000  0008a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aaeeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a7c  00000000  00000000  001aaf30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b29ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000144 	.word	0x20000144
 8000274:	00000000 	.word	0x00000000
 8000278:	0800e490 	.word	0x0800e490

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000148 	.word	0x20000148
 8000294:	0800e490 	.word	0x0800e490

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_d2uiz>:
 8000b54:	004a      	lsls	r2, r1, #1
 8000b56:	d211      	bcs.n	8000b7c <__aeabi_d2uiz+0x28>
 8000b58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b5c:	d211      	bcs.n	8000b82 <__aeabi_d2uiz+0x2e>
 8000b5e:	d50d      	bpl.n	8000b7c <__aeabi_d2uiz+0x28>
 8000b60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b68:	d40e      	bmi.n	8000b88 <__aeabi_d2uiz+0x34>
 8000b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d102      	bne.n	8000b8e <__aeabi_d2uiz+0x3a>
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	4770      	bx	lr
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_d2f>:
 8000b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b9c:	bf24      	itt	cs
 8000b9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ba6:	d90d      	bls.n	8000bc4 <__aeabi_d2f+0x30>
 8000ba8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bbc:	bf08      	it	eq
 8000bbe:	f020 0001 	biceq.w	r0, r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc8:	d121      	bne.n	8000c0e <__aeabi_d2f+0x7a>
 8000bca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bce:	bfbc      	itt	lt
 8000bd0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	4770      	bxlt	lr
 8000bd6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bde:	f1c2 0218 	rsb	r2, r2, #24
 8000be2:	f1c2 0c20 	rsb	ip, r2, #32
 8000be6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bea:	fa20 f002 	lsr.w	r0, r0, r2
 8000bee:	bf18      	it	ne
 8000bf0:	f040 0001 	orrne.w	r0, r0, #1
 8000bf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c00:	ea40 000c 	orr.w	r0, r0, ip
 8000c04:	fa23 f302 	lsr.w	r3, r3, r2
 8000c08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c0c:	e7cc      	b.n	8000ba8 <__aeabi_d2f+0x14>
 8000c0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c12:	d107      	bne.n	8000c24 <__aeabi_d2f+0x90>
 8000c14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c18:	bf1e      	ittt	ne
 8000c1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c22:	4770      	bxne	lr
 8000c24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_uldivmod>:
 8000c34:	b953      	cbnz	r3, 8000c4c <__aeabi_uldivmod+0x18>
 8000c36:	b94a      	cbnz	r2, 8000c4c <__aeabi_uldivmod+0x18>
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	2800      	cmpeq	r0, #0
 8000c3e:	bf1c      	itt	ne
 8000c40:	f04f 31ff 	movne.w	r1, #4294967295
 8000c44:	f04f 30ff 	movne.w	r0, #4294967295
 8000c48:	f000 b97e 	b.w	8000f48 <__aeabi_idiv0>
 8000c4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c54:	f000 f806 	bl	8000c64 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4770      	bx	lr

08000c64 <__udivmoddi4>:
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d14d      	bne.n	8000d0c <__udivmoddi4+0xa8>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	460f      	mov	r7, r1
 8000c74:	4684      	mov	ip, r0
 8000c76:	4696      	mov	lr, r2
 8000c78:	fab2 f382 	clz	r3, r2
 8000c7c:	d960      	bls.n	8000d40 <__udivmoddi4+0xdc>
 8000c7e:	b14b      	cbz	r3, 8000c94 <__udivmoddi4+0x30>
 8000c80:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c84:	f1c3 0220 	rsb	r2, r3, #32
 8000c88:	409f      	lsls	r7, r3
 8000c8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c98:	fa1f f48e 	uxth.w	r4, lr
 8000c9c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000ca0:	fbb7 f1f6 	udiv	r1, r7, r6
 8000ca4:	fb06 7711 	mls	r7, r6, r1, r7
 8000ca8:	fb01 f004 	mul.w	r0, r1, r4
 8000cac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x62>
 8000cb4:	eb1e 0202 	adds.w	r2, lr, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x60>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f200 812d 	bhi.w	8000f1e <__udivmoddi4+0x2ba>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	1a12      	subs	r2, r2, r0
 8000cc8:	fa1f fc8c 	uxth.w	ip, ip
 8000ccc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000cd0:	fb06 2210 	mls	r2, r6, r0, r2
 8000cd4:	fb00 f404 	mul.w	r4, r0, r4
 8000cd8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cdc:	4564      	cmp	r4, ip
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x8e>
 8000ce0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x8c>
 8000cea:	4564      	cmp	r4, ip
 8000cec:	f200 811a 	bhi.w	8000f24 <__udivmoddi4+0x2c0>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cf6:	ebac 0c04 	sub.w	ip, ip, r4
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	b125      	cbz	r5, 8000d08 <__udivmoddi4+0xa4>
 8000cfe:	fa2c f303 	lsr.w	r3, ip, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	e9c5 3200 	strd	r3, r2, [r5]
 8000d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d905      	bls.n	8000d1c <__udivmoddi4+0xb8>
 8000d10:	b10d      	cbz	r5, 8000d16 <__udivmoddi4+0xb2>
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	2100      	movs	r1, #0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e7f5      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000d1c:	fab3 f183 	clz	r1, r3
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d14d      	bne.n	8000dc0 <__udivmoddi4+0x15c>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	f0c0 80f2 	bcc.w	8000f0e <__udivmoddi4+0x2aa>
 8000d2a:	4290      	cmp	r0, r2
 8000d2c:	f080 80ef 	bcs.w	8000f0e <__udivmoddi4+0x2aa>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e6      	beq.n	8000d08 <__udivmoddi4+0xa4>
 8000d3a:	e9c5 6300 	strd	r6, r3, [r5]
 8000d3e:	e7e3      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f040 80a2 	bne.w	8000e8a <__udivmoddi4+0x226>
 8000d46:	1a8a      	subs	r2, r1, r2
 8000d48:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d4c:	fa1f f68e 	uxth.w	r6, lr
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d56:	fb07 2014 	mls	r0, r7, r4, r2
 8000d5a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb06 f004 	mul.w	r0, r6, r4
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d90f      	bls.n	8000d8a <__udivmoddi4+0x126>
 8000d6a:	eb1e 0202 	adds.w	r2, lr, r2
 8000d6e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d72:	bf2c      	ite	cs
 8000d74:	f04f 0901 	movcs.w	r9, #1
 8000d78:	f04f 0900 	movcc.w	r9, #0
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d903      	bls.n	8000d88 <__udivmoddi4+0x124>
 8000d80:	f1b9 0f00 	cmp.w	r9, #0
 8000d84:	f000 80c8 	beq.w	8000f18 <__udivmoddi4+0x2b4>
 8000d88:	4644      	mov	r4, r8
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	fa1f fc8c 	uxth.w	ip, ip
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	fb00 f606 	mul.w	r6, r0, r6
 8000d9c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da0:	4566      	cmp	r6, ip
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x152>
 8000da4:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x150>
 8000dae:	4566      	cmp	r6, ip
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c6>
 8000db4:	4610      	mov	r0, r2
 8000db6:	ebac 0c06 	sub.w	ip, ip, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	e79d      	b.n	8000cfc <__udivmoddi4+0x98>
 8000dc0:	f1c1 0620 	rsb	r6, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd2:	40f4      	lsrs	r4, r6
 8000dd4:	408a      	lsls	r2, r1
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ddc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000de0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000de4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	fbb4 f0f8 	udiv	r0, r4, r8
 8000df0:	fb08 4410 	mls	r4, r8, r0, r4
 8000df4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df8:	fb00 f90c 	mul.w	r9, r0, ip
 8000dfc:	45a1      	cmp	r9, r4
 8000dfe:	d90e      	bls.n	8000e1e <__udivmoddi4+0x1ba>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e06:	bf2c      	ite	cs
 8000e08:	f04f 0b01 	movcs.w	fp, #1
 8000e0c:	f04f 0b00 	movcc.w	fp, #0
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	d903      	bls.n	8000e1c <__udivmoddi4+0x1b8>
 8000e14:	f1bb 0f00 	cmp.w	fp, #0
 8000e18:	f000 8093 	beq.w	8000f42 <__udivmoddi4+0x2de>
 8000e1c:	4650      	mov	r0, sl
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f8 	udiv	r3, r4, r8
 8000e2a:	fb08 4413 	mls	r4, r8, r3, r4
 8000e2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d906      	bls.n	8000e48 <__udivmoddi4+0x1e4>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x1e2>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d87a      	bhi.n	8000f3c <__udivmoddi4+0x2d8>
 8000e46:	4643      	mov	r3, r8
 8000e48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4c:	eba4 040c 	sub.w	r4, r4, ip
 8000e50:	fba0 9802 	umull	r9, r8, r0, r2
 8000e54:	4544      	cmp	r4, r8
 8000e56:	46cc      	mov	ip, r9
 8000e58:	4643      	mov	r3, r8
 8000e5a:	d302      	bcc.n	8000e62 <__udivmoddi4+0x1fe>
 8000e5c:	d106      	bne.n	8000e6c <__udivmoddi4+0x208>
 8000e5e:	45ce      	cmp	lr, r9
 8000e60:	d204      	bcs.n	8000e6c <__udivmoddi4+0x208>
 8000e62:	3801      	subs	r0, #1
 8000e64:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e68:	eb68 0307 	sbc.w	r3, r8, r7
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x222>
 8000e6e:	ebbe 020c 	subs.w	r2, lr, ip
 8000e72:	eb64 0403 	sbc.w	r4, r4, r3
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e73e      	b.n	8000d08 <__udivmoddi4+0xa4>
 8000e8a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e8e:	f1c3 0120 	rsb	r1, r3, #32
 8000e92:	fa04 f203 	lsl.w	r2, r4, r3
 8000e96:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000ea0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ea4:	fa1f f68e 	uxth.w	r6, lr
 8000ea8:	fbb4 f0f7 	udiv	r0, r4, r7
 8000eac:	430a      	orrs	r2, r1
 8000eae:	fb07 4410 	mls	r4, r7, r0, r4
 8000eb2:	0c11      	lsrs	r1, r2, #16
 8000eb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000eb8:	fb00 f406 	mul.w	r4, r0, r6
 8000ebc:	428c      	cmp	r4, r1
 8000ebe:	d90e      	bls.n	8000ede <__udivmoddi4+0x27a>
 8000ec0:	eb1e 0101 	adds.w	r1, lr, r1
 8000ec4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec8:	bf2c      	ite	cs
 8000eca:	f04f 0901 	movcs.w	r9, #1
 8000ece:	f04f 0900 	movcc.w	r9, #0
 8000ed2:	428c      	cmp	r4, r1
 8000ed4:	d902      	bls.n	8000edc <__udivmoddi4+0x278>
 8000ed6:	f1b9 0f00 	cmp.w	r9, #0
 8000eda:	d02c      	beq.n	8000f36 <__udivmoddi4+0x2d2>
 8000edc:	4640      	mov	r0, r8
 8000ede:	1b09      	subs	r1, r1, r4
 8000ee0:	b292      	uxth	r2, r2
 8000ee2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ee6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eee:	fb04 f106 	mul.w	r1, r4, r6
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x2a2>
 8000ef6:	eb1e 0202 	adds.w	r2, lr, r2
 8000efa:	f104 38ff 	add.w	r8, r4, #4294967295
 8000efe:	d201      	bcs.n	8000f04 <__udivmoddi4+0x2a0>
 8000f00:	4291      	cmp	r1, r2
 8000f02:	d815      	bhi.n	8000f30 <__udivmoddi4+0x2cc>
 8000f04:	4644      	mov	r4, r8
 8000f06:	1a52      	subs	r2, r2, r1
 8000f08:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f0c:	e721      	b.n	8000d52 <__udivmoddi4+0xee>
 8000f0e:	1a86      	subs	r6, r0, r2
 8000f10:	eb64 0303 	sbc.w	r3, r4, r3
 8000f14:	2001      	movs	r0, #1
 8000f16:	e70e      	b.n	8000d36 <__udivmoddi4+0xd2>
 8000f18:	3c02      	subs	r4, #2
 8000f1a:	4472      	add	r2, lr
 8000f1c:	e735      	b.n	8000d8a <__udivmoddi4+0x126>
 8000f1e:	3902      	subs	r1, #2
 8000f20:	4472      	add	r2, lr
 8000f22:	e6d0      	b.n	8000cc6 <__udivmoddi4+0x62>
 8000f24:	44f4      	add	ip, lr
 8000f26:	3802      	subs	r0, #2
 8000f28:	e6e3      	b.n	8000cf2 <__udivmoddi4+0x8e>
 8000f2a:	44f4      	add	ip, lr
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x152>
 8000f30:	3c02      	subs	r4, #2
 8000f32:	4472      	add	r2, lr
 8000f34:	e7e7      	b.n	8000f06 <__udivmoddi4+0x2a2>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4471      	add	r1, lr
 8000f3a:	e7d0      	b.n	8000ede <__udivmoddi4+0x27a>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	443c      	add	r4, r7
 8000f40:	e782      	b.n	8000e48 <__udivmoddi4+0x1e4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	e76a      	b.n	8000e1e <__udivmoddi4+0x1ba>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f52:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f54:	4a30      	ldr	r2, [pc, #192]	@ (8001018 <MX_FDCAN1_Init+0xcc>)
 8000f56:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f58:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f8a:	220b      	movs	r2, #11
 8000f8c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fc0:	f003 fb60 	bl	8004684 <HAL_FDCAN_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fca:	f001 fb4f 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000fde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fe2:	617b      	str	r3, [r7, #20]


	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480a      	ldr	r0, [pc, #40]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000fea:	f003 fca5 	bl	8004938 <HAL_FDCAN_ConfigFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <MX_FDCAN1_Init+0xae>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <MX_FDCAN1_Init+0xd0>)
 8000ff6:	f00c fbd5 	bl	800d7a4 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <MX_FDCAN1_Init+0xc8>)
 8000ffc:	f003 fcf6 	bl	80049ec <HAL_FDCAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8001006:	f001 fb31 	bl	800266c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000160 	.word	0x20000160
 8001018:	4000a400 	.word	0x4000a400
 800101c:	0800e4a8 	.word	0x0800e4a8

08001020 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0be      	sub	sp, #248	@ 0xf8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22d0      	movs	r2, #208	@ 0xd0
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f00c fc8f 	bl	800d964 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <HAL_FDCAN_MspInit+0xe8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d156      	bne.n	80010fe <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0304 	mov.w	r3, #4
 8001058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f005 fe96 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001072:	f001 fafb 	bl	800266c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800107c:	4a23      	ldr	r2, [pc, #140]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001082:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800108c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 8001096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109a:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_FDCAN_MspInit+0xec>)
 80010a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010cc:	2309      	movs	r3, #9
 80010ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010d6:	4619      	mov	r1, r3
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <HAL_FDCAN_MspInit+0xf0>)
 80010da:	f003 ff6b 	bl	8004fb4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2027      	movs	r0, #39	@ 0x27
 80010e4:	f002 faba 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80010e8:	2027      	movs	r0, #39	@ 0x27
 80010ea:	f002 fad1 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2028      	movs	r0, #40	@ 0x28
 80010f4:	f002 fab2 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f002 fac9 	bl	8003690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80010fe:	bf00      	nop
 8001100:	37f8      	adds	r7, #248	@ 0xf8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	4000a400 	.word	0x4000a400
 800110c:	44020c00 	.word	0x44020c00
 8001110:	42020000 	.word	0x42020000

08001114 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e041      	b.n	80011a4 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001120:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <InitCANFrames+0xa4>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	212c      	movs	r1, #44	@ 0x2c
 8001126:	fb01 f303 	mul.w	r3, r1, r3
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001132:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <InitCANFrames+0xa4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	212c      	movs	r1, #44	@ 0x2c
 8001138:	fb01 f303 	mul.w	r3, r1, r3
 800113c:	4413      	add	r3, r2
 800113e:	3308      	adds	r3, #8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <InitCANFrames+0xa4>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	212c      	movs	r1, #44	@ 0x2c
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4413      	add	r3, r2
 8001150:	330c      	adds	r3, #12
 8001152:	2208      	movs	r2, #8
 8001154:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001156:	4a18      	ldr	r2, [pc, #96]	@ (80011b8 <InitCANFrames+0xa4>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	212c      	movs	r1, #44	@ 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3310      	adds	r3, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001168:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <InitCANFrames+0xa4>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	212c      	movs	r1, #44	@ 0x2c
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	3314      	adds	r3, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <InitCANFrames+0xa4>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	212c      	movs	r1, #44	@ 0x2c
 8001180:	fb01 f303 	mul.w	r3, r1, r3
 8001184:	4413      	add	r3, r2
 8001186:	3318      	adds	r3, #24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <InitCANFrames+0xa4>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	212c      	movs	r1, #44	@ 0x2c
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	331c      	adds	r3, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3301      	adds	r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	ddba      	ble.n	8001120 <InitCANFrames+0xc>
    }
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000000 	.word	0x20000000

080011bc <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d903      	bls.n	80011d4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <SendCANFrame+0x44>)
 80011ce:	f00c fa81 	bl	800d6d4 <iprintf>
        return; // todo add error
 80011d2:	e011      	b.n	80011f8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	222c      	movs	r2, #44	@ 0x2c
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <SendCANFrame+0x48>)
 80011de:	1899      	adds	r1, r3, r2
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	222c      	movs	r2, #44	@ 0x2c
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	3320      	adds	r3, #32
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <SendCANFrame+0x48>)
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	461a      	mov	r2, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <SendCANFrame+0x4c>)
 80011f4:	f003 fc22 	bl	8004a3c <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800e4c4 	.word	0x0800e4c4
 8001204:	20000000 	.word	0x20000000
 8001208:	20000160 	.word	0x20000160

0800120c <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	460b      	mov	r3, r1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d903      	bls.n	800122c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <modify_can_frame_byte+0x4c>)
 8001226:	f00c fa55 	bl	800d6d4 <iprintf>
		return; // todo add error
 800122a:	e011      	b.n	8001250 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d903      	bls.n	800123a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001232:	480a      	ldr	r0, [pc, #40]	@ (800125c <modify_can_frame_byte+0x50>)
 8001234:	f00c fa4e 	bl	800d6d4 <iprintf>
       return;
 8001238:	e00a      	b.n	8001250 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <modify_can_frame_byte+0x54>)
 8001240:	202c      	movs	r0, #44	@ 0x2c
 8001242:	fb00 f202 	mul.w	r2, r0, r2
 8001246:	440a      	add	r2, r1
 8001248:	4413      	add	r3, r2
 800124a:	3324      	adds	r3, #36	@ 0x24
 800124c:	797a      	ldrb	r2, [r7, #5]
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800e4c4 	.word	0x0800e4c4
 800125c:	0800e4dc 	.word	0x0800e4dc
 8001260:	20000000 	.word	0x20000000

08001264 <modify_can_frame_bit>:

void modify_can_frame_bit(uint8_t frameIndex, uint8_t byte_num, uint8_t bit_num, bool state)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	717b      	strb	r3, [r7, #5]
 800127e:	4613      	mov	r3, r2
 8001280:	713b      	strb	r3, [r7, #4]
	   if (frameIndex >= FRAME_COUNT) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d903      	bls.n	8001290 <modify_can_frame_bit+0x2c>
			printf("Over can frames index");
 8001288:	482b      	ldr	r0, [pc, #172]	@ (8001338 <modify_can_frame_bit+0xd4>)
 800128a:	f00c fa23 	bl	800d6d4 <iprintf>
			return; // todo add error
 800128e:	e04f      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }
	   if (byte_num > 8) {
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d903      	bls.n	800129e <modify_can_frame_bit+0x3a>
		   printf("Wrong byte index");
 8001296:	4829      	ldr	r0, [pc, #164]	@ (800133c <modify_can_frame_bit+0xd8>)
 8001298:	f00c fa1c 	bl	800d6d4 <iprintf>
	       return;
 800129c:	e048      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }
	   if (bit_num > 8) {
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d903      	bls.n	80012ac <modify_can_frame_bit+0x48>
		   printf("Wrong bit index");
 80012a4:	4826      	ldr	r0, [pc, #152]	@ (8001340 <modify_can_frame_bit+0xdc>)
 80012a6:	f00c fa15 	bl	800d6d4 <iprintf>
		   return;
 80012aa:	e041      	b.n	8001330 <modify_can_frame_bit+0xcc>
	   }

	   if(state)
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01e      	beq.n	80012f0 <modify_can_frame_bit+0x8c>
		   frames[frameIndex].data[byte_num] |= (1 << bit_num);  // bit set by OR
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4923      	ldr	r1, [pc, #140]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012b8:	202c      	movs	r0, #44	@ 0x2c
 80012ba:	fb00 f202 	mul.w	r2, r0, r2
 80012be:	440a      	add	r2, r1
 80012c0:	4413      	add	r3, r2
 80012c2:	3324      	adds	r3, #36	@ 0x24
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b259      	sxtb	r1, r3
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	b2cc      	uxtb	r4, r1
 80012dc:	4919      	ldr	r1, [pc, #100]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012de:	202c      	movs	r0, #44	@ 0x2c
 80012e0:	fb00 f202 	mul.w	r2, r0, r2
 80012e4:	440a      	add	r2, r1
 80012e6:	4413      	add	r3, r2
 80012e8:	3324      	adds	r3, #36	@ 0x24
 80012ea:	4622      	mov	r2, r4
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e01f      	b.n	8001330 <modify_can_frame_bit+0xcc>
		else
		   frames[frameIndex].data[byte_num] &= ~(1 << bit_num); // bit unset BY AND
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4913      	ldr	r1, [pc, #76]	@ (8001344 <modify_can_frame_bit+0xe0>)
 80012f6:	202c      	movs	r0, #44	@ 0x2c
 80012f8:	fb00 f202 	mul.w	r2, r0, r2
 80012fc:	440a      	add	r2, r1
 80012fe:	4413      	add	r3, r2
 8001300:	3324      	adds	r3, #36	@ 0x24
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25a      	sxtb	r2, r3
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4013      	ands	r3, r2
 8001316:	b259      	sxtb	r1, r3
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	b2cc      	uxtb	r4, r1
 800131e:	4909      	ldr	r1, [pc, #36]	@ (8001344 <modify_can_frame_bit+0xe0>)
 8001320:	202c      	movs	r0, #44	@ 0x2c
 8001322:	fb00 f202 	mul.w	r2, r0, r2
 8001326:	440a      	add	r2, r1
 8001328:	4413      	add	r3, r2
 800132a:	3324      	adds	r3, #36	@ 0x24
 800132c:	4622      	mov	r2, r4
 800132e:	701a      	strb	r2, [r3, #0]
}
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	0800e4c4 	.word	0x0800e4c4
 800133c:	0800e4dc 	.word	0x0800e4dc
 8001340:	0800e4f0 	.word	0x0800e4f0
 8001344:	20000000 	.word	0x20000000

08001348 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_GPDMA1_Init+0x3c>)
 8001360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	201b      	movs	r0, #27
 8001372:	f002 f973 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001376:	201b      	movs	r0, #27
 8001378:	f002 f98a 	bl	8003690 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	44020c00 	.word	0x44020c00

08001388 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a4:	4a46      	ldr	r2, [pc, #280]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ae:	4b44      	ldr	r3, [pc, #272]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013bc:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013cc:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e0:	4a37      	ldr	r2, [pc, #220]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ea:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <MX_GPIO_Init+0x138>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <MX_GPIO_Init+0x138>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <MX_GPIO_Init+0x138>)
 800140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800141c:	4829      	ldr	r0, [pc, #164]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 800141e:	f003 ff1b 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 8001422:	2200      	movs	r2, #0
 8001424:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001428:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <MX_GPIO_Init+0x140>)
 800142a:	f003 ff15 	bl	8005258 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f243 411e 	movw	r1, #13342	@ 0x341e
 8001434:	4825      	ldr	r0, [pc, #148]	@ (80014cc <MX_GPIO_Init+0x144>)
 8001436:	f003 ff0f 	bl	8005258 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fuel_HVC_GPIO_Port, Fuel_HVC_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2120      	movs	r1, #32
 800143e:	4823      	ldr	r0, [pc, #140]	@ (80014cc <MX_GPIO_Init+0x144>)
 8001440:	f003 ff0a 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	481a      	ldr	r0, [pc, #104]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 800145a:	f003 fdab 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 800145e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <MX_GPIO_Init+0x13c>)
 8001478:	f003 fd9c 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800147c:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001480:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <MX_GPIO_Init+0x140>)
 8001496:	f003 fd8d 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800149a:	f243 433e 	movw	r3, #13374	@ 0x343e
 800149e:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_GPIO_Init+0x144>)
 80014b4:	f003 fd7e 	bl	8004fb4 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	44020c00 	.word	0x44020c00
 80014c4:	42020800 	.word	0x42020800
 80014c8:	42020000 	.word	0x42020000
 80014cc:	42020400 	.word	0x42020400

080014d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f003 fed6 	bl	80052bc <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f001 f8a9 	bl	800266c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f004 fbf9 	bl	8005d14 <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f001 f8a0 	bl	800266c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f004 fc3b 	bl	8005daa <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f001 f897 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001c4 	.word	0x200001c4
 8001548:	40005400 	.word	0x40005400
 800154c:	60808cd3 	.word	0x60808cd3

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0be      	sub	sp, #248	@ 0xf8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22d0      	movs	r2, #208	@ 0xd0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00c f9f7 	bl	800d964 <memset>
  if(i2cHandle->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <HAL_I2C_MspInit+0xc8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d146      	bne.n	800160e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4618      	mov	r0, r3
 8001598:	f005 fbfe 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015a2:	f001 f863 	bl	800266c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015cc:	2312      	movs	r3, #18
 80015ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015de:	2304      	movs	r3, #4
 80015e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <HAL_I2C_MspInit+0xd0>)
 80015ec:	f003 fce2 	bl	8004fb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_I2C_MspInit+0xcc>)
 8001602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	37f8      	adds	r7, #248	@ 0xf8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40005400 	.word	0x40005400
 800161c:	44020c00 	.word	0x44020c00
 8001620:	42020400 	.word	0x42020400

08001624 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001628:	2000      	movs	r0, #0
 800162a:	f004 fc0b 	bl	8005e44 <HAL_ICACHE_ConfigAssociativityMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001634:	f001 f81a 	bl	800266c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001638:	f004 fc24 	bl	8005e84 <HAL_ICACHE_Enable>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001642:	f001 f813 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <SetTCON>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SetTCON(I2C_HandleTypeDef *hi2c, uint16_t value) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
    uint8_t data[3];

    // Rejestr TCON (0x04), Write = 00
    data[0] = (0x04 << 4) | 0x00;
 8001658:	2340      	movs	r3, #64	@ 0x40
 800165a:	733b      	strb	r3, [r7, #12]

    // 9-bitowa wartość TCON
    value &= 0x01FF;
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001662:	807b      	strh	r3, [r7, #2]
    data[2] = (value >> 8) & 0x01; // MSB (1 bit)
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	b29b      	uxth	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	73bb      	strb	r3, [r7, #14]
    data[1] = value & 0xFF;        // LSB (8 bitów)
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	737b      	strb	r3, [r7, #13]

    // Wysłanie komendy + 2 bajtów wartości
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), data, 3, HAL_MAX_DELAY) != HAL_OK) {
 800167a:	f107 020c 	add.w	r2, r7, #12
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2303      	movs	r3, #3
 8001686:	2158      	movs	r1, #88	@ 0x58
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f003 feb3 	bl	80053f4 <HAL_I2C_Master_Transmit>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <SetTCON+0x4e>
        printf("⚠️ Błąd zapisu do TCON!\n");
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <SetTCON+0x58>)
 8001696:	f00c f885 	bl	800d7a4 <puts>
    }
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800e500 	.word	0x0800e500

080016a8 <MCP4662_ReadTCON>:

uint16_t MCP4662_ReadTCON(I2C_HandleTypeDef *hi2c) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
    uint8_t command_byte = (0x04 << 4) | 0x0C; // Rejestr TCON, CC = 11 (Read)
 80016b0:	234c      	movs	r3, #76	@ 0x4c
 80016b2:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 80016b4:	2300      	movs	r3, #0
 80016b6:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 80016b8:	f107 020d 	add.w	r2, r7, #13
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2158      	movs	r1, #88	@ 0x58
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f003 fe94 	bl	80053f4 <HAL_I2C_Master_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <MCP4662_ReadTCON+0x30>
        return 0xFFFF; // Kod błędu
 80016d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016d6:	e01b      	b.n	8001710 <MCP4662_ReadTCON+0x68>
    }

    // Odczyt danych (9-bitowa wartość, ale zwracamy 16-bitową zmienną)
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80016d8:	f107 0208 	add.w	r2, r7, #8
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2302      	movs	r3, #2
 80016e4:	2159      	movs	r1, #89	@ 0x59
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f003 ff78 	bl	80055dc <HAL_I2C_Master_Receive>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <MCP4662_ReadTCON+0x50>
        return 0xFFFF; // Kod błędu
 80016f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f6:	e00b      	b.n	8001710 <MCP4662_ReadTCON+0x68>
    }

    // Połączenie danych (TCON ma 9 bitów, więc maskujemy)
    uint16_t tcon_value = ((data[0] << 8) | data[1]) & 0x01FF;
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	7a7b      	ldrb	r3, [r7, #9]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800170c:	81fb      	strh	r3, [r7, #14]

    return tcon_value;
 800170e:	89fb      	ldrh	r3, [r7, #14]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <__io_putchar>:

int __io_putchar(int ch) //function used to print() in usart
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d102      	bne.n	800172c <__io_putchar+0x14>
    __io_putchar('\r');
 8001726:	200d      	movs	r0, #13
 8001728:	f7ff fff6 	bl	8001718 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800172c:	1d39      	adds	r1, r7, #4
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	2201      	movs	r2, #1
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <__io_putchar+0x2c>)
 8001736:	f00a fbc5 	bl	800bec4 <HAL_UART_Transmit>

  return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200004a8 	.word	0x200004a8

08001748 <Set_PWM_Frequency>:
void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <Set_PWM_Frequency+0xa0>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	441a      	add	r2, r3
 8001764:	1212      	asrs	r2, r2, #8
 8001766:	17db      	asrs	r3, r3, #31
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	3319      	adds	r3, #25
 800176c:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001774:	4293      	cmp	r3, r2
 8001776:	d817      	bhi.n	80017a8 <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <Set_PWM_Frequency+0xa4>)
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178a:	d302      	bcc.n	8001792 <Set_PWM_Frequency+0x4a>
 800178c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001790:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3301      	adds	r3, #1
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a13      	ldr	r2, [pc, #76]	@ (80017ec <Set_PWM_Frequency+0xa4>)
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e007      	b.n	80017b8 <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 80017ac:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <Set_PWM_Frequency+0xa4>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017be:	d302      	bcc.n	80017c6 <Set_PWM_Frequency+0x7e>
 80017c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c4:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <Set_PWM_Frequency+0xa8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <Set_PWM_Frequency+0xa8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017d6:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <Set_PWM_Frequency+0xa8>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	f2b9d649 	.word	0xf2b9d649
 80017ec:	0ee6b280 	.word	0x0ee6b280
 80017f0:	20000378 	.word	0x20000378

080017f4 <ReadWiper>:
uint16_t ReadWiper(I2C_HandleTypeDef *hi2c, uint8_t wiper_reg) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
    uint8_t command_byte = (wiper_reg << 4) | 0x0C; // CC = 11 (Read)
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f043 030c 	orr.w	r3, r3, #12
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	737b      	strb	r3, [r7, #13]
    uint8_t data[2] = {0};
 8001810:	2300      	movs	r3, #0
 8001812:	813b      	strh	r3, [r7, #8]

    // Wysłanie bajtu komendy
    if (HAL_I2C_Master_Transmit(hi2c, (0x2C << 1), &command_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001814:	f107 020d 	add.w	r2, r7, #13
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	2158      	movs	r1, #88	@ 0x58
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f003 fde6 	bl	80053f4 <HAL_I2C_Master_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <ReadWiper+0x40>
        return 0xFFFF; // Kod błędu
 800182e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001832:	e01b      	b.n	800186c <ReadWiper+0x78>
    }

    // Odczyt 10-bitowego wiper value
    if (HAL_I2C_Master_Receive(hi2c, (0x2C << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001834:	f107 0208 	add.w	r2, r7, #8
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2302      	movs	r3, #2
 8001840:	2159      	movs	r1, #89	@ 0x59
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f003 feca 	bl	80055dc <HAL_I2C_Master_Receive>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <ReadWiper+0x60>
        return 0xFFFF; // Kod błędu
 800184e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001852:	e00b      	b.n	800186c <ReadWiper+0x78>
    }

    uint16_t wiper_value = ((data[0] << 8) | data[1]) & 0x03FF; // 10-bitowy wynik
 8001854:	7a3b      	ldrb	r3, [r7, #8]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7a7b      	ldrb	r3, [r7, #9]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21b      	sxth	r3, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001868:	81fb      	strh	r3, [r7, #14]
    return wiper_value;
 800186a:	89fb      	ldrh	r3, [r7, #14]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <wiper_command>:

void wiper_command(I2C_HandleTypeDef *hi2c, uint8_t wiper, uint8_t command) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
 8001880:	4613      	mov	r3, r2
 8001882:	70bb      	strb	r3, [r7, #2]
    uint8_t cmd;

    if (wiper == 0) {
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <wiper_command+0x1c>
        cmd = command;  // Dla Wiper 0 (komendy 0x04 lub 0x08)
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e007      	b.n	80018a0 <wiper_command+0x2c>
    } else if (wiper == 1) {
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10f      	bne.n	80018b6 <wiper_command+0x42>
        cmd = command | 0x10; // Dodajemy bit 4, aby przełączyć na Wiper 1
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	b2db      	uxtb	r3, r3
 800189e:	73fb      	strb	r3, [r7, #15]
    } else {
        return; // Nieprawidłowy wybór wipera
    }

    HAL_I2C_Master_Transmit(hi2c, MCP4662_ADDR_WRITE, &cmd, 1, HAL_MAX_DELAY);
 80018a0:	f107 020f 	add.w	r2, r7, #15
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	2158      	movs	r1, #88	@ 0x58
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f003 fda0 	bl	80053f4 <HAL_I2C_Master_Transmit>
 80018b4:	e000      	b.n	80018b8 <wiper_command+0x44>
        return; // Nieprawidłowy wybór wipera
 80018b6:	bf00      	nop
}
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <ESP32_SendCommand>:

void ESP32_SendCommand(const char* command) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7fe fce5 	bl	8000298 <strlen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4808      	ldr	r0, [pc, #32]	@ (80018fc <ESP32_SendCommand+0x3c>)
 80018da:	f00a faf3 	bl	800bec4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	2202      	movs	r2, #2
 80018e4:	4906      	ldr	r1, [pc, #24]	@ (8001900 <ESP32_SendCommand+0x40>)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <ESP32_SendCommand+0x3c>)
 80018e8:	f00a faec 	bl	800bec4 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 80018ec:	2064      	movs	r0, #100	@ 0x64
 80018ee:	f001 fdd9 	bl	80034a4 <HAL_Delay>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200004a8 	.word	0x200004a8
 8001900:	0800e520 	.word	0x0800e520

08001904 <InitAnalogIndicators>:
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
        }
    }
}

void InitAnalogIndicators(){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800190e:	486a      	ldr	r0, [pc, #424]	@ (8001ab8 <InitAnalogIndicators+0x1b4>)
 8001910:	f003 fca2 	bl	8005258 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191a:	4868      	ldr	r0, [pc, #416]	@ (8001abc <InitAnalogIndicators+0x1b8>)
 800191c:	f003 fc9c 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001926:	4865      	ldr	r0, [pc, #404]	@ (8001abc <InitAnalogIndicators+0x1b8>)
 8001928:	f003 fc96 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001932:	4862      	ldr	r0, [pc, #392]	@ (8001abc <InitAnalogIndicators+0x1b8>)
 8001934:	f003 fc90 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001938:	2200      	movs	r2, #0
 800193a:	2104      	movs	r1, #4
 800193c:	485f      	ldr	r0, [pc, #380]	@ (8001abc <InitAnalogIndicators+0x1b8>)
 800193e:	f003 fc8b 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 8001942:	2201      	movs	r2, #1
 8001944:	2102      	movs	r1, #2
 8001946:	485d      	ldr	r0, [pc, #372]	@ (8001abc <InitAnalogIndicators+0x1b8>)
 8001948:	f003 fc86 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 800194c:	2201      	movs	r2, #1
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	485b      	ldr	r0, [pc, #364]	@ (8001ac0 <InitAnalogIndicators+0x1bc>)
 8001952:	f003 fc81 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 8001956:	2200      	movs	r2, #0
 8001958:	2140      	movs	r1, #64	@ 0x40
 800195a:	4859      	ldr	r0, [pc, #356]	@ (8001ac0 <InitAnalogIndicators+0x1bc>)
 800195c:	f003 fc7c 	bl	8005258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 8001960:	2200      	movs	r2, #0
 8001962:	2120      	movs	r1, #32
 8001964:	4856      	ldr	r0, [pc, #344]	@ (8001ac0 <InitAnalogIndicators+0x1bc>)
 8001966:	f003 fc77 	bl	8005258 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x05);
 800196a:	2205      	movs	r2, #5
 800196c:	2100      	movs	r1, #0
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fc4c 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0x14);
 8001974:	2214      	movs	r2, #20
 8001976:	2101      	movs	r1, #1
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fc47 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 4, 0x14);
 800197e:	2214      	movs	r2, #20
 8001980:	2104      	movs	r1, #4
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fc42 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 5, 0x17);
 8001988:	2217      	movs	r2, #23
 800198a:	2105      	movs	r1, #5
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fc3d 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 6, 0x0);
 8001992:	2200      	movs	r2, #0
 8001994:	2106      	movs	r1, #6
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fc38 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 7, 0x16);
 800199c:	2216      	movs	r2, #22
 800199e:	2107      	movs	r1, #7
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fc33 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2003      	movs	r0, #3
 80019ac:	f7ff fc2e 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 80019b0:	2200      	movs	r2, #0
 80019b2:	2101      	movs	r1, #1
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff fc29 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 2, 0x00); // zero flag
 80019ba:	2200      	movs	r2, #0
 80019bc:	2102      	movs	r1, #2
 80019be:	2003      	movs	r0, #3
 80019c0:	f7ff fc24 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 3, 0x00); // zero błędów
 80019c4:	2200      	movs	r2, #0
 80019c6:	2103      	movs	r1, #3
 80019c8:	2003      	movs	r0, #3
 80019ca:	f7ff fc1f 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 4, 0x00); // zero
 80019ce:	2200      	movs	r2, #0
 80019d0:	2104      	movs	r1, #4
 80019d2:	2003      	movs	r0, #3
 80019d4:	f7ff fc1a 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 5, 0x00); // zero
 80019d8:	2200      	movs	r2, #0
 80019da:	2105      	movs	r1, #5
 80019dc:	2003      	movs	r0, #3
 80019de:	f7ff fc15 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 6, 0x00); // brak błędu
 80019e2:	2200      	movs	r2, #0
 80019e4:	2106      	movs	r1, #6
 80019e6:	2003      	movs	r0, #3
 80019e8:	f7ff fc10 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 7, 0x00); // suma kontrolna lub pusty
 80019ec:	2200      	movs	r2, #0
 80019ee:	2107      	movs	r1, #7
 80019f0:	2003      	movs	r0, #3
 80019f2:	f7ff fc0b 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_545, 4, 0x7E);  // Unused byte
 80019f6:	227e      	movs	r2, #126	@ 0x7e
 80019f8:	2104      	movs	r1, #4
 80019fa:	2002      	movs	r0, #2
 80019fc:	f7ff fc06 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 5, 0x10);  // Unused byte
 8001a00:	2210      	movs	r2, #16
 8001a02:	2105      	movs	r1, #5
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7ff fc01 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 6, 0x00);  // Unused byte
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2106      	movs	r1, #6
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f7ff fbfc 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_545, 7, 0x18);  // Unused byte
 8001a14:	2218      	movs	r2, #24
 8001a16:	2107      	movs	r1, #7
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff fbf7 	bl	800120c <modify_can_frame_byte>


	 modify_can_frame_byte(FRAME_329, 0, 0x07);  // Unused byte
 8001a1e:	2207      	movs	r2, #7
 8001a20:	2100      	movs	r1, #0
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff fbf2 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 2, 0xB2);  // Unused byte
 8001a28:	22b2      	movs	r2, #178	@ 0xb2
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fbed 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 3, 0x19);  // Unused byte
 8001a32:	2219      	movs	r2, #25
 8001a34:	2103      	movs	r1, #3
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff fbe8 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 4, 0x00);  // Unused byte
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2104      	movs	r1, #4
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fbe3 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 5, 0xEE);  // Unused byte
 8001a46:	22ee      	movs	r2, #238	@ 0xee
 8001a48:	2105      	movs	r1, #5
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff fbde 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 6, 0x00);  // Unused byte
 8001a50:	2200      	movs	r2, #0
 8001a52:	2106      	movs	r1, #6
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fbd9 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_329, 7, 0x00);  // Unused byte
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fbd4 	bl	800120c <modify_can_frame_byte>

	 modify_can_frame_byte(FRAME_1F3, 0, 0x00);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2004      	movs	r0, #4
 8001a6a:	f7ff fbcf 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 1, 0x00);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	2004      	movs	r0, #4
 8001a74:	f7ff fbca 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 2, 0x00);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	f7ff fbc5 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 3, 0x00);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2103      	movs	r1, #3
 8001a86:	2004      	movs	r0, #4
 8001a88:	f7ff fbc0 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 4, 0x00);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2104      	movs	r1, #4
 8001a90:	2004      	movs	r0, #4
 8001a92:	f7ff fbbb 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 5, 0x00);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	f7ff fbb6 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 6, 0x00);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2106      	movs	r1, #6
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7ff fbb1 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_1F3, 7, 0x00);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2107      	movs	r1, #7
 8001aae:	2004      	movs	r0, #4
 8001ab0:	f7ff fbac 	bl	800120c <modify_can_frame_byte>


}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	42020800 	.word	0x42020800
 8001abc:	42020400 	.word	0x42020400
 8001ac0:	42020000 	.word	0x42020000

08001ac4 <parse_frame>:
    uint16_t fuel_scaled = (uint16_t)((fuel_consumption / max_consumption) * 0xFFFF);
    return fuel_scaled;
}


void parse_frame(uint8_t *buffer) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    uint8_t offset = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4baa      	ldr	r3, [pc, #680]	@ (8001d84 <parse_frame+0x2c0>)
 8001adc:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4ba5      	ldr	r3, [pc, #660]	@ (8001d84 <parse_frame+0x2c0>)
 8001af0:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	3304      	adds	r3, #4
 8001af6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4ba0      	ldr	r3, [pc, #640]	@ (8001d84 <parse_frame+0x2c0>)
 8001b04:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b9b      	ldr	r3, [pc, #620]	@ (8001d84 <parse_frame+0x2c0>)
 8001b16:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	4b97      	ldr	r3, [pc, #604]	@ (8001d84 <parse_frame+0x2c0>)
 8001b28:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b92      	ldr	r3, [pc, #584]	@ (8001d84 <parse_frame+0x2c0>)
 8001b3c:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	3304      	adds	r3, #4
 8001b42:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d84 <parse_frame+0x2c0>)
 8001b50:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3304      	adds	r3, #4
 8001b56:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <parse_frame+0x2c0>)
 8001b64:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b83      	ldr	r3, [pc, #524]	@ (8001d84 <parse_frame+0x2c0>)
 8001b78:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <parse_frame+0x2c0>)
 8001b8c:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	3304      	adds	r3, #4
 8001b92:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b79      	ldr	r3, [pc, #484]	@ (8001d84 <parse_frame+0x2c0>)
 8001ba0:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b74      	ldr	r3, [pc, #464]	@ (8001d84 <parse_frame+0x2c0>)
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001d84 <parse_frame+0x2c0>)
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <parse_frame+0x2c0>)
 8001bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3304      	adds	r3, #4
 8001be2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b65      	ldr	r3, [pc, #404]	@ (8001d84 <parse_frame+0x2c0>)
 8001bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b60      	ldr	r3, [pc, #384]	@ (8001d84 <parse_frame+0x2c0>)
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <parse_frame+0x2c0>)
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	441a      	add	r2, r3
 8001c26:	4b57      	ldr	r3, [pc, #348]	@ (8001d84 <parse_frame+0x2c0>)
 8001c28:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	441a      	add	r2, r3
 8001c44:	4b4f      	ldr	r3, [pc, #316]	@ (8001d84 <parse_frame+0x2c0>)
 8001c46:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <parse_frame+0x2c0>)
 8001c68:	65da      	str	r2, [r3, #92]	@ 0x5c

    isTurboActive = frame.flags & OG_TURBO;
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <parse_frame+0x2c0>)
 8001c6c:	891b      	ldrh	r3, [r3, #8]
 8001c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b42      	ldr	r3, [pc, #264]	@ (8001d88 <parse_frame+0x2c4>)
 8001c7e:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 8001c80:	4b40      	ldr	r3, [pc, #256]	@ (8001d84 <parse_frame+0x2c0>)
 8001c82:	891b      	ldrh	r3, [r3, #8]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <parse_frame+0x2c8>)
 8001c94:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <parse_frame+0x2c0>)
 8001c98:	891b      	ldrh	r3, [r3, #8]
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b39      	ldr	r3, [pc, #228]	@ (8001d90 <parse_frame+0x2cc>)
 8001caa:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 8001cac:	4b35      	ldr	r3, [pc, #212]	@ (8001d84 <parse_frame+0x2c0>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b35      	ldr	r3, [pc, #212]	@ (8001d94 <parse_frame+0x2d0>)
 8001cc0:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <parse_frame+0x2c0>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <parse_frame+0x2d4>)
 8001cd6:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <parse_frame+0x2c0>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b2c      	ldr	r3, [pc, #176]	@ (8001d9c <parse_frame+0x2d8>)
 8001cec:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 8001cee:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <parse_frame+0x2c0>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <parse_frame+0x2dc>)
 8001d02:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <parse_frame+0x2c0>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <parse_frame+0x2e0>)
 8001d18:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <parse_frame+0x2c0>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <parse_frame+0x2e4>)
 8001d2e:	701a      	strb	r2, [r3, #0]
    isBatteryWarning = frame.showLights & DL_BATTERY;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <parse_frame+0x2c0>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <parse_frame+0x2e8>)
 8001d44:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <parse_frame+0x2c0>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <parse_frame+0x2ec>)
 8001d5a:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <parse_frame+0x2c0>)
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <parse_frame+0x2f0>)
 8001d70:	701a      	strb	r2, [r3, #0]



    HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);  // Diagnostyka
 8001d72:	2110      	movs	r1, #16
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <parse_frame+0x2f4>)
 8001d76:	f003 fa87 	bl	8005288 <HAL_GPIO_TogglePin>
//    uint8_t fuel_lsb = fuel_value & 0xFF;
//    uint8_t fuel_msb = (fuel_value >> 8) & 0xFF;
//
//    modify_can_frame_byte(FRAME_545, 1, fuel_lsb);
//    modify_can_frame_byte(FRAME_545, 2, fuel_msb);
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200002fc 	.word	0x200002fc
 8001d88:	20000360 	.word	0x20000360
 8001d8c:	20000361 	.word	0x20000361
 8001d90:	20000362 	.word	0x20000362
 8001d94:	20000363 	.word	0x20000363
 8001d98:	20000364 	.word	0x20000364
 8001d9c:	20000365 	.word	0x20000365
 8001da0:	20000366 	.word	0x20000366
 8001da4:	20000367 	.word	0x20000367
 8001da8:	20000368 	.word	0x20000368
 8001dac:	20000369 	.word	0x20000369
 8001db0:	2000036a 	.word	0x2000036a
 8001db4:	2000036b 	.word	0x2000036b
 8001db8:	42020400 	.word	0x42020400
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <Modify_Values>:
void Modify_Values(){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
	speed = frame.speed * 3.6;
 8001dc6:	4b96      	ldr	r3, [pc, #600]	@ (8002020 <Modify_Values+0x260>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbd0 	bl	8000570 <__aeabi_f2d>
 8001dd0:	a38f      	add	r3, pc, #572	@ (adr r3, 8002010 <Modify_Values+0x250>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fc23 	bl	8000620 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fed7 	bl	8000b94 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a8e      	ldr	r2, [pc, #568]	@ (8002024 <Modify_Values+0x264>)
 8001dea:	6013      	str	r3, [r2, #0]
    Set_PWM_Frequency(speed);
 8001dec:	4b8d      	ldr	r3, [pc, #564]	@ (8002024 <Modify_Values+0x264>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df6:	ee17 3a90 	vmov	r3, s15
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fca3 	bl	8001748 <Set_PWM_Frequency>

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 8001e02:	4b87      	ldr	r3, [pc, #540]	@ (8002020 <Modify_Values+0x260>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbb2 	bl	8000570 <__aeabi_f2d>
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <Modify_Values+0x268>)
 8001e12:	f7fe fd2f 	bl	8000874 <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fe99 	bl	8000b54 <__aeabi_d2uiz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	81fb      	strh	r3, [r7, #14]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	737b      	strb	r3, [r7, #13]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	733b      	strb	r3, [r7, #12]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 8001e32:	4b7b      	ldr	r3, [pc, #492]	@ (8002020 <Modify_Values+0x260>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb9a 	bl	8000570 <__aeabi_f2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b7a      	ldr	r3, [pc, #488]	@ (800202c <Modify_Values+0x26c>)
 8001e42:	f7fe fa37 	bl	80002b4 <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b77      	ldr	r3, [pc, #476]	@ (8002030 <Modify_Values+0x270>)
 8001e54:	f7fe fd0e 	bl	8000874 <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fe78 	bl	8000b54 <__aeabi_d2uiz>
 8001e64:	4603      	mov	r3, r0
 8001e66:	72fb      	strb	r3, [r7, #11]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff f9cc 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 8001e74:	7b3b      	ldrb	r3, [r7, #12]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2103      	movs	r1, #3
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f9c6 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2101      	movs	r1, #1
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff f9c0 	bl	800120c <modify_can_frame_byte>

    if(frame.engTemp >= 129)
 8001e8c:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <Modify_Values+0x260>)
 8001e8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002034 <Modify_Values+0x274>
 8001e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	db06      	blt.n	8001eae <Modify_Values+0xee>
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 1);
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f7ff f9dc 	bl	8001264 <modify_can_frame_bit>
 8001eac:	e005      	b.n	8001eba <Modify_Values+0xfa>
    }
    else
    {
    	modify_can_frame_bit(FRAME_545, 3, 3, 0);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f7ff f9d5 	bl	8001264 <modify_can_frame_bit>
//    } else {
//        mpgloop += frame.rpm / 130;
//    }
//    modify_can_frame_byte(FRAME_545, 1, mpgloop & 0xFF);  // Lower byte of mpgloop
//    modify_can_frame_byte(FRAME_545, 2, mpgloop >> 8);    // Higher byte of mpgloop
    if (mpgloop == 0xFFFF) {
 8001eba:	4b5f      	ldr	r3, [pc, #380]	@ (8002038 <Modify_Values+0x278>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d103      	bne.n	8001ece <Modify_Values+0x10e>
        mpgloop = 0x0;
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8002038 <Modify_Values+0x278>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
 8001ecc:	e05f      	b.n	8001f8e <Modify_Values+0x1ce>
    } else {
        // Oblicz zmianę RPM (pochodną)
        int16_t rpm_delta = frame.rpm - prev_rpm;
 8001ece:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <Modify_Values+0x260>)
 8001ed0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <Modify_Values+0x27c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 3a90 	vmov	r3, s15
 8001eec:	813b      	strh	r3, [r7, #8]

        // Część dynamiczna - reaguje na zmiany obrotów
        int16_t dynamic_component = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	82fb      	strh	r3, [r7, #22]
        if (rpm_delta > 0) {
 8001ef2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dd06      	ble.n	8001f08 <Modify_Values+0x148>
            dynamic_component = rpm_delta * 3; // Silna reakcja na przyspieszenie
 8001efa:	893b      	ldrh	r3, [r7, #8]
 8001efc:	461a      	mov	r2, r3
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	82fb      	strh	r3, [r7, #22]
 8001f06:	e005      	b.n	8001f14 <Modify_Values+0x154>
        } else if (rpm_delta < 0) {
 8001f08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da01      	bge.n	8001f14 <Modify_Values+0x154>
            dynamic_component = rpm_delta; // Słabsza reakcja na zwalnianie
 8001f10:	893b      	ldrh	r3, [r7, #8]
 8001f12:	82fb      	strh	r3, [r7, #22]
        }

        // Część statyczna - zależy od aktualnych obrotów
        uint16_t static_component = frame.rpm / 50; // Dostosuj dzielnik
 8001f14:	4b42      	ldr	r3, [pc, #264]	@ (8002020 <Modify_Values+0x260>)
 8001f16:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f1a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002040 <Modify_Values+0x280>
 8001f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f26:	ee17 3a90 	vmov	r3, s15
 8001f2a:	80fb      	strh	r3, [r7, #6]

        // Suma obu komponentów
        int32_t new_mpgloop = mpgloop + dynamic_component + static_component;
 8001f2c:	4b42      	ldr	r3, [pc, #264]	@ (8002038 <Modify_Values+0x278>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f36:	441a      	add	r2, r3
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]

        // Jeśli pedał gazu puszczony - szybkie zmniejszanie
        if (frame.throttle <= 0.2) {
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <Modify_Values+0x260>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb14 	bl	8000570 <__aeabi_f2d>
 8001f48:	a333      	add	r3, pc, #204	@ (adr r3, 8002018 <Modify_Values+0x258>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe fde3 	bl	8000b18 <__aeabi_dcmple>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <Modify_Values+0x19c>
            new_mpgloop = 0; // Szybkie zmniejszanie new_mpgloop * 0.7
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
        }

        // Ograniczenia wartości
        new_mpgloop = (new_mpgloop < 0) ? 0 : new_mpgloop;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f62:	613b      	str	r3, [r7, #16]
        mpgloop = (new_mpgloop > 0xFFFF) ? 0xFFFF : (uint16_t)new_mpgloop;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6a:	da02      	bge.n	8001f72 <Modify_Values+0x1b2>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	e001      	b.n	8001f76 <Modify_Values+0x1b6>
 8001f72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f76:	4a30      	ldr	r2, [pc, #192]	@ (8002038 <Modify_Values+0x278>)
 8001f78:	8013      	strh	r3, [r2, #0]

        prev_rpm = frame.rpm;
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <Modify_Values+0x260>)
 8001f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <Modify_Values+0x27c>)
 8001f8c:	801a      	strh	r2, [r3, #0]
    }

    modify_can_frame_byte(FRAME_545, 1, mpgloop & 0xFF);
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <Modify_Values+0x278>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	2101      	movs	r1, #1
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f7ff f937 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_545, 2, mpgloop >> 8);
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <Modify_Values+0x278>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2102      	movs	r1, #2
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7ff f92d 	bl	800120c <modify_can_frame_byte>

    modify_can_frame_byte(FRAME_545, 1, mpgloop & 0xFF);
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <Modify_Values+0x278>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f7ff f925 	bl	800120c <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_545, 2, mpgloop >> 8);
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <Modify_Values+0x278>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2102      	movs	r1, #2
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff f91b 	bl	800120c <modify_can_frame_byte>
    if(isTractionCtrl)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <Modify_Values+0x284>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <Modify_Values+0x234>
    {
	 modify_can_frame_byte(FRAME_153, 0, 0x06); // brak błędu //06 //ff to turn on
 8001fde:	2206      	movs	r2, #6
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	f7ff f912 	bl	800120c <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_153, 1, 0xff); // brak aktywnej interwencji DSC
 8001fe8:	22ff      	movs	r2, #255	@ 0xff
 8001fea:	2101      	movs	r1, #1
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7ff f90d 	bl	800120c <modify_can_frame_byte>
    else
    {
   	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
   	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
    }
    }
 8001ff2:	e009      	b.n	8002008 <Modify_Values+0x248>
   	 modify_can_frame_byte(FRAME_153, 0, 0x00); // brak błędu //06 //ff to turn on
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f7ff f907 	bl	800120c <modify_can_frame_byte>
   	 modify_can_frame_byte(FRAME_153, 1, 0x00); // brak aktywnej interwencji DSC
 8001ffe:	2200      	movs	r2, #0
 8002000:	2101      	movs	r1, #1
 8002002:	2003      	movs	r0, #3
 8002004:	f7ff f902 	bl	800120c <modify_can_frame_byte>
    }
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	cccccccd 	.word	0xcccccccd
 8002014:	400ccccc 	.word	0x400ccccc
 8002018:	9999999a 	.word	0x9999999a
 800201c:	3fc99999 	.word	0x3fc99999
 8002020:	200002fc 	.word	0x200002fc
 8002024:	2000035c 	.word	0x2000035c
 8002028:	3fc40000 	.word	0x3fc40000
 800202c:	40480000 	.word	0x40480000
 8002030:	3fe80000 	.word	0x3fe80000
 8002034:	43010000 	.word	0x43010000
 8002038:	2000036e 	.word	0x2000036e
 800203c:	20000370 	.word	0x20000370
 8002040:	42480000 	.word	0x42480000
 8002044:	20000366 	.word	0x20000366

08002048 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8002058:	2300      	movs	r3, #0
 800205a:	73bb      	strb	r3, [r7, #14]
 800205c:	e009      	b.n	8002072 <calculate_checksum+0x2a>
        checksum ^= data[i];
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	4053      	eors	r3, r2
 800206a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	3301      	adds	r3, #1
 8002070:	73bb      	strb	r3, [r7, #14]
 8002072:	7bba      	ldrb	r2, [r7, #14]
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3f1      	bcc.n	800205e <calculate_checksum+0x16>
    }
    return checksum;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	4603      	mov	r3, r0
 800209c:	71bb      	strb	r3, [r7, #6]
 800209e:	460b      	mov	r3, r1
 80020a0:	717b      	strb	r3, [r7, #5]
 80020a2:	4613      	mov	r3, r2
 80020a4:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 80020ae:	797b      	ldrb	r3, [r7, #5]
 80020b0:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 80020b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020ba:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 80020bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020c0:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 80020c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020c6:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 80020cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020d0:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 80020d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffb1 	bl	8002048 <calculate_checksum>
 80020e6:	4603      	mov	r3, r0
 80020e8:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 80020ea:	230a      	movs	r3, #10
 80020ec:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 80020ee:	f107 010c 	add.w	r1, r7, #12
 80020f2:	2364      	movs	r3, #100	@ 0x64
 80020f4:	220a      	movs	r2, #10
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <Send_KBUS_frame+0x7c>)
 80020f8:	f009 fee4 	bl	800bec4 <HAL_UART_Transmit>
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	2000053c 	.word	0x2000053c

08002108 <process_frame>:


void process_frame(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
    if (frameReady) {
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <process_frame+0x1c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <process_frame+0x20>)
 8002116:	f7ff fcd5 	bl	8001ac4 <parse_frame>
        frameReady = false;
 800211a:	4b02      	ldr	r3, [pc, #8]	@ (8002124 <process_frame+0x1c>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
    }
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002fa 	.word	0x200002fa
 8002128:	20000298 	.word	0x20000298

0800212c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002132:	f001 f8f9 	bl	8003328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002136:	f000 f8e9 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213a:	f7ff f925 	bl	8001388 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800213e:	f7ff f903 	bl	8001348 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8002142:	f000 ff25 	bl	8002f90 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002146:	f000 fc61 	bl	8002a0c <MX_TIM1_Init>
  MX_ICACHE_Init();
 800214a:	f7ff fa6b 	bl	8001624 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 800214e:	f7fe fefd 	bl	8000f4c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8002152:	f000 fd0d 	bl	8002b70 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002156:	f000 ff67 	bl	8003028 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800215a:	f000 fd7d 	bl	8002c58 <MX_TIM3_Init>
  MX_I2C1_Init();
 800215e:	f7ff f9b7 	bl	80014d0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002162:	f000 fdc9 	bl	8002cf8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002166:	2104      	movs	r1, #4
 8002168:	485f      	ldr	r0, [pc, #380]	@ (80022e8 <main+0x1bc>)
 800216a:	f008 fa61 	bl	800a630 <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 800216e:	485f      	ldr	r0, [pc, #380]	@ (80022ec <main+0x1c0>)
 8002170:	f7ff fba6 	bl	80018c0 <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Wi-Fi //AT+CWJAP="PLAY_Swiatlowod_19A1","t8Xv9auf7Z#D" - if connection lost/MCU replaced
  HAL_Delay(5000);
 8002174:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002178:	f001 f994 	bl	80034a4 <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 800217c:	485c      	ldr	r0, [pc, #368]	@ (80022f0 <main+0x1c4>)
 800217e:	f7ff fb9f 	bl	80018c0 <ESP32_SendCommand>
  HAL_Delay(1000);
 8002182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002186:	f001 f98d 	bl	80034a4 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 800218a:	2201      	movs	r2, #1
 800218c:	4959      	ldr	r1, [pc, #356]	@ (80022f4 <main+0x1c8>)
 800218e:	485a      	ldr	r0, [pc, #360]	@ (80022f8 <main+0x1cc>)
 8002190:	f009 ff36 	bl	800c000 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8002194:	4859      	ldr	r0, [pc, #356]	@ (80022fc <main+0x1d0>)
 8002196:	f008 f8db 	bl	800a350 <HAL_TIM_Base_Start_IT>
  HAL_Delay(5);
 800219a:	2005      	movs	r0, #5
 800219c:	f001 f982 	bl	80034a4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 80021a0:	4857      	ldr	r0, [pc, #348]	@ (8002300 <main+0x1d4>)
 80021a2:	f008 f8d5 	bl	800a350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80021a6:	4857      	ldr	r0, [pc, #348]	@ (8002304 <main+0x1d8>)
 80021a8:	f008 f8d2 	bl	800a350 <HAL_TIM_Base_Start_IT>

  InitCANFrames();
 80021ac:	f7fe ffb2 	bl	8001114 <InitCANFrames>
  InitAnalogIndicators();
 80021b0:	f7ff fba8 	bl	8001904 <InitAnalogIndicators>

  uint8_t increasing0 = 1, increasing1 = 1; // Flagi dla obu wiperów
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	2301      	movs	r3, #1
 80021ba:	75bb      	strb	r3, [r7, #22]
  uint8_t reset_cmd = 0x06; // Komenda General Call Reset
 80021bc:	2306      	movs	r3, #6
 80021be:	757b      	strb	r3, [r7, #21]
//HAL_I2C_Master_Transmit(&hi2c1, 0x00, &reset_cmd, 1, HAL_MAX_DELAY);
HAL_Delay(10);
 80021c0:	200a      	movs	r0, #10
 80021c2:	f001 f96f 	bl	80034a4 <HAL_Delay>
SetTCON(&hi2c1, 0xbb );  // Podłącza piny A, W, B dla obu wiperów  //0x34 //0xBB - HW ON -A OFF  //33 - HW OFF
 80021c6:	21bb      	movs	r1, #187	@ 0xbb
 80021c8:	484f      	ldr	r0, [pc, #316]	@ (8002308 <main+0x1dc>)
 80021ca:	f7ff fa3f 	bl	800164c <SetTCON>
HAL_Delay(10);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f001 f968 	bl	80034a4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 process_frame();
 80021d4:	f7ff ff98 	bl	8002108 <process_frame>
	 Modify_Values();
 80021d8:	f7ff fdf2 	bl	8001dc0 <Modify_Values>
////////////////////////
     uint16_t wiper0 = ReadWiper(&hi2c1, VOLATILE_WIPER_0); // Wiper 0
 80021dc:	2100      	movs	r1, #0
 80021de:	484a      	ldr	r0, [pc, #296]	@ (8002308 <main+0x1dc>)
 80021e0:	f7ff fb08 	bl	80017f4 <ReadWiper>
 80021e4:	4603      	mov	r3, r0
 80021e6:	827b      	strh	r3, [r7, #18]
     uint16_t wiper1 = ReadWiper(&hi2c1, VOLATILE_WIPER_1); // Wiper 1
 80021e8:	2101      	movs	r1, #1
 80021ea:	4847      	ldr	r0, [pc, #284]	@ (8002308 <main+0x1dc>)
 80021ec:	f7ff fb02 	bl	80017f4 <ReadWiper>
 80021f0:	4603      	mov	r3, r0
 80021f2:	823b      	strh	r3, [r7, #16]
     uint16_t tcon = MCP4662_ReadTCON(&hi2c1);  // TCON
 80021f4:	4844      	ldr	r0, [pc, #272]	@ (8002308 <main+0x1dc>)
 80021f6:	f7ff fa57 	bl	80016a8 <MCP4662_ReadTCON>
 80021fa:	4603      	mov	r3, r0
 80021fc:	81fb      	strh	r3, [r7, #14]

     //WriteWiper(&hi2c1, VOLATILE_WIPER_0, 0x80);
     //WriteWiper(&hi2c1, VOLATILE_WIPER_1, 0x80);
//
//      Interpretacja bitów:
         uint8_t GCEN = (tcon >> 8) & 0x01;  // Bit 8 (GCEN)
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29b      	uxth	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	737b      	strb	r3, [r7, #13]
         uint8_t R1HW = (tcon >> 7) & 0x01;  // Bit 7
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	09db      	lsrs	r3, r3, #7
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	733b      	strb	r3, [r7, #12]
         uint8_t R1A  = (tcon >> 6) & 0x01;  // Bit 6
 800221a:	89fb      	ldrh	r3, [r7, #14]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	b29b      	uxth	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	72fb      	strb	r3, [r7, #11]
         uint8_t R1W  = (tcon >> 5) & 0x01;  // Bit 5
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	b29b      	uxth	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	72bb      	strb	r3, [r7, #10]
         uint8_t R1B  = (tcon >> 4) & 0x01;  // Bit 4
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	b29b      	uxth	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	727b      	strb	r3, [r7, #9]
         uint8_t R0HW = (tcon >> 3) & 0x01;  // Bit 3
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	723b      	strb	r3, [r7, #8]
         uint8_t R0A  = (tcon >> 2) & 0x01;  // Bit 2
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	b29b      	uxth	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	71fb      	strb	r3, [r7, #7]
         uint8_t R0W  = (tcon >> 1) & 0x01;  // Bit 1
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	b29b      	uxth	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	71bb      	strb	r3, [r7, #6]
         uint8_t R0B  = (tcon >> 0) & 0x01;  // Bit 0
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	717b      	strb	r3, [r7, #5]
//         //HAL_Delay(50); // Czekaj dla stabilności
//     }
//     HAL_Delay(250); // Opóźnienie dla stabilnego działania
/////////////////////////////////////

         uint16_t target0 = (uint16_t)(0.01 * 255);//0.1 - 570ohm/off  0=1/4   0.01= ~half 0.03-half
 8002278:	2302      	movs	r3, #2
 800227a:	807b      	strh	r3, [r7, #2]
         uint16_t target1 = (uint16_t)(0.01 * 255);
 800227c:	2302      	movs	r3, #2
 800227e:	803b      	strh	r3, [r7, #0]

             if (wiper0 < target0) {
 8002280:	8a7a      	ldrh	r2, [r7, #18]
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	429a      	cmp	r2, r3
 8002286:	d208      	bcs.n	800229a <main+0x16e>
                 wiper_command(&hi2c1, 0, 0x04); // Inkrementacja
 8002288:	2204      	movs	r2, #4
 800228a:	2100      	movs	r1, #0
 800228c:	481e      	ldr	r0, [pc, #120]	@ (8002308 <main+0x1dc>)
 800228e:	f7ff faf1 	bl	8001874 <wiper_command>
                 wiper0++;
 8002292:	8a7b      	ldrh	r3, [r7, #18]
 8002294:	3301      	adds	r3, #1
 8002296:	827b      	strh	r3, [r7, #18]
 8002298:	e00b      	b.n	80022b2 <main+0x186>
             } else if (wiper0 > target0) {
 800229a:	8a7a      	ldrh	r2, [r7, #18]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d907      	bls.n	80022b2 <main+0x186>
                 wiper_command(&hi2c1, 0, 0x08); // Dekrementacja
 80022a2:	2208      	movs	r2, #8
 80022a4:	2100      	movs	r1, #0
 80022a6:	4818      	ldr	r0, [pc, #96]	@ (8002308 <main+0x1dc>)
 80022a8:	f7ff fae4 	bl	8001874 <wiper_command>
                 wiper0--;
 80022ac:	8a7b      	ldrh	r3, [r7, #18]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	827b      	strh	r3, [r7, #18]
             }

             if (wiper1 < target1) {
 80022b2:	8a3a      	ldrh	r2, [r7, #16]
 80022b4:	883b      	ldrh	r3, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d208      	bcs.n	80022cc <main+0x1a0>
                 wiper_command(&hi2c1, 1, 0x04); // Inkrementacja
 80022ba:	2204      	movs	r2, #4
 80022bc:	2101      	movs	r1, #1
 80022be:	4812      	ldr	r0, [pc, #72]	@ (8002308 <main+0x1dc>)
 80022c0:	f7ff fad8 	bl	8001874 <wiper_command>
                 wiper1++;
 80022c4:	8a3b      	ldrh	r3, [r7, #16]
 80022c6:	3301      	adds	r3, #1
 80022c8:	823b      	strh	r3, [r7, #16]
 80022ca:	e783      	b.n	80021d4 <main+0xa8>
             } else if (wiper1 > target1) {
 80022cc:	8a3a      	ldrh	r2, [r7, #16]
 80022ce:	883b      	ldrh	r3, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f67f af7f 	bls.w	80021d4 <main+0xa8>
                 wiper_command(&hi2c1, 1, 0x08); // Dekrementacja
 80022d6:	2208      	movs	r2, #8
 80022d8:	2101      	movs	r1, #1
 80022da:	480b      	ldr	r0, [pc, #44]	@ (8002308 <main+0x1dc>)
 80022dc:	f7ff faca 	bl	8001874 <wiper_command>
                 wiper1--;
 80022e0:	8a3b      	ldrh	r3, [r7, #16]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	823b      	strh	r3, [r7, #16]
  {
 80022e6:	e775      	b.n	80021d4 <main+0xa8>
 80022e8:	20000378 	.word	0x20000378
 80022ec:	0800e564 	.word	0x0800e564
 80022f0:	0800e56c 	.word	0x0800e56c
 80022f4:	20000218 	.word	0x20000218
 80022f8:	200004a8 	.word	0x200004a8
 80022fc:	200003c4 	.word	0x200003c4
 8002300:	2000045c 	.word	0x2000045c
 8002304:	20000410 	.word	0x20000410
 8002308:	200001c4 	.word	0x200001c4

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b09c      	sub	sp, #112	@ 0x70
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2250      	movs	r2, #80	@ 0x50
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f00b fb22 	bl	800d964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002332:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <SystemClock_Config+0xdc>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4a2c      	ldr	r2, [pc, #176]	@ (80023e8 <SystemClock_Config+0xdc>)
 8002338:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800233c:	6113      	str	r3, [r2, #16]
 800233e:	4b2a      	ldr	r3, [pc, #168]	@ (80023e8 <SystemClock_Config+0xdc>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800234a:	bf00      	nop
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <SystemClock_Config+0xdc>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b08      	cmp	r3, #8
 8002356:	d1f9      	bne.n	800234c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002358:	2301      	movs	r3, #1
 800235a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800235c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002362:	2302      	movs	r3, #2
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002366:	2303      	movs	r3, #3
 8002368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 800236e:	233e      	movs	r3, #62	@ 0x3e
 8002370:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002372:	2302      	movs	r3, #2
 8002374:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002376:	2302      	movs	r3, #2
 8002378:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800237a:	2302      	movs	r3, #2
 800237c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800237e:	230c      	movs	r3, #12
 8002380:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002382:	2300      	movs	r3, #0
 8002384:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8002386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fd87 	bl	8005ea4 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800239c:	f000 f966 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a0:	231f      	movs	r3, #31
 80023a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	2303      	movs	r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	2105      	movs	r1, #5
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f9a8 	bl	8006714 <HAL_RCC_ClockConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023ca:	f000 f94f 	bl	800266c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <SystemClock_Config+0xe0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <SystemClock_Config+0xe0>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6013      	str	r3, [r2, #0]
}
 80023de:	bf00      	nop
 80023e0:	3770      	adds	r7, #112	@ 0x70
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	44020800 	.word	0x44020800
 80023ec:	40022000 	.word	0x40022000

080023f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80023f8:	2108      	movs	r1, #8
 80023fa:	482e      	ldr	r0, [pc, #184]	@ (80024b4 <HAL_UART_RxCpltCallback+0xc4>)
 80023fc:	f002 ff44 	bl	8005288 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <HAL_UART_RxCpltCallback+0xc8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d150      	bne.n	80024ac <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 800240a:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_UART_RxCpltCallback+0xcc>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <HAL_UART_RxCpltCallback+0xd0>)
 8002410:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d813      	bhi.n	8002442 <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 800241a:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_UART_RxCpltCallback+0xd8>)
 8002422:	5c9a      	ldrb	r2, [r3, r2]
 8002424:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <HAL_UART_RxCpltCallback+0xd0>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e033      	b.n	80024a2 <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e02f      	b.n	80024a2 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d10d      	bne.n	8002466 <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_UART_RxCpltCallback+0xd0>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002450:	d127      	bne.n	80024a2 <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 800245c:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e01d      	b.n	80024a2 <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b5f      	cmp	r3, #95	@ 0x5f
 800246c:	d80a      	bhi.n	8002484 <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 800246e:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	b2d1      	uxtb	r1, r2
 8002476:	4a15      	ldr	r2, [pc, #84]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 8002478:	7011      	strb	r1, [r2, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <HAL_UART_RxCpltCallback+0xd0>)
 800247e:	7819      	ldrb	r1, [r3, #0]
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_UART_RxCpltCallback+0xe0>)
 8002482:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b5f      	cmp	r3, #95	@ 0x5f
 800248a:	d90a      	bls.n	80024a2 <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_UART_RxCpltCallback+0xe4>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
                process_frame();
 8002492:	f7ff fe39 	bl	8002108 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_UART_RxCpltCallback+0xd4>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_UART_RxCpltCallback+0xdc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 80024a2:	2201      	movs	r2, #1
 80024a4:	4905      	ldr	r1, [pc, #20]	@ (80024bc <HAL_UART_RxCpltCallback+0xcc>)
 80024a6:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <HAL_UART_RxCpltCallback+0xe8>)
 80024a8:	f009 fdaa 	bl	800c000 <HAL_UART_Receive_DMA>
    }
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	42020400 	.word	0x42020400
 80024b8:	40013800 	.word	0x40013800
 80024bc:	20000218 	.word	0x20000218
 80024c0:	20000372 	.word	0x20000372
 80024c4:	200002f8 	.word	0x200002f8
 80024c8:	0800e598 	.word	0x0800e598
 80024cc:	200002f9 	.word	0x200002f9
 80024d0:	20000298 	.word	0x20000298
 80024d4:	200002fa 	.word	0x200002fa
 80024d8:	200004a8 	.word	0x200004a8

080024dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af04      	add	r7, sp, #16
 80024e2:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a54      	ldr	r2, [pc, #336]	@ (8002638 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fe65 	bl	80011bc <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe fe62 	bl	80011bc <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7fe fe5f 	bl	80011bc <SendCANFrame>
	 }
	 if (htim == &htim4)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4e      	ldr	r2, [pc, #312]	@ (800263c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d112      	bne.n	800252c <HAL_TIM_PeriodElapsedCallback+0x50>
	 {
	     SendCANFrame(FRAME_153);
 8002506:	2003      	movs	r0, #3
 8002508:	f7fe fe58 	bl	80011bc <SendCANFrame>

	     frame1F3_counter++;
 800250c:	4b4c      	ldr	r3, [pc, #304]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b4a      	ldr	r3, [pc, #296]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002516:	701a      	strb	r2, [r3, #0]
	     if (frame1F3_counter >= 2) {
 8002518:	4b49      	ldr	r3, [pc, #292]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d905      	bls.n	800252c <HAL_TIM_PeriodElapsedCallback+0x50>
	         SendCANFrame(FRAME_1F3);
 8002520:	2004      	movs	r0, #4
 8002522:	f7fe fe4b 	bl	80011bc <SendCANFrame>
	         frame1F3_counter = 0;
 8002526:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
	     }
	 }
	 if (htim == &htim3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a45      	ldr	r2, [pc, #276]	@ (8002644 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d17d      	bne.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x154>
	 {
		bool anyConditionMet = false;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 8002538:	2300      	movs	r3, #0
 800253a:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 800253c:	4b42      	ldr	r3, [pc, #264]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_TIM_PeriodElapsedCallback+0x70>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8002544:	2307      	movs	r3, #7
 8002546:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 800254c:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_TIM_PeriodElapsedCallback+0x84>
			command = command | TURN_LEFT;
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	f043 0320 	orr.w	r3, r3, #32
 800255a:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8002560:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x98>
			command = command | TURN_RIGHT;
 8002568:	7bbb      	ldrb	r3, [r7, #14]
 800256a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256e:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_TIM_PeriodElapsedCallback+0xc0>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 8002580:	2307      	movs	r3, #7
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	2300      	movs	r3, #0
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	2300      	movs	r3, #0
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2300      	movs	r3, #0
 8002592:	225b      	movs	r2, #91	@ 0x5b
 8002594:	21bf      	movs	r1, #191	@ 0xbf
 8002596:	20d0      	movs	r0, #208	@ 0xd0
 8002598:	f7ff fd76 	bl	8002088 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	2207      	movs	r2, #7
 80025a0:	9203      	str	r2, [sp, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	9202      	str	r2, [sp, #8]
 80025a6:	2200      	movs	r2, #0
 80025a8:	9201      	str	r2, [sp, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	9200      	str	r2, [sp, #0]
 80025ae:	225b      	movs	r2, #91	@ 0x5b
 80025b0:	21bf      	movs	r1, #191	@ 0xbf
 80025b2:	20d0      	movs	r0, #208	@ 0xd0
 80025b4:	f7ff fd68 	bl	8002088 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 80025b8:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_TIM_PeriodElapsedCallback+0xf0>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 80025c0:	2201      	movs	r2, #1
 80025c2:	2104      	movs	r1, #4
 80025c4:	4824      	ldr	r0, [pc, #144]	@ (8002658 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025c6:	f002 fe47 	bl	8005258 <HAL_GPIO_WritePin>
 80025ca:	e004      	b.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0xfa>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 80025cc:	2200      	movs	r2, #0
 80025ce:	2104      	movs	r1, #4
 80025d0:	4821      	ldr	r0, [pc, #132]	@ (8002658 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025d2:	f002 fe41 	bl	8005258 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_TIM_PeriodElapsedCallback+0x10e>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 80025de:	2201      	movs	r2, #1
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	481f      	ldr	r0, [pc, #124]	@ (8002660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80025e4:	f002 fe38 	bl	8005258 <HAL_GPIO_WritePin>
 80025e8:	e004      	b.n	80025f4 <HAL_TIM_PeriodElapsedCallback+0x118>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 80025ea:	2200      	movs	r2, #0
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	481c      	ldr	r0, [pc, #112]	@ (8002660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80025f0:	f002 fe32 	bl	8005258 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x12c>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2120      	movs	r1, #32
 8002600:	4817      	ldr	r0, [pc, #92]	@ (8002660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002602:	f002 fe29 	bl	8005258 <HAL_GPIO_WritePin>
 8002606:	e004      	b.n	8002612 <HAL_TIM_PeriodElapsedCallback+0x136>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	2120      	movs	r1, #32
 800260c:	4814      	ldr	r0, [pc, #80]	@ (8002660 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800260e:	f002 fe23 	bl	8005258 <HAL_GPIO_WritePin>
		if (isABSActive) {
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x14a>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2102      	movs	r1, #2
 800261e:	480e      	ldr	r0, [pc, #56]	@ (8002658 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002620:	f002 fe1a 	bl	8005258 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 8002624:	e004      	b.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x154>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 8002626:	2201      	movs	r2, #1
 8002628:	2102      	movs	r1, #2
 800262a:	480b      	ldr	r0, [pc, #44]	@ (8002658 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800262c:	f002 fe14 	bl	8005258 <HAL_GPIO_WritePin>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200003c4 	.word	0x200003c4
 800263c:	2000045c 	.word	0x2000045c
 8002640:	2000036c 	.word	0x2000036c
 8002644:	20000410 	.word	0x20000410
 8002648:	20000364 	.word	0x20000364
 800264c:	2000036a 	.word	0x2000036a
 8002650:	2000036b 	.word	0x2000036b
 8002654:	20000365 	.word	0x20000365
 8002658:	42020400 	.word	0x42020400
 800265c:	20000368 	.word	0x20000368
 8002660:	42020000 	.word	0x42020000
 8002664:	20000369 	.word	0x20000369
 8002668:	20000367 	.word	0x20000367

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8002674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002678:	4801      	ldr	r0, [pc, #4]	@ (8002680 <Error_Handler+0x14>)
 800267a:	f002 fe05 	bl	8005288 <HAL_GPIO_TogglePin>
 800267e:	e7f9      	b.n	8002674 <Error_Handler+0x8>
 8002680:	42020000 	.word	0x42020000

08002684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <NMI_Handler+0x4>

0800269a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <HardFault_Handler+0x4>

080026a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a6:	bf00      	nop
 80026a8:	e7fd      	b.n	80026a6 <MemManage_Handler+0x4>

080026aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ae:	bf00      	nop
 80026b0:	e7fd      	b.n	80026ae <BusFault_Handler+0x4>

080026b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b6:	bf00      	nop
 80026b8:	e7fd      	b.n	80026b6 <UsageFault_Handler+0x4>

080026ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e8:	f000 febc 	bl	8003464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <GPDMA1_Channel0_IRQHandler+0x10>)
 80026f6:	f001 faba 	bl	8003c6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200005d0 	.word	0x200005d0

08002704 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <FDCAN1_IT0_IRQHandler+0x10>)
 800270a:	f002 f9db 	bl	8004ac4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000160 	.word	0x20000160

08002718 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <FDCAN1_IT1_IRQHandler+0x10>)
 800271e:	f002 f9d1 	bl	8004ac4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000160 	.word	0x20000160

0800272c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <TIM1_BRK_IRQHandler+0x10>)
 8002732:	f008 f8c1 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000378 	.word	0x20000378

08002740 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <TIM1_UP_IRQHandler+0x10>)
 8002746:	f008 f8b7 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000378 	.word	0x20000378

08002754 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <TIM1_TRG_COM_IRQHandler+0x10>)
 800275a:	f008 f8ad 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000378 	.word	0x20000378

08002768 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TIM1_CC_IRQHandler+0x10>)
 800276e:	f008 f8a3 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000378 	.word	0x20000378

0800277c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <TIM2_IRQHandler+0x10>)
 8002782:	f008 f899 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200003c4 	.word	0x200003c4

08002790 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <TIM3_IRQHandler+0x10>)
 8002796:	f008 f88f 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000410 	.word	0x20000410

080027a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <TIM4_IRQHandler+0x10>)
 80027aa:	f008 f885 	bl	800a8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000045c 	.word	0x2000045c

080027b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART1_IRQHandler+0x10>)
 80027be:	f009 fc71 	bl	800c0a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200004a8 	.word	0x200004a8

080027cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027de:	f3af 8000 	nop.w
 80027e2:	4601      	mov	r1, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf0      	blt.n	80027de <_read+0x12>
  }

  return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe ff79 	bl	8001718 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x12>
  }
  return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_close>:

int _close(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002866:	605a      	str	r2, [r3, #4]
  return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_isatty>:

int _isatty(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	@ (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	@ (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f00b f892 	bl	800da00 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	@ (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20044000 	.word	0x20044000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000374 	.word	0x20000374
 8002910:	20000798 	.word	0x20000798

08002914 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800291a:	4b35      	ldr	r3, [pc, #212]	@ (80029f0 <SystemInit+0xdc>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	4a33      	ldr	r2, [pc, #204]	@ (80029f0 <SystemInit+0xdc>)
 8002922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002926:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800292a:	4b32      	ldr	r3, [pc, #200]	@ (80029f4 <SystemInit+0xe0>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002930:	4b30      	ldr	r3, [pc, #192]	@ (80029f4 <SystemInit+0xe0>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002936:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <SystemInit+0xe0>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800293c:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <SystemInit+0xe0>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	492c      	ldr	r1, [pc, #176]	@ (80029f4 <SystemInit+0xe0>)
 8002942:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <SystemInit+0xe4>)
 8002944:	4013      	ands	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002948:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <SystemInit+0xe0>)
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800294e:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <SystemInit+0xe0>)
 8002950:	2200      	movs	r2, #0
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <SystemInit+0xe0>)
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <SystemInit+0xe0>)
 800295c:	4a27      	ldr	r2, [pc, #156]	@ (80029fc <SystemInit+0xe8>)
 800295e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <SystemInit+0xe0>)
 8002962:	2200      	movs	r2, #0
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002966:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <SystemInit+0xe0>)
 8002968:	4a24      	ldr	r2, [pc, #144]	@ (80029fc <SystemInit+0xe8>)
 800296a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <SystemInit+0xe0>)
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <SystemInit+0xe0>)
 8002974:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <SystemInit+0xe8>)
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <SystemInit+0xe0>)
 800297a:	2200      	movs	r2, #0
 800297c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <SystemInit+0xe0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <SystemInit+0xe0>)
 8002984:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002988:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800298a:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <SystemInit+0xe0>)
 800298c:	2200      	movs	r2, #0
 800298e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <SystemInit+0xdc>)
 8002992:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002996:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <SystemInit+0xec>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80029a0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80029a8:	d003      	beq.n	80029b2 <SystemInit+0x9e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80029b0:	d117      	bne.n	80029e2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <SystemInit+0xec>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <SystemInit+0xec>)
 80029c0:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <SystemInit+0xf0>)
 80029c2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <SystemInit+0xec>)
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <SystemInit+0xf4>)
 80029c8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <SystemInit+0xec>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002a00 <SystemInit+0xec>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <SystemInit+0xec>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <SystemInit+0xec>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	61d3      	str	r3, [r2, #28]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	44020c00 	.word	0x44020c00
 80029f8:	eae2eae3 	.word	0xeae2eae3
 80029fc:	01010280 	.word	0x01010280
 8002a00:	40022000 	.word	0x40022000
 8002a04:	08192a3b 	.word	0x08192a3b
 8002a08:	4c5d6e7f 	.word	0x4c5d6e7f

08002a0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b09c      	sub	sp, #112	@ 0x70
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2234      	movs	r2, #52	@ 0x34
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a ff8c 	bl	800d964 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a4c:	4b46      	ldr	r3, [pc, #280]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a4e:	4a47      	ldr	r2, [pc, #284]	@ (8002b6c <MX_TIM1_Init+0x160>)
 8002a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8002a52:	4b45      	ldr	r3, [pc, #276]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a54:	2231      	movs	r2, #49	@ 0x31
 8002a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b43      	ldr	r3, [pc, #268]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a5e:	4b42      	ldr	r3, [pc, #264]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b40      	ldr	r3, [pc, #256]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a72:	4b3d      	ldr	r3, [pc, #244]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a78:	483b      	ldr	r0, [pc, #236]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a7a:	f007 fc11 	bl	800a2a0 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a84:	f7ff fdf2 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a92:	4619      	mov	r1, r3
 8002a94:	4834      	ldr	r0, [pc, #208]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002a96:	f008 f9ed 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002aa0:	f7ff fde4 	bl	800266c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aa4:	4830      	ldr	r0, [pc, #192]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002aa6:	f007 fd62 	bl	800a56e <HAL_TIM_PWM_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002ab0:	f7ff fddc 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ac0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4828      	ldr	r0, [pc, #160]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002ac8:	f008 fffc 	bl	800bac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002ad2:	f7ff fdcb 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad6:	2360      	movs	r3, #96	@ 0x60
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8002ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002af8:	2204      	movs	r2, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	481a      	ldr	r0, [pc, #104]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002afe:	f008 f8a5 	bl	800ac4c <HAL_TIM_PWM_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002b08:	f7ff fdb0 	bl	800266c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4807      	ldr	r0, [pc, #28]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002b4a:	f009 f88b 	bl	800bc64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002b54:	f7ff fd8a 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b58:	4803      	ldr	r0, [pc, #12]	@ (8002b68 <MX_TIM1_Init+0x15c>)
 8002b5a:	f000 f9dd 	bl	8002f18 <HAL_TIM_MspPostInit>

}
 8002b5e:	bf00      	nop
 8002b60:	3770      	adds	r7, #112	@ 0x70
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000378 	.word	0x20000378
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	@ 0x38
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b90:	463b      	mov	r3, r7
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bac:	2231      	movs	r2, #49	@ 0x31
 8002bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002bb6:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bb8:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bca:	4822      	ldr	r0, [pc, #136]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bcc:	f007 fb68 	bl	800a2a0 <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002bd6:	f7ff fd49 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002be4:	4619      	mov	r1, r3
 8002be6:	481b      	ldr	r0, [pc, #108]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002be8:	f008 f944 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002bf2:	f7ff fd3b 	bl	800266c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002bf6:	4817      	ldr	r0, [pc, #92]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002bf8:	f007 fc58 	bl	800a4ac <HAL_TIM_OC_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c02:	f7ff fd33 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	480f      	ldr	r0, [pc, #60]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002c16:	f008 ff55 	bl	800bac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c20:	f7ff fd24 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c24:	2300      	movs	r3, #0
 8002c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	2204      	movs	r2, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4806      	ldr	r0, [pc, #24]	@ (8002c54 <MX_TIM2_Init+0xe4>)
 8002c3c:	f007 ff8c 	bl	800ab58 <HAL_TIM_OC_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002c46:	f7ff fd11 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	3738      	adds	r7, #56	@ 0x38
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200003c4 	.word	0x200003c4

08002c58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c78:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <MX_TIM3_Init+0x9c>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c84:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c8c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c9e:	4814      	ldr	r0, [pc, #80]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002ca0:	f007 fafe 	bl	800a2a0 <HAL_TIM_Base_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002caa:	f7ff fcdf 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480d      	ldr	r0, [pc, #52]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002cbc:	f008 f8da 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002cc6:	f7ff fcd1 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <MX_TIM3_Init+0x98>)
 8002cd8:	f008 fef4 	bl	800bac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002ce2:	f7ff fcc3 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000410 	.word	0x20000410
 8002cf4:	40000400 	.word	0x40000400

08002cf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08e      	sub	sp, #56	@ 0x38
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	615a      	str	r2, [r3, #20]
 8002d28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <MX_TIM4_Init+0xe4>)
 8002d2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 8002d30:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d32:	2231      	movs	r2, #49	@ 0x31
 8002d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d36:	4b28      	ldr	r3, [pc, #160]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8002d3c:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d3e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d44:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d50:	4821      	ldr	r0, [pc, #132]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d52:	f007 faa5 	bl	800a2a0 <HAL_TIM_Base_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002d5c:	f7ff fc86 	bl	800266c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	481a      	ldr	r0, [pc, #104]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d6e:	f008 f881 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002d78:	f7ff fc78 	bl	800266c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002d7c:	4816      	ldr	r0, [pc, #88]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d7e:	f007 fb95 	bl	800a4ac <HAL_TIM_OC_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002d88:	f7ff fc70 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	480f      	ldr	r0, [pc, #60]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002d9c:	f008 fe92 	bl	800bac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002da6:	f7ff fc61 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dba:	463b      	mov	r3, r7
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <MX_TIM4_Init+0xe0>)
 8002dc2:	f007 fec9 	bl	800ab58 <HAL_TIM_OC_ConfigChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002dcc:	f7ff fc4e 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	3738      	adds	r7, #56	@ 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000045c 	.word	0x2000045c
 8002ddc:	40000800 	.word	0x40000800

08002de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a46      	ldr	r2, [pc, #280]	@ (8002f08 <HAL_TIM_Base_MspInit+0x128>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d12f      	bne.n	8002e52 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002df2:	4b46      	ldr	r3, [pc, #280]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002df8:	4a44      	ldr	r2, [pc, #272]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dfe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e02:	4b42      	ldr	r3, [pc, #264]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	2029      	movs	r0, #41	@ 0x29
 8002e16:	f000 fc21 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002e1a:	2029      	movs	r0, #41	@ 0x29
 8002e1c:	f000 fc38 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2102      	movs	r1, #2
 8002e24:	202a      	movs	r0, #42	@ 0x2a
 8002e26:	f000 fc19 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e2a:	202a      	movs	r0, #42	@ 0x2a
 8002e2c:	f000 fc30 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	202b      	movs	r0, #43	@ 0x2b
 8002e36:	f000 fc11 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002e3a:	202b      	movs	r0, #43	@ 0x2b
 8002e3c:	f000 fc28 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2102      	movs	r1, #2
 8002e44:	202c      	movs	r0, #44	@ 0x2c
 8002e46:	f000 fc09 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e4a:	202c      	movs	r0, #44	@ 0x2c
 8002e4c:	f000 fc20 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e50:	e055      	b.n	8002efe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5a:	d117      	bne.n	8002e8c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e62:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e6c:	4b27      	ldr	r3, [pc, #156]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	202d      	movs	r0, #45	@ 0x2d
 8002e80:	f000 fbec 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e84:	202d      	movs	r0, #45	@ 0x2d
 8002e86:	f000 fc03 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 8002e8a:	e038      	b.n	8002efe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	@ (8002f10 <HAL_TIM_Base_MspInit+0x130>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d117      	bne.n	8002ec6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e96:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ea6:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2106      	movs	r1, #6
 8002eb8:	202e      	movs	r0, #46	@ 0x2e
 8002eba:	f000 fbcf 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ebe:	202e      	movs	r0, #46	@ 0x2e
 8002ec0:	f000 fbe6 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 8002ec4:	e01b      	b.n	8002efe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_TIM_Base_MspInit+0x134>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d116      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_TIM_Base_MspInit+0x12c>)
 8002ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	202f      	movs	r0, #47	@ 0x2f
 8002ef4:	f000 fbb2 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ef8:	202f      	movs	r0, #47	@ 0x2f
 8002efa:	f000 fbc9 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	44020c00 	.word	0x44020c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800

08002f18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_TIM_MspPostInit+0x6c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11f      	bne.n	8002f7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <HAL_TIM_MspPostInit+0x70>)
 8002f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f40:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_TIM_MspPostInit+0x70>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_TIM_MspPostInit+0x70>)
 8002f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	4619      	mov	r1, r3
 8002f74:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <HAL_TIM_MspPostInit+0x74>)
 8002f76:	f002 f81d 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	44020c00 	.word	0x44020c00
 8002f8c:	42020000 	.word	0x42020000

08002f90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f94:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002f96:	4a23      	ldr	r2, [pc, #140]	@ (8003024 <MX_USART1_UART_Init+0x94>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f9a:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc6:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd2:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fd8:	4811      	ldr	r0, [pc, #68]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fda:	f008 ff23 	bl	800be24 <HAL_UART_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fe4:	f7ff fb42 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	480d      	ldr	r0, [pc, #52]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002fec:	f00a f9e5 	bl	800d3ba <HAL_UARTEx_SetTxFifoThreshold>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ff6:	f7ff fb39 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4808      	ldr	r0, [pc, #32]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 8002ffe:	f00a fa1a 	bl	800d436 <HAL_UARTEx_SetRxFifoThreshold>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003008:	f7ff fb30 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800300c:	4804      	ldr	r0, [pc, #16]	@ (8003020 <MX_USART1_UART_Init+0x90>)
 800300e:	f00a f99b 	bl	800d348 <HAL_UARTEx_DisableFifoMode>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003018:	f7ff fb28 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200004a8 	.word	0x200004a8
 8003024:	40013800 	.word	0x40013800

08003028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800302c:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800302e:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <MX_USART2_UART_Init+0x98>)
 8003030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003032:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003034:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800303a:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800303c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003040:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003042:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800304a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800304e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003052:	220c      	movs	r2, #12
 8003054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306e:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003074:	4811      	ldr	r0, [pc, #68]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003076:	f008 fed5 	bl	800be24 <HAL_UART_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003080:	f7ff faf4 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003084:	2100      	movs	r1, #0
 8003086:	480d      	ldr	r0, [pc, #52]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 8003088:	f00a f997 	bl	800d3ba <HAL_UARTEx_SetTxFifoThreshold>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003092:	f7ff faeb 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003096:	2100      	movs	r1, #0
 8003098:	4808      	ldr	r0, [pc, #32]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 800309a:	f00a f9cc 	bl	800d436 <HAL_UARTEx_SetRxFifoThreshold>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80030a4:	f7ff fae2 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80030a8:	4804      	ldr	r0, [pc, #16]	@ (80030bc <MX_USART2_UART_Init+0x94>)
 80030aa:	f00a f94d 	bl	800d348 <HAL_UARTEx_DisableFifoMode>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80030b4:	f7ff fada 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000053c 	.word	0x2000053c
 80030c0:	40004400 	.word	0x40004400

080030c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0c0      	sub	sp, #256	@ 0x100
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	22d0      	movs	r2, #208	@ 0xd0
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00a fc3d 	bl	800d964 <memset>
  if(uartHandle->Instance==USART1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a72      	ldr	r2, [pc, #456]	@ (80032b8 <HAL_UART_MspInit+0x1f4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	f040 8091 	bne.w	8003218 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030f6:	f04f 0201 	mov.w	r2, #1
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003102:	2300      	movs	r3, #0
 8003104:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fe44 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003116:	f7ff faa9 	bl	800266c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800311a:	4b68      	ldr	r3, [pc, #416]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800311c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003120:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003126:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800312a:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800312c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b60      	ldr	r3, [pc, #384]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800313e:	4a5f      	ldr	r2, [pc, #380]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003148:	4b5c      	ldr	r3, [pc, #368]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800314a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003156:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800315a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003170:	2304      	movs	r3, #4
 8003172:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800317a:	4619      	mov	r1, r3
 800317c:	4850      	ldr	r0, [pc, #320]	@ (80032c0 <HAL_UART_MspInit+0x1fc>)
 800317e:	f001 ff19 	bl	8004fb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003182:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 8003184:	4a50      	ldr	r2, [pc, #320]	@ (80032c8 <HAL_UART_MspInit+0x204>)
 8003186:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8003188:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 800318a:	2215      	movs	r2, #21
 800318c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800318e:	4b4d      	ldr	r3, [pc, #308]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003194:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 800319a:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80031a0:	4b48      	ldr	r3, [pc, #288]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80031ac:	4b45      	ldr	r3, [pc, #276]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80031b2:	4b44      	ldr	r3, [pc, #272]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80031b8:	4b42      	ldr	r3, [pc, #264]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80031c4:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80031d0:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80031d6:	483b      	ldr	r0, [pc, #236]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031d8:	f000 fb18 	bl	800380c <HAL_DMA_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80031e2:	f7ff fa43 	bl	800266c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a36      	ldr	r2, [pc, #216]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80031ee:	4a35      	ldr	r2, [pc, #212]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031f4:	2110      	movs	r1, #16
 80031f6:	4833      	ldr	r0, [pc, #204]	@ (80032c4 <HAL_UART_MspInit+0x200>)
 80031f8:	f000 fe9a 	bl	8003f30 <HAL_DMA_ConfigChannelAttributes>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8003202:	f7ff fa33 	bl	800266c <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2101      	movs	r1, #1
 800320a:	203a      	movs	r0, #58	@ 0x3a
 800320c:	f000 fa26 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003210:	203a      	movs	r0, #58	@ 0x3a
 8003212:	f000 fa3d 	bl	8003690 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003216:	e049      	b.n	80032ac <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <HAL_UART_MspInit+0x208>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d144      	bne.n	80032ac <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003222:	f04f 0202 	mov.w	r2, #2
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800322e:	2300      	movs	r3, #0
 8003230:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fdae 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003242:	f7ff fa13 	bl	800266c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800324c:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800324e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003252:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003258:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800325c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800326a:	4a14      	ldr	r2, [pc, #80]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_UART_MspInit+0x1f8>)
 8003276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003282:	230c      	movs	r3, #12
 8003284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800329a:	2307      	movs	r3, #7
 800329c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80032a4:	4619      	mov	r1, r3
 80032a6:	480a      	ldr	r0, [pc, #40]	@ (80032d0 <HAL_UART_MspInit+0x20c>)
 80032a8:	f001 fe84 	bl	8004fb4 <HAL_GPIO_Init>
}
 80032ac:	bf00      	nop
 80032ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40013800 	.word	0x40013800
 80032bc:	44020c00 	.word	0x44020c00
 80032c0:	42020400 	.word	0x42020400
 80032c4:	200005d0 	.word	0x200005d0
 80032c8:	40020050 	.word	0x40020050
 80032cc:	40004400 	.word	0x40004400
 80032d0:	42020000 	.word	0x42020000

080032d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032d4:	480d      	ldr	r0, [pc, #52]	@ (800330c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032d8:	f7ff fb1c 	bl	8002914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480c      	ldr	r0, [pc, #48]	@ (8003310 <LoopForever+0x6>)
  ldr r1, =_edata
 80032de:	490d      	ldr	r1, [pc, #52]	@ (8003314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <LoopForever+0xe>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <LoopForever+0x12>)
  ldr r4, =_ebss
 80032f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003320 <LoopForever+0x16>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003302:	f00a fb83 	bl	800da0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003306:	f7fe ff11 	bl	800212c <main>

0800330a <LoopForever>:

LoopForever:
    b LoopForever
 800330a:	e7fe      	b.n	800330a <LoopForever>
  ldr   r0, =_estack
 800330c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8003310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003314:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8003318:	0800e634 	.word	0x0800e634
  ldr r2, =_sbss
 800331c:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8003320:	20000798 	.word	0x20000798

08003324 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC1_IRQHandler>
	...

08003328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332c:	2003      	movs	r0, #3
 800332e:	f000 f98a 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003332:	f003 fba7 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <HAL_Init+0x44>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	490b      	ldr	r1, [pc, #44]	@ (8003370 <HAL_Init+0x48>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_Init+0x4c>)
 800334a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800334c:	2004      	movs	r0, #4
 800334e:	f000 f9cf 	bl	80036f0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f810 	bl	8003378 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e002      	b.n	8003368 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003362:	f7ff f98f 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	44020c00 	.word	0x44020c00
 8003370:	0800e5a0 	.word	0x0800e5a0
 8003374:	200000dc 	.word	0x200000dc

08003378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003384:	4b33      	ldr	r3, [pc, #204]	@ (8003454 <HAL_InitTick+0xdc>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e05c      	b.n	800344a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003390:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_InitTick+0xe0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d10c      	bne.n	80033b6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800339c:	4b2f      	ldr	r3, [pc, #188]	@ (800345c <HAL_InitTick+0xe4>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003454 <HAL_InitTick+0xdc>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e037      	b.n	8003426 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80033b6:	f000 f9f3 	bl	80037a0 <HAL_SYSTICK_GetCLKSourceConfig>
 80033ba:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d023      	beq.n	800340a <HAL_InitTick+0x92>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d82d      	bhi.n	8003424 <HAL_InitTick+0xac>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_InitTick+0x5e>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d00d      	beq.n	80033f0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80033d4:	e026      	b.n	8003424 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_InitTick+0xe4>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <HAL_InitTick+0xdc>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80033e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	60fb      	str	r3, [r7, #12]
        break;
 80033ee:	e01a      	b.n	8003426 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80033f0:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <HAL_InitTick+0xdc>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	60fb      	str	r3, [r7, #12]
        break;
 8003408:	e00d      	b.n	8003426 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_InitTick+0xdc>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003414:	fbb3 f3f2 	udiv	r3, r3, r2
 8003418:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	60fb      	str	r3, [r7, #12]
        break;
 8003422:	e000      	b.n	8003426 <HAL_InitTick+0xae>
        break;
 8003424:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f940 	bl	80036ac <HAL_SYSTICK_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e009      	b.n	800344a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003436:	2200      	movs	r2, #0
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	f000 f90d 	bl	800365c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003442:	4a07      	ldr	r2, [pc, #28]	@ (8003460 <HAL_InitTick+0xe8>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200000e4 	.word	0x200000e4
 8003458:	e000e010 	.word	0xe000e010
 800345c:	200000dc 	.word	0x200000dc
 8003460:	200000e0 	.word	0x200000e0

08003464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	200000e4 	.word	0x200000e4
 8003488:	20000648 	.word	0x20000648

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000648 	.word	0x20000648

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff ffee 	bl	800348c <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d005      	beq.n	80034ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_Delay+0x44>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ca:	bf00      	nop
 80034cc:	f7ff ffde 	bl	800348c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8f7      	bhi.n	80034cc <HAL_Delay+0x28>
  {
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200000e4 	.word	0x200000e4

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	@ (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	@ (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	@ (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	@ (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	@ 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff4c 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366a:	f7ff ff63 	bl	8003534 <__NVIC_GetPriorityGrouping>
 800366e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f7ff ffb3 	bl	80035e0 <NVIC_EncodePriority>
 800367a:	4602      	mov	r2, r0
 800367c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff82 	bl	800358c <__NVIC_SetPriority>
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff56 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80036be:	2301      	movs	r3, #1
 80036c0:	e00d      	b.n	80036de <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_SYSTICK_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80036ca:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <HAL_SYSTICK_Config+0x40>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_SYSTICK_Config+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a05      	ldr	r2, [pc, #20]	@ (80036ec <HAL_SYSTICK_Config+0x40>)
 80036d6:	f043 0303 	orr.w	r3, r3, #3
 80036da:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d844      	bhi.n	8003788 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80036fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003727 	.word	0x08003727
 8003708:	08003745 	.word	0x08003745
 800370c:	08003767 	.word	0x08003767
 8003710:	08003789 	.word	0x08003789
 8003714:	08003719 	.word	0x08003719
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003718:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6013      	str	r3, [r2, #0]
      break;
 8003724:	e031      	b.n	800378a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1b      	ldr	r2, [pc, #108]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003732:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800373a:	f023 030c 	bic.w	r3, r3, #12
 800373e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003742:	e022      	b.n	800378a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003744:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a13      	ldr	r2, [pc, #76]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003756:	f023 030c 	bic.w	r3, r3, #12
 800375a:	4a10      	ldr	r2, [pc, #64]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003764:	e011      	b.n	800378a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003766:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003778:	f023 030c 	bic.w	r3, r3, #12
 800377c:	4a07      	ldr	r2, [pc, #28]	@ (800379c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003786:	e000      	b.n	800378a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003788:	bf00      	nop
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000e010 	.word	0xe000e010
 800379c:	44020c00 	.word	0x44020c00

080037a0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80037a6:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80037b2:	2304      	movs	r3, #4
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	e01e      	b.n	80037f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80037b8:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80037ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d00f      	beq.n	80037ea <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d80f      	bhi.n	80037f0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d003      	beq.n	80037e4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80037dc:	e008      	b.n	80037f0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
        break;
 80037e2:	e008      	b.n	80037f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80037e4:	2301      	movs	r3, #1
 80037e6:	607b      	str	r3, [r7, #4]
        break;
 80037e8:	e005      	b.n	80037f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80037ea:	2302      	movs	r3, #2
 80037ec:	607b      	str	r3, [r7, #4]
        break;
 80037ee:	e002      	b.n	80037f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
        break;
 80037f4:	bf00      	nop
    }
  }
  return systick_source;
 80037f6:	687b      	ldr	r3, [r7, #4]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e010 	.word	0xe000e010
 8003808:	44020c00 	.word	0x44020c00

0800380c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff fe3a 	bl	800348c <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0db      	b.n	80039dc <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6e      	ldr	r2, [pc, #440]	@ (80039e4 <HAL_DMA_Init+0x1d8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f000 809f 	beq.w	800396e <HAL_DMA_Init+0x162>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a6c      	ldr	r2, [pc, #432]	@ (80039e8 <HAL_DMA_Init+0x1dc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	f000 8099 	beq.w	800396e <HAL_DMA_Init+0x162>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <HAL_DMA_Init+0x1e0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f000 8093 	beq.w	800396e <HAL_DMA_Init+0x162>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <HAL_DMA_Init+0x1e4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	f000 808d 	beq.w	800396e <HAL_DMA_Init+0x162>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a66      	ldr	r2, [pc, #408]	@ (80039f4 <HAL_DMA_Init+0x1e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	f000 8087 	beq.w	800396e <HAL_DMA_Init+0x162>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a64      	ldr	r2, [pc, #400]	@ (80039f8 <HAL_DMA_Init+0x1ec>)
 8003866:	4293      	cmp	r3, r2
 8003868:	f000 8081 	beq.w	800396e <HAL_DMA_Init+0x162>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a62      	ldr	r2, [pc, #392]	@ (80039fc <HAL_DMA_Init+0x1f0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d07b      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a61      	ldr	r2, [pc, #388]	@ (8003a00 <HAL_DMA_Init+0x1f4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d076      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5f      	ldr	r2, [pc, #380]	@ (8003a04 <HAL_DMA_Init+0x1f8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d071      	beq.n	800396e <HAL_DMA_Init+0x162>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a08 <HAL_DMA_Init+0x1fc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d06c      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a5c      	ldr	r2, [pc, #368]	@ (8003a0c <HAL_DMA_Init+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d067      	beq.n	800396e <HAL_DMA_Init+0x162>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a10 <HAL_DMA_Init+0x204>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d062      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a59      	ldr	r2, [pc, #356]	@ (8003a14 <HAL_DMA_Init+0x208>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d05d      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a58      	ldr	r2, [pc, #352]	@ (8003a18 <HAL_DMA_Init+0x20c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d058      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a56      	ldr	r2, [pc, #344]	@ (8003a1c <HAL_DMA_Init+0x210>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d053      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a55      	ldr	r2, [pc, #340]	@ (8003a20 <HAL_DMA_Init+0x214>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d04e      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a53      	ldr	r2, [pc, #332]	@ (8003a24 <HAL_DMA_Init+0x218>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d049      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a52      	ldr	r2, [pc, #328]	@ (8003a28 <HAL_DMA_Init+0x21c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d044      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a50      	ldr	r2, [pc, #320]	@ (8003a2c <HAL_DMA_Init+0x220>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d03f      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003a30 <HAL_DMA_Init+0x224>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03a      	beq.n	800396e <HAL_DMA_Init+0x162>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003a34 <HAL_DMA_Init+0x228>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d035      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a4c      	ldr	r2, [pc, #304]	@ (8003a38 <HAL_DMA_Init+0x22c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d030      	beq.n	800396e <HAL_DMA_Init+0x162>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_DMA_Init+0x230>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a49      	ldr	r2, [pc, #292]	@ (8003a40 <HAL_DMA_Init+0x234>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d026      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a47      	ldr	r2, [pc, #284]	@ (8003a44 <HAL_DMA_Init+0x238>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d021      	beq.n	800396e <HAL_DMA_Init+0x162>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a46      	ldr	r2, [pc, #280]	@ (8003a48 <HAL_DMA_Init+0x23c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01c      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a44      	ldr	r2, [pc, #272]	@ (8003a4c <HAL_DMA_Init+0x240>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <HAL_DMA_Init+0x162>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a43      	ldr	r2, [pc, #268]	@ (8003a50 <HAL_DMA_Init+0x244>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d012      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a41      	ldr	r2, [pc, #260]	@ (8003a54 <HAL_DMA_Init+0x248>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a40      	ldr	r2, [pc, #256]	@ (8003a58 <HAL_DMA_Init+0x24c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d008      	beq.n	800396e <HAL_DMA_Init+0x162>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3e      	ldr	r2, [pc, #248]	@ (8003a5c <HAL_DMA_Init+0x250>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <HAL_DMA_Init+0x162>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a60 <HAL_DMA_Init+0x254>)
 800396c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0206 	orr.w	r2, r2, #6
 800398c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800398e:	e00f      	b.n	80039b0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003990:	f7ff fd7c 	bl	800348c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b05      	cmp	r3, #5
 800399c:	d908      	bls.n	80039b0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2210      	movs	r2, #16
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e015      	b.n	80039dc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e8      	bne.n	8003990 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fb18 	bl	8003ff4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020050 	.word	0x40020050
 80039e8:	50020050 	.word	0x50020050
 80039ec:	400200d0 	.word	0x400200d0
 80039f0:	500200d0 	.word	0x500200d0
 80039f4:	40020150 	.word	0x40020150
 80039f8:	50020150 	.word	0x50020150
 80039fc:	400201d0 	.word	0x400201d0
 8003a00:	500201d0 	.word	0x500201d0
 8003a04:	40020250 	.word	0x40020250
 8003a08:	50020250 	.word	0x50020250
 8003a0c:	400202d0 	.word	0x400202d0
 8003a10:	500202d0 	.word	0x500202d0
 8003a14:	40020350 	.word	0x40020350
 8003a18:	50020350 	.word	0x50020350
 8003a1c:	400203d0 	.word	0x400203d0
 8003a20:	500203d0 	.word	0x500203d0
 8003a24:	40021050 	.word	0x40021050
 8003a28:	50021050 	.word	0x50021050
 8003a2c:	400210d0 	.word	0x400210d0
 8003a30:	500210d0 	.word	0x500210d0
 8003a34:	40021150 	.word	0x40021150
 8003a38:	50021150 	.word	0x50021150
 8003a3c:	400211d0 	.word	0x400211d0
 8003a40:	500211d0 	.word	0x500211d0
 8003a44:	40021250 	.word	0x40021250
 8003a48:	50021250 	.word	0x50021250
 8003a4c:	400212d0 	.word	0x400212d0
 8003a50:	500212d0 	.word	0x500212d0
 8003a54:	40021350 	.word	0x40021350
 8003a58:	50021350 	.word	0x50021350
 8003a5c:	400213d0 	.word	0x400213d0
 8003a60:	500213d0 	.word	0x500213d0

08003a64 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e04f      	b.n	8003b1c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_DMA_Start_IT+0x26>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e048      	b.n	8003b1c <HAL_DMA_Start_IT+0xb8>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d136      	bne.n	8003b0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fa78 	bl	8003fa8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003ac6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ade:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003af6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e007      	b.n	8003b1c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2240      	movs	r2, #64	@ 0x40
 8003b10:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003b2c:	f7ff fcae 	bl	800348c <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e06b      	b.n	8003c14 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d008      	beq.n	8003b5a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e05c      	b.n	8003c14 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0204 	orr.w	r2, r2, #4
 8003b68:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003b72:	e020      	b.n	8003bb6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003b74:	f7ff fc8a 	bl	800348c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d919      	bls.n	8003bb6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	f043 0210 	orr.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e02e      	b.n	8003c14 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0d7      	beq.n	8003b74 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0202 	orr.w	r2, r2, #2
 8003bd2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003be4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfe:	2201      	movs	r2, #1
 8003c00:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e019      	b.n	8003c62 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e00e      	b.n	8003c62 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2204      	movs	r2, #4
 8003c48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003c7e:	f023 030f 	bic.w	r3, r3, #15
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	3b50      	subs	r3, #80	@ 0x50
 8003c8e:	09db      	lsrs	r3, r3, #7
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 813b 	beq.w	8003f24 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cd2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d04:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d011      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d36:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d68:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04c      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d045      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dd0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d12e      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dec:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0202 	orr.w	r2, r2, #2
 8003dfc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	2201      	movs	r2, #1
 8003e18:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d07a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
        }

        return;
 8003e3a:	e075      	b.n	8003f28 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2205      	movs	r2, #5
 8003e40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d039      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d032      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d111      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	731a      	strb	r2, [r3, #12]
 8003ea0:	e008      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003ebc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d025      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0202 	orr.w	r2, r2, #2
 8003eec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	2201      	movs	r2, #1
 8003f08:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
 8003f22:	e002      	b.n	8003f2a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003f28:	bf00      	nop
    }
  }
}
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e02b      	b.n	8003f9c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5a:	3b50      	subs	r3, #80	@ 0x50
 8003f5c:	09db      	lsrs	r3, r3, #7
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2201      	movs	r2, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d012      	beq.n	8003f9a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f003 0311 	and.w	r3, r3, #17
 8003f7a:	2b11      	cmp	r3, #17
 8003f7c:	d106      	bne.n	8003f8c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e006      	b.n	8003f9a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	401a      	ands	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b291      	uxth	r1, r2
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003fd4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a53      	ldr	r2, [pc, #332]	@ (8004180 <DMA_Init+0x18c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 80a0 	beq.w	800417a <DMA_Init+0x186>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a51      	ldr	r2, [pc, #324]	@ (8004184 <DMA_Init+0x190>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f000 809a 	beq.w	800417a <DMA_Init+0x186>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4f      	ldr	r2, [pc, #316]	@ (8004188 <DMA_Init+0x194>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 8094 	beq.w	800417a <DMA_Init+0x186>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a4d      	ldr	r2, [pc, #308]	@ (800418c <DMA_Init+0x198>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f000 808e 	beq.w	800417a <DMA_Init+0x186>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a4b      	ldr	r2, [pc, #300]	@ (8004190 <DMA_Init+0x19c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f000 8088 	beq.w	800417a <DMA_Init+0x186>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a49      	ldr	r2, [pc, #292]	@ (8004194 <DMA_Init+0x1a0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	f000 8082 	beq.w	800417a <DMA_Init+0x186>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a47      	ldr	r2, [pc, #284]	@ (8004198 <DMA_Init+0x1a4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d07c      	beq.n	800417a <DMA_Init+0x186>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a45      	ldr	r2, [pc, #276]	@ (800419c <DMA_Init+0x1a8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d077      	beq.n	800417a <DMA_Init+0x186>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a44      	ldr	r2, [pc, #272]	@ (80041a0 <DMA_Init+0x1ac>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d072      	beq.n	800417a <DMA_Init+0x186>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <DMA_Init+0x1b0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d06d      	beq.n	800417a <DMA_Init+0x186>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a41      	ldr	r2, [pc, #260]	@ (80041a8 <DMA_Init+0x1b4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d068      	beq.n	800417a <DMA_Init+0x186>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3f      	ldr	r2, [pc, #252]	@ (80041ac <DMA_Init+0x1b8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d063      	beq.n	800417a <DMA_Init+0x186>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3e      	ldr	r2, [pc, #248]	@ (80041b0 <DMA_Init+0x1bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d05e      	beq.n	800417a <DMA_Init+0x186>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3c      	ldr	r2, [pc, #240]	@ (80041b4 <DMA_Init+0x1c0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d059      	beq.n	800417a <DMA_Init+0x186>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <DMA_Init+0x1c4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d054      	beq.n	800417a <DMA_Init+0x186>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a39      	ldr	r2, [pc, #228]	@ (80041bc <DMA_Init+0x1c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04f      	beq.n	800417a <DMA_Init+0x186>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a38      	ldr	r2, [pc, #224]	@ (80041c0 <DMA_Init+0x1cc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04a      	beq.n	800417a <DMA_Init+0x186>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a36      	ldr	r2, [pc, #216]	@ (80041c4 <DMA_Init+0x1d0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d045      	beq.n	800417a <DMA_Init+0x186>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a35      	ldr	r2, [pc, #212]	@ (80041c8 <DMA_Init+0x1d4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <DMA_Init+0x186>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a33      	ldr	r2, [pc, #204]	@ (80041cc <DMA_Init+0x1d8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03b      	beq.n	800417a <DMA_Init+0x186>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a32      	ldr	r2, [pc, #200]	@ (80041d0 <DMA_Init+0x1dc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d036      	beq.n	800417a <DMA_Init+0x186>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <DMA_Init+0x1e0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <DMA_Init+0x186>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2f      	ldr	r2, [pc, #188]	@ (80041d8 <DMA_Init+0x1e4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02c      	beq.n	800417a <DMA_Init+0x186>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2d      	ldr	r2, [pc, #180]	@ (80041dc <DMA_Init+0x1e8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d027      	beq.n	800417a <DMA_Init+0x186>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2c      	ldr	r2, [pc, #176]	@ (80041e0 <DMA_Init+0x1ec>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <DMA_Init+0x186>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2a      	ldr	r2, [pc, #168]	@ (80041e4 <DMA_Init+0x1f0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <DMA_Init+0x186>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a29      	ldr	r2, [pc, #164]	@ (80041e8 <DMA_Init+0x1f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <DMA_Init+0x186>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a27      	ldr	r2, [pc, #156]	@ (80041ec <DMA_Init+0x1f8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <DMA_Init+0x186>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <DMA_Init+0x1fc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <DMA_Init+0x186>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a24      	ldr	r2, [pc, #144]	@ (80041f4 <DMA_Init+0x200>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <DMA_Init+0x186>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a23      	ldr	r2, [pc, #140]	@ (80041f8 <DMA_Init+0x204>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <DMA_Init+0x186>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a21      	ldr	r2, [pc, #132]	@ (80041fc <DMA_Init+0x208>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d142      	bne.n	8004200 <DMA_Init+0x20c>
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <DMA_Init+0x20e>
 800417e:	bf00      	nop
 8004180:	40020050 	.word	0x40020050
 8004184:	50020050 	.word	0x50020050
 8004188:	400200d0 	.word	0x400200d0
 800418c:	500200d0 	.word	0x500200d0
 8004190:	40020150 	.word	0x40020150
 8004194:	50020150 	.word	0x50020150
 8004198:	400201d0 	.word	0x400201d0
 800419c:	500201d0 	.word	0x500201d0
 80041a0:	40020250 	.word	0x40020250
 80041a4:	50020250 	.word	0x50020250
 80041a8:	400202d0 	.word	0x400202d0
 80041ac:	500202d0 	.word	0x500202d0
 80041b0:	40020350 	.word	0x40020350
 80041b4:	50020350 	.word	0x50020350
 80041b8:	400203d0 	.word	0x400203d0
 80041bc:	500203d0 	.word	0x500203d0
 80041c0:	40021050 	.word	0x40021050
 80041c4:	50021050 	.word	0x50021050
 80041c8:	400210d0 	.word	0x400210d0
 80041cc:	500210d0 	.word	0x500210d0
 80041d0:	40021150 	.word	0x40021150
 80041d4:	50021150 	.word	0x50021150
 80041d8:	400211d0 	.word	0x400211d0
 80041dc:	500211d0 	.word	0x500211d0
 80041e0:	40021250 	.word	0x40021250
 80041e4:	50021250 	.word	0x50021250
 80041e8:	400212d0 	.word	0x400212d0
 80041ec:	500212d0 	.word	0x500212d0
 80041f0:	40021350 	.word	0x40021350
 80041f4:	50021350 	.word	0x50021350
 80041f8:	400213d0 	.word	0x400213d0
 80041fc:	500213d0 	.word	0x500213d0
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	051b      	lsls	r3, r3, #20
 8004212:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004216:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	3b01      	subs	r3, #1
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004224:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	430a      	orrs	r2, r1
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425c:	f040 80b0 	bne.w	80043c0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a84      	ldr	r2, [pc, #528]	@ (8004478 <DMA_Init+0x484>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f000 80a0 	beq.w	80043ac <DMA_Init+0x3b8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a82      	ldr	r2, [pc, #520]	@ (800447c <DMA_Init+0x488>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f000 809a 	beq.w	80043ac <DMA_Init+0x3b8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a80      	ldr	r2, [pc, #512]	@ (8004480 <DMA_Init+0x48c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	f000 8094 	beq.w	80043ac <DMA_Init+0x3b8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7e      	ldr	r2, [pc, #504]	@ (8004484 <DMA_Init+0x490>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f000 808e 	beq.w	80043ac <DMA_Init+0x3b8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <DMA_Init+0x494>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f000 8088 	beq.w	80043ac <DMA_Init+0x3b8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7a      	ldr	r2, [pc, #488]	@ (800448c <DMA_Init+0x498>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f000 8082 	beq.w	80043ac <DMA_Init+0x3b8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a78      	ldr	r2, [pc, #480]	@ (8004490 <DMA_Init+0x49c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d07c      	beq.n	80043ac <DMA_Init+0x3b8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a77      	ldr	r2, [pc, #476]	@ (8004494 <DMA_Init+0x4a0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d077      	beq.n	80043ac <DMA_Init+0x3b8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a75      	ldr	r2, [pc, #468]	@ (8004498 <DMA_Init+0x4a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d072      	beq.n	80043ac <DMA_Init+0x3b8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a74      	ldr	r2, [pc, #464]	@ (800449c <DMA_Init+0x4a8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d06d      	beq.n	80043ac <DMA_Init+0x3b8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a72      	ldr	r2, [pc, #456]	@ (80044a0 <DMA_Init+0x4ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d068      	beq.n	80043ac <DMA_Init+0x3b8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a71      	ldr	r2, [pc, #452]	@ (80044a4 <DMA_Init+0x4b0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d063      	beq.n	80043ac <DMA_Init+0x3b8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a6f      	ldr	r2, [pc, #444]	@ (80044a8 <DMA_Init+0x4b4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d05e      	beq.n	80043ac <DMA_Init+0x3b8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6e      	ldr	r2, [pc, #440]	@ (80044ac <DMA_Init+0x4b8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d059      	beq.n	80043ac <DMA_Init+0x3b8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6c      	ldr	r2, [pc, #432]	@ (80044b0 <DMA_Init+0x4bc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d054      	beq.n	80043ac <DMA_Init+0x3b8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <DMA_Init+0x4c0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04f      	beq.n	80043ac <DMA_Init+0x3b8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a69      	ldr	r2, [pc, #420]	@ (80044b8 <DMA_Init+0x4c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d04a      	beq.n	80043ac <DMA_Init+0x3b8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <DMA_Init+0x4c8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d045      	beq.n	80043ac <DMA_Init+0x3b8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a66      	ldr	r2, [pc, #408]	@ (80044c0 <DMA_Init+0x4cc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d040      	beq.n	80043ac <DMA_Init+0x3b8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <DMA_Init+0x4d0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03b      	beq.n	80043ac <DMA_Init+0x3b8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a63      	ldr	r2, [pc, #396]	@ (80044c8 <DMA_Init+0x4d4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d036      	beq.n	80043ac <DMA_Init+0x3b8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a62      	ldr	r2, [pc, #392]	@ (80044cc <DMA_Init+0x4d8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d031      	beq.n	80043ac <DMA_Init+0x3b8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a60      	ldr	r2, [pc, #384]	@ (80044d0 <DMA_Init+0x4dc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02c      	beq.n	80043ac <DMA_Init+0x3b8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <DMA_Init+0x4e0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d027      	beq.n	80043ac <DMA_Init+0x3b8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <DMA_Init+0x4e4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <DMA_Init+0x3b8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5c      	ldr	r2, [pc, #368]	@ (80044dc <DMA_Init+0x4e8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <DMA_Init+0x3b8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5a      	ldr	r2, [pc, #360]	@ (80044e0 <DMA_Init+0x4ec>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <DMA_Init+0x3b8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <DMA_Init+0x4f0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <DMA_Init+0x3b8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a57      	ldr	r2, [pc, #348]	@ (80044e8 <DMA_Init+0x4f4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <DMA_Init+0x3b8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a56      	ldr	r2, [pc, #344]	@ (80044ec <DMA_Init+0x4f8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <DMA_Init+0x3b8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a54      	ldr	r2, [pc, #336]	@ (80044f0 <DMA_Init+0x4fc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <DMA_Init+0x3b8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a53      	ldr	r2, [pc, #332]	@ (80044f4 <DMA_Init+0x500>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <DMA_Init+0x3bc>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <DMA_Init+0x3be>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e008      	b.n	80043d2 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c8:	d103      	bne.n	80043d2 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e2:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <DMA_Init+0x504>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <DMA_Init+0x4b4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_Init+0x454>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	@ (80044ac <DMA_Init+0x4b8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_Init+0x454>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a27      	ldr	r2, [pc, #156]	@ (80044b0 <DMA_Init+0x4bc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_Init+0x454>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <DMA_Init+0x4c0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_Init+0x454>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	@ (80044e8 <DMA_Init+0x4f4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_Init+0x454>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <DMA_Init+0x4f8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_Init+0x454>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <DMA_Init+0x4fc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_Init+0x454>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <DMA_Init+0x500>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_Init+0x458>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_Init+0x45a>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40020050 	.word	0x40020050
 800447c:	50020050 	.word	0x50020050
 8004480:	400200d0 	.word	0x400200d0
 8004484:	500200d0 	.word	0x500200d0
 8004488:	40020150 	.word	0x40020150
 800448c:	50020150 	.word	0x50020150
 8004490:	400201d0 	.word	0x400201d0
 8004494:	500201d0 	.word	0x500201d0
 8004498:	40020250 	.word	0x40020250
 800449c:	50020250 	.word	0x50020250
 80044a0:	400202d0 	.word	0x400202d0
 80044a4:	500202d0 	.word	0x500202d0
 80044a8:	40020350 	.word	0x40020350
 80044ac:	50020350 	.word	0x50020350
 80044b0:	400203d0 	.word	0x400203d0
 80044b4:	500203d0 	.word	0x500203d0
 80044b8:	40021050 	.word	0x40021050
 80044bc:	50021050 	.word	0x50021050
 80044c0:	400210d0 	.word	0x400210d0
 80044c4:	500210d0 	.word	0x500210d0
 80044c8:	40021150 	.word	0x40021150
 80044cc:	50021150 	.word	0x50021150
 80044d0:	400211d0 	.word	0x400211d0
 80044d4:	500211d0 	.word	0x500211d0
 80044d8:	40021250 	.word	0x40021250
 80044dc:	50021250 	.word	0x50021250
 80044e0:	400212d0 	.word	0x400212d0
 80044e4:	500212d0 	.word	0x500212d0
 80044e8:	40021350 	.word	0x40021350
 80044ec:	50021350 	.word	0x50021350
 80044f0:	400213d0 	.word	0x400213d0
 80044f4:	500213d0 	.word	0x500213d0
 80044f8:	3cc02100 	.word	0x3cc02100

080044fc <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_DMAEx_List_Start_IT+0x16>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e082      	b.n	800461c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800451c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004528:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d005      	beq.n	800453c <HAL_DMAEx_List_Start_IT+0x40>
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d16a      	bne.n	800460c <HAL_DMAEx_List_Start_IT+0x110>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d067      	beq.n	800460c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d157      	bne.n	80045f8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_DMAEx_List_Start_IT+0x5a>
 8004552:	2302      	movs	r3, #2
 8004554:	e062      	b.n	800461c <HAL_DMAEx_List_Start_IT+0x120>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	2202      	movs	r2, #2
 800456c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800458a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045ba:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f107 010c 	add.w	r1, r7, #12
 80045c6:	2200      	movs	r2, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f82b 	bl	8004624 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	0c0b      	lsrs	r3, r1, #16
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80045ec:	4013      	ands	r3, r2
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	430b      	orrs	r3, r1
 80045f6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e007      	b.n	800461c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2240      	movs	r2, #64	@ 0x40
 8004610:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00c      	beq.n	8004656 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a0d      	ldr	r2, [pc, #52]	@ (800467c <DMA_List_GetCLLRNodeInfo+0x58>)
 8004646:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004654:	e00b      	b.n	800466e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a08      	ldr	r2, [pc, #32]	@ (8004680 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004660:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2205      	movs	r2, #5
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	fe010000 	.word	0xfe010000
 8004680:	f8010000 	.word	0xf8010000

08004684 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e147      	b.n	8004926 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fcb8 	bl	8001020 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0210 	bic.w	r2, r2, #16
 80046be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c0:	f7fe fee4 	bl	800348c <HAL_GetTick>
 80046c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046c6:	e012      	b.n	80046ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046c8:	f7fe fee0 	bl	800348c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b0a      	cmp	r3, #10
 80046d4:	d90b      	bls.n	80046ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e11b      	b.n	8004926 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d0e5      	beq.n	80046c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470c:	f7fe febe 	bl	800348c <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004712:	e012      	b.n	800473a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004714:	f7fe feba 	bl	800348c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b0a      	cmp	r3, #10
 8004720:	d90b      	bls.n	800473a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2203      	movs	r2, #3
 8004732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0f5      	b.n	8004926 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0e5      	beq.n	8004714 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0202 	orr.w	r2, r2, #2
 8004756:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a74      	ldr	r2, [pc, #464]	@ (8004930 <HAL_FDCAN_Init+0x2ac>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d103      	bne.n	800476a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004762:	4a74      	ldr	r2, [pc, #464]	@ (8004934 <HAL_FDCAN_Init+0x2b0>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7c1b      	ldrb	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004780:	619a      	str	r2, [r3, #24]
 8004782:	e007      	b.n	8004794 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004792:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7c5b      	ldrb	r3, [r3, #17]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d108      	bne.n	80047ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	e007      	b.n	80047be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7c9b      	ldrb	r3, [r3, #18]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e007      	b.n	80047e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800480c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0210 	bic.w	r2, r2, #16
 800481c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0204 	orr.w	r2, r2, #4
 8004834:	619a      	str	r2, [r3, #24]
 8004836:	e02c      	b.n	8004892 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d028      	beq.n	8004892 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d01c      	beq.n	8004882 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004856:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0210 	orr.w	r2, r2, #16
 8004866:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d110      	bne.n	8004892 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	619a      	str	r2, [r3, #24]
 8004880:	e007      	b.n	8004892 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0220 	orr.w	r2, r2, #32
 8004890:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	3b01      	subs	r3, #1
 8004898:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	3b01      	subs	r3, #1
 80048a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048c6:	d115      	bne.n	80048f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	3b01      	subs	r3, #1
 80048de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	3b01      	subs	r3, #1
 80048ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa74 	bl	8004df8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	4000a400 	.word	0x4000a400
 8004934:	4000a500 	.word	0x4000a500

08004938 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004948:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d002      	beq.n	8004956 <HAL_FDCAN_ConfigFilter+0x1e>
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d13d      	bne.n	80049d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d119      	bne.n	8004992 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800496a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004972:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e01d      	b.n	80049ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	075a      	lsls	r2, r3, #29
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	079a      	lsls	r2, r3, #30
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3304      	adds	r3, #4
 80049c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e006      	b.n	80049e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d6:	f043 0202 	orr.w	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d110      	bne.n	8004a22 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e006      	b.n	8004a30 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d12c      	bne.n	8004aae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e023      	b.n	8004abc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fa16 	bl	8004ebc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e006      	b.n	8004abc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab2:	f043 0208 	orr.w	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	@ 0x30
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af8:	4013      	ands	r3, r2
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	4013      	ands	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004b1e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	6a3a      	ldr	r2, [r7, #32]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004b36:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b52:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f921 	bl	8004db8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d019      	beq.n	8004bb4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d014      	beq.n	8004bb4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b92:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004bac:	6939      	ldr	r1, [r7, #16]
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8e3 	bl	8004d7a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8a2 	bl	8004d0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8a2 	bl	8004d24 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004bee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8a2 	bl	8004d3a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f89b 	bl	8004d50 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d018      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d013      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004c36:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2280      	movs	r2, #128	@ 0x80
 8004c4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f887 	bl	8004d64 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00c      	beq.n	8004c7a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f88b 	bl	8004d90 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00c      	beq.n	8004c9e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f883 	bl	8004da4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00f      	beq.n	8004cc8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004cba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f881 	bl	8004de0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f863 	bl	8004dcc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004d06:	bf00      	nop
 8004d08:	3730      	adds	r7, #48	@ 0x30
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004e00:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004e02:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d103      	bne.n	8004e16 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e14:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e24:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2c:	041a      	lsls	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e4a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e005      	b.n	8004e98 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3304      	adds	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d3f3      	bcc.n	8004e8c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	4000ac00 	.word	0x4000ac00
 8004eb8:	4000a800 	.word	0x4000a800

08004ebc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004eda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e00a      	b.n	8004efe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004ef0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004ef6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004efc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004f0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004f14:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	3304      	adds	r3, #4
 8004f48:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e020      	b.n	8004f92 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3303      	adds	r3, #3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	3302      	adds	r3, #2
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	440b      	add	r3, r1
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f68:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	440b      	add	r3, r1
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f76:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f80:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a06      	ldr	r2, [pc, #24]	@ (8004fb0 <FDCAN_CopyMessageToRAM+0xf4>)
 8004f98:	5cd3      	ldrb	r3, [r2, r3]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d3d6      	bcc.n	8004f50 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	3724      	adds	r7, #36	@ 0x24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	0800e5b8 	.word	0x0800e5b8

08004fb4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004fc2:	e136      	b.n	8005232 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2101      	movs	r1, #1
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8128 	beq.w	800522c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x38>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b12      	cmp	r3, #18
 8004fea:	d125      	bne.n	8005038 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	08da      	lsrs	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3208      	adds	r2, #8
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	220f      	movs	r2, #15
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4013      	ands	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 020f 	and.w	r2, r3, #15
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	08da      	lsrs	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3208      	adds	r2, #8
 8005032:	6979      	ldr	r1, [r7, #20]
 8005034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	2203      	movs	r2, #3
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4013      	ands	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0203 	and.w	r2, r3, #3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d00b      	beq.n	800508c <HAL_GPIO_Init+0xd8>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d007      	beq.n	800508c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005080:	2b11      	cmp	r3, #17
 8005082:	d003      	beq.n	800508c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b12      	cmp	r3, #18
 800508a:	d130      	bne.n	80050ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	2203      	movs	r2, #3
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4013      	ands	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050c2:	2201      	movs	r2, #1
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4013      	ands	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f003 0201 	and.w	r2, r3, #1
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d017      	beq.n	8005126 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	2203      	movs	r2, #3
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4013      	ands	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d07c      	beq.n	800522c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005132:	4a47      	ldr	r2, [pc, #284]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3318      	adds	r3, #24
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4013      	ands	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0a9a      	lsrs	r2, r3, #10
 800515a:	4b3e      	ldr	r3, [pc, #248]	@ (8005254 <HAL_GPIO_Init+0x2a0>)
 800515c:	4013      	ands	r3, r2
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	f002 0203 	and.w	r2, r2, #3
 8005164:	00d2      	lsls	r2, r2, #3
 8005166:	4093      	lsls	r3, r2
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800516e:	4938      	ldr	r1, [pc, #224]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	3318      	adds	r3, #24
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800517c:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	43db      	mvns	r3, r3
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4013      	ands	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80051a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80051a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4013      	ands	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80051ca:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 80051d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	43db      	mvns	r3, r3
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4013      	ands	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80051f6:	4a16      	ldr	r2, [pc, #88]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80051fe:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 8005200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005204:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4013      	ands	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005224:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <HAL_GPIO_Init+0x29c>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f aec1 	bne.w	8004fc4 <HAL_GPIO_Init+0x10>
  }
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	44022000 	.word	0x44022000
 8005254:	002f7f7f 	.word	0x002f7f7f

08005258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
 8005264:	4613      	mov	r3, r2
 8005266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005274:	e002      	b.n	800527c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4013      	ands	r3, r2
 80052a0:	041a      	lsls	r2, r3, #16
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43d9      	mvns	r1, r3
 80052a6:	887b      	ldrh	r3, [r7, #2]
 80052a8:	400b      	ands	r3, r1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e08d      	b.n	80053ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc f934 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	@ 0x24
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800530c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800531c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	e006      	b.n	8005344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d108      	bne.n	800535e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800535a:	605a      	str	r2, [r3, #4]
 800535c:	e007      	b.n	800536e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800536c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	461a      	mov	r2, r3
 8005400:	460b      	mov	r3, r1
 8005402:	817b      	strh	r3, [r7, #10]
 8005404:	4613      	mov	r3, r2
 8005406:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b20      	cmp	r3, #32
 8005412:	f040 80da 	bne.w	80055ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_I2C_Master_Transmit+0x30>
 8005420:	2302      	movs	r3, #2
 8005422:	e0d3      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800542c:	f7fe f82e 	bl	800348c <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2319      	movs	r3, #25
 8005438:	2201      	movs	r2, #1
 800543a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f9e6 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0be      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2221      	movs	r2, #33	@ 0x21
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2210      	movs	r2, #16
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	893a      	ldrh	r2, [r7, #8]
 800546e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2bff      	cmp	r3, #255	@ 0xff
 800547e:	d90e      	bls.n	800549e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	22ff      	movs	r2, #255	@ 0xff
 8005484:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	b2da      	uxtb	r2, r3
 800548c:	8979      	ldrh	r1, [r7, #10]
 800548e:	4b51      	ldr	r3, [pc, #324]	@ (80055d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fc0a 	bl	8005cb0 <I2C_TransferConfig>
 800549c:	e06c      	b.n	8005578 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	4b48      	ldr	r3, [pc, #288]	@ (80055d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fbf9 	bl	8005cb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054be:	e05b      	b.n	8005578 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	6a39      	ldr	r1, [r7, #32]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9fc 	bl	80058c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e07b      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d034      	beq.n	8005578 <HAL_I2C_Master_Transmit+0x184>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d130      	bne.n	8005578 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	@ 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f975 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e04d      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2bff      	cmp	r3, #255	@ 0xff
 8005538:	d90e      	bls.n	8005558 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22ff      	movs	r2, #255	@ 0xff
 800553e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	b2da      	uxtb	r2, r3
 8005546:	8979      	ldrh	r1, [r7, #10]
 8005548:	2300      	movs	r3, #0
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fbad 	bl	8005cb0 <I2C_TransferConfig>
 8005556:	e00f      	b.n	8005578 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	b2da      	uxtb	r2, r3
 8005568:	8979      	ldrh	r1, [r7, #10]
 800556a:	2300      	movs	r3, #0
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fb9c 	bl	8005cb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d19e      	bne.n	80054c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	6a39      	ldr	r1, [r7, #32]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f9e2 	bl	8005950 <I2C_WaitOnSTOPFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e01a      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2220      	movs	r2, #32
 800559c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80055aa:	400b      	ands	r3, r1
 80055ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	80002000 	.word	0x80002000
 80055d8:	fe00e800 	.word	0xfe00e800

080055dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	817b      	strh	r3, [r7, #10]
 80055ec:	4613      	mov	r3, r2
 80055ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	f040 80db 	bne.w	80057b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_I2C_Master_Receive+0x30>
 8005608:	2302      	movs	r3, #2
 800560a:	e0d4      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005614:	f7fd ff3a 	bl	800348c <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2319      	movs	r3, #25
 8005620:	2201      	movs	r2, #1
 8005622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8f2 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0bf      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2222      	movs	r2, #34	@ 0x22
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2210      	movs	r2, #16
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2bff      	cmp	r3, #255	@ 0xff
 8005666:	d90e      	bls.n	8005686 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	22ff      	movs	r2, #255	@ 0xff
 800566c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	8979      	ldrh	r1, [r7, #10]
 8005676:	4b52      	ldr	r3, [pc, #328]	@ (80057c0 <HAL_I2C_Master_Receive+0x1e4>)
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb16 	bl	8005cb0 <I2C_TransferConfig>
 8005684:	e06d      	b.n	8005762 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	8979      	ldrh	r1, [r7, #10]
 8005698:	4b49      	ldr	r3, [pc, #292]	@ (80057c0 <HAL_I2C_Master_Receive+0x1e4>)
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fb05 	bl	8005cb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80056a6:	e05c      	b.n	8005762 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	6a39      	ldr	r1, [r7, #32]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f993 	bl	80059d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e07c      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d034      	beq.n	8005762 <HAL_I2C_Master_Receive+0x186>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d130      	bne.n	8005762 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2200      	movs	r2, #0
 8005708:	2180      	movs	r1, #128	@ 0x80
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f880 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e04d      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	2bff      	cmp	r3, #255	@ 0xff
 8005722:	d90e      	bls.n	8005742 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	22ff      	movs	r2, #255	@ 0xff
 8005728:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fab8 	bl	8005cb0 <I2C_TransferConfig>
 8005740:	e00f      	b.n	8005762 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	b2da      	uxtb	r2, r3
 8005752:	8979      	ldrh	r1, [r7, #10]
 8005754:	2300      	movs	r3, #0
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 faa7 	bl	8005cb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d19d      	bne.n	80056a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	6a39      	ldr	r1, [r7, #32]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f8ed 	bl	8005950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01a      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2220      	movs	r2, #32
 8005786:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <HAL_I2C_Master_Receive+0x1e8>)
 8005794:	400b      	ands	r3, r1
 8005796:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	80002400 	.word	0x80002400
 80057c4:	fe00e800 	.word	0xfe00e800

080057c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d103      	bne.n	80057e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d007      	beq.n	8005804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	619a      	str	r2, [r3, #24]
  }
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	e03b      	b.n	800589a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f962 	bl	8005af0 <I2C_IsErrorOccurred>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d02d      	beq.n	800589a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fd fe25 	bl	800348c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x44>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d122      	bne.n	800589a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	429a      	cmp	r2, r3
 8005870:	d113      	bne.n	800589a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e00f      	b.n	80058ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4013      	ands	r3, r2
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	bf0c      	ite	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	2300      	movne	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d0b4      	beq.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058ce:	e033      	b.n	8005938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f90b 	bl	8005af0 <I2C_IsErrorOccurred>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e031      	b.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d025      	beq.n	8005938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ec:	f7fd fdce 	bl	800348c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11a      	bne.n	8005938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d013      	beq.n	8005938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e007      	b.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d1c4      	bne.n	80058d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800595c:	e02f      	b.n	80059be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f8c4 	bl	8005af0 <I2C_IsErrorOccurred>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e02d      	b.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fd fd8b 	bl	800348c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11a      	bne.n	80059be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d013      	beq.n	80059be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d1c8      	bne.n	800595e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80059e8:	e071      	b.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f87e 	bl	8005af0 <I2C_IsErrorOccurred>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d13b      	bne.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d138      	bne.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d105      	bne.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d121      	bne.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2204      	movs	r2, #4
 8005a46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b24      	ldr	r3, [pc, #144]	@ (8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005a5c:	400b      	ands	r3, r1
 8005a5e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
 8005a7c:	e002      	b.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005a84:	f7fd fd02 	bl	800348c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d119      	bne.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d00f      	beq.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d002      	beq.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d083      	beq.n	80059ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fe00e800 	.word	0xfe00e800

08005af0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	@ 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d068      	beq.n	8005bee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b24:	e049      	b.n	8005bba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d045      	beq.n	8005bba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fd fcad 	bl	800348c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_IsErrorOccurred+0x54>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d13a      	bne.n	8005bba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b66:	d121      	bne.n	8005bac <I2C_IsErrorOccurred+0xbc>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b6e:	d01d      	beq.n	8005bac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d01a      	beq.n	8005bac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b86:	f7fd fc81 	bl	800348c <HAL_GetTick>
 8005b8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b8c:	e00e      	b.n	8005bac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b8e:	f7fd fc7d 	bl	800348c <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b19      	cmp	r3, #25
 8005b9a:	d907      	bls.n	8005bac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f043 0320 	orr.w	r3, r3, #32
 8005ba2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005baa:	e006      	b.n	8005bba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d1e9      	bne.n	8005b8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d003      	beq.n	8005bd0 <I2C_IsErrorOccurred+0xe0>
 8005bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0aa      	beq.n	8005b26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f043 0304 	orr.w	r3, r3, #4
 8005be6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f043 0308 	orr.w	r3, r3, #8
 8005c28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01c      	beq.n	8005c9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff fdaf 	bl	80057c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <I2C_IsErrorOccurred+0x1bc>)
 8005c76:	400b      	ands	r3, r1
 8005c78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3728      	adds	r7, #40	@ 0x28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	fe00e800 	.word	0xfe00e800

08005cb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	817b      	strh	r3, [r7, #10]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cc8:	7a7b      	ldrb	r3, [r7, #9]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cd0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cde:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	0d5b      	lsrs	r3, r3, #21
 8005cea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <I2C_TransferConfig+0x60>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	ea02 0103 	and.w	r1, r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	03ff63ff 	.word	0x03ff63ff

08005d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d138      	bne.n	8005d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e032      	b.n	8005d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2224      	movs	r2, #36	@ 0x24
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d139      	bne.n	8005e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e033      	b.n	8005e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2224      	movs	r2, #36	@ 0x24
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e000      	b.n	8005e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e34:	2302      	movs	r3, #2
  }
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	e007      	b.n	8005e72 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005e62:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0204 	bic.w	r2, r3, #4
 8005e6a:	4905      	ldr	r1, [pc, #20]	@ (8005e80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	40030400 	.word	0x40030400

08005e84 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e88:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_ICACHE_Enable+0x1c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ea0 <HAL_ICACHE_Enable+0x1c>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40030400 	.word	0x40030400

08005ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f000 bc28 	b.w	8006708 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb8:	4b94      	ldr	r3, [pc, #592]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 0318 	and.w	r3, r3, #24
 8005ec0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005ec2:	4b92      	ldr	r3, [pc, #584]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d05b      	beq.n	8005f90 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d005      	beq.n	8005eea <HAL_RCC_OscConfig+0x46>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b18      	cmp	r3, #24
 8005ee2:	d114      	bne.n	8005f0e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d111      	bne.n	8005f0e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f000 bc08 	b.w	8006708 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005ef8:	4b84      	ldr	r3, [pc, #528]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	4981      	ldr	r1, [pc, #516]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005f0c:	e040      	b.n	8005f90 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d023      	beq.n	8005f5e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f16:	4b7d      	ldr	r3, [pc, #500]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fd fab3 	bl	800348c <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005f2a:	f7fd faaf 	bl	800348c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e3e5      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005f3c:	4b73      	ldr	r3, [pc, #460]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005f48:	4b70      	ldr	r3, [pc, #448]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	496d      	ldr	r1, [pc, #436]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	618b      	str	r3, [r1, #24]
 8005f5c:	e018      	b.n	8005f90 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6a      	ldr	r2, [pc, #424]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7fd fa8f 	bl	800348c <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005f72:	f7fd fa8b 	bl	800348c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e3c1      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005f84:	4b61      	ldr	r3, [pc, #388]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a0 	beq.w	80060de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x10c>
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b18      	cmp	r3, #24
 8005fa8:	d109      	bne.n	8005fbe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d106      	bne.n	8005fbe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8092 	bne.w	80060de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e3a4      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x132>
 8005fc8:	4b50      	ldr	r3, [pc, #320]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e058      	b.n	8006088 <HAL_RCC_OscConfig+0x1e4>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d112      	bne.n	8006004 <HAL_RCC_OscConfig+0x160>
 8005fde:	4b4b      	ldr	r3, [pc, #300]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b48      	ldr	r3, [pc, #288]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a47      	ldr	r2, [pc, #284]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b45      	ldr	r3, [pc, #276]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a44      	ldr	r2, [pc, #272]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8005ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e041      	b.n	8006088 <HAL_RCC_OscConfig+0x1e4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800600c:	d112      	bne.n	8006034 <HAL_RCC_OscConfig+0x190>
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a3e      	ldr	r2, [pc, #248]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4b3c      	ldr	r3, [pc, #240]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3b      	ldr	r2, [pc, #236]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006020:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b39      	ldr	r3, [pc, #228]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a38      	ldr	r2, [pc, #224]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e029      	b.n	8006088 <HAL_RCC_OscConfig+0x1e4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800603c:	d112      	bne.n	8006064 <HAL_RCC_OscConfig+0x1c0>
 800603e:	4b33      	ldr	r3, [pc, #204]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a32      	ldr	r2, [pc, #200]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	4b30      	ldr	r3, [pc, #192]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2f      	ldr	r2, [pc, #188]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b2d      	ldr	r3, [pc, #180]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2c      	ldr	r2, [pc, #176]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e011      	b.n	8006088 <HAL_RCC_OscConfig+0x1e4>
 8006064:	4b29      	ldr	r3, [pc, #164]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a28      	ldr	r2, [pc, #160]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b26      	ldr	r3, [pc, #152]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b23      	ldr	r3, [pc, #140]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 8006082:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d013      	beq.n	80060b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fd f9fc 	bl	800348c <HAL_GetTick>
 8006094:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006098:	f7fd f9f8 	bl	800348c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	@ 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e32e      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060aa:	4b18      	ldr	r3, [pc, #96]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0x1f4>
 80060b6:	e012      	b.n	80060de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fd f9e8 	bl	800348c <HAL_GetTick>
 80060bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80060c0:	f7fd f9e4 	bl	800348c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	@ 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e31a      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d2:	4b0e      	ldr	r3, [pc, #56]	@ (800610c <HAL_RCC_OscConfig+0x268>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 809a 	beq.w	8006220 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_RCC_OscConfig+0x25a>
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	2b18      	cmp	r3, #24
 80060f6:	d149      	bne.n	800618c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d146      	bne.n	800618c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e2fe      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
 800610a:	bf00      	nop
 800610c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11c      	bne.n	8006150 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006116:	4b9a      	ldr	r3, [pc, #616]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0218 	and.w	r2, r3, #24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d014      	beq.n	8006150 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006126:	4b96      	ldr	r3, [pc, #600]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0218 	bic.w	r2, r3, #24
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4993      	ldr	r1, [pc, #588]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006138:	f000 fdd0 	bl	8006cdc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800613c:	4b91      	ldr	r3, [pc, #580]	@ (8006384 <HAL_RCC_OscConfig+0x4e0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fd f919 	bl	8003378 <HAL_InitTick>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e2db      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fd f99c 	bl	800348c <HAL_GetTick>
 8006154:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006158:	f7fd f998 	bl	800348c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e2ce      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800616a:	4b85      	ldr	r3, [pc, #532]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006176:	4b82      	ldr	r3, [pc, #520]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	497e      	ldr	r1, [pc, #504]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800618a:	e049      	b.n	8006220 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02c      	beq.n	80061ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006194:	4b7a      	ldr	r3, [pc, #488]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 0218 	bic.w	r2, r3, #24
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4977      	ldr	r1, [pc, #476]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80061a6:	4b76      	ldr	r3, [pc, #472]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a75      	ldr	r2, [pc, #468]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fd f96b 	bl	800348c <HAL_GetTick>
 80061b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80061ba:	f7fd f967 	bl	800348c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e29d      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80061d8:	4b69      	ldr	r3, [pc, #420]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	041b      	lsls	r3, r3, #16
 80061e6:	4966      	ldr	r1, [pc, #408]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	610b      	str	r3, [r1, #16]
 80061ec:	e018      	b.n	8006220 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ee:	4b64      	ldr	r3, [pc, #400]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a63      	ldr	r2, [pc, #396]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fd f947 	bl	800348c <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006202:	f7fd f943 	bl	800348c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e279      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006214:	4b5a      	ldr	r3, [pc, #360]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d03c      	beq.n	80062a6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01c      	beq.n	800626e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006234:	4b52      	ldr	r3, [pc, #328]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800623a:	4a51      	ldr	r2, [pc, #324]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800623c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fd f922 	bl	800348c <HAL_GetTick>
 8006248:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800624c:	f7fd f91e 	bl	800348c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e254      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800625e:	4b48      	ldr	r3, [pc, #288]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ef      	beq.n	800624c <HAL_RCC_OscConfig+0x3a8>
 800626c:	e01b      	b.n	80062a6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800626e:	4b44      	ldr	r3, [pc, #272]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006274:	4a42      	ldr	r2, [pc, #264]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800627a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fd f905 	bl	800348c <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006286:	f7fd f901 	bl	800348c <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e237      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006298:	4b39      	ldr	r3, [pc, #228]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800629a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800629e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1ef      	bne.n	8006286 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80d2 	beq.w	8006458 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80062b4:	4b34      	ldr	r3, [pc, #208]	@ (8006388 <HAL_RCC_OscConfig+0x4e4>)
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d118      	bne.n	80062f2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80062c0:	4b31      	ldr	r3, [pc, #196]	@ (8006388 <HAL_RCC_OscConfig+0x4e4>)
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	4a30      	ldr	r2, [pc, #192]	@ (8006388 <HAL_RCC_OscConfig+0x4e4>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062cc:	f7fd f8de 	bl	800348c <HAL_GetTick>
 80062d0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d4:	f7fd f8da 	bl	800348c <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e210      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80062e6:	4b28      	ldr	r3, [pc, #160]	@ (8006388 <HAL_RCC_OscConfig+0x4e4>)
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d108      	bne.n	800630c <HAL_RCC_OscConfig+0x468>
 80062fa:	4b21      	ldr	r3, [pc, #132]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 80062fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006300:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800630a:	e074      	b.n	80063f6 <HAL_RCC_OscConfig+0x552>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d118      	bne.n	8006346 <HAL_RCC_OscConfig+0x4a2>
 8006314:	4b1a      	ldr	r3, [pc, #104]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800631a:	4a19      	ldr	r2, [pc, #100]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006324:	4b16      	ldr	r3, [pc, #88]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800632a:	4a15      	ldr	r2, [pc, #84]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800632c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006330:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006334:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800633a:	4a11      	ldr	r2, [pc, #68]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006344:	e057      	b.n	80063f6 <HAL_RCC_OscConfig+0x552>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b05      	cmp	r3, #5
 800634c:	d11e      	bne.n	800638c <HAL_RCC_OscConfig+0x4e8>
 800634e:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006354:	4a0a      	ldr	r2, [pc, #40]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006356:	f043 0304 	orr.w	r3, r3, #4
 800635a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800635e:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006364:	4a06      	ldr	r2, [pc, #24]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800636e:	4b04      	ldr	r3, [pc, #16]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006374:	4a02      	ldr	r2, [pc, #8]	@ (8006380 <HAL_RCC_OscConfig+0x4dc>)
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800637e:	e03a      	b.n	80063f6 <HAL_RCC_OscConfig+0x552>
 8006380:	44020c00 	.word	0x44020c00
 8006384:	200000e0 	.word	0x200000e0
 8006388:	44020800 	.word	0x44020800
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b85      	cmp	r3, #133	@ 0x85
 8006392:	d118      	bne.n	80063c6 <HAL_RCC_OscConfig+0x522>
 8006394:	4ba2      	ldr	r3, [pc, #648]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800639a:	4aa1      	ldr	r2, [pc, #644]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800639c:	f043 0304 	orr.w	r3, r3, #4
 80063a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063a4:	4b9e      	ldr	r3, [pc, #632]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063aa:	4a9d      	ldr	r2, [pc, #628]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063b4:	4b9a      	ldr	r3, [pc, #616]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ba:	4a99      	ldr	r2, [pc, #612]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063c4:	e017      	b.n	80063f6 <HAL_RCC_OscConfig+0x552>
 80063c6:	4b96      	ldr	r3, [pc, #600]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063cc:	4a94      	ldr	r2, [pc, #592]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063d6:	4b92      	ldr	r3, [pc, #584]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063dc:	4a90      	ldr	r2, [pc, #576]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063de:	f023 0304 	bic.w	r3, r3, #4
 80063e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80063e6:	4b8e      	ldr	r3, [pc, #568]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ec:	4a8c      	ldr	r2, [pc, #560]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80063ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fd f845 	bl	800348c <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fd f841 	bl	800348c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e175      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641c:	4b80      	ldr	r3, [pc, #512]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800641e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0ed      	beq.n	8006406 <HAL_RCC_OscConfig+0x562>
 800642a:	e015      	b.n	8006458 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642c:	f7fd f82e 	bl	800348c <HAL_GetTick>
 8006430:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006432:	e00a      	b.n	800644a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006434:	f7fd f82a 	bl	800348c <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e15e      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800644a:	4b75      	ldr	r3, [pc, #468]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800644c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ed      	bne.n	8006434 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d036      	beq.n	80064d2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d019      	beq.n	80064a0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800646c:	4b6c      	ldr	r3, [pc, #432]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a6b      	ldr	r2, [pc, #428]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006472:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006478:	f7fd f808 	bl	800348c <HAL_GetTick>
 800647c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006480:	f7fd f804 	bl	800348c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e13a      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006492:	4b63      	ldr	r3, [pc, #396]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x5dc>
 800649e:	e018      	b.n	80064d2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a0:	4b5f      	ldr	r3, [pc, #380]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5e      	ldr	r2, [pc, #376]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80064a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fc ffee 	bl	800348c <HAL_GetTick>
 80064b0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80064b4:	f7fc ffea 	bl	800348c <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e120      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80064c6:	4b56      	ldr	r3, [pc, #344]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8115 	beq.w	8006706 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b18      	cmp	r3, #24
 80064e0:	f000 80af 	beq.w	8006642 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f040 8086 	bne.w	80065fa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80064ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4b      	ldr	r2, [pc, #300]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80064f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fc ffc7 	bl	800348c <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006502:	f7fc ffc3 	bl	800348c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0f9      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006514:	4b42      	ldr	r3, [pc, #264]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006520:	4b3f      	ldr	r3, [pc, #252]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006534:	0212      	lsls	r2, r2, #8
 8006536:	430a      	orrs	r2, r1
 8006538:	4939      	ldr	r1, [pc, #228]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800653a:	4313      	orrs	r3, r2
 800653c:	628b      	str	r3, [r1, #40]	@ 0x28
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006542:	3b01      	subs	r3, #1
 8006544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654c:	3b01      	subs	r3, #1
 800654e:	025b      	lsls	r3, r3, #9
 8006550:	b29b      	uxth	r3, r3
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	3b01      	subs	r3, #1
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	3b01      	subs	r3, #1
 8006568:	061b      	lsls	r3, r3, #24
 800656a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800656e:	492c      	ldr	r1, [pc, #176]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006570:	4313      	orrs	r3, r2
 8006572:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006574:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	4a29      	ldr	r2, [pc, #164]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800657a:	f023 0310 	bic.w	r3, r3, #16
 800657e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006584:	4a26      	ldr	r2, [pc, #152]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800658a:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006590:	f043 0310 	orr.w	r3, r3, #16
 8006594:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006596:	4b22      	ldr	r3, [pc, #136]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	f023 020c 	bic.w	r2, r3, #12
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	491f      	ldr	r1, [pc, #124]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80065a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	f023 0220 	bic.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b4:	491a      	ldr	r1, [pc, #104]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065ba:	4b19      	ldr	r3, [pc, #100]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065be:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80065c6:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a15      	ldr	r2, [pc, #84]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fc ff5b 	bl	800348c <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80065da:	f7fc ff57 	bl	800348c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e08d      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x736>
 80065f8:	e085      	b.n	8006706 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a08      	ldr	r2, [pc, #32]	@ (8006620 <HAL_RCC_OscConfig+0x77c>)
 8006600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006606:	f7fc ff41 	bl	800348c <HAL_GetTick>
 800660a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800660c:	e00a      	b.n	8006624 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800660e:	f7fc ff3d 	bl	800348c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d903      	bls.n	8006624 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e073      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
 8006620:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006624:	4b3a      	ldr	r3, [pc, #232]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ee      	bne.n	800660e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006630:	4b37      	ldr	r3, [pc, #220]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	4a36      	ldr	r2, [pc, #216]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 8006636:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	6293      	str	r3, [r2, #40]	@ 0x28
 8006640:	e061      	b.n	8006706 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006642:	4b33      	ldr	r3, [pc, #204]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006648:	4b31      	ldr	r3, [pc, #196]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 800664a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	2b01      	cmp	r3, #1
 8006654:	d031      	beq.n	80066ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f003 0203 	and.w	r2, r3, #3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006660:	429a      	cmp	r2, r3
 8006662:	d12a      	bne.n	80066ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	0a1b      	lsrs	r3, r3, #8
 8006668:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d122      	bne.n	80066ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006680:	429a      	cmp	r2, r3
 8006682:	d11a      	bne.n	80066ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	0a5b      	lsrs	r3, r3, #9
 8006688:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006690:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006692:	429a      	cmp	r2, r3
 8006694:	d111      	bne.n	80066ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d108      	bne.n	80066ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e024      	b.n	8006708 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80066be:	4b14      	ldr	r3, [pc, #80]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	08db      	lsrs	r3, r3, #3
 80066c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d01a      	beq.n	8006706 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80066d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fc fed6 	bl	800348c <HAL_GetTick>
 80066e0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80066e2:	bf00      	nop
 80066e4:	f7fc fed2 	bl	800348c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d0f9      	beq.n	80066e4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f4:	4a06      	ldr	r2, [pc, #24]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80066fa:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 80066fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fe:	4a04      	ldr	r2, [pc, #16]	@ (8006710 <HAL_RCC_OscConfig+0x86c>)
 8006700:	f043 0310 	orr.w	r3, r3, #16
 8006704:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	44020c00 	.word	0x44020c00

08006714 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e19e      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006728:	4b83      	ldr	r3, [pc, #524]	@ (8006938 <HAL_RCC_ClockConfig+0x224>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d910      	bls.n	8006758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b80      	ldr	r3, [pc, #512]	@ (8006938 <HAL_RCC_ClockConfig+0x224>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 020f 	bic.w	r2, r3, #15
 800673e:	497e      	ldr	r1, [pc, #504]	@ (8006938 <HAL_RCC_ClockConfig+0x224>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	4b7c      	ldr	r3, [pc, #496]	@ (8006938 <HAL_RCC_ClockConfig+0x224>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e186      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695a      	ldr	r2, [r3, #20]
 8006768:	4b74      	ldr	r3, [pc, #464]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006772:	429a      	cmp	r2, r3
 8006774:	d909      	bls.n	800678a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006776:	4b71      	ldr	r3, [pc, #452]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	496d      	ldr	r1, [pc, #436]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006786:	4313      	orrs	r3, r2
 8006788:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d012      	beq.n	80067bc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	4b68      	ldr	r3, [pc, #416]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d909      	bls.n	80067bc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80067a8:	4b64      	ldr	r3, [pc, #400]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	4961      	ldr	r1, [pc, #388]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	4b5b      	ldr	r3, [pc, #364]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d908      	bls.n	80067ea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80067d8:	4b58      	ldr	r3, [pc, #352]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4955      	ldr	r1, [pc, #340]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	4b50      	ldr	r3, [pc, #320]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	429a      	cmp	r2, r3
 8006804:	d908      	bls.n	8006818 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006806:	4b4d      	ldr	r3, [pc, #308]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 020f 	bic.w	r2, r3, #15
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	494a      	ldr	r1, [pc, #296]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006814:	4313      	orrs	r3, r2
 8006816:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8093 	beq.w	800694c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d107      	bne.n	800683e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800682e:	4b43      	ldr	r3, [pc, #268]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d121      	bne.n	800687e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e113      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006846:	4b3d      	ldr	r3, [pc, #244]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d115      	bne.n	800687e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e107      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800685e:	4b37      	ldr	r3, [pc, #220]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0fb      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800686e:	4b33      	ldr	r3, [pc, #204]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e0f3      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800687e:	4b2f      	ldr	r3, [pc, #188]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f023 0203 	bic.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	492c      	ldr	r1, [pc, #176]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 800688c:	4313      	orrs	r3, r2
 800688e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006890:	f7fc fdfc 	bl	800348c <HAL_GetTick>
 8006894:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b03      	cmp	r3, #3
 800689c:	d112      	bne.n	80068c4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80068a0:	f7fc fdf4 	bl	800348c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0d7      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068b6:	4b21      	ldr	r3, [pc, #132]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0318 	and.w	r3, r3, #24
 80068be:	2b18      	cmp	r3, #24
 80068c0:	d1ee      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x18c>
 80068c2:	e043      	b.n	800694c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d112      	bne.n	80068f2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80068ce:	f7fc fddd 	bl	800348c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e0c0      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80068e4:	4b15      	ldr	r3, [pc, #84]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0318 	and.w	r3, r3, #24
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d1ee      	bne.n	80068ce <HAL_RCC_ClockConfig+0x1ba>
 80068f0:	e02c      	b.n	800694c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d122      	bne.n	8006940 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80068fc:	f7fc fdc6 	bl	800348c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e0a9      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_RCC_ClockConfig+0x228>)
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f003 0318 	and.w	r3, r3, #24
 800691a:	2b08      	cmp	r3, #8
 800691c:	d1ee      	bne.n	80068fc <HAL_RCC_ClockConfig+0x1e8>
 800691e:	e015      	b.n	800694c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f7fc fdb4 	bl	800348c <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d906      	bls.n	8006940 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e097      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
 8006936:	bf00      	nop
 8006938:	40022000 	.word	0x40022000
 800693c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006940:	4b4b      	ldr	r3, [pc, #300]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f003 0318 	and.w	r3, r3, #24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e9      	bne.n	8006920 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	4b44      	ldr	r3, [pc, #272]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	429a      	cmp	r2, r3
 8006966:	d208      	bcs.n	800697a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006968:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f023 020f 	bic.w	r2, r3, #15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	493e      	ldr	r1, [pc, #248]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006976:	4313      	orrs	r3, r2
 8006978:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800697a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a74 <HAL_RCC_ClockConfig+0x360>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d210      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006988:	4b3a      	ldr	r3, [pc, #232]	@ (8006a74 <HAL_RCC_ClockConfig+0x360>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 020f 	bic.w	r2, r3, #15
 8006990:	4938      	ldr	r1, [pc, #224]	@ (8006a74 <HAL_RCC_ClockConfig+0x360>)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006998:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <HAL_RCC_ClockConfig+0x360>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d001      	beq.n	80069aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e05d      	b.n	8006a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d208      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80069c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	4927      	ldr	r1, [pc, #156]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	4b21      	ldr	r3, [pc, #132]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d209      	bcs.n	8006a0a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80069f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	491a      	ldr	r1, [pc, #104]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d012      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	4b15      	ldr	r3, [pc, #84]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d209      	bcs.n	8006a3c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006a28:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	490e      	ldr	r1, [pc, #56]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006a3c:	f000 f822 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <HAL_RCC_ClockConfig+0x35c>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	490b      	ldr	r1, [pc, #44]	@ (8006a78 <HAL_RCC_ClockConfig+0x364>)
 8006a4c:	5ccb      	ldrb	r3, [r1, r3]
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <HAL_RCC_ClockConfig+0x368>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCC_ClockConfig+0x36c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fc fc8c 	bl	8003378 <HAL_InitTick>
 8006a60:	4603      	mov	r3, r0
 8006a62:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	44020c00 	.word	0x44020c00
 8006a74:	40022000 	.word	0x40022000
 8006a78:	0800e5a0 	.word	0x0800e5a0
 8006a7c:	200000dc 	.word	0x200000dc
 8006a80:	200000e0 	.word	0x200000e0

08006a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	@ 0x24
 8006a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f003 0318 	and.w	r3, r3, #24
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d102      	bne.n	8006a9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a96:	4b8a      	ldr	r3, [pc, #552]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e107      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a9c:	4b87      	ldr	r3, [pc, #540]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f003 0318 	and.w	r3, r3, #24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d112      	bne.n	8006ace <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006aa8:	4b84      	ldr	r3, [pc, #528]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ab4:	4b81      	ldr	r3, [pc, #516]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	08db      	lsrs	r3, r3, #3
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	4a81      	ldr	r2, [pc, #516]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e0f1      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	e0ee      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ace:	4b7b      	ldr	r3, [pc, #492]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f003 0318 	and.w	r3, r3, #24
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d102      	bne.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ada:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x244>)
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	e0e5      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ae0:	4b76      	ldr	r3, [pc, #472]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f003 0318 	and.w	r3, r3, #24
 8006ae8:	2b18      	cmp	r3, #24
 8006aea:	f040 80dd 	bne.w	8006ca8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aee:	4b73      	ldr	r3, [pc, #460]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006af8:	4b70      	ldr	r3, [pc, #448]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	0a1b      	lsrs	r3, r3, #8
 8006afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b04:	4b6d      	ldr	r3, [pc, #436]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006b10:	4b6a      	ldr	r3, [pc, #424]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b28:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80b7 	beq.w	8006ca2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0xbe>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d056      	beq.n	8006bee <HAL_RCC_GetSysClockFreq+0x16a>
 8006b40:	e077      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006b42:	4b5e      	ldr	r3, [pc, #376]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d02d      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	4a5a      	ldr	r2, [pc, #360]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b78:	4b50      	ldr	r3, [pc, #320]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006ccc <HAL_RCC_GetSysClockFreq+0x248>
 8006b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006ba8:	e065      	b.n	8006c76 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006cd0 <HAL_RCC_GetSysClockFreq+0x24c>
 8006bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bd0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ccc <HAL_RCC_GetSysClockFreq+0x248>
 8006bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006bec:	e043      	b.n	8006c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006cd4 <HAL_RCC_GetSysClockFreq+0x250>
 8006bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c00:	4b2e      	ldr	r3, [pc, #184]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c14:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006ccc <HAL_RCC_GetSysClockFreq+0x248>
 8006c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006c30:	e021      	b.n	8006c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006cd8 <HAL_RCC_GetSysClockFreq+0x254>
 8006c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c58:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006ccc <HAL_RCC_GetSysClockFreq+0x248>
 8006c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006c74:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006c76:	4b11      	ldr	r3, [pc, #68]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8006c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7a:	0a5b      	lsrs	r3, r3, #9
 8006c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c80:	3301      	adds	r3, #1
 8006c82:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8006c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9a:	ee17 3a90 	vmov	r3, s15
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	e004      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e001      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8006caa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006cac:	69fb      	ldr	r3, [r7, #28]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3724      	adds	r7, #36	@ 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	44020c00 	.word	0x44020c00
 8006cc0:	003d0900 	.word	0x003d0900
 8006cc4:	03d09000 	.word	0x03d09000
 8006cc8:	007a1200 	.word	0x007a1200
 8006ccc:	46000000 	.word	0x46000000
 8006cd0:	4c742400 	.word	0x4c742400
 8006cd4:	4af42400 	.word	0x4af42400
 8006cd8:	4a742400 	.word	0x4a742400

08006cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ce0:	f7ff fed0 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006cea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006cee:	4907      	ldr	r1, [pc, #28]	@ (8006d0c <HAL_RCC_GetHCLKFreq+0x30>)
 8006cf0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006cf2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	4a05      	ldr	r2, [pc, #20]	@ (8006d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8006cfc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006cfe:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8006d00:	681b      	ldr	r3, [r3, #0]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	44020c00 	.word	0x44020c00
 8006d0c:	0800e5a0 	.word	0x0800e5a0
 8006d10:	200000dc 	.word	0x200000dc

08006d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006d18:	f7ff ffe0 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	4904      	ldr	r1, [pc, #16]	@ (8006d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d2a:	5ccb      	ldrb	r3, [r1, r3]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	44020c00 	.word	0x44020c00
 8006d3c:	0800e5b0 	.word	0x0800e5b0

08006d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006d44:	f7ff ffca 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	4904      	ldr	r1, [pc, #16]	@ (8006d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d56:	5ccb      	ldrb	r3, [r1, r3]
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	44020c00 	.word	0x44020c00
 8006d68:	0800e5b0 	.word	0x0800e5b0

08006d6c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006d70:	f7ff ffb4 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	0b1b      	lsrs	r3, r3, #12
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4904      	ldr	r1, [pc, #16]	@ (8006d94 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	44020c00 	.word	0x44020c00
 8006d94:	0800e5b0 	.word	0x0800e5b0

08006d98 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d9c:	b0ba      	sub	sp, #232	@ 0xe8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	ea54 0305 	orrs.w	r3, r4, r5
 8006dc2:	d00b      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006dc4:	4bcd      	ldr	r3, [pc, #820]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dca:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd4:	4ac9      	ldr	r2, [pc, #804]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 0801 	and.w	r8, r2, #1
 8006de8:	f04f 0900 	mov.w	r9, #0
 8006dec:	ea58 0309 	orrs.w	r3, r8, r9
 8006df0:	d042      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df8:	2b05      	cmp	r3, #5
 8006dfa:	d823      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e4d 	.word	0x08006e4d
 8006e08:	08006e1d 	.word	0x08006e1d
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e4d 	.word	0x08006e4d
 8006e14:	08006e4d 	.word	0x08006e4d
 8006e18:	08006e4d 	.word	0x08006e4d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e20:	3308      	adds	r3, #8
 8006e22:	4618      	mov	r0, r3
 8006e24:	f003 f90c 	bl	800a040 <RCCEx_PLL2_Config>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006e2e:	e00e      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e34:	3330      	adds	r3, #48	@ 0x30
 8006e36:	4618      	mov	r0, r3
 8006e38:	f003 f99a 	bl	800a170 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006e42:	e004      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e4a:	e000      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006e56:	4ba9      	ldr	r3, [pc, #676]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e5c:	f023 0107 	bic.w	r1, r3, #7
 8006e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	4aa5      	ldr	r2, [pc, #660]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e6e:	e003      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e74:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f002 0a02 	and.w	sl, r2, #2
 8006e84:	f04f 0b00 	mov.w	fp, #0
 8006e88:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e8c:	f000 8088 	beq.w	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e96:	2b28      	cmp	r3, #40	@ 0x28
 8006e98:	d868      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006f75 	.word	0x08006f75
 8006ea4:	08006f6d 	.word	0x08006f6d
 8006ea8:	08006f6d 	.word	0x08006f6d
 8006eac:	08006f6d 	.word	0x08006f6d
 8006eb0:	08006f6d 	.word	0x08006f6d
 8006eb4:	08006f6d 	.word	0x08006f6d
 8006eb8:	08006f6d 	.word	0x08006f6d
 8006ebc:	08006f6d 	.word	0x08006f6d
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f6d 	.word	0x08006f6d
 8006ec8:	08006f6d 	.word	0x08006f6d
 8006ecc:	08006f6d 	.word	0x08006f6d
 8006ed0:	08006f6d 	.word	0x08006f6d
 8006ed4:	08006f6d 	.word	0x08006f6d
 8006ed8:	08006f6d 	.word	0x08006f6d
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f75 	.word	0x08006f75
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f6d 	.word	0x08006f6d
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f75 	.word	0x08006f75
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f48:	3308      	adds	r3, #8
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f003 f878 	bl	800a040 <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006f56:	e00e      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f5c:	3330      	adds	r3, #48	@ 0x30
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f003 f906 	bl	800a170 <RCCEx_PLL3_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006f6a:	e004      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f84:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006f90:	430b      	orrs	r3, r1
 8006f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f96:	e003      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 0304 	and.w	r3, r2, #4
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d04e      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006fca:	d02c      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006fcc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006fd0:	d825      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd6:	d028      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fdc:	d81f      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe0:	d025      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe4:	d81b      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d00f      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006fea:	2b80      	cmp	r3, #128	@ 0x80
 8006fec:	d817      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01f      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006ff2:	2b40      	cmp	r3, #64	@ 0x40
 8006ff4:	d113      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f003 f81f 	bl	800a040 <RCCEx_PLL2_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8007008:	e014      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800700e:	3330      	adds	r3, #48	@ 0x30
 8007010:	4618      	mov	r0, r3
 8007012:	f003 f8ad 	bl	800a170 <RCCEx_PLL3_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800701c:	e00a      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007026:	bf00      	nop
 8007028:	e004      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800702a:	bf00      	nop
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007034:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800703c:	4b2f      	ldr	r3, [pc, #188]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800703e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007042:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800704a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800704c:	4a2b      	ldr	r2, [pc, #172]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800704e:	430b      	orrs	r3, r1
 8007050:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800705a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800705e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f002 0308 	and.w	r3, r2, #8
 800706a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d056      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800707e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007084:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007088:	d031      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x356>
 800708a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800708e:	d82a      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007094:	d02d      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800709a:	d824      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800709c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070a0:	d029      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80070a2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070a6:	d81e      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ac:	d011      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80070ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b2:	d818      	bhi.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d023      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070bc:	d113      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070c2:	3308      	adds	r3, #8
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 ffbb 	bl	800a040 <RCCEx_PLL2_Config>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80070d0:	e017      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d6:	3330      	adds	r3, #48	@ 0x30
 80070d8:	4618      	mov	r0, r3
 80070da:	f003 f849 	bl	800a170 <RCCEx_PLL3_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80070e4:	e00d      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80070ec:	e009      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070ee:	bf00      	nop
 80070f0:	e007      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070f2:	bf00      	nop
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80070f6:	bf00      	nop
 80070f8:	e003      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80070fa:	bf00      	nop
 80070fc:	44020c00 	.word	0x44020c00
        break;
 8007100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007102:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10c      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800710a:	4bb9      	ldr	r3, [pc, #740]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800710c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007110:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800711a:	4ab5      	ldr	r2, [pc, #724]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800711c:	430b      	orrs	r3, r1
 800711e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007128:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800712c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f002 0310 	and.w	r3, r2, #16
 8007138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800713c:	2300      	movs	r3, #0
 800713e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007142:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d053      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800714c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007152:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007156:	d031      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007158:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800715c:	d82a      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007162:	d02d      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007168:	d824      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800716a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800716e:	d029      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007170:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007174:	d81e      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717a:	d011      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800717c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007180:	d818      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d020      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718a:	d113      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800718c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007190:	3308      	adds	r3, #8
 8007192:	4618      	mov	r0, r3
 8007194:	f002 ff54 	bl	800a040 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800719e:	e014      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071a4:	3330      	adds	r3, #48	@ 0x30
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 ffe2 	bl	800a170 <RCCEx_PLL3_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80071b2:	e00a      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071ba:	e006      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80071bc:	bf00      	nop
 80071be:	e004      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80071c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10c      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80071d2:	4b87      	ldr	r3, [pc, #540]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071e2:	4a83      	ldr	r2, [pc, #524]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f002 0320 	and.w	r3, r2, #32
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800720a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800720e:	460b      	mov	r3, r1
 8007210:	4313      	orrs	r3, r2
 8007212:	d053      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800721e:	d031      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007220:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007224:	d82a      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722a:	d02d      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800722c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007230:	d824      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007232:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007236:	d029      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007238:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800723c:	d81e      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800723e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007242:	d011      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007248:	d818      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800724e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007252:	d113      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007258:	3308      	adds	r3, #8
 800725a:	4618      	mov	r0, r3
 800725c:	f002 fef0 	bl	800a040 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8007266:	e014      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800726c:	3330      	adds	r3, #48	@ 0x30
 800726e:	4618      	mov	r0, r3
 8007270:	f002 ff7e 	bl	800a170 <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800727a:	e00a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007282:	e006      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007284:	bf00      	nop
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007288:	bf00      	nop
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007292:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10c      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800729a:	4b55      	ldr	r3, [pc, #340]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800729c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072a0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80072a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	4a51      	ldr	r2, [pc, #324]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80072b2:	e003      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80072c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072cc:	2300      	movs	r3, #0
 80072ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072d6:	460b      	mov	r3, r1
 80072d8:	4313      	orrs	r3, r2
 80072da:	d053      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80072dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072e6:	d031      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80072e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072ec:	d82a      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072f2:	d02d      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80072f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072f8:	d824      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80072fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072fe:	d029      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007304:	d81e      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800730a:	d011      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800730c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007310:	d818      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d020      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800731a:	d113      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800731c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007320:	3308      	adds	r3, #8
 8007322:	4618      	mov	r0, r3
 8007324:	f002 fe8c 	bl	800a040 <RCCEx_PLL2_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800732e:	e014      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007334:	3330      	adds	r3, #48	@ 0x30
 8007336:	4618      	mov	r0, r3
 8007338:	f002 ff1a 	bl	800a170 <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007342:	e00a      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800734a:	e006      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800734c:	bf00      	nop
 800734e:	e004      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007350:	bf00      	nop
 8007352:	e002      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10c      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007362:	4b23      	ldr	r3, [pc, #140]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007368:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800736c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007372:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007374:	430b      	orrs	r3, r1
 8007376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800737a:	e003      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007380:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800739a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800739e:	460b      	mov	r3, r1
 80073a0:	4313      	orrs	r3, r2
 80073a2:	d03d      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80073a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073ae:	d01b      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80073b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073b4:	d814      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80073b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ba:	d017      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x654>
 80073bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c0:	d80e      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80073c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ca:	d109      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d0:	3330      	adds	r3, #48	@ 0x30
 80073d2:	4618      	mov	r0, r3
 80073d4:	f002 fecc 	bl	800a170 <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80073de:	e00a      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80073e6:	e006      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80073e8:	bf00      	nop
 80073ea:	e004      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80073f0:	44020c00 	.word	0x44020c00
        break;
 80073f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10c      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80073fe:	4b99      	ldr	r3, [pc, #612]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007404:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800740c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800740e:	4a95      	ldr	r2, [pc, #596]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007410:	430b      	orrs	r3, r1
 8007412:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007416:	e003      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800741c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800742c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007430:	2300      	movs	r3, #0
 8007432:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007436:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800743a:	460b      	mov	r3, r1
 800743c:	4313      	orrs	r3, r2
 800743e:	d03b      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007446:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800744a:	d01b      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800744c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007450:	d814      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8007452:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007456:	d017      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8007458:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800745c:	d80e      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d014      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007466:	d109      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800746c:	3330      	adds	r3, #48	@ 0x30
 800746e:	4618      	mov	r0, r3
 8007470:	f002 fe7e 	bl	800a170 <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800747a:	e008      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8007484:	bf00      	nop
 8007486:	e002      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10c      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007496:	4b73      	ldr	r3, [pc, #460]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800749c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80074a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a6:	4a6f      	ldr	r2, [pc, #444]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80074ae:	e003      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074c8:	2300      	movs	r3, #0
 80074ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074d2:	460b      	mov	r3, r1
 80074d4:	4313      	orrs	r3, r2
 80074d6:	d03d      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80074d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074e4:	d01b      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x786>
 80074e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ea:	d814      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80074ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074f0:	d017      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80074f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074f6:	d80e      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d014      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80074fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007500:	d109      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007506:	3330      	adds	r3, #48	@ 0x30
 8007508:	4618      	mov	r0, r3
 800750a:	f002 fe31 	bl	800a170 <RCCEx_PLL3_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007514:	e008      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800751c:	e004      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007528:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10d      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007530:	4b4c      	ldr	r3, [pc, #304]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007536:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800753a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007542:	4a48      	ldr	r2, [pc, #288]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007544:	430b      	orrs	r3, r1
 8007546:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007550:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007564:	2300      	movs	r3, #0
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800756a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800756e:	460b      	mov	r3, r1
 8007570:	4313      	orrs	r3, r2
 8007572:	d035      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800757c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007580:	d015      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007586:	d80e      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d012      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800758c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007590:	d109      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007596:	3330      	adds	r3, #48	@ 0x30
 8007598:	4618      	mov	r0, r3
 800759a:	f002 fde9 	bl	800a170 <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80075a4:	e006      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80075ac:	e002      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80075b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80075bc:	4b29      	ldr	r3, [pc, #164]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075c2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80075c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ce:	4a25      	ldr	r2, [pc, #148]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075d6:	e003      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80075e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	2100      	movs	r1, #0
 80075ea:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80075ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075fa:	460b      	mov	r3, r1
 80075fc:	4313      	orrs	r3, r2
 80075fe:	d037      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8007600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760c:	d015      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800760e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007612:	d80e      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d012      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800761c:	d109      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800761e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007622:	3330      	adds	r3, #48	@ 0x30
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fda3 	bl	800a170 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007630:	e006      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007638:	e002      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800763e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007640:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10f      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007648:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800764a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800764e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765a:	4a02      	ldr	r2, [pc, #8]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800765c:	430b      	orrs	r3, r1
 800765e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007662:	e005      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8007664:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800766c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	2100      	movs	r1, #0
 800767a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800767c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007682:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d00e      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800768c:	4bb8      	ldr	r3, [pc, #736]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	4ab7      	ldr	r2, [pc, #732]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007692:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007696:	61d3      	str	r3, [r2, #28]
 8007698:	4bb5      	ldr	r3, [pc, #724]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80076a4:	4ab2      	ldr	r2, [pc, #712]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80076a6:	430b      	orrs	r3, r1
 80076a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80076b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80076b8:	2300      	movs	r3, #0
 80076ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80076bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80076c0:	460b      	mov	r3, r1
 80076c2:	4313      	orrs	r3, r2
 80076c4:	d055      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80076c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ce:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80076d2:	d031      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80076d4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80076d8:	d82a      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80076da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076de:	d02d      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e4:	d824      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80076e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ea:	d029      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80076ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076f0:	d81e      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80076f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f6:	d011      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076fc:	d818      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d020      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8007702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007706:	d113      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800770c:	3308      	adds	r3, #8
 800770e:	4618      	mov	r0, r3
 8007710:	f002 fc96 	bl	800a040 <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800771a:	e014      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800771c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007720:	3330      	adds	r3, #48	@ 0x30
 8007722:	4618      	mov	r0, r3
 8007724:	f002 fd24 	bl	800a170 <RCCEx_PLL3_Config>
 8007728:	4603      	mov	r3, r0
 800772a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800772e:	e00a      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007736:	e006      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007738:	bf00      	nop
 800773a:	e004      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800773c:	bf00      	nop
 800773e:	e002      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8007744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007746:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10d      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800774e:	4b88      	ldr	r3, [pc, #544]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007754:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800775c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007760:	4a83      	ldr	r2, [pc, #524]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007762:	430b      	orrs	r3, r1
 8007764:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800776e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800777e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007780:	2300      	movs	r3, #0
 8007782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007784:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007788:	460b      	mov	r3, r1
 800778a:	4313      	orrs	r3, r2
 800778c:	d055      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800778e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007796:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800779a:	d031      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 800779c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077a0:	d82a      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80077a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077a6:	d02d      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80077a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ac:	d824      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80077ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b2:	d029      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b8:	d81e      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077be:	d011      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80077c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c4:	d818      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d020      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ce:	d113      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077d4:	3308      	adds	r3, #8
 80077d6:	4618      	mov	r0, r3
 80077d8:	f002 fc32 	bl	800a040 <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80077e2:	e014      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e8:	3330      	adds	r3, #48	@ 0x30
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 fcc0 	bl	800a170 <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80077f6:	e00a      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077fe:	e006      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007800:	bf00      	nop
 8007802:	e004      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007804:	bf00      	nop
 8007806:	e002      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007808:	bf00      	nop
 800780a:	e000      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800780c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007816:	4b56      	ldr	r3, [pc, #344]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007818:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800781c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007828:	4a51      	ldr	r2, [pc, #324]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800782a:	430b      	orrs	r3, r1
 800782c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007830:	e003      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007836:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800783a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007846:	663b      	str	r3, [r7, #96]	@ 0x60
 8007848:	2300      	movs	r3, #0
 800784a:	667b      	str	r3, [r7, #100]	@ 0x64
 800784c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d032      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800785a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800785e:	2b05      	cmp	r3, #5
 8007860:	d80f      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007862:	2b03      	cmp	r3, #3
 8007864:	d211      	bcs.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d911      	bls.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800786a:	2b02      	cmp	r3, #2
 800786c:	d109      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800786e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007872:	3308      	adds	r3, #8
 8007874:	4618      	mov	r0, r3
 8007876:	f002 fbe3 	bl	800a040 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007880:	e006      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007888:	e002      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800788e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007890:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10d      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007898:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800789a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800789e:	f023 0107 	bic.w	r1, r3, #7
 80078a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078aa:	4a31      	ldr	r2, [pc, #196]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80078bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	2100      	movs	r1, #0
 80078c6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078d2:	460b      	mov	r3, r1
 80078d4:	4313      	orrs	r3, r2
 80078d6:	d024      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80078d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d005      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80078fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007904:	f023 0108 	bic.w	r1, r3, #8
 8007908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800790c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007910:	4a17      	ldr	r2, [pc, #92]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007912:	430b      	orrs	r3, r1
 8007914:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007918:	e003      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800791e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800792e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007930:	2300      	movs	r3, #0
 8007932:	657b      	str	r3, [r7, #84]	@ 0x54
 8007934:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	f000 80b9 	beq.w	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	4a0b      	ldr	r2, [pc, #44]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800794c:	f7fb fd9e 	bl	800348c <HAL_GetTick>
 8007950:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007954:	e010      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007956:	f7fb fd99 	bl	800348c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d908      	bls.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800796c:	e00a      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800796e:	bf00      	nop
 8007970:	44020c00 	.word	0x44020c00
 8007974:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007978:	4bba      	ldr	r3, [pc, #744]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800797a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0e8      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8007984:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 808e 	bne.w	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800798e:	4bb6      	ldr	r3, [pc, #728]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d023      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80079a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d01b      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079b4:	4bac      	ldr	r3, [pc, #688]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079c2:	4ba9      	ldr	r3, [pc, #676]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c8:	4aa7      	ldr	r2, [pc, #668]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079d2:	4ba5      	ldr	r3, [pc, #660]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079d8:	4aa3      	ldr	r2, [pc, #652]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079e2:	4aa1      	ldr	r2, [pc, #644]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d019      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f8:	f7fb fd48 	bl	800348c <HAL_GetTick>
 80079fc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a00:	e00d      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a02:	f7fb fd43 	bl	800348c <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d903      	bls.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007a1c:	e006      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a1e:	4b92      	ldr	r3, [pc, #584]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0ea      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007a2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d135      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a44:	d110      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8007a46:	4b88      	ldr	r3, [pc, #544]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007a5c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007a60:	4a81      	ldr	r2, [pc, #516]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	61d3      	str	r3, [r2, #28]
 8007a66:	e005      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007a68:	4b7f      	ldr	r3, [pc, #508]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	4a7e      	ldr	r2, [pc, #504]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a72:	61d3      	str	r3, [r2, #28]
 8007a74:	4b7c      	ldr	r3, [pc, #496]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007a84:	4b78      	ldr	r3, [pc, #480]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a86:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a96:	4a74      	ldr	r2, [pc, #464]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007aa0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007aa4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007aa8:	e003      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007aae:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4313      	orrs	r3, r2
 8007acc:	d035      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ad6:	2b30      	cmp	r3, #48	@ 0x30
 8007ad8:	d014      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8007ada:	2b30      	cmp	r3, #48	@ 0x30
 8007adc:	d80e      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d012      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d80a      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d106      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aee:	4b5e      	ldr	r3, [pc, #376]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	4a5d      	ldr	r2, [pc, #372]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007afa:	e008      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10d      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007b16:	4b54      	ldr	r3, [pc, #336]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b28:	4a4f      	ldr	r2, [pc, #316]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b36:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b48:	2300      	movs	r3, #0
 8007b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d033      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8007b62:	2b40      	cmp	r3, #64	@ 0x40
 8007b64:	d007      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b66:	e010      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b68:	4b3f      	ldr	r3, [pc, #252]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b72:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007b74:	e00d      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f002 fa5f 	bl	800a040 <RCCEx_PLL2_Config>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007b88:	e003      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10d      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007b9a:	4b33      	ldr	r3, [pc, #204]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007b9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ba0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bac:	4a2e      	ldr	r2, [pc, #184]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bb4:	e003      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	d04c      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d827      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c01 	.word	0x08007c01
 8007bf0:	08007c0f 	.word	0x08007c0f
 8007bf4:	08007c23 	.word	0x08007c23
 8007bf8:	08007c3f 	.word	0x08007c3f
 8007bfc:	08007c3f 	.word	0x08007c3f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c00:	4b19      	ldr	r3, [pc, #100]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c04:	4a18      	ldr	r2, [pc, #96]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007c0c:	e018      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c12:	3308      	adds	r3, #8
 8007c14:	4618      	mov	r0, r3
 8007c16:	f002 fa13 	bl	800a040 <RCCEx_PLL2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007c20:	e00e      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c26:	3330      	adds	r3, #48	@ 0x30
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 faa1 	bl	800a170 <RCCEx_PLL3_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007c34:	e004      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c3c:	e000      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8007c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d111      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007c48:	4b07      	ldr	r3, [pc, #28]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c4e:	f023 0107 	bic.w	r1, r3, #7
 8007c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c5a:	4a03      	ldr	r2, [pc, #12]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c62:	e007      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8007c64:	44020800 	.word	0x44020800
 8007c68:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c82:	2300      	movs	r3, #0
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f000 8081 	beq.w	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d85f      	bhi.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007d29 	.word	0x08007d29
 8007ca8:	08007d5f 	.word	0x08007d5f
 8007cac:	08007d5f 	.word	0x08007d5f
 8007cb0:	08007d5f 	.word	0x08007d5f
 8007cb4:	08007d5f 	.word	0x08007d5f
 8007cb8:	08007d5f 	.word	0x08007d5f
 8007cbc:	08007d5f 	.word	0x08007d5f
 8007cc0:	08007d5f 	.word	0x08007d5f
 8007cc4:	08007d37 	.word	0x08007d37
 8007cc8:	08007d5f 	.word	0x08007d5f
 8007ccc:	08007d5f 	.word	0x08007d5f
 8007cd0:	08007d5f 	.word	0x08007d5f
 8007cd4:	08007d5f 	.word	0x08007d5f
 8007cd8:	08007d5f 	.word	0x08007d5f
 8007cdc:	08007d5f 	.word	0x08007d5f
 8007ce0:	08007d5f 	.word	0x08007d5f
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007d5f 	.word	0x08007d5f
 8007cec:	08007d5f 	.word	0x08007d5f
 8007cf0:	08007d5f 	.word	0x08007d5f
 8007cf4:	08007d5f 	.word	0x08007d5f
 8007cf8:	08007d5f 	.word	0x08007d5f
 8007cfc:	08007d5f 	.word	0x08007d5f
 8007d00:	08007d5f 	.word	0x08007d5f
 8007d04:	08007d67 	.word	0x08007d67
 8007d08:	08007d5f 	.word	0x08007d5f
 8007d0c:	08007d5f 	.word	0x08007d5f
 8007d10:	08007d5f 	.word	0x08007d5f
 8007d14:	08007d5f 	.word	0x08007d5f
 8007d18:	08007d5f 	.word	0x08007d5f
 8007d1c:	08007d5f 	.word	0x08007d5f
 8007d20:	08007d5f 	.word	0x08007d5f
 8007d24:	08007d67 	.word	0x08007d67
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d28:	4bb9      	ldr	r3, [pc, #740]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	4ab8      	ldr	r2, [pc, #736]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007d34:	e018      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f97f 	bl	800a040 <RCCEx_PLL2_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007d48:	e00e      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d4e:	3330      	adds	r3, #48	@ 0x30
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fa0d 	bl	800a170 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e004      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d64:	e000      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10d      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007d70:	4ba7      	ldr	r3, [pc, #668]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d82:	4aa3      	ldr	r2, [pc, #652]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d84:	430b      	orrs	r3, r1
 8007d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007da2:	2300      	movs	r3, #0
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007daa:	460b      	mov	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	d04e      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007db4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dbc:	d02e      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc2:	d827      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007dc4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dc6:	d02b      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dca:	d823      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007dcc:	2b80      	cmp	r3, #128	@ 0x80
 8007dce:	d017      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8007dd0:	2b80      	cmp	r3, #128	@ 0x80
 8007dd2:	d81f      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d007      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8007ddc:	e01a      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dde:	4b8c      	ldr	r3, [pc, #560]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	4a8b      	ldr	r2, [pc, #556]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007dea:	e01a      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df0:	3308      	adds	r3, #8
 8007df2:	4618      	mov	r0, r3
 8007df4:	f002 f924 	bl	800a040 <RCCEx_PLL2_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007dfe:	e010      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e04:	3330      	adds	r3, #48	@ 0x30
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 f9b2 	bl	800a170 <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007e12:	e006      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e1a:	e002      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007e1c:	bf00      	nop
 8007e1e:	e000      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007e2a:	4b79      	ldr	r3, [pc, #484]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e30:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e3c:	4974      	ldr	r1, [pc, #464]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e4a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e5a:	623b      	str	r3, [r7, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e64:	460b      	mov	r3, r1
 8007e66:	4313      	orrs	r3, r2
 8007e68:	d055      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e76:	d031      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007e78:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e7c:	d82a      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e82:	d02d      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e88:	d824      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007e8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e8e:	d029      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007e90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e94:	d81e      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9a:	d011      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea0:	d818      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d020      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eaa:	d113      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f002 f8c4 	bl	800a040 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007ebe:	e014      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ec4:	3330      	adds	r3, #48	@ 0x30
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 f952 	bl	800a170 <RCCEx_PLL3_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e00a      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007eda:	e006      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10d      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007ef2:	4b47      	ldr	r3, [pc, #284]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ef8:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f04:	4942      	ldr	r1, [pc, #264]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007f0c:	e003      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f12:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	61b9      	str	r1, [r7, #24]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	d03c      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d81b      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f7f 	.word	0x08007f7f
 8007f48:	08007f55 	.word	0x08007f55
 8007f4c:	08007f63 	.word	0x08007f63
 8007f50:	08007f7f 	.word	0x08007f7f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f54:	4b2e      	ldr	r3, [pc, #184]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	4a2d      	ldr	r2, [pc, #180]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f5e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007f60:	e00e      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f66:	3308      	adds	r3, #8
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f002 f869 	bl	800a040 <RCCEx_PLL2_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10d      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007f88:	4b21      	ldr	r3, [pc, #132]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f8e:	f023 0203 	bic.w	r2, r3, #3
 8007f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f9a:	491d      	ldr	r1, [pc, #116]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fa8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6139      	str	r1, [r7, #16]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d03c      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fda:	d815      	bhi.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d019      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe4:	d110      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fea:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007ff2:	e010      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f002 f820 	bl	800a040 <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008006:	e006      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800800e:	e002      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8008010:	44020c00 	.word	0x44020c00
        break;
 8008014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008016:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800801e:	4b3d      	ldr	r3, [pc, #244]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800802c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008030:	4938      	ldr	r1, [pc, #224]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008038:	e003      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800803e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	2100      	movs	r1, #0
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008058:	460b      	mov	r3, r1
 800805a:	4313      	orrs	r3, r2
 800805c:	d038      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800805e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008062:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008066:	2b30      	cmp	r3, #48	@ 0x30
 8008068:	d01b      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800806a:	2b30      	cmp	r3, #48	@ 0x30
 800806c:	d815      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800806e:	2b10      	cmp	r3, #16
 8008070:	d002      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8008072:	2b20      	cmp	r3, #32
 8008074:	d007      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8008076:	e010      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008078:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	4a25      	ldr	r2, [pc, #148]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800807e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008082:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008084:	e00e      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800808a:	3330      	adds	r3, #48	@ 0x30
 800808c:	4618      	mov	r0, r3
 800808e:	f002 f86f 	bl	800a170 <RCCEx_PLL3_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008098:	e004      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80080a0:	e000      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80080a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80080ac:	4b19      	ldr	r3, [pc, #100]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80080ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80080b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80080be:	4915      	ldr	r1, [pc, #84]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080c6:	e003      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	2100      	movs	r1, #0
 80080da:	6039      	str	r1, [r7, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080e6:	460b      	mov	r3, r1
 80080e8:	4313      	orrs	r3, r2
 80080ea:	d00c      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80080ec:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80080ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80080f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080fe:	4905      	ldr	r1, [pc, #20]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008106:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800810a:	4618      	mov	r0, r3
 800810c:	37e8      	adds	r7, #232	@ 0xe8
 800810e:	46bd      	mov	sp, r7
 8008110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008114:	44020c00 	.word	0x44020c00

08008118 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008118:	b480      	push	{r7}
 800811a:	b08b      	sub	sp, #44	@ 0x2c
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008120:	4bae      	ldr	r3, [pc, #696]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008128:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800812a:	4bac      	ldr	r3, [pc, #688]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800812c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008134:	4ba9      	ldr	r3, [pc, #676]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800813e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008140:	4ba6      	ldr	r3, [pc, #664]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800814c:	4ba3      	ldr	r3, [pc, #652]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	08db      	lsrs	r3, r3, #3
 8008152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	fb02 f303 	mul.w	r3, r2, r3
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008164:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8126 	beq.w	80083bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d053      	beq.n	800821e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d86f      	bhi.n	800825c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d003      	beq.n	800818a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d02b      	beq.n	80081e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008188:	e068      	b.n	800825c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800818a:	4b94      	ldr	r3, [pc, #592]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	08db      	lsrs	r3, r3, #3
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	4a92      	ldr	r2, [pc, #584]	@ (80083e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008196:	fa22 f303 	lsr.w	r3, r2, r3
 800819a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a04 	vldr	s12, [r7, #16]
 80081c2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80081de:	e068      	b.n	80082b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80083e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80081ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8008200:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008218:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800821c:	e049      	b.n	80082b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008228:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800822c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823a:	ed97 6a04 	vldr	s12, [r7, #16]
 800823e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008256:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800825a:	e02a      	b.n	80082b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800825c:	4b5f      	ldr	r3, [pc, #380]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	08db      	lsrs	r3, r3, #3
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	4a5e      	ldr	r2, [pc, #376]	@ (80083e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
 800826c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	ee07 3a90 	vmov	s15, r3
 800828c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008290:	ed97 6a04 	vldr	s12, [r7, #16]
 8008294:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80082b0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082b2:	4b4a      	ldr	r3, [pc, #296]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082be:	d121      	bne.n	8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80082c0:	4b46      	ldr	r3, [pc, #280]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d017      	beq.n	80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082cc:	4b43      	ldr	r3, [pc, #268]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d0:	0a5b      	lsrs	r3, r3, #9
 80082d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80082de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80082e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e006      	b.n	800830a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e002      	b.n	800830a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800830a:	4b34      	ldr	r3, [pc, #208]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008316:	d121      	bne.n	800835c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008318:	4b30      	ldr	r3, [pc, #192]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008324:	4b2d      	ldr	r3, [pc, #180]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008328:	0c1b      	lsrs	r3, r3, #16
 800832a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800833e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	e006      	b.n	8008362 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	605a      	str	r2, [r3, #4]
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008362:	4b1e      	ldr	r3, [pc, #120]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800836a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800836e:	d121      	bne.n	80083b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008370:	4b1a      	ldr	r3, [pc, #104]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d017      	beq.n	80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800837c:	4b17      	ldr	r3, [pc, #92]	@ (80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	0e1b      	lsrs	r3, r3, #24
 8008382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800838e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008392:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008396:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800839a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80083aa:	e010      	b.n	80083ce <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
}
 80083b2:	e00c      	b.n	80083ce <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	e008      	b.n	80083ce <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
}
 80083ce:	bf00      	nop
 80083d0:	372c      	adds	r7, #44	@ 0x2c
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	44020c00 	.word	0x44020c00
 80083e0:	03d09000 	.word	0x03d09000
 80083e4:	46000000 	.word	0x46000000
 80083e8:	4a742400 	.word	0x4a742400
 80083ec:	4af42400 	.word	0x4af42400

080083f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b08b      	sub	sp, #44	@ 0x2c
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80083f8:	4bae      	ldr	r3, [pc, #696]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008400:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008402:	4bac      	ldr	r3, [pc, #688]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800840c:	4ba9      	ldr	r3, [pc, #676]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800840e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008410:	0a1b      	lsrs	r3, r3, #8
 8008412:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008416:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008418:	4ba6      	ldr	r3, [pc, #664]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800841a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841c:	091b      	lsrs	r3, r3, #4
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008424:	4ba3      	ldr	r3, [pc, #652]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8126 	beq.w	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d053      	beq.n	80084f6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d86f      	bhi.n	8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d003      	beq.n	8008462 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d02b      	beq.n	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008460:	e068      	b.n	8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008462:	4b94      	ldr	r3, [pc, #592]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	08db      	lsrs	r3, r3, #3
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	4a92      	ldr	r2, [pc, #584]	@ (80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a04 	vldr	s12, [r7, #16]
 800849a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80084b6:	e068      	b.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80086c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	ee07 3a90 	vmov	s15, r3
 80084d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80084d8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80084dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084f4:	e049      	b.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008512:	ed97 6a04 	vldr	s12, [r7, #16]
 8008516:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800851a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008532:	e02a      	b.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008534:	4b5f      	ldr	r3, [pc, #380]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	08db      	lsrs	r3, r3, #3
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	4a5e      	ldr	r2, [pc, #376]	@ (80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
 8008544:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	ed97 6a04 	vldr	s12, [r7, #16]
 800856c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008588:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800858a:	4b4a      	ldr	r3, [pc, #296]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008596:	d121      	bne.n	80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008598:	4b46      	ldr	r3, [pc, #280]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d017      	beq.n	80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085a4:	4b43      	ldr	r3, [pc, #268]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a8:	0a5b      	lsrs	r3, r3, #9
 80085aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80085b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80085be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ca:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e006      	b.n	80085e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e002      	b.n	80085e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085e2:	4b34      	ldr	r3, [pc, #208]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ee:	d121      	bne.n	8008634 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80085f0:	4b30      	ldr	r3, [pc, #192]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085fc:	4b2d      	ldr	r3, [pc, #180]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800860e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008612:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008616:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800861a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008622:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	e006      	b.n	800863a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	e002      	b.n	800863a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863a:	4b1e      	ldr	r3, [pc, #120]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008646:	d121      	bne.n	800868c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008648:	4b1a      	ldr	r3, [pc, #104]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d017      	beq.n	8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008654:	4b17      	ldr	r3, [pc, #92]	@ (80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800866a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800866e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008682:	e010      	b.n	80086a6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	609a      	str	r2, [r3, #8]
}
 800868a:	e00c      	b.n	80086a6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	609a      	str	r2, [r3, #8]
}
 8008692:	e008      	b.n	80086a6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	609a      	str	r2, [r3, #8]
}
 80086a6:	bf00      	nop
 80086a8:	372c      	adds	r7, #44	@ 0x2c
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	44020c00 	.word	0x44020c00
 80086b8:	03d09000 	.word	0x03d09000
 80086bc:	46000000 	.word	0x46000000
 80086c0:	4a742400 	.word	0x4a742400
 80086c4:	4af42400 	.word	0x4af42400

080086c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b08b      	sub	sp, #44	@ 0x2c
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80086d0:	4bae      	ldr	r3, [pc, #696]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80086da:	4bac      	ldr	r3, [pc, #688]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80086e4:	4ba9      	ldr	r3, [pc, #676]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	0a1b      	lsrs	r3, r3, #8
 80086ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086ee:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80086f0:	4ba6      	ldr	r3, [pc, #664]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f4:	091b      	lsrs	r3, r3, #4
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80086fc:	4ba3      	ldr	r3, [pc, #652]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	fb02 f303 	mul.w	r3, r2, r3
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008714:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8126 	beq.w	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b03      	cmp	r3, #3
 8008724:	d053      	beq.n	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d86f      	bhi.n	800880c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d02b      	beq.n	8008790 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008738:	e068      	b.n	800880c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800873a:	4b94      	ldr	r3, [pc, #592]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a92      	ldr	r2, [pc, #584]	@ (8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008772:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800878e:	e068      	b.n	8008862 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80087b0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80087cc:	e049      	b.n	8008862 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800899c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80087dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80087ee:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80087f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008806:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800880a:	e02a      	b.n	8008862 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800880c:	4b5f      	ldr	r3, [pc, #380]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	4a5e      	ldr	r2, [pc, #376]	@ (8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008840:	ed97 6a04 	vldr	s12, [r7, #16]
 8008844:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008860:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008862:	4b4a      	ldr	r3, [pc, #296]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800886a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800886e:	d121      	bne.n	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008870:	4b46      	ldr	r3, [pc, #280]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d017      	beq.n	80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800887c:	4b43      	ldr	r3, [pc, #268]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800887e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008880:	0a5b      	lsrs	r3, r3, #9
 8008882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800888e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008892:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008896:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800889a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	e006      	b.n	80088ba <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088ba:	4b34      	ldr	r3, [pc, #208]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c6:	d121      	bne.n	800890c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80088c8:	4b30      	ldr	r3, [pc, #192]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d017      	beq.n	8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088d4:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80088d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80088e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80088ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80088f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088fa:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	e006      	b.n	8008912 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e002      	b.n	8008912 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008912:	4b1e      	ldr	r3, [pc, #120]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800891a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800891e:	d121      	bne.n	8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008920:	4b1a      	ldr	r3, [pc, #104]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008924:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d017      	beq.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800892c:	4b17      	ldr	r3, [pc, #92]	@ (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800892e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008930:	0e1b      	lsrs	r3, r3, #24
 8008932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800893e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008942:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008946:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800894a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800894e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008952:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800895a:	e010      	b.n	800897e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	609a      	str	r2, [r3, #8]
}
 8008962:	e00c      	b.n	800897e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	609a      	str	r2, [r3, #8]
}
 800896a:	e008      	b.n	800897e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
}
 800897e:	bf00      	nop
 8008980:	372c      	adds	r7, #44	@ 0x2c
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	44020c00 	.word	0x44020c00
 8008990:	03d09000 	.word	0x03d09000
 8008994:	46000000 	.word	0x46000000
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4af42400 	.word	0x4af42400

080089a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089a0:	b590      	push	{r4, r7, lr}
 80089a2:	b08f      	sub	sp, #60	@ 0x3c
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80089aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ae:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80089b2:	4321      	orrs	r1, r4
 80089b4:	d150      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80089b6:	4b26      	ldr	r3, [pc, #152]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80089b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80089c2:	4b23      	ldr	r3, [pc, #140]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80089c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d108      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d104      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80089d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089de:	f001 bb20 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80089e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80089e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089f0:	d108      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f8:	d104      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80089fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80089fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a00:	f001 bb0f 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a10:	d119      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a18:	d115      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a26:	d30a      	bcc.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008a28:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	0a1b      	lsrs	r3, r3, #8
 8008a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a32:	4a08      	ldr	r2, [pc, #32]	@ (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008a3a:	f001 baf2 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008a42:	f001 baee 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	f001 baea 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008a4e:	bf00      	nop
 8008a50:	44020c00 	.word	0x44020c00
 8008a54:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5c:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8008a60:	ea50 0104 	orrs.w	r1, r0, r4
 8008a64:	f000 8615 	beq.w	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8008a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a6c:	2801      	cmp	r0, #1
 8008a6e:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8008a72:	f081 82d3 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a7a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008a7e:	ea50 0104 	orrs.w	r1, r0, r4
 8008a82:	f000 84d8 	beq.w	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a8a:	2801      	cmp	r0, #1
 8008a8c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008a90:	f081 82c4 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a98:	f1a1 0410 	sub.w	r4, r1, #16
 8008a9c:	ea50 0104 	orrs.w	r1, r0, r4
 8008aa0:	f001 8288 	beq.w	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8008aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa8:	2801      	cmp	r0, #1
 8008aaa:	f171 0110 	sbcs.w	r1, r1, #16
 8008aae:	f081 82b5 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab6:	f1a1 0408 	sub.w	r4, r1, #8
 8008aba:	ea50 0104 	orrs.w	r1, r0, r4
 8008abe:	f001 81fe 	beq.w	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8008ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ac6:	2801      	cmp	r0, #1
 8008ac8:	f171 0108 	sbcs.w	r1, r1, #8
 8008acc:	f081 82a6 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	ea50 0104 	orrs.w	r1, r0, r4
 8008ada:	f000 8753 	beq.w	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8008ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae2:	2801      	cmp	r0, #1
 8008ae4:	f171 0104 	sbcs.w	r1, r1, #4
 8008ae8:	f081 8298 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008af0:	1e8c      	subs	r4, r1, #2
 8008af2:	ea50 0104 	orrs.w	r1, r0, r4
 8008af6:	f001 8173 	beq.w	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8008afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008afe:	2801      	cmp	r0, #1
 8008b00:	f171 0102 	sbcs.w	r1, r1, #2
 8008b04:	f081 828a 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b0c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008b10:	4321      	orrs	r1, r4
 8008b12:	f001 80fe 	beq.w	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b1a:	4ccb      	ldr	r4, [pc, #812]	@ (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8008b1c:	42a0      	cmp	r0, r4
 8008b1e:	f171 0100 	sbcs.w	r1, r1, #0
 8008b22:	f081 827b 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b2a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008b2e:	4321      	orrs	r1, r4
 8008b30:	f001 8076 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8008b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b38:	4cc4      	ldr	r4, [pc, #784]	@ (8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8008b3a:	42a0      	cmp	r0, r4
 8008b3c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b40:	f081 826c 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b48:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008b4c:	4321      	orrs	r1, r4
 8008b4e:	f000 87b5 	beq.w	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8008b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b56:	4cbe      	ldr	r4, [pc, #760]	@ (8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	f171 0100 	sbcs.w	r1, r1, #0
 8008b5e:	f081 825d 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b66:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008b6a:	4321      	orrs	r1, r4
 8008b6c:	f000 8738 	beq.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8008b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b74:	4cb7      	ldr	r4, [pc, #732]	@ (8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8008b76:	42a0      	cmp	r0, r4
 8008b78:	f171 0100 	sbcs.w	r1, r1, #0
 8008b7c:	f081 824e 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b84:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008b88:	4321      	orrs	r1, r4
 8008b8a:	f001 81cd 	beq.w	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8008b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b92:	4cb1      	ldr	r4, [pc, #708]	@ (8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8008b94:	42a0      	cmp	r0, r4
 8008b96:	f171 0100 	sbcs.w	r1, r1, #0
 8008b9a:	f081 823f 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008ba6:	4321      	orrs	r1, r4
 8008ba8:	f000 80d9 	beq.w	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bb0:	4caa      	ldr	r4, [pc, #680]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8008bb2:	42a0      	cmp	r0, r4
 8008bb4:	f171 0100 	sbcs.w	r1, r1, #0
 8008bb8:	f081 8230 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008bc4:	4321      	orrs	r1, r4
 8008bc6:	f000 83da 	beq.w	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8008bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bce:	4ca4      	ldr	r4, [pc, #656]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	f171 0100 	sbcs.w	r1, r1, #0
 8008bd6:	f081 8221 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bde:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008be2:	4321      	orrs	r1, r4
 8008be4:	f000 8627 	beq.w	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8008be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bec:	4c9d      	ldr	r4, [pc, #628]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8008bee:	42a0      	cmp	r0, r4
 8008bf0:	f171 0100 	sbcs.w	r1, r1, #0
 8008bf4:	f081 8212 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bfc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008c00:	4321      	orrs	r1, r4
 8008c02:	f000 857a 	beq.w	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c0a:	4c97      	ldr	r4, [pc, #604]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	f171 0100 	sbcs.w	r1, r1, #0
 8008c12:	f081 8203 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c1a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008c1e:	4321      	orrs	r1, r4
 8008c20:	f000 84fb 	beq.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c28:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008c2c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c30:	f081 81f4 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c38:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008c3c:	4321      	orrs	r1, r4
 8008c3e:	f000 84a9 	beq.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8008c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c46:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008c4a:	42a0      	cmp	r0, r4
 8008c4c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c50:	f081 81e4 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c58:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008c5c:	4321      	orrs	r1, r4
 8008c5e:	f000 8456 	beq.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8008c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c66:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008c6a:	42a0      	cmp	r0, r4
 8008c6c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c70:	f081 81d4 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c78:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008c7c:	4321      	orrs	r1, r4
 8008c7e:	f000 8403 	beq.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c86:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008c8a:	42a0      	cmp	r0, r4
 8008c8c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c90:	f081 81c4 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c98:	2821      	cmp	r0, #33	@ 0x21
 8008c9a:	f171 0100 	sbcs.w	r1, r1, #0
 8008c9e:	d255      	bcs.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ca4:	4301      	orrs	r1, r0
 8008ca6:	f001 81b9 	beq.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cae:	1e42      	subs	r2, r0, #1
 8008cb0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008cb4:	2a20      	cmp	r2, #32
 8008cb6:	f173 0100 	sbcs.w	r1, r3, #0
 8008cba:	f081 81af 	bcs.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008cbe:	2a1f      	cmp	r2, #31
 8008cc0:	f201 81ac 	bhi.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8008cc4:	a101      	add	r1, pc, #4	@ (adr r1, 8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8008cc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008da3 	.word	0x08008da3
 8008cd0:	08008ea1 	.word	0x08008ea1
 8008cd4:	0800a01d 	.word	0x0800a01d
 8008cd8:	08008f61 	.word	0x08008f61
 8008cdc:	0800a01d 	.word	0x0800a01d
 8008ce0:	0800a01d 	.word	0x0800a01d
 8008ce4:	0800a01d 	.word	0x0800a01d
 8008ce8:	08009031 	.word	0x08009031
 8008cec:	0800a01d 	.word	0x0800a01d
 8008cf0:	0800a01d 	.word	0x0800a01d
 8008cf4:	0800a01d 	.word	0x0800a01d
 8008cf8:	0800a01d 	.word	0x0800a01d
 8008cfc:	0800a01d 	.word	0x0800a01d
 8008d00:	0800a01d 	.word	0x0800a01d
 8008d04:	0800a01d 	.word	0x0800a01d
 8008d08:	08009115 	.word	0x08009115
 8008d0c:	0800a01d 	.word	0x0800a01d
 8008d10:	0800a01d 	.word	0x0800a01d
 8008d14:	0800a01d 	.word	0x0800a01d
 8008d18:	0800a01d 	.word	0x0800a01d
 8008d1c:	0800a01d 	.word	0x0800a01d
 8008d20:	0800a01d 	.word	0x0800a01d
 8008d24:	0800a01d 	.word	0x0800a01d
 8008d28:	0800a01d 	.word	0x0800a01d
 8008d2c:	0800a01d 	.word	0x0800a01d
 8008d30:	0800a01d 	.word	0x0800a01d
 8008d34:	0800a01d 	.word	0x0800a01d
 8008d38:	0800a01d 	.word	0x0800a01d
 8008d3c:	0800a01d 	.word	0x0800a01d
 8008d40:	0800a01d 	.word	0x0800a01d
 8008d44:	0800a01d 	.word	0x0800a01d
 8008d48:	080091eb 	.word	0x080091eb
 8008d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d50:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008d54:	430b      	orrs	r3, r1
 8008d56:	f000 82b3 	beq.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008d5a:	f001 b95f 	b.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008d5e:	4b43      	ldr	r3, [pc, #268]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d108      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d70:	f107 0320 	add.w	r3, r7, #32
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff f9cf 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d7e:	f001 b950 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	2b40      	cmp	r3, #64	@ 0x40
 8008d86:	d108      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff fb2f 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d96:	f001 b944 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d9e:	f001 b940 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008da2:	4b32      	ldr	r3, [pc, #200]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008db4:	f7fd ffc4 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 8008db8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dba:	f001 b932 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dca:	d10a      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff fb0a 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de0:	e05c      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008de2:	4b22      	ldr	r3, [pc, #136]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dee:	d10a      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d107      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df6:	f107 0308 	add.w	r3, r7, #8
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fc64 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e04:	e04a      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008e06:	4b19      	ldr	r3, [pc, #100]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d10c      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d109      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e18:	4b14      	ldr	r3, [pc, #80]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	4a13      	ldr	r2, [pc, #76]	@ (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2a:	e037      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e38:	d11e      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d11b      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8008e40:	4b0c      	ldr	r3, [pc, #48]	@ (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e44:	e02a      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008e46:	bf00      	nop
 8008e48:	40000001 	.word	0x40000001
 8008e4c:	20000001 	.word	0x20000001
 8008e50:	10000001 	.word	0x10000001
 8008e54:	08000001 	.word	0x08000001
 8008e58:	04000001 	.word	0x04000001
 8008e5c:	00400001 	.word	0x00400001
 8008e60:	00200001 	.word	0x00200001
 8008e64:	00040001 	.word	0x00040001
 8008e68:	00020001 	.word	0x00020001
 8008e6c:	44020c00 	.word	0x44020c00
 8008e70:	03d09000 	.word	0x03d09000
 8008e74:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008e78:	4ba3      	ldr	r3, [pc, #652]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	d103      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e98:	f001 b8c3 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008e9c:	f001 b8c1 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008ea0:	4b99      	ldr	r3, [pc, #612]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eaa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eb2:	f7fd ff2f 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8008eb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008eb8:	f001 b8b3 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008ebc:	4b92      	ldr	r3, [pc, #584]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ec8:	d10a      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fa8b 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ede:	e03d      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	2b10      	cmp	r3, #16
 8008ee4:	d108      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fbec 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ef4:	f001 b895 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008ef8:	4b83      	ldr	r3, [pc, #524]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d10c      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	2b18      	cmp	r3, #24
 8008f08:	d109      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	08db      	lsrs	r3, r3, #3
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	4a7d      	ldr	r2, [pc, #500]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1c:	e01e      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f2a:	d105      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d102      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8008f32:	4b77      	ldr	r3, [pc, #476]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f36:	e011      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008f38:	4b73      	ldr	r3, [pc, #460]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d106      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b28      	cmp	r3, #40	@ 0x28
 8008f4a:	d103      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f52:	e003      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f58:	f001 b863 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008f5c:	f001 b861 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008f60:	4b69      	ldr	r3, [pc, #420]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f66:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008f6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f72:	f7fd fecf 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8008f76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f78:	f001 b853 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008f7c:	4b62      	ldr	r3, [pc, #392]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f88:	d10a      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2b40      	cmp	r3, #64	@ 0x40
 8008f8e:	d107      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff fa2b 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9e:	e045      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008fa0:	4b59      	ldr	r3, [pc, #356]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fac:	d10a      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	2b80      	cmp	r3, #128	@ 0x80
 8008fb2:	d107      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fb4:	f107 0308 	add.w	r3, r7, #8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fb85 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc2:	e033      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008fc4:	4b50      	ldr	r3, [pc, #320]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d10c      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fd4:	d109      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe8:	e020      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008fea:	4b47      	ldr	r3, [pc, #284]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff6:	d106      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffe:	d102      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8009000:	4b43      	ldr	r3, [pc, #268]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8009002:	637b      	str	r3, [r7, #52]	@ 0x34
 8009004:	e012      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009006:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b02      	cmp	r3, #2
 8009012:	d107      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800901a:	d103      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 800901c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	e003      	b.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009028:	f000 bffb 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800902c:	f000 bff9 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009030:	4b35      	ldr	r3, [pc, #212]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009036:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800903a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009042:	f7fd fe67 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8009046:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009048:	f000 bfeb 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800904c:	4b2e      	ldr	r3, [pc, #184]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009058:	d10b      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009060:	d107      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0314 	add.w	r3, r7, #20
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff f9c2 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009070:	e047      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009072:	4b25      	ldr	r3, [pc, #148]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800907a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800907e:	d10b      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009086:	d107      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009088:	f107 0308 	add.w	r3, r7, #8
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fb1b 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
 8009096:	e034      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009098:	4b1b      	ldr	r3, [pc, #108]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d10d      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80090aa:	d109      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090ac:	4b16      	ldr	r3, [pc, #88]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	08db      	lsrs	r3, r3, #3
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	4a15      	ldr	r2, [pc, #84]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80090b8:	fa22 f303 	lsr.w	r3, r2, r3
 80090bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090be:	e020      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80090c0:	4b11      	ldr	r3, [pc, #68]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090cc:	d106      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090d4:	d102      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80090d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090da:	e012      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80090dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80090de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d107      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80090f0:	d103      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80090f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f8:	e003      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090fe:	f000 bf90 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009102:	f000 bf8e 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009106:	bf00      	nop
 8009108:	44020c00 	.word	0x44020c00
 800910c:	03d09000 	.word	0x03d09000
 8009110:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009114:	4ba5      	ldr	r3, [pc, #660]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800911a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800911e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009126:	f7fd fdf5 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 800912a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800912c:	f000 bf79 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009130:	4b9e      	ldr	r3, [pc, #632]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800913c:	d10b      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009144:	d107      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009146:	f107 0314 	add.w	r3, r7, #20
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff f950 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
 8009154:	e047      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009156:	4b95      	ldr	r3, [pc, #596]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009162:	d10b      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800916a:	d107      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916c:	f107 0308 	add.w	r3, r7, #8
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff faa9 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	637b      	str	r3, [r7, #52]	@ 0x34
 800917a:	e034      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800917c:	4b8b      	ldr	r3, [pc, #556]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b02      	cmp	r3, #2
 8009186:	d10d      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800918e:	d109      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009190:	4b86      	ldr	r3, [pc, #536]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	08db      	lsrs	r3, r3, #3
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	4a85      	ldr	r2, [pc, #532]	@ (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a2:	e020      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80091a4:	4b81      	ldr	r3, [pc, #516]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091b0:	d106      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091b8:	d102      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80091ba:	4b7e      	ldr	r3, [pc, #504]	@ (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091be:	e012      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80091c0:	4b7a      	ldr	r3, [pc, #488]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d107      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80091d4:	d103      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80091d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
 80091dc:	e003      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091e2:	f000 bf1e 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80091e6:	f000 bf1c 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80091ea:	4b70      	ldr	r3, [pc, #448]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80091ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80091f0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80091f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80091fc:	f7fd fd8a 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8009200:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009202:	f000 bf0e 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009206:	4b69      	ldr	r3, [pc, #420]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800920e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009212:	d10b      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800921a:	d107      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff f8e5 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
 800922a:	e047      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800922c:	4b5f      	ldr	r3, [pc, #380]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009238:	d10b      	bne.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009240:	d107      	bne.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009242:	f107 0308 	add.w	r3, r7, #8
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff fa3e 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009250:	e034      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009252:	4b56      	ldr	r3, [pc, #344]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b02      	cmp	r3, #2
 800925c:	d10d      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009264:	d109      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009266:	4b51      	ldr	r3, [pc, #324]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	08db      	lsrs	r3, r3, #3
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	4a4f      	ldr	r2, [pc, #316]	@ (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009272:	fa22 f303 	lsr.w	r3, r2, r3
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	e020      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800927a:	4b4c      	ldr	r3, [pc, #304]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009286:	d106      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800928e:	d102      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8009290:	4b48      	ldr	r3, [pc, #288]	@ (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
 8009294:	e012      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009296:	4b45      	ldr	r3, [pc, #276]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d107      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80092aa:	d103      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80092ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b2:	e003      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092b8:	f000 beb3 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80092bc:	f000 beb1 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80092c0:	4b3a      	ldr	r3, [pc, #232]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80092c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d104      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80092d2:	f7fd fd4b 	bl	8006d6c <HAL_RCC_GetPCLK3Freq>
 80092d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80092d8:	f000 bea3 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092e2:	d108      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e4:	f107 0314 	add.w	r3, r7, #20
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff f881 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092f2:	f000 be96 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092fc:	d108      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff f9e0 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930c:	f000 be89 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009310:	4b26      	ldr	r3, [pc, #152]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b02      	cmp	r3, #2
 800931a:	d10d      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009322:	d109      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009324:	4b21      	ldr	r3, [pc, #132]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	08db      	lsrs	r3, r3, #3
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	4a20      	ldr	r2, [pc, #128]	@ (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8009330:	fa22 f303 	lsr.w	r3, r2, r3
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
 8009336:	e020      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009338:	4b1c      	ldr	r3, [pc, #112]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009344:	d106      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800934c:	d102      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800934e:	4b19      	ldr	r3, [pc, #100]	@ (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
 8009352:	e012      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009354:	4b15      	ldr	r3, [pc, #84]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d107      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009368:	d103      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 800936a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009370:	e003      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009376:	f000 be54 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800937a:	f000 be52 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800937e:	4b0b      	ldr	r3, [pc, #44]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8009380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009390:	f7fd fca4 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8009394:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009396:	f000 be44 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d10b      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 80093a0:	f7fd fb70 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 80093a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093a6:	f000 be3c 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80093aa:	bf00      	nop
 80093ac:	44020c00 	.word	0x44020c00
 80093b0:	03d09000 	.word	0x03d09000
 80093b4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d108      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff f814 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093cc:	f000 be29 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80093d0:	4b9f      	ldr	r3, [pc, #636]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093dc:	d105      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80093e4:	4b9b      	ldr	r3, [pc, #620]	@ (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e8:	e023      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80093ea:	4b99      	ldr	r3, [pc, #612]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d10c      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d109      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093fc:	4b94      	ldr	r3, [pc, #592]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	08db      	lsrs	r3, r3, #3
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	4a94      	ldr	r2, [pc, #592]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009408:	fa22 f303 	lsr.w	r3, r2, r3
 800940c:	637b      	str	r3, [r7, #52]	@ 0x34
 800940e:	e010      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009410:	4b8f      	ldr	r3, [pc, #572]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800941c:	d105      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	2b05      	cmp	r3, #5
 8009422:	d102      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8009424:	4b8d      	ldr	r3, [pc, #564]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
 8009428:	e003      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800942e:	f000 bdf8 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009432:	f000 bdf6 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009436:	4b86      	ldr	r3, [pc, #536]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009442:	4b83      	ldr	r3, [pc, #524]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b02      	cmp	r3, #2
 800944e:	d106      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8009456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800945a:	637b      	str	r3, [r7, #52]	@ 0x34
 800945c:	e012      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800945e:	4b7c      	ldr	r3, [pc, #496]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800946c:	d106      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	2b08      	cmp	r3, #8
 8009472:	d103      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8009474:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009478:	637b      	str	r3, [r7, #52]	@ 0x34
 800947a:	e003      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009480:	f000 bdcf 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009484:	f000 bdcd 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009488:	4b71      	ldr	r3, [pc, #452]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800948a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800948e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009492:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800949a:	f7fd fc3b 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 800949e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80094a0:	f000 bdbf 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094aa:	d108      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ac:	f107 0308 	add.w	r3, r7, #8
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff f909 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ba:	f000 bdb2 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80094be:	4b64      	ldr	r3, [pc, #400]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d10d      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094d0:	d109      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094d2:	4b5f      	ldr	r3, [pc, #380]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	08db      	lsrs	r3, r3, #3
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80094de:	fa22 f303 	lsr.w	r3, r2, r3
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e4:	e011      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80094e6:	4b5a      	ldr	r3, [pc, #360]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f2:	d106      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094fa:	d102      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80094fc:	4b57      	ldr	r3, [pc, #348]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80094fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009500:	e003      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009506:	f000 bd8c 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800950a:	f000 bd8a 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800950e:	4b50      	ldr	r3, [pc, #320]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009510:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009514:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009518:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009520:	f7fd fbf8 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8009524:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009526:	f000 bd7c 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009530:	d108      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff f8c6 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009540:	f000 bd6f 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009544:	4b42      	ldr	r3, [pc, #264]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	2b02      	cmp	r3, #2
 800954e:	d10d      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009556:	d109      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009558:	4b3d      	ldr	r3, [pc, #244]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	08db      	lsrs	r3, r3, #3
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	4a3d      	ldr	r2, [pc, #244]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	637b      	str	r3, [r7, #52]	@ 0x34
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800956c:	4b38      	ldr	r3, [pc, #224]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009578:	d106      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009580:	d102      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8009582:	4b36      	ldr	r3, [pc, #216]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
 8009586:	e003      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800958c:	f000 bd49 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009590:	f000 bd47 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009594:	4b2e      	ldr	r3, [pc, #184]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8009596:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800959a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800959e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095a6:	f7fd fbe1 	bl	8006d6c <HAL_RCC_GetPCLK3Freq>
 80095aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80095ac:	f000 bd39 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095b6:	d108      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff f883 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095c6:	f000 bd2c 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80095ca:	4b21      	ldr	r3, [pc, #132]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d10d      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095dc:	d109      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095de:	4b1c      	ldr	r3, [pc, #112]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	08db      	lsrs	r3, r3, #3
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f0:	e011      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80095f2:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095fe:	d106      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8009608:	4b14      	ldr	r3, [pc, #80]	@ (800965c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800960a:	637b      	str	r3, [r7, #52]	@ 0x34
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009612:	f000 bd06 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009616:	f000 bd04 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800961a:	4b0d      	ldr	r3, [pc, #52]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800961c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009620:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009624:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d104      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800962c:	f7fd fb72 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8009630:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009632:	f000 bcf6 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800963c:	d110      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963e:	f107 0308 	add.w	r3, r7, #8
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff f840 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800964c:	f000 bce9 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009650:	44020c00 	.word	0x44020c00
 8009654:	007a1200 	.word	0x007a1200
 8009658:	03d09000 	.word	0x03d09000
 800965c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009660:	4ba4      	ldr	r3, [pc, #656]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b02      	cmp	r3, #2
 800966a:	d10e      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009672:	d10a      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009674:	4b9f      	ldr	r3, [pc, #636]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	4a9e      	ldr	r2, [pc, #632]	@ (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009686:	f000 bccc 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800968e:	f000 bcc8 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8009692:	4b98      	ldr	r3, [pc, #608]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009694:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009698:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800969c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80096a4:	f7fd fb62 	bl	8006d6c <HAL_RCC_GetPCLK3Freq>
 80096a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80096aa:	f000 bcba 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096b4:	d108      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b6:	f107 0308 	add.w	r3, r7, #8
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff f804 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096c4:	f000 bcad 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80096c8:	4b8a      	ldr	r3, [pc, #552]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d10e      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096da:	d10a      	bne.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096dc:	4b85      	ldr	r3, [pc, #532]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	08db      	lsrs	r3, r3, #3
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	4a84      	ldr	r2, [pc, #528]	@ (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80096e8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ee:	f000 bc98 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096f6:	f000 bc94 	b.w	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096fa:	4b7e      	ldr	r3, [pc, #504]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80096fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009704:	633b      	str	r3, [r7, #48]	@ 0x30
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800970c:	d056      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009714:	f200 808b 	bhi.w	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800971e:	d03e      	beq.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8009720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009726:	f200 8082 	bhi.w	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009730:	d027      	beq.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009738:	d879      	bhi.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800973a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009740:	d017      	beq.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009748:	d871      	bhi.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009756:	d004      	beq.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8009758:	e069      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800975a:	f7fd fb07 	bl	8006d6c <HAL_RCC_GetPCLK3Freq>
 800975e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009760:	e068      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fe42 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009770:	e060      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009772:	f107 0308 	add.w	r3, r7, #8
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe ffa6 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009780:	e058      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009782:	4b5c      	ldr	r3, [pc, #368]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b02      	cmp	r3, #2
 800978e:	d103      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8009790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009794:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009796:	e04d      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800979c:	e04a      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800979e:	4b55      	ldr	r3, [pc, #340]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ac:	d103      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80097ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097b4:	e03e      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ba:	e03b      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097bc:	4b4d      	ldr	r3, [pc, #308]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097c2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097c8:	4b4a      	ldr	r3, [pc, #296]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d10c      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097da:	4b46      	ldr	r3, [pc, #280]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	08db      	lsrs	r3, r3, #3
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	4a44      	ldr	r2, [pc, #272]	@ (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80097e6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ec:	e01e      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ee:	4b41      	ldr	r3, [pc, #260]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097fa:	d106      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009802:	d102      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009804:	4b3d      	ldr	r3, [pc, #244]	@ (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
 8009808:	e010      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800980a:	4b3a      	ldr	r3, [pc, #232]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009816:	d106      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8009818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800981e:	d102      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009820:	4b37      	ldr	r3, [pc, #220]	@ (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8009822:	637b      	str	r3, [r7, #52]	@ 0x34
 8009824:	e002      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800982a:	e003      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800982c:	e002      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009832:	bf00      	nop
          }
        }
        break;
 8009834:	e3f5      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009836:	4b2f      	ldr	r3, [pc, #188]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8009838:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800983c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009840:	633b      	str	r3, [r7, #48]	@ 0x30
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009848:	d05f      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009850:	f200 8094 	bhi.w	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800985a:	d03f      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009862:	f200 808b 	bhi.w	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800986c:	d028      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009874:	f200 8082 	bhi.w	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800987e:	d017      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009886:	d879      	bhi.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009894:	d004      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8009896:	e071      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009898:	f7fd fa3c 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 800989c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800989e:	e070      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a0:	f107 0314 	add.w	r3, r7, #20
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fda3 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098ae:	e068      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe ff07 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098be:	e060      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80098c0:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80098c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d103      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80098ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098d4:	e055      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098da:	e052      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098dc:	4b05      	ldr	r3, [pc, #20]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80098de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ea:	d10b      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80098ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098f2:	e046      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80098f4:	44020c00 	.word	0x44020c00
 80098f8:	03d09000 	.word	0x03d09000
 80098fc:	003d0900 	.word	0x003d0900
 8009900:	007a1200 	.word	0x007a1200
              frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009908:	e03b      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800990a:	4bae      	ldr	r3, [pc, #696]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800990c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009910:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009914:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009916:	4bab      	ldr	r3, [pc, #684]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b02      	cmp	r3, #2
 8009920:	d10c      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8009922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009928:	4ba6      	ldr	r3, [pc, #664]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	4aa5      	ldr	r2, [pc, #660]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	e01e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800993c:	4ba1      	ldr	r3, [pc, #644]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d106      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800994a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009950:	d102      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009952:	4b9e      	ldr	r3, [pc, #632]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
 8009956:	e010      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009958:	4b9a      	ldr	r3, [pc, #616]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009964:	d106      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8009966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800996c:	d102      	bne.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800996e:	4b98      	ldr	r3, [pc, #608]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
 8009972:	e002      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009978:	e003      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800997a:	e002      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009980:	bf00      	nop
          }
        }
        break;
 8009982:	e34e      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009984:	4b8f      	ldr	r3, [pc, #572]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800998a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800998e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009990:	4b8c      	ldr	r3, [pc, #560]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999c:	d105      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 80099a4:	4b8a      	ldr	r3, [pc, #552]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80099a6:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80099a8:	e33b      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b0:	d107      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099b2:	f107 0320 	add.w	r3, r7, #32
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fbae 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c0:	e32f      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c8:	d107      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fd0e 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099d8:	e323      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099de:	e320      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80099e0:	4b78      	ldr	r3, [pc, #480]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80099e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d860      	bhi.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80099f2:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a0d 	.word	0x08009a0d
 80099fc:	08009a1d 	.word	0x08009a1d
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a43 	.word	0x08009a43
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a0c:	f107 0320 	add.w	r3, r7, #32
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe fb81 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a1a:	e04e      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a1c:	f107 0314 	add.w	r3, r7, #20
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fce5 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a2a:	e046      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe fe49 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a3a:	e03e      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009a3c:	4b65      	ldr	r3, [pc, #404]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009a3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a40:	e03b      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a42:	4b60      	ldr	r3, [pc, #384]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d10c      	bne.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8009a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d109      	bne.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a60:	4b58      	ldr	r3, [pc, #352]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	08db      	lsrs	r3, r3, #3
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	4a57      	ldr	r2, [pc, #348]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a72:	e01e      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a74:	4b53      	ldr	r3, [pc, #332]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a80:	d106      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8009a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a88:	d102      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a8a:	4b50      	ldr	r3, [pc, #320]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8e:	e010      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a90:	4b4c      	ldr	r3, [pc, #304]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a9c:	d106      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8009a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aa4:	d102      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aaa:	e002      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ab0:	e003      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8009ab2:	e002      	b.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ab8:	bf00      	nop
          }
        }
        break;
 8009aba:	e2b2      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009abc:	4b41      	ldr	r3, [pc, #260]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	f200 80a4 	bhi.w	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8009ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b5d 	.word	0x08009b5d
 8009adc:	08009c19 	.word	0x08009c19
 8009ae0:	08009c19 	.word	0x08009c19
 8009ae4:	08009c19 	.word	0x08009c19
 8009ae8:	08009c19 	.word	0x08009c19
 8009aec:	08009c19 	.word	0x08009c19
 8009af0:	08009c19 	.word	0x08009c19
 8009af4:	08009c19 	.word	0x08009c19
 8009af8:	08009b6d 	.word	0x08009b6d
 8009afc:	08009c19 	.word	0x08009c19
 8009b00:	08009c19 	.word	0x08009c19
 8009b04:	08009c19 	.word	0x08009c19
 8009b08:	08009c19 	.word	0x08009c19
 8009b0c:	08009c19 	.word	0x08009c19
 8009b10:	08009c19 	.word	0x08009c19
 8009b14:	08009c19 	.word	0x08009c19
 8009b18:	08009b7d 	.word	0x08009b7d
 8009b1c:	08009c19 	.word	0x08009c19
 8009b20:	08009c19 	.word	0x08009c19
 8009b24:	08009c19 	.word	0x08009c19
 8009b28:	08009c19 	.word	0x08009c19
 8009b2c:	08009c19 	.word	0x08009c19
 8009b30:	08009c19 	.word	0x08009c19
 8009b34:	08009c19 	.word	0x08009c19
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009c19 	.word	0x08009c19
 8009b40:	08009c19 	.word	0x08009c19
 8009b44:	08009c19 	.word	0x08009c19
 8009b48:	08009c19 	.word	0x08009c19
 8009b4c:	08009c19 	.word	0x08009c19
 8009b50:	08009c19 	.word	0x08009c19
 8009b54:	08009c19 	.word	0x08009c19
 8009b58:	08009b93 	.word	0x08009b93
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b5c:	f107 0320 	add.w	r3, r7, #32
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe fad9 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b6a:	e058      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fc3d 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b7a:	e050      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b7c:	f107 0308 	add.w	r3, r7, #8
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fda1 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b8a:	e048      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009b8c:	4b11      	ldr	r3, [pc, #68]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b90:	e045      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b92:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d116      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d113      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bb0:	4b04      	ldr	r3, [pc, #16]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	08db      	lsrs	r3, r3, #3
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	4a03      	ldr	r2, [pc, #12]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc2:	e028      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8009bc4:	44020c00 	.word	0x44020c00
 8009bc8:	03d09000 	.word	0x03d09000
 8009bcc:	003d0900 	.word	0x003d0900
 8009bd0:	007a1200 	.word	0x007a1200
 8009bd4:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bd8:	4b95      	ldr	r3, [pc, #596]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be4:	d106      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8009be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bec:	d102      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bee:	4b91      	ldr	r3, [pc, #580]	@ (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf2:	e010      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bf4:	4b8e      	ldr	r3, [pc, #568]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c00:	d106      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c08:	d102      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c0e:	e002      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c14:	e003      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009c16:	e002      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c1c:	bf00      	nop
          }
        }
        break;
 8009c1e:	e200      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009c20:	4b83      	ldr	r3, [pc, #524]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c26:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c32:	d031      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c3a:	d866      	bhi.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c40:	d027      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c46:	d860      	bhi.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	2b80      	cmp	r3, #128	@ 0x80
 8009c4c:	d019      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	2b80      	cmp	r3, #128	@ 0x80
 8009c52:	d85a      	bhi.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	2b40      	cmp	r3, #64	@ 0x40
 8009c5e:	d008      	beq.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8009c60:	e053      	b.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c62:	f107 0320 	add.w	r3, r7, #32
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fa56 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c70:	e04e      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c72:	f107 0314 	add.w	r3, r7, #20
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fbba 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c80:	e046      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c82:	f107 0308 	add.w	r3, r7, #8
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fd1e 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c90:	e03e      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c92:	4b6a      	ldr	r3, [pc, #424]	@ (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8009c94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c96:	e03b      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c98:	4b65      	ldr	r3, [pc, #404]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c9e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ca4:	4b62      	ldr	r3, [pc, #392]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d10c      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	08db      	lsrs	r3, r3, #3
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	4a5f      	ldr	r2, [pc, #380]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc8:	e01e      	b.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cca:	4b59      	ldr	r3, [pc, #356]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd6:	d106      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cde:	d102      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ce0:	4b54      	ldr	r3, [pc, #336]	@ (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce4:	e010      	b.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ce6:	4b52      	ldr	r3, [pc, #328]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf2:	d106      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cfa:	d102      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	e002      	b.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d06:	e003      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8009d08:	e002      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d0e:	bf00      	nop
          }
        }
        break;
 8009d10:	e187      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009d12:	4b47      	ldr	r3, [pc, #284]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d18:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009d1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7fd f80c 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 8009d28:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009d2a:	e17a      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009d2c:	4b40      	ldr	r3, [pc, #256]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d38:	d10b      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d40:	d107      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fb52 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d50:	e045      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009d52:	4b37      	ldr	r3, [pc, #220]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d5e:	d10b      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d66:	d107      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fcab 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d76:	e032      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009d78:	4b2d      	ldr	r3, [pc, #180]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d10d      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d8a:	d109      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d8c:	4b28      	ldr	r3, [pc, #160]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	4a2a      	ldr	r2, [pc, #168]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	e01e      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009da0:	4b23      	ldr	r3, [pc, #140]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dac:	d106      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009db4:	d102      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8009db6:	4b1f      	ldr	r3, [pc, #124]	@ (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dba:	e010      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc8:	d106      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009dd0:	d102      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8009dd2:	4b19      	ldr	r3, [pc, #100]	@ (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd6:	e002      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ddc:	e121      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009dde:	e120      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009de0:	4b13      	ldr	r3, [pc, #76]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009de2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d861      	bhi.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009df2:	a201      	add	r2, pc, #4	@ (adr r2, 8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e11 	.word	0x08009e11
 8009e00:	08009e21 	.word	0x08009e21
 8009e04:	08009e45 	.word	0x08009e45

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009e08:	f7fc ff68 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8009e0c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009e0e:	e055      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e10:	f107 0320 	add.w	r3, r7, #32
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe f97f 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e1e:	e04d      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fae3 	bl	80083f0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e2e:	e045      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009e30:	44020c00 	.word	0x44020c00
 8009e34:	003d0900 	.word	0x003d0900
 8009e38:	007a1200 	.word	0x007a1200
 8009e3c:	00bb8000 	.word	0x00bb8000
 8009e40:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e44:	4b79      	ldr	r3, [pc, #484]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e50:	4b76      	ldr	r3, [pc, #472]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d10c      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e62:	4b72      	ldr	r3, [pc, #456]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	08db      	lsrs	r3, r3, #3
 8009e68:	f003 0303 	and.w	r3, r3, #3
 8009e6c:	4a70      	ldr	r2, [pc, #448]	@ (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8009e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e74:	e01e      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e76:	4b6d      	ldr	r3, [pc, #436]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e82:	d106      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e8a:	d102      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e8c:	4b69      	ldr	r3, [pc, #420]	@ (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8009e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e90:	e010      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e92:	4b66      	ldr	r3, [pc, #408]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e9e:	d106      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8009ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ea6:	d102      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ea8:	4b63      	ldr	r3, [pc, #396]	@ (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eac:	e002      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009eb2:	e003      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009eb4:	e002      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009eba:	bf00      	nop
          }
        }
        break;
 8009ebc:	e0b1      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ec4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ec8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009eca:	4b58      	ldr	r3, [pc, #352]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d106      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d103      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8009ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee4:	e01f      	b.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009ee6:	4b51      	ldr	r3, [pc, #324]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ef4:	d106      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	2b40      	cmp	r3, #64	@ 0x40
 8009efa:	d103      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8009efc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f02:	e010      	b.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009f04:	4b49      	ldr	r3, [pc, #292]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f10:	d106      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2b80      	cmp	r3, #128	@ 0x80
 8009f16:	d103      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009f18:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f1e:	e002      	b.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009f24:	e07d      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009f26:	e07c      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009f28:	4b40      	ldr	r3, [pc, #256]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f32:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009f34:	4b3d      	ldr	r3, [pc, #244]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f40:	d105      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009f48:	4b3c      	ldr	r3, [pc, #240]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4c:	e031      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009f4e:	4b37      	ldr	r3, [pc, #220]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f5a:	d10a      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d107      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f62:	f107 0320 	add.w	r3, r7, #32
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe f8d6 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f70:	e01f      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009f72:	4b2e      	ldr	r3, [pc, #184]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d106      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8009f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d103      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8c:	e011      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009f8e:	4b27      	ldr	r3, [pc, #156]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f9c:	d106      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	2b30      	cmp	r3, #48	@ 0x30
 8009fa2:	d103      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009fa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009faa:	e002      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009fb0:	e037      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009fb2:	e036      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009fba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009fbe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d107      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fc6:	f107 0320 	add.w	r3, r7, #32
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe f8a4 	bl	8008118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009fd4:	e025      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009fd6:	4b15      	ldr	r3, [pc, #84]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe2:	d10a      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	d107      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fea:	f107 0308 	add.w	r3, r7, #8
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fb6a 	bl	80086c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff8:	e00f      	b.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a006:	d105      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	2b30      	cmp	r3, #48	@ 0x30
 800a00c:	d102      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800a00e:	4b0b      	ldr	r3, [pc, #44]	@ (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
 800a012:	e002      	b.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a018:	e003      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800a01a:	e002      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800a01c:	2300      	movs	r3, #0
 800a01e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a020:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a024:	4618      	mov	r0, r3
 800a026:	373c      	adds	r7, #60	@ 0x3c
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}
 800a02c:	44020c00 	.word	0x44020c00
 800a030:	03d09000 	.word	0x03d09000
 800a034:	003d0900 	.word	0x003d0900
 800a038:	007a1200 	.word	0x007a1200
 800a03c:	02dc6c00 	.word	0x02dc6c00

0800a040 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a048:	4b48      	ldr	r3, [pc, #288]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a47      	ldr	r2, [pc, #284]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a04e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a052:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a054:	f7f9 fa1a 	bl	800348c <HAL_GetTick>
 800a058:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a05a:	e008      	b.n	800a06e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a05c:	f7f9 fa16 	bl	800348c <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e07a      	b.n	800a164 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a06e:	4b3f      	ldr	r3, [pc, #252]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f0      	bne.n	800a05c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a07a:	4b3c      	ldr	r3, [pc, #240]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6811      	ldr	r1, [r2, #0]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6852      	ldr	r2, [r2, #4]
 800a08e:	0212      	lsls	r2, r2, #8
 800a090:	430a      	orrs	r2, r1
 800a092:	4936      	ldr	r1, [pc, #216]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a094:	4313      	orrs	r3, r2
 800a096:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	025b      	lsls	r3, r3, #9
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	041b      	lsls	r3, r3, #16
 800a0b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	061b      	lsls	r3, r3, #24
 800a0c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0c8:	4928      	ldr	r1, [pc, #160]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a0ce:	4b27      	ldr	r3, [pc, #156]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d2:	f023 020c 	bic.w	r2, r3, #12
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	4924      	ldr	r1, [pc, #144]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a0e0:	4b22      	ldr	r3, [pc, #136]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e4:	f023 0220 	bic.w	r2, r3, #32
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	491f      	ldr	r1, [pc, #124]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a0f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fa:	491c      	ldr	r1, [pc, #112]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a100:	4b1a      	ldr	r3, [pc, #104]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	4a19      	ldr	r2, [pc, #100]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a106:	f023 0310 	bic.w	r3, r3, #16
 800a10a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a10c:	4b17      	ldr	r3, [pc, #92]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a114:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	6a12      	ldr	r2, [r2, #32]
 800a11c:	00d2      	lsls	r2, r2, #3
 800a11e:	4913      	ldr	r1, [pc, #76]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a120:	4313      	orrs	r3, r2
 800a122:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a124:	4b11      	ldr	r3, [pc, #68]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a128:	4a10      	ldr	r2, [pc, #64]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a12a:	f043 0310 	orr.w	r3, r3, #16
 800a12e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a130:	4b0e      	ldr	r3, [pc, #56]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a0d      	ldr	r2, [pc, #52]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a136:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a13a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a13c:	f7f9 f9a6 	bl	800348c <HAL_GetTick>
 800a140:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a142:	e008      	b.n	800a156 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a144:	f7f9 f9a2 	bl	800348c <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d901      	bls.n	800a156 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e006      	b.n	800a164 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a156:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <RCCEx_PLL2_Config+0x12c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f0      	beq.n	800a144 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a162:	2300      	movs	r3, #0

}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	44020c00 	.word	0x44020c00

0800a170 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a178:	4b48      	ldr	r3, [pc, #288]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a47      	ldr	r2, [pc, #284]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a17e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a182:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a184:	f7f9 f982 	bl	800348c <HAL_GetTick>
 800a188:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a18a:	e008      	b.n	800a19e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a18c:	f7f9 f97e 	bl	800348c <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	2b02      	cmp	r3, #2
 800a198:	d901      	bls.n	800a19e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e07a      	b.n	800a294 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a19e:	4b3f      	ldr	r3, [pc, #252]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f0      	bne.n	800a18c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a1aa:	4b3c      	ldr	r3, [pc, #240]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1b2:	f023 0303 	bic.w	r3, r3, #3
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6811      	ldr	r1, [r2, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6852      	ldr	r2, [r2, #4]
 800a1be:	0212      	lsls	r2, r2, #8
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	4936      	ldr	r1, [pc, #216]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	630b      	str	r3, [r1, #48]	@ 0x30
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	025b      	lsls	r3, r3, #9
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	061b      	lsls	r3, r3, #24
 800a1f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1f8:	4928      	ldr	r1, [pc, #160]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1fe:	4b27      	ldr	r3, [pc, #156]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a202:	f023 020c 	bic.w	r2, r3, #12
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	4924      	ldr	r1, [pc, #144]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a210:	4b22      	ldr	r3, [pc, #136]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a214:	f023 0220 	bic.w	r2, r3, #32
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	491f      	ldr	r1, [pc, #124]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a222:	4b1e      	ldr	r3, [pc, #120]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	491c      	ldr	r1, [pc, #112]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a230:	4b1a      	ldr	r3, [pc, #104]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a234:	4a19      	ldr	r2, [pc, #100]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a236:	f023 0310 	bic.w	r3, r3, #16
 800a23a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a23c:	4b17      	ldr	r3, [pc, #92]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a23e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a240:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a244:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	6a12      	ldr	r2, [r2, #32]
 800a24c:	00d2      	lsls	r2, r2, #3
 800a24e:	4913      	ldr	r1, [pc, #76]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a250:	4313      	orrs	r3, r2
 800a252:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a254:	4b11      	ldr	r3, [pc, #68]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a258:	4a10      	ldr	r2, [pc, #64]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a25a:	f043 0310 	orr.w	r3, r3, #16
 800a25e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a260:	4b0e      	ldr	r3, [pc, #56]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a0d      	ldr	r2, [pc, #52]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a26a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a26c:	f7f9 f90e 	bl	800348c <HAL_GetTick>
 800a270:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a272:	e008      	b.n	800a286 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a274:	f7f9 f90a 	bl	800348c <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d901      	bls.n	800a286 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e006      	b.n	800a294 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a286:	4b05      	ldr	r3, [pc, #20]	@ (800a29c <RCCEx_PLL3_Config+0x12c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0f0      	beq.n	800a274 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	44020c00 	.word	0x44020c00

0800a2a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e049      	b.n	800a346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7f8 fd8a 	bl	8002de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f000 ff0e 	bl	800b100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	d001      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e07c      	b.n	800a462 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f042 0201 	orr.w	r2, r2, #1
 800a37e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a3a      	ldr	r2, [pc, #232]	@ (800a470 <HAL_TIM_Base_Start_IT+0x120>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d04a      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a39      	ldr	r2, [pc, #228]	@ (800a474 <HAL_TIM_Base_Start_IT+0x124>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d045      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a39c:	d040      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3a6:	d03b      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a32      	ldr	r2, [pc, #200]	@ (800a478 <HAL_TIM_Base_Start_IT+0x128>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d036      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a31      	ldr	r2, [pc, #196]	@ (800a47c <HAL_TIM_Base_Start_IT+0x12c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d031      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a480 <HAL_TIM_Base_Start_IT+0x130>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d02c      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a2e      	ldr	r2, [pc, #184]	@ (800a484 <HAL_TIM_Base_Start_IT+0x134>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d027      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a2c      	ldr	r2, [pc, #176]	@ (800a488 <HAL_TIM_Base_Start_IT+0x138>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d022      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a2b      	ldr	r2, [pc, #172]	@ (800a48c <HAL_TIM_Base_Start_IT+0x13c>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d01d      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a29      	ldr	r2, [pc, #164]	@ (800a490 <HAL_TIM_Base_Start_IT+0x140>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d018      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a28      	ldr	r2, [pc, #160]	@ (800a494 <HAL_TIM_Base_Start_IT+0x144>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d013      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a26      	ldr	r2, [pc, #152]	@ (800a498 <HAL_TIM_Base_Start_IT+0x148>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d00e      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a25      	ldr	r2, [pc, #148]	@ (800a49c <HAL_TIM_Base_Start_IT+0x14c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d009      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a23      	ldr	r2, [pc, #140]	@ (800a4a0 <HAL_TIM_Base_Start_IT+0x150>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d004      	beq.n	800a420 <HAL_TIM_Base_Start_IT+0xd0>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a22      	ldr	r2, [pc, #136]	@ (800a4a4 <HAL_TIM_Base_Start_IT+0x154>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d115      	bne.n	800a44c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	4b20      	ldr	r3, [pc, #128]	@ (800a4a8 <HAL_TIM_Base_Start_IT+0x158>)
 800a428:	4013      	ands	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b06      	cmp	r3, #6
 800a430:	d015      	beq.n	800a45e <HAL_TIM_Base_Start_IT+0x10e>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a438:	d011      	beq.n	800a45e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0201 	orr.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a44a:	e008      	b.n	800a45e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0201 	orr.w	r2, r2, #1
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	e000      	b.n	800a460 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	40012c00 	.word	0x40012c00
 800a474:	50012c00 	.word	0x50012c00
 800a478:	40000400 	.word	0x40000400
 800a47c:	50000400 	.word	0x50000400
 800a480:	40000800 	.word	0x40000800
 800a484:	50000800 	.word	0x50000800
 800a488:	40000c00 	.word	0x40000c00
 800a48c:	50000c00 	.word	0x50000c00
 800a490:	40013400 	.word	0x40013400
 800a494:	50013400 	.word	0x50013400
 800a498:	40001800 	.word	0x40001800
 800a49c:	50001800 	.word	0x50001800
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	50014000 	.word	0x50014000
 800a4a8:	00010007 	.word	0x00010007

0800a4ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e049      	b.n	800a552 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d106      	bne.n	800a4d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f841 	bl	800a55a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f000 fe08 	bl	800b100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e049      	b.n	800a614 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f841 	bl	800a61c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2202      	movs	r2, #2
 800a59e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f000 fda7 	bl	800b100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <HAL_TIM_PWM_Start+0x24>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b01      	cmp	r3, #1
 800a64a:	bf14      	ite	ne
 800a64c:	2301      	movne	r3, #1
 800a64e:	2300      	moveq	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	e03c      	b.n	800a6ce <HAL_TIM_PWM_Start+0x9e>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b04      	cmp	r3, #4
 800a658:	d109      	bne.n	800a66e <HAL_TIM_PWM_Start+0x3e>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	bf14      	ite	ne
 800a666:	2301      	movne	r3, #1
 800a668:	2300      	moveq	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	e02f      	b.n	800a6ce <HAL_TIM_PWM_Start+0x9e>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b08      	cmp	r3, #8
 800a672:	d109      	bne.n	800a688 <HAL_TIM_PWM_Start+0x58>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	bf14      	ite	ne
 800a680:	2301      	movne	r3, #1
 800a682:	2300      	moveq	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	e022      	b.n	800a6ce <HAL_TIM_PWM_Start+0x9e>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b0c      	cmp	r3, #12
 800a68c:	d109      	bne.n	800a6a2 <HAL_TIM_PWM_Start+0x72>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b01      	cmp	r3, #1
 800a698:	bf14      	ite	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	2300      	moveq	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	e015      	b.n	800a6ce <HAL_TIM_PWM_Start+0x9e>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d109      	bne.n	800a6bc <HAL_TIM_PWM_Start+0x8c>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	bf14      	ite	ne
 800a6b4:	2301      	movne	r3, #1
 800a6b6:	2300      	moveq	r3, #0
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	e008      	b.n	800a6ce <HAL_TIM_PWM_Start+0x9e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	bf14      	ite	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e0ce      	b.n	800a874 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <HAL_TIM_PWM_Start+0xb6>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6e4:	e023      	b.n	800a72e <HAL_TIM_PWM_Start+0xfe>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d104      	bne.n	800a6f6 <HAL_TIM_PWM_Start+0xc6>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6f4:	e01b      	b.n	800a72e <HAL_TIM_PWM_Start+0xfe>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d104      	bne.n	800a706 <HAL_TIM_PWM_Start+0xd6>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2202      	movs	r2, #2
 800a700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a704:	e013      	b.n	800a72e <HAL_TIM_PWM_Start+0xfe>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b0c      	cmp	r3, #12
 800a70a:	d104      	bne.n	800a716 <HAL_TIM_PWM_Start+0xe6>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a714:	e00b      	b.n	800a72e <HAL_TIM_PWM_Start+0xfe>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d104      	bne.n	800a726 <HAL_TIM_PWM_Start+0xf6>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a724:	e003      	b.n	800a72e <HAL_TIM_PWM_Start+0xfe>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2202      	movs	r2, #2
 800a72a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2201      	movs	r2, #1
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f001 f99e 	bl	800ba78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a4e      	ldr	r2, [pc, #312]	@ (800a87c <HAL_TIM_PWM_Start+0x24c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d018      	beq.n	800a778 <HAL_TIM_PWM_Start+0x148>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a4d      	ldr	r2, [pc, #308]	@ (800a880 <HAL_TIM_PWM_Start+0x250>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <HAL_TIM_PWM_Start+0x148>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a4b      	ldr	r2, [pc, #300]	@ (800a884 <HAL_TIM_PWM_Start+0x254>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00e      	beq.n	800a778 <HAL_TIM_PWM_Start+0x148>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a4a      	ldr	r2, [pc, #296]	@ (800a888 <HAL_TIM_PWM_Start+0x258>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d009      	beq.n	800a778 <HAL_TIM_PWM_Start+0x148>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a48      	ldr	r2, [pc, #288]	@ (800a88c <HAL_TIM_PWM_Start+0x25c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <HAL_TIM_PWM_Start+0x148>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a47      	ldr	r2, [pc, #284]	@ (800a890 <HAL_TIM_PWM_Start+0x260>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d101      	bne.n	800a77c <HAL_TIM_PWM_Start+0x14c>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <HAL_TIM_PWM_Start+0x14e>
 800a77c:	2300      	movs	r3, #0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a790:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a39      	ldr	r2, [pc, #228]	@ (800a87c <HAL_TIM_PWM_Start+0x24c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d04a      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a37      	ldr	r2, [pc, #220]	@ (800a880 <HAL_TIM_PWM_Start+0x250>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d045      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ae:	d040      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7b8:	d03b      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a35      	ldr	r2, [pc, #212]	@ (800a894 <HAL_TIM_PWM_Start+0x264>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d036      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a33      	ldr	r2, [pc, #204]	@ (800a898 <HAL_TIM_PWM_Start+0x268>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d031      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a32      	ldr	r2, [pc, #200]	@ (800a89c <HAL_TIM_PWM_Start+0x26c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d02c      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a30      	ldr	r2, [pc, #192]	@ (800a8a0 <HAL_TIM_PWM_Start+0x270>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d027      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a2f      	ldr	r2, [pc, #188]	@ (800a8a4 <HAL_TIM_PWM_Start+0x274>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d022      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a8a8 <HAL_TIM_PWM_Start+0x278>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d01d      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a22      	ldr	r2, [pc, #136]	@ (800a884 <HAL_TIM_PWM_Start+0x254>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d018      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a20      	ldr	r2, [pc, #128]	@ (800a888 <HAL_TIM_PWM_Start+0x258>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d013      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a27      	ldr	r2, [pc, #156]	@ (800a8ac <HAL_TIM_PWM_Start+0x27c>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d00e      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a25      	ldr	r2, [pc, #148]	@ (800a8b0 <HAL_TIM_PWM_Start+0x280>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d009      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1a      	ldr	r2, [pc, #104]	@ (800a88c <HAL_TIM_PWM_Start+0x25c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d004      	beq.n	800a832 <HAL_TIM_PWM_Start+0x202>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a18      	ldr	r2, [pc, #96]	@ (800a890 <HAL_TIM_PWM_Start+0x260>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d115      	bne.n	800a85e <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b4 <HAL_TIM_PWM_Start+0x284>)
 800a83a:	4013      	ands	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b06      	cmp	r3, #6
 800a842:	d015      	beq.n	800a870 <HAL_TIM_PWM_Start+0x240>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a84a:	d011      	beq.n	800a870 <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85c:	e008      	b.n	800a870 <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f042 0201 	orr.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e000      	b.n	800a872 <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a870:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	40012c00 	.word	0x40012c00
 800a880:	50012c00 	.word	0x50012c00
 800a884:	40013400 	.word	0x40013400
 800a888:	50013400 	.word	0x50013400
 800a88c:	40014000 	.word	0x40014000
 800a890:	50014000 	.word	0x50014000
 800a894:	40000400 	.word	0x40000400
 800a898:	50000400 	.word	0x50000400
 800a89c:	40000800 	.word	0x40000800
 800a8a0:	50000800 	.word	0x50000800
 800a8a4:	40000c00 	.word	0x40000c00
 800a8a8:	50000c00 	.word	0x50000c00
 800a8ac:	40001800 	.word	0x40001800
 800a8b0:	50001800 	.word	0x50001800
 800a8b4:	00010007 	.word	0x00010007

0800a8b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d020      	beq.n	800a91c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01b      	beq.n	800a91c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f06f 0202 	mvn.w	r2, #2
 800a8ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fbde 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800a908:	e005      	b.n	800a916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fbd0 	bl	800b0b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fbe1 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d020      	beq.n	800a968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01b      	beq.n	800a968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0204 	mvn.w	r2, #4
 800a938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fbb8 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800a954:	e005      	b.n	800a962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fbaa 	bl	800b0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fbbb 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f003 0308 	and.w	r3, r3, #8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d020      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01b      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0208 	mvn.w	r2, #8
 800a984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2204      	movs	r2, #4
 800a98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fb92 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fb84 	bl	800b0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fb95 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f003 0310 	and.w	r3, r3, #16
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d020      	beq.n	800aa00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01b      	beq.n	800aa00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0210 	mvn.w	r2, #16
 800a9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2208      	movs	r2, #8
 800a9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fb6c 	bl	800b0c4 <HAL_TIM_IC_CaptureCallback>
 800a9ec:	e005      	b.n	800a9fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fb5e 	bl	800b0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fb6f 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00c      	beq.n	800aa24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f06f 0201 	mvn.w	r2, #1
 800aa1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f7 fd5c 	bl	80024dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00c      	beq.n	800aa52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d007      	beq.n	800aa52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 f9ad 	bl	800bdac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00c      	beq.n	800aa76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aa6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f9a5 	bl	800bdc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00c      	beq.n	800aa9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fb29 	bl	800b0ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00c      	beq.n	800aabe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f06f 0220 	mvn.w	r2, #32
 800aab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f001 f96d 	bl	800bd98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00c      	beq.n	800aae2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d007      	beq.n	800aae2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800aada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f979 	bl	800bdd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00c      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aafe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 f971 	bl	800bde8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00c      	beq.n	800ab2a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ab22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f969 	bl	800bdfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00c      	beq.n	800ab4e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d007      	beq.n	800ab4e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ab46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 f961 	bl	800be10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab4e:	bf00      	nop
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e066      	b.n	800ac44 <HAL_TIM_OC_ConfigChannel+0xec>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b14      	cmp	r3, #20
 800ab82:	d857      	bhi.n	800ac34 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ab84:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <HAL_TIM_OC_ConfigChannel+0x34>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800ac35 	.word	0x0800ac35
 800ab94:	0800ac35 	.word	0x0800ac35
 800ab98:	0800ac35 	.word	0x0800ac35
 800ab9c:	0800abef 	.word	0x0800abef
 800aba0:	0800ac35 	.word	0x0800ac35
 800aba4:	0800ac35 	.word	0x0800ac35
 800aba8:	0800ac35 	.word	0x0800ac35
 800abac:	0800abfd 	.word	0x0800abfd
 800abb0:	0800ac35 	.word	0x0800ac35
 800abb4:	0800ac35 	.word	0x0800ac35
 800abb8:	0800ac35 	.word	0x0800ac35
 800abbc:	0800ac0b 	.word	0x0800ac0b
 800abc0:	0800ac35 	.word	0x0800ac35
 800abc4:	0800ac35 	.word	0x0800ac35
 800abc8:	0800ac35 	.word	0x0800ac35
 800abcc:	0800ac19 	.word	0x0800ac19
 800abd0:	0800ac35 	.word	0x0800ac35
 800abd4:	0800ac35 	.word	0x0800ac35
 800abd8:	0800ac35 	.word	0x0800ac35
 800abdc:	0800ac27 	.word	0x0800ac27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fb74 	bl	800b2d4 <TIM_OC1_SetConfig>
      break;
 800abec:	e025      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fc07 	bl	800b408 <TIM_OC2_SetConfig>
      break;
 800abfa:	e01e      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fc98 	bl	800b538 <TIM_OC3_SetConfig>
      break;
 800ac08:	e017      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fd27 	bl	800b664 <TIM_OC4_SetConfig>
      break;
 800ac16:	e010      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fdb8 	bl	800b794 <TIM_OC5_SetConfig>
      break;
 800ac24:	e009      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fe1b 	bl	800b868 <TIM_OC6_SetConfig>
      break;
 800ac32:	e002      	b.n	800ac3a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	75fb      	strb	r3, [r7, #23]
      break;
 800ac38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3718      	adds	r7, #24
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d101      	bne.n	800ac6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e0ff      	b.n	800ae6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b14      	cmp	r3, #20
 800ac76:	f200 80f0 	bhi.w	800ae5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800ae5b 	.word	0x0800ae5b
 800ac88:	0800ae5b 	.word	0x0800ae5b
 800ac8c:	0800ae5b 	.word	0x0800ae5b
 800ac90:	0800ad15 	.word	0x0800ad15
 800ac94:	0800ae5b 	.word	0x0800ae5b
 800ac98:	0800ae5b 	.word	0x0800ae5b
 800ac9c:	0800ae5b 	.word	0x0800ae5b
 800aca0:	0800ad57 	.word	0x0800ad57
 800aca4:	0800ae5b 	.word	0x0800ae5b
 800aca8:	0800ae5b 	.word	0x0800ae5b
 800acac:	0800ae5b 	.word	0x0800ae5b
 800acb0:	0800ad97 	.word	0x0800ad97
 800acb4:	0800ae5b 	.word	0x0800ae5b
 800acb8:	0800ae5b 	.word	0x0800ae5b
 800acbc:	0800ae5b 	.word	0x0800ae5b
 800acc0:	0800add9 	.word	0x0800add9
 800acc4:	0800ae5b 	.word	0x0800ae5b
 800acc8:	0800ae5b 	.word	0x0800ae5b
 800accc:	0800ae5b 	.word	0x0800ae5b
 800acd0:	0800ae19 	.word	0x0800ae19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fafa 	bl	800b2d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	699a      	ldr	r2, [r3, #24]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f042 0208 	orr.w	r2, r2, #8
 800acee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0204 	bic.w	r2, r2, #4
 800acfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6999      	ldr	r1, [r3, #24]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	691a      	ldr	r2, [r3, #16]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	619a      	str	r2, [r3, #24]
      break;
 800ad12:	e0a5      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fb74 	bl	800b408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	699a      	ldr	r2, [r3, #24]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	699a      	ldr	r2, [r3, #24]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6999      	ldr	r1, [r3, #24]
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	021a      	lsls	r2, r3, #8
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	619a      	str	r2, [r3, #24]
      break;
 800ad54:	e084      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fbeb 	bl	800b538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	69da      	ldr	r2, [r3, #28]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0208 	orr.w	r2, r2, #8
 800ad70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	69da      	ldr	r2, [r3, #28]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0204 	bic.w	r2, r2, #4
 800ad80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69d9      	ldr	r1, [r3, #28]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	691a      	ldr	r2, [r3, #16]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	61da      	str	r2, [r3, #28]
      break;
 800ad94:	e064      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68b9      	ldr	r1, [r7, #8]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fc61 	bl	800b664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	69da      	ldr	r2, [r3, #28]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69d9      	ldr	r1, [r3, #28]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	021a      	lsls	r2, r3, #8
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	61da      	str	r2, [r3, #28]
      break;
 800add6:	e043      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fcd8 	bl	800b794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0208 	orr.w	r2, r2, #8
 800adf2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0204 	bic.w	r2, r2, #4
 800ae02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	691a      	ldr	r2, [r3, #16]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ae16:	e023      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fd22 	bl	800b868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	021a      	lsls	r2, r3, #8
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ae58:	e002      	b.n	800ae60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop

0800ae74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <HAL_TIM_ConfigClockSource+0x1c>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e0fe      	b.n	800b08e <HAL_TIM_ConfigClockSource+0x21a>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800aeae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aeb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aecc:	f000 80c9 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800aed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aed4:	f200 80ce 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800aed8:	4a6f      	ldr	r2, [pc, #444]	@ (800b098 <HAL_TIM_ConfigClockSource+0x224>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	f000 80c1 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800aee0:	4a6d      	ldr	r2, [pc, #436]	@ (800b098 <HAL_TIM_ConfigClockSource+0x224>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	f200 80c6 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800aee8:	4a6c      	ldr	r2, [pc, #432]	@ (800b09c <HAL_TIM_ConfigClockSource+0x228>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	f000 80b9 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800aef0:	4a6a      	ldr	r2, [pc, #424]	@ (800b09c <HAL_TIM_ConfigClockSource+0x228>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	f200 80be 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800aef8:	4a69      	ldr	r2, [pc, #420]	@ (800b0a0 <HAL_TIM_ConfigClockSource+0x22c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	f000 80b1 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af00:	4a67      	ldr	r2, [pc, #412]	@ (800b0a0 <HAL_TIM_ConfigClockSource+0x22c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	f200 80b6 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af08:	4a66      	ldr	r2, [pc, #408]	@ (800b0a4 <HAL_TIM_ConfigClockSource+0x230>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	f000 80a9 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af10:	4a64      	ldr	r2, [pc, #400]	@ (800b0a4 <HAL_TIM_ConfigClockSource+0x230>)
 800af12:	4293      	cmp	r3, r2
 800af14:	f200 80ae 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af18:	4a63      	ldr	r2, [pc, #396]	@ (800b0a8 <HAL_TIM_ConfigClockSource+0x234>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	f000 80a1 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af20:	4a61      	ldr	r2, [pc, #388]	@ (800b0a8 <HAL_TIM_ConfigClockSource+0x234>)
 800af22:	4293      	cmp	r3, r2
 800af24:	f200 80a6 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af28:	4a60      	ldr	r2, [pc, #384]	@ (800b0ac <HAL_TIM_ConfigClockSource+0x238>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	f000 8099 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af30:	4a5e      	ldr	r2, [pc, #376]	@ (800b0ac <HAL_TIM_ConfigClockSource+0x238>)
 800af32:	4293      	cmp	r3, r2
 800af34:	f200 809e 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800af3c:	f000 8091 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800af44:	f200 8096 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af4c:	f000 8089 	beq.w	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af54:	f200 808e 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af5c:	d03e      	beq.n	800afdc <HAL_TIM_ConfigClockSource+0x168>
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af62:	f200 8087 	bhi.w	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6a:	f000 8086 	beq.w	800b07a <HAL_TIM_ConfigClockSource+0x206>
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af72:	d87f      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af74:	2b70      	cmp	r3, #112	@ 0x70
 800af76:	d01a      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x13a>
 800af78:	2b70      	cmp	r3, #112	@ 0x70
 800af7a:	d87b      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af7c:	2b60      	cmp	r3, #96	@ 0x60
 800af7e:	d050      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x1ae>
 800af80:	2b60      	cmp	r3, #96	@ 0x60
 800af82:	d877      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af84:	2b50      	cmp	r3, #80	@ 0x50
 800af86:	d03c      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x18e>
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d873      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af8c:	2b40      	cmp	r3, #64	@ 0x40
 800af8e:	d058      	beq.n	800b042 <HAL_TIM_ConfigClockSource+0x1ce>
 800af90:	2b40      	cmp	r3, #64	@ 0x40
 800af92:	d86f      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af94:	2b30      	cmp	r3, #48	@ 0x30
 800af96:	d064      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800af98:	2b30      	cmp	r3, #48	@ 0x30
 800af9a:	d86b      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d060      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	d867      	bhi.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05c      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800afa8:	2b10      	cmp	r3, #16
 800afaa:	d05a      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0x1ee>
 800afac:	e062      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afbe:	f000 fd3b 	bl	800ba38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800afd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	609a      	str	r2, [r3, #8]
      break;
 800afda:	e04f      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afec:	f000 fd24 	bl	800ba38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800affe:	609a      	str	r2, [r3, #8]
      break;
 800b000:	e03c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b00e:	461a      	mov	r2, r3
 800b010:	f000 fc96 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2150      	movs	r1, #80	@ 0x50
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fcef 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b020:	e02c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b02e:	461a      	mov	r2, r3
 800b030:	f000 fcb5 	bl	800b99e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2160      	movs	r1, #96	@ 0x60
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fcdf 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b040:	e01c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b04e:	461a      	mov	r2, r3
 800b050:	f000 fc76 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2140      	movs	r1, #64	@ 0x40
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fccf 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b060:	e00c      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f000 fcc6 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b072:	e003      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	73fb      	strb	r3, [r7, #15]
      break;
 800b078:	e000      	b.n	800b07c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800b07a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	00100070 	.word	0x00100070
 800b09c:	00100060 	.word	0x00100060
 800b0a0:	00100050 	.word	0x00100050
 800b0a4:	00100040 	.word	0x00100040
 800b0a8:	00100030 	.word	0x00100030
 800b0ac:	00100020 	.word	0x00100020

0800b0b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a62      	ldr	r2, [pc, #392]	@ (800b29c <TIM_Base_SetConfig+0x19c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d02b      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a61      	ldr	r2, [pc, #388]	@ (800b2a0 <TIM_Base_SetConfig+0x1a0>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d027      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b126:	d023      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b12e:	d01f      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a5c      	ldr	r2, [pc, #368]	@ (800b2a4 <TIM_Base_SetConfig+0x1a4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d01b      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a5b      	ldr	r2, [pc, #364]	@ (800b2a8 <TIM_Base_SetConfig+0x1a8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d017      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a5a      	ldr	r2, [pc, #360]	@ (800b2ac <TIM_Base_SetConfig+0x1ac>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d013      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a59      	ldr	r2, [pc, #356]	@ (800b2b0 <TIM_Base_SetConfig+0x1b0>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a58      	ldr	r2, [pc, #352]	@ (800b2b4 <TIM_Base_SetConfig+0x1b4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00b      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a57      	ldr	r2, [pc, #348]	@ (800b2b8 <TIM_Base_SetConfig+0x1b8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a56      	ldr	r2, [pc, #344]	@ (800b2bc <TIM_Base_SetConfig+0x1bc>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_Base_SetConfig+0x70>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a55      	ldr	r2, [pc, #340]	@ (800b2c0 <TIM_Base_SetConfig+0x1c0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d108      	bne.n	800b182 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a45      	ldr	r2, [pc, #276]	@ (800b29c <TIM_Base_SetConfig+0x19c>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d03b      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a44      	ldr	r2, [pc, #272]	@ (800b2a0 <TIM_Base_SetConfig+0x1a0>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d037      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b198:	d033      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1a0:	d02f      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a4 <TIM_Base_SetConfig+0x1a4>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d02b      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a3e      	ldr	r2, [pc, #248]	@ (800b2a8 <TIM_Base_SetConfig+0x1a8>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d027      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a3d      	ldr	r2, [pc, #244]	@ (800b2ac <TIM_Base_SetConfig+0x1ac>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d023      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b0 <TIM_Base_SetConfig+0x1b0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d01f      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a3b      	ldr	r2, [pc, #236]	@ (800b2b4 <TIM_Base_SetConfig+0x1b4>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d01b      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a3a      	ldr	r2, [pc, #232]	@ (800b2b8 <TIM_Base_SetConfig+0x1b8>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d017      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a39      	ldr	r2, [pc, #228]	@ (800b2bc <TIM_Base_SetConfig+0x1bc>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d013      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a38      	ldr	r2, [pc, #224]	@ (800b2c0 <TIM_Base_SetConfig+0x1c0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00f      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a37      	ldr	r2, [pc, #220]	@ (800b2c4 <TIM_Base_SetConfig+0x1c4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d00b      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a36      	ldr	r2, [pc, #216]	@ (800b2c8 <TIM_Base_SetConfig+0x1c8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d007      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a35      	ldr	r2, [pc, #212]	@ (800b2cc <TIM_Base_SetConfig+0x1cc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d003      	beq.n	800b202 <TIM_Base_SetConfig+0x102>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a34      	ldr	r2, [pc, #208]	@ (800b2d0 <TIM_Base_SetConfig+0x1d0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d108      	bne.n	800b214 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4313      	orrs	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	689a      	ldr	r2, [r3, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <TIM_Base_SetConfig+0x19c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d013      	beq.n	800b268 <TIM_Base_SetConfig+0x168>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a17      	ldr	r2, [pc, #92]	@ (800b2a0 <TIM_Base_SetConfig+0x1a0>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00f      	beq.n	800b268 <TIM_Base_SetConfig+0x168>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a1c      	ldr	r2, [pc, #112]	@ (800b2bc <TIM_Base_SetConfig+0x1bc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d00b      	beq.n	800b268 <TIM_Base_SetConfig+0x168>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a1b      	ldr	r2, [pc, #108]	@ (800b2c0 <TIM_Base_SetConfig+0x1c0>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d007      	beq.n	800b268 <TIM_Base_SetConfig+0x168>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a1c      	ldr	r2, [pc, #112]	@ (800b2cc <TIM_Base_SetConfig+0x1cc>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d003      	beq.n	800b268 <TIM_Base_SetConfig+0x168>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a1b      	ldr	r2, [pc, #108]	@ (800b2d0 <TIM_Base_SetConfig+0x1d0>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d103      	bne.n	800b270 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d105      	bne.n	800b28e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f023 0201 	bic.w	r2, r3, #1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	611a      	str	r2, [r3, #16]
  }
}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	40012c00 	.word	0x40012c00
 800b2a0:	50012c00 	.word	0x50012c00
 800b2a4:	40000400 	.word	0x40000400
 800b2a8:	50000400 	.word	0x50000400
 800b2ac:	40000800 	.word	0x40000800
 800b2b0:	50000800 	.word	0x50000800
 800b2b4:	40000c00 	.word	0x40000c00
 800b2b8:	50000c00 	.word	0x50000c00
 800b2bc:	40013400 	.word	0x40013400
 800b2c0:	50013400 	.word	0x50013400
 800b2c4:	40001800 	.word	0x40001800
 800b2c8:	50001800 	.word	0x50001800
 800b2cc:	40014000 	.word	0x40014000
 800b2d0:	50014000 	.word	0x50014000

0800b2d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	f023 0201 	bic.w	r2, r3, #1
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f023 0302 	bic.w	r3, r3, #2
 800b320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4313      	orrs	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a30      	ldr	r2, [pc, #192]	@ (800b3f0 <TIM_OC1_SetConfig+0x11c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d013      	beq.n	800b35c <TIM_OC1_SetConfig+0x88>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a2f      	ldr	r2, [pc, #188]	@ (800b3f4 <TIM_OC1_SetConfig+0x120>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00f      	beq.n	800b35c <TIM_OC1_SetConfig+0x88>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f8 <TIM_OC1_SetConfig+0x124>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00b      	beq.n	800b35c <TIM_OC1_SetConfig+0x88>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a2d      	ldr	r2, [pc, #180]	@ (800b3fc <TIM_OC1_SetConfig+0x128>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d007      	beq.n	800b35c <TIM_OC1_SetConfig+0x88>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a2c      	ldr	r2, [pc, #176]	@ (800b400 <TIM_OC1_SetConfig+0x12c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d003      	beq.n	800b35c <TIM_OC1_SetConfig+0x88>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a2b      	ldr	r2, [pc, #172]	@ (800b404 <TIM_OC1_SetConfig+0x130>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d10c      	bne.n	800b376 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f023 0308 	bic.w	r3, r3, #8
 800b362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f023 0304 	bic.w	r3, r3, #4
 800b374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f0 <TIM_OC1_SetConfig+0x11c>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d013      	beq.n	800b3a6 <TIM_OC1_SetConfig+0xd2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f4 <TIM_OC1_SetConfig+0x120>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d00f      	beq.n	800b3a6 <TIM_OC1_SetConfig+0xd2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f8 <TIM_OC1_SetConfig+0x124>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00b      	beq.n	800b3a6 <TIM_OC1_SetConfig+0xd2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a1a      	ldr	r2, [pc, #104]	@ (800b3fc <TIM_OC1_SetConfig+0x128>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d007      	beq.n	800b3a6 <TIM_OC1_SetConfig+0xd2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a19      	ldr	r2, [pc, #100]	@ (800b400 <TIM_OC1_SetConfig+0x12c>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d003      	beq.n	800b3a6 <TIM_OC1_SetConfig+0xd2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a18      	ldr	r2, [pc, #96]	@ (800b404 <TIM_OC1_SetConfig+0x130>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d111      	bne.n	800b3ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	621a      	str	r2, [r3, #32]
}
 800b3e4:	bf00      	nop
 800b3e6:	371c      	adds	r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	40012c00 	.word	0x40012c00
 800b3f4:	50012c00 	.word	0x50012c00
 800b3f8:	40013400 	.word	0x40013400
 800b3fc:	50013400 	.word	0x50013400
 800b400:	40014000 	.word	0x40014000
 800b404:	50014000 	.word	0x50014000

0800b408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	f023 0210 	bic.w	r2, r3, #16
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	021b      	lsls	r3, r3, #8
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f023 0320 	bic.w	r3, r3, #32
 800b456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	011b      	lsls	r3, r3, #4
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a2e      	ldr	r2, [pc, #184]	@ (800b520 <TIM_OC2_SetConfig+0x118>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d00b      	beq.n	800b484 <TIM_OC2_SetConfig+0x7c>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a2d      	ldr	r2, [pc, #180]	@ (800b524 <TIM_OC2_SetConfig+0x11c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d007      	beq.n	800b484 <TIM_OC2_SetConfig+0x7c>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a2c      	ldr	r2, [pc, #176]	@ (800b528 <TIM_OC2_SetConfig+0x120>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d003      	beq.n	800b484 <TIM_OC2_SetConfig+0x7c>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a2b      	ldr	r2, [pc, #172]	@ (800b52c <TIM_OC2_SetConfig+0x124>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d10d      	bne.n	800b4a0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b48a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	4313      	orrs	r3, r2
 800b496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b49e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b520 <TIM_OC2_SetConfig+0x118>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d013      	beq.n	800b4d0 <TIM_OC2_SetConfig+0xc8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b524 <TIM_OC2_SetConfig+0x11c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00f      	beq.n	800b4d0 <TIM_OC2_SetConfig+0xc8>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b528 <TIM_OC2_SetConfig+0x120>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00b      	beq.n	800b4d0 <TIM_OC2_SetConfig+0xc8>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b52c <TIM_OC2_SetConfig+0x124>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d007      	beq.n	800b4d0 <TIM_OC2_SetConfig+0xc8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b530 <TIM_OC2_SetConfig+0x128>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_OC2_SetConfig+0xc8>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a1a      	ldr	r2, [pc, #104]	@ (800b534 <TIM_OC2_SetConfig+0x12c>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d113      	bne.n	800b4f8 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	621a      	str	r2, [r3, #32]
}
 800b512:	bf00      	nop
 800b514:	371c      	adds	r7, #28
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40012c00 	.word	0x40012c00
 800b524:	50012c00 	.word	0x50012c00
 800b528:	40013400 	.word	0x40013400
 800b52c:	50013400 	.word	0x50013400
 800b530:	40014000 	.word	0x40014000
 800b534:	50014000 	.word	0x50014000

0800b538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a2d      	ldr	r2, [pc, #180]	@ (800b64c <TIM_OC3_SetConfig+0x114>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00b      	beq.n	800b5b2 <TIM_OC3_SetConfig+0x7a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a2c      	ldr	r2, [pc, #176]	@ (800b650 <TIM_OC3_SetConfig+0x118>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d007      	beq.n	800b5b2 <TIM_OC3_SetConfig+0x7a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a2b      	ldr	r2, [pc, #172]	@ (800b654 <TIM_OC3_SetConfig+0x11c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d003      	beq.n	800b5b2 <TIM_OC3_SetConfig+0x7a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a2a      	ldr	r2, [pc, #168]	@ (800b658 <TIM_OC3_SetConfig+0x120>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d10d      	bne.n	800b5ce <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a1e      	ldr	r2, [pc, #120]	@ (800b64c <TIM_OC3_SetConfig+0x114>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d013      	beq.n	800b5fe <TIM_OC3_SetConfig+0xc6>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b650 <TIM_OC3_SetConfig+0x118>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00f      	beq.n	800b5fe <TIM_OC3_SetConfig+0xc6>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b654 <TIM_OC3_SetConfig+0x11c>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d00b      	beq.n	800b5fe <TIM_OC3_SetConfig+0xc6>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b658 <TIM_OC3_SetConfig+0x120>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d007      	beq.n	800b5fe <TIM_OC3_SetConfig+0xc6>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b65c <TIM_OC3_SetConfig+0x124>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d003      	beq.n	800b5fe <TIM_OC3_SetConfig+0xc6>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a19      	ldr	r2, [pc, #100]	@ (800b660 <TIM_OC3_SetConfig+0x128>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d113      	bne.n	800b626 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b60c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4313      	orrs	r3, r2
 800b624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	621a      	str	r2, [r3, #32]
}
 800b640:	bf00      	nop
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	40012c00 	.word	0x40012c00
 800b650:	50012c00 	.word	0x50012c00
 800b654:	40013400 	.word	0x40013400
 800b658:	50013400 	.word	0x50013400
 800b65c:	40014000 	.word	0x40014000
 800b660:	50014000 	.word	0x50014000

0800b664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a1b      	ldr	r3, [r3, #32]
 800b678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	031b      	lsls	r3, r3, #12
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b77c <TIM_OC4_SetConfig+0x118>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00b      	beq.n	800b6e0 <TIM_OC4_SetConfig+0x7c>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a2d      	ldr	r2, [pc, #180]	@ (800b780 <TIM_OC4_SetConfig+0x11c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d007      	beq.n	800b6e0 <TIM_OC4_SetConfig+0x7c>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a2c      	ldr	r2, [pc, #176]	@ (800b784 <TIM_OC4_SetConfig+0x120>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_OC4_SetConfig+0x7c>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a2b      	ldr	r2, [pc, #172]	@ (800b788 <TIM_OC4_SetConfig+0x124>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10d      	bne.n	800b6fc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	031b      	lsls	r3, r3, #12
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b77c <TIM_OC4_SetConfig+0x118>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d013      	beq.n	800b72c <TIM_OC4_SetConfig+0xc8>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a1e      	ldr	r2, [pc, #120]	@ (800b780 <TIM_OC4_SetConfig+0x11c>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d00f      	beq.n	800b72c <TIM_OC4_SetConfig+0xc8>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a1d      	ldr	r2, [pc, #116]	@ (800b784 <TIM_OC4_SetConfig+0x120>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d00b      	beq.n	800b72c <TIM_OC4_SetConfig+0xc8>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a1c      	ldr	r2, [pc, #112]	@ (800b788 <TIM_OC4_SetConfig+0x124>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d007      	beq.n	800b72c <TIM_OC4_SetConfig+0xc8>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a1b      	ldr	r2, [pc, #108]	@ (800b78c <TIM_OC4_SetConfig+0x128>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d003      	beq.n	800b72c <TIM_OC4_SetConfig+0xc8>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a1a      	ldr	r2, [pc, #104]	@ (800b790 <TIM_OC4_SetConfig+0x12c>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d113      	bne.n	800b754 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b732:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b73a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	019b      	lsls	r3, r3, #6
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4313      	orrs	r3, r2
 800b746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	019b      	lsls	r3, r3, #6
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	40012c00 	.word	0x40012c00
 800b780:	50012c00 	.word	0x50012c00
 800b784:	40013400 	.word	0x40013400
 800b788:	50013400 	.word	0x50013400
 800b78c:	40014000 	.word	0x40014000
 800b790:	50014000 	.word	0x50014000

0800b794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b7d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a19      	ldr	r2, [pc, #100]	@ (800b850 <TIM_OC5_SetConfig+0xbc>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d013      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a18      	ldr	r2, [pc, #96]	@ (800b854 <TIM_OC5_SetConfig+0xc0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00f      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a17      	ldr	r2, [pc, #92]	@ (800b858 <TIM_OC5_SetConfig+0xc4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d00b      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a16      	ldr	r2, [pc, #88]	@ (800b85c <TIM_OC5_SetConfig+0xc8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d007      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a15      	ldr	r2, [pc, #84]	@ (800b860 <TIM_OC5_SetConfig+0xcc>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d003      	beq.n	800b816 <TIM_OC5_SetConfig+0x82>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a14      	ldr	r2, [pc, #80]	@ (800b864 <TIM_OC5_SetConfig+0xd0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d109      	bne.n	800b82a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b81c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	4313      	orrs	r3, r2
 800b828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	621a      	str	r2, [r3, #32]
}
 800b844:	bf00      	nop
 800b846:	371c      	adds	r7, #28
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	40012c00 	.word	0x40012c00
 800b854:	50012c00 	.word	0x50012c00
 800b858:	40013400 	.word	0x40013400
 800b85c:	50013400 	.word	0x50013400
 800b860:	40014000 	.word	0x40014000
 800b864:	50014000 	.word	0x50014000

0800b868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a1b      	ldr	r3, [r3, #32]
 800b87c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	051b      	lsls	r3, r3, #20
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1a      	ldr	r2, [pc, #104]	@ (800b928 <TIM_OC6_SetConfig+0xc0>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	@ (800b92c <TIM_OC6_SetConfig+0xc4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a18      	ldr	r2, [pc, #96]	@ (800b930 <TIM_OC6_SetConfig+0xc8>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a17      	ldr	r2, [pc, #92]	@ (800b934 <TIM_OC6_SetConfig+0xcc>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a16      	ldr	r2, [pc, #88]	@ (800b938 <TIM_OC6_SetConfig+0xd0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC6_SetConfig+0x84>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	@ (800b93c <TIM_OC6_SetConfig+0xd4>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d109      	bne.n	800b900 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	029b      	lsls	r3, r3, #10
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	621a      	str	r2, [r3, #32]
}
 800b91a:	bf00      	nop
 800b91c:	371c      	adds	r7, #28
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	50012c00 	.word	0x50012c00
 800b930:	40013400 	.word	0x40013400
 800b934:	50013400 	.word	0x50013400
 800b938:	40014000 	.word	0x40014000
 800b93c:	50014000 	.word	0x50014000

0800b940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	f023 0201 	bic.w	r2, r3, #1
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	4313      	orrs	r3, r2
 800b974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f023 030a 	bic.w	r3, r3, #10
 800b97c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4313      	orrs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	f023 0210 	bic.w	r2, r3, #16
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b9c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	031b      	lsls	r3, r3, #12
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b9da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	621a      	str	r2, [r3, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ba14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	f043 0307 	orr.w	r3, r3, #7
 800ba24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	609a      	str	r2, [r3, #8]
}
 800ba2c:	bf00      	nop
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	021a      	lsls	r2, r3, #8
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	609a      	str	r2, [r3, #8]
}
 800ba6c:	bf00      	nop
 800ba6e:	371c      	adds	r7, #28
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f003 031f 	and.w	r3, r3, #31
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	43db      	mvns	r3, r3
 800ba9a:	401a      	ands	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6a1a      	ldr	r2, [r3, #32]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 031f 	and.w	r3, r3, #31
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	fa01 f303 	lsl.w	r3, r1, r3
 800bab0:	431a      	orrs	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
	...

0800bac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d101      	bne.n	800badc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bad8:	2302      	movs	r3, #2
 800bada:	e0a1      	b.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2202      	movs	r2, #2
 800bae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a4a      	ldr	r2, [pc, #296]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d00e      	beq.n	800bb24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a49      	ldr	r2, [pc, #292]	@ (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d009      	beq.n	800bb24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a47      	ldr	r2, [pc, #284]	@ (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d004      	beq.n	800bb24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a46      	ldr	r2, [pc, #280]	@ (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d108      	bne.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bb2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bb3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a34      	ldr	r2, [pc, #208]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d04a      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a33      	ldr	r2, [pc, #204]	@ (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d045      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb70:	d040      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb7a:	d03b      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a2e      	ldr	r2, [pc, #184]	@ (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d036      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a2d      	ldr	r2, [pc, #180]	@ (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d031      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a2b      	ldr	r2, [pc, #172]	@ (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d02c      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bc48 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d027      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a28      	ldr	r2, [pc, #160]	@ (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d022      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a27      	ldr	r2, [pc, #156]	@ (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d01d      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	@ (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d018      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a1c      	ldr	r2, [pc, #112]	@ (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d013      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a20      	ldr	r2, [pc, #128]	@ (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00e      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a1f      	ldr	r2, [pc, #124]	@ (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d009      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d004      	beq.n	800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a1c      	ldr	r2, [pc, #112]	@ (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d10c      	bne.n	800bc0e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	40012c00 	.word	0x40012c00
 800bc30:	50012c00 	.word	0x50012c00
 800bc34:	40013400 	.word	0x40013400
 800bc38:	50013400 	.word	0x50013400
 800bc3c:	40000400 	.word	0x40000400
 800bc40:	50000400 	.word	0x50000400
 800bc44:	40000800 	.word	0x40000800
 800bc48:	50000800 	.word	0x50000800
 800bc4c:	40000c00 	.word	0x40000c00
 800bc50:	50000c00 	.word	0x50000c00
 800bc54:	40001800 	.word	0x40001800
 800bc58:	50001800 	.word	0x50001800
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	50014000 	.word	0x50014000

0800bc64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d101      	bne.n	800bc80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e07d      	b.n	800bd7c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce6:	4313      	orrs	r3, r2
 800bce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	041b      	lsls	r3, r3, #16
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a1e      	ldr	r2, [pc, #120]	@ (800bd88 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00e      	beq.n	800bd30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a1d      	ldr	r2, [pc, #116]	@ (800bd8c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d009      	beq.n	800bd30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a1b      	ldr	r2, [pc, #108]	@ (800bd90 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d004      	beq.n	800bd30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a1a      	ldr	r2, [pc, #104]	@ (800bd94 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d11c      	bne.n	800bd6a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3a:	051b      	lsls	r3, r3, #20
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	40012c00 	.word	0x40012c00
 800bd8c:	50012c00 	.word	0x50012c00
 800bd90:	40013400 	.word	0x40013400
 800bd94:	50013400 	.word	0x50013400

0800bd98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e042      	b.n	800bebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d106      	bne.n	800be4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7f7 f93b 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2224      	movs	r2, #36	@ 0x24
 800be52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0201 	bic.w	r2, r2, #1
 800be64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fdde 	bl	800ca30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fc2d 	bl	800c6d4 <UART_SetConfig>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d101      	bne.n	800be84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e01b      	b.n	800bebc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689a      	ldr	r2, [r3, #8]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f042 0201 	orr.w	r2, r2, #1
 800beb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fe5d 	bl	800cb74 <UART_CheckIdleState>
 800beba:	4603      	mov	r3, r0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	@ 0x28
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beda:	2b20      	cmp	r3, #32
 800bedc:	f040 808b 	bne.w	800bff6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <HAL_UART_Transmit+0x28>
 800bee6:	88fb      	ldrh	r3, [r7, #6]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e083      	b.n	800bff8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800befa:	2b80      	cmp	r3, #128	@ 0x80
 800befc:	d107      	bne.n	800bf0e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf0c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2221      	movs	r2, #33	@ 0x21
 800bf1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf1e:	f7f7 fab5 	bl	800348c <HAL_GetTick>
 800bf22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	88fa      	ldrh	r2, [r7, #6]
 800bf28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	88fa      	ldrh	r2, [r7, #6]
 800bf30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf3c:	d108      	bne.n	800bf50 <HAL_UART_Transmit+0x8c>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d104      	bne.n	800bf50 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	61bb      	str	r3, [r7, #24]
 800bf4e:	e003      	b.n	800bf58 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf58:	e030      	b.n	800bfbc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2200      	movs	r2, #0
 800bf62:	2180      	movs	r1, #128	@ 0x80
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 feaf 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e03d      	b.n	800bff8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10b      	bne.n	800bf9a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	3302      	adds	r3, #2
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	e007      	b.n	800bfaa <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1c8      	bne.n	800bf5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	2140      	movs	r1, #64	@ 0x40
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fe78 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e006      	b.n	800bff8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	e000      	b.n	800bff8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800bff6:	2302      	movs	r3, #2
  }
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3720      	adds	r7, #32
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08a      	sub	sp, #40	@ 0x28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	4613      	mov	r3, r2
 800c00c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c014:	2b20      	cmp	r3, #32
 800c016:	d13c      	bne.n	800c092 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <HAL_UART_Receive_DMA+0x24>
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e035      	b.n	800c094 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1a      	ldr	r2, [pc, #104]	@ (800c09c <HAL_UART_Receive_DMA+0x9c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d024      	beq.n	800c082 <HAL_UART_Receive_DMA+0x82>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a18      	ldr	r2, [pc, #96]	@ (800c0a0 <HAL_UART_Receive_DMA+0xa0>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d01f      	beq.n	800c082 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d018      	beq.n	800c082 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	613b      	str	r3, [r7, #16]
   return(result);
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c064:	627b      	str	r3, [r7, #36]	@ 0x24
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	461a      	mov	r2, r3
 800c06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06e:	623b      	str	r3, [r7, #32]
 800c070:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c072:	69f9      	ldr	r1, [r7, #28]
 800c074:	6a3a      	ldr	r2, [r7, #32]
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e6      	bne.n	800c050 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c082:	88fb      	ldrh	r3, [r7, #6]
 800c084:	461a      	mov	r2, r3
 800c086:	68b9      	ldr	r1, [r7, #8]
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 fe8b 	bl	800cda4 <UART_Start_Receive_DMA>
 800c08e:	4603      	mov	r3, r0
 800c090:	e000      	b.n	800c094 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c092:	2302      	movs	r3, #2
  }
}
 800c094:	4618      	mov	r0, r3
 800c096:	3728      	adds	r7, #40	@ 0x28
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	44002400 	.word	0x44002400
 800c0a0:	54002400 	.word	0x54002400

0800c0a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b0ae      	sub	sp, #184	@ 0xb8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c0ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800c0d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d11b      	bne.n	800c118 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c0e4:	f003 0320 	and.w	r3, r3, #32
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d015      	beq.n	800c118 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c0f0:	f003 0320 	and.w	r3, r3, #32
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d105      	bne.n	800c104 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d009      	beq.n	800c118 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 82ac 	beq.w	800c666 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	4798      	blx	r3
      }
      return;
 800c116:	e2a6      	b.n	800c666 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 80fd 	beq.w	800c31c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c122:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c126:	4b7a      	ldr	r3, [pc, #488]	@ (800c310 <HAL_UART_IRQHandler+0x26c>)
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c12e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c132:	4b78      	ldr	r3, [pc, #480]	@ (800c314 <HAL_UART_IRQHandler+0x270>)
 800c134:	4013      	ands	r3, r2
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 80f0 	beq.w	800c31c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c13c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	d011      	beq.n	800c16c <HAL_UART_IRQHandler+0xc8>
 800c148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c14c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2201      	movs	r2, #1
 800c15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c162:	f043 0201 	orr.w	r2, r3, #1
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d011      	beq.n	800c19c <HAL_UART_IRQHandler+0xf8>
 800c178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2202      	movs	r2, #2
 800c18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c192:	f043 0204 	orr.w	r2, r3, #4
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c19c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c1a0:	f003 0304 	and.w	r3, r3, #4
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_UART_IRQHandler+0x128>
 800c1a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2204      	movs	r2, #4
 800c1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c2:	f043 0202 	orr.w	r2, r3, #2
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d017      	beq.n	800c208 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c1dc:	f003 0320 	and.w	r3, r3, #32
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c1e8:	4b49      	ldr	r3, [pc, #292]	@ (800c310 <HAL_UART_IRQHandler+0x26c>)
 800c1ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1fe:	f043 0208 	orr.w	r2, r3, #8
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c210:	2b00      	cmp	r3, #0
 800c212:	d012      	beq.n	800c23a <HAL_UART_IRQHandler+0x196>
 800c214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00c      	beq.n	800c23a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c230:	f043 0220 	orr.w	r2, r3, #32
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 8212 	beq.w	800c66a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c24a:	f003 0320 	and.w	r3, r3, #32
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d013      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d105      	bne.n	800c26a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c28e:	2b40      	cmp	r3, #64	@ 0x40
 800c290:	d005      	beq.n	800c29e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c296:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d02e      	beq.n	800c2fc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 feb9 	bl	800d016 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ae:	2b40      	cmp	r3, #64	@ 0x40
 800c2b0:	d120      	bne.n	800c2f4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d017      	beq.n	800c2ec <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2c2:	4a15      	ldr	r2, [pc, #84]	@ (800c318 <HAL_UART_IRQHandler+0x274>)
 800c2c4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7f7 fca5 	bl	8003c1c <HAL_DMA_Abort_IT>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d019      	beq.n	800c30c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ea:	e00f      	b.n	800c30c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f9db 	bl	800c6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f2:	e00b      	b.n	800c30c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f9d7 	bl	800c6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2fa:	e007      	b.n	800c30c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f9d3 	bl	800c6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c30a:	e1ae      	b.n	800c66a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c30c:	bf00      	nop
    return;
 800c30e:	e1ac      	b.n	800c66a <HAL_UART_IRQHandler+0x5c6>
 800c310:	10000001 	.word	0x10000001
 800c314:	04000120 	.word	0x04000120
 800c318:	0800d293 	.word	0x0800d293

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c320:	2b01      	cmp	r3, #1
 800c322:	f040 8142 	bne.w	800c5aa <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c32a:	f003 0310 	and.w	r3, r3, #16
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 813b 	beq.w	800c5aa <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c338:	f003 0310 	and.w	r3, r3, #16
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 8134 	beq.w	800c5aa <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2210      	movs	r2, #16
 800c348:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	f040 80aa 	bne.w	800c4ae <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c364:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800c368:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 8084 	beq.w	800c47a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c378:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d27c      	bcs.n	800c47a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c386:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c392:	2b81      	cmp	r3, #129	@ 0x81
 800c394:	d060      	beq.n	800c458 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c3a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3bc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c3c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c3ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e2      	bne.n	800c396 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3308      	adds	r3, #8
 800c3d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3da:	e853 3f00 	ldrex	r3, [r3]
 800c3de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c3e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3e2:	f023 0301 	bic.w	r3, r3, #1
 800c3e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c3f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e3      	bne.n	800c3d0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2220      	movs	r2, #32
 800c40c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c426:	f023 0310 	bic.w	r3, r3, #16
 800c42a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c43a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c43e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e4      	bne.n	800c416 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c452:	4618      	mov	r0, r3
 800c454:	f7f7 fb66 	bl	8003b24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	b29b      	uxth	r3, r3
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f922 	bl	800c6bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c478:	e0f9      	b.n	800c66e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c480:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800c484:	429a      	cmp	r2, r3
 800c486:	f040 80f2 	bne.w	800c66e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c492:	2b81      	cmp	r3, #129	@ 0x81
 800c494:	f040 80eb 	bne.w	800c66e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2202      	movs	r2, #2
 800c49c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f908 	bl	800c6bc <HAL_UARTEx_RxEventCallback>
      return;
 800c4ac:	e0df      	b.n	800c66e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80d1 	beq.w	800c672 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800c4d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80cc 	beq.w	800c672 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	e853 3f00 	ldrex	r3, [r3]
 800c4e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c504:	e841 2300 	strex	r3, r2, [r1]
 800c508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e4      	bne.n	800c4da <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3308      	adds	r3, #8
 800c516:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	623b      	str	r3, [r7, #32]
   return(result);
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c526:	f023 0301 	bic.w	r3, r3, #1
 800c52a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c538:	633a      	str	r2, [r7, #48]	@ 0x30
 800c53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e1      	bne.n	800c510 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2220      	movs	r2, #32
 800c550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f023 0310 	bic.w	r3, r3, #16
 800c574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	461a      	mov	r2, r3
 800c57e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c582:	61fb      	str	r3, [r7, #28]
 800c584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	69b9      	ldr	r1, [r7, #24]
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	e841 2300 	strex	r3, r2, [r1]
 800c58e:	617b      	str	r3, [r7, #20]
   return(result);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1e4      	bne.n	800c560 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2202      	movs	r2, #2
 800c59a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c59c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f88a 	bl	800c6bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5a8:	e063      	b.n	800c672 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00e      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x530>
 800c5b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d008      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c5ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fe9d 	bl	800d30c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5d2:	e051      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d014      	beq.n	800c60a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d105      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d03a      	beq.n	800c676 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
    }
    return;
 800c608:	e035      	b.n	800c676 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c60a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c612:	2b00      	cmp	r3, #0
 800c614:	d009      	beq.n	800c62a <HAL_UART_IRQHandler+0x586>
 800c616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fe47 	bl	800d2b6 <UART_EndTransmit_IT>
    return;
 800c628:	e026      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c62a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c62e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <HAL_UART_IRQHandler+0x5a6>
 800c636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c63a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fe76 	bl	800d334 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c648:	e016      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c64a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c64e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d010      	beq.n	800c678 <HAL_UART_IRQHandler+0x5d4>
 800c656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	da0c      	bge.n	800c678 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fe5e 	bl	800d320 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c664:	e008      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c666:	bf00      	nop
 800c668:	e006      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
    return;
 800c66a:	bf00      	nop
 800c66c:	e004      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c66e:	bf00      	nop
 800c670:	e002      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
      return;
 800c672:	bf00      	nop
 800c674:	e000      	b.n	800c678 <HAL_UART_IRQHandler+0x5d4>
    return;
 800c676:	bf00      	nop
  }
}
 800c678:	37b8      	adds	r7, #184	@ 0xb8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop

0800c680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6d8:	b094      	sub	sp, #80	@ 0x50
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	4b83      	ldr	r3, [pc, #524]	@ (800c8f8 <UART_SetConfig+0x224>)
 800c6ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	69db      	ldr	r3, [r3, #28]
 800c700:	4313      	orrs	r3, r2
 800c702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	497c      	ldr	r1, [pc, #496]	@ (800c8fc <UART_SetConfig+0x228>)
 800c70c:	4019      	ands	r1, r3
 800c70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c714:	430b      	orrs	r3, r1
 800c716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	68d9      	ldr	r1, [r3, #12]
 800c726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	ea40 0301 	orr.w	r3, r0, r1
 800c72e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b6f      	ldr	r3, [pc, #444]	@ (800c8f8 <UART_SetConfig+0x224>)
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d009      	beq.n	800c754 <UART_SetConfig+0x80>
 800c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	4b6e      	ldr	r3, [pc, #440]	@ (800c900 <UART_SetConfig+0x22c>)
 800c746:	429a      	cmp	r2, r3
 800c748:	d004      	beq.n	800c754 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74c:	6a1a      	ldr	r2, [r3, #32]
 800c74e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c750:	4313      	orrs	r3, r2
 800c752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c75e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c768:	430b      	orrs	r3, r1
 800c76a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c772:	f023 000f 	bic.w	r0, r3, #15
 800c776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c778:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	ea40 0301 	orr.w	r3, r0, r1
 800c782:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	4b5e      	ldr	r3, [pc, #376]	@ (800c904 <UART_SetConfig+0x230>)
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d102      	bne.n	800c794 <UART_SetConfig+0xc0>
 800c78e:	2301      	movs	r3, #1
 800c790:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c792:	e032      	b.n	800c7fa <UART_SetConfig+0x126>
 800c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	4b5b      	ldr	r3, [pc, #364]	@ (800c908 <UART_SetConfig+0x234>)
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d102      	bne.n	800c7a4 <UART_SetConfig+0xd0>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7a2:	e02a      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	4b58      	ldr	r3, [pc, #352]	@ (800c90c <UART_SetConfig+0x238>)
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d102      	bne.n	800c7b4 <UART_SetConfig+0xe0>
 800c7ae:	2304      	movs	r3, #4
 800c7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7b2:	e022      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	4b55      	ldr	r3, [pc, #340]	@ (800c910 <UART_SetConfig+0x23c>)
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d102      	bne.n	800c7c4 <UART_SetConfig+0xf0>
 800c7be:	2308      	movs	r3, #8
 800c7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7c2:	e01a      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	4b52      	ldr	r3, [pc, #328]	@ (800c914 <UART_SetConfig+0x240>)
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d102      	bne.n	800c7d4 <UART_SetConfig+0x100>
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7d2:	e012      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	4b4f      	ldr	r3, [pc, #316]	@ (800c918 <UART_SetConfig+0x244>)
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d102      	bne.n	800c7e4 <UART_SetConfig+0x110>
 800c7de:	2320      	movs	r3, #32
 800c7e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7e2:	e00a      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	4b43      	ldr	r3, [pc, #268]	@ (800c8f8 <UART_SetConfig+0x224>)
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d103      	bne.n	800c7f6 <UART_SetConfig+0x122>
 800c7ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7f4:	e001      	b.n	800c7fa <UART_SetConfig+0x126>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f8 <UART_SetConfig+0x224>)
 800c800:	429a      	cmp	r2, r3
 800c802:	d005      	beq.n	800c810 <UART_SetConfig+0x13c>
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	4b3d      	ldr	r3, [pc, #244]	@ (800c900 <UART_SetConfig+0x22c>)
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f040 8088 	bne.w	800c920 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c812:	2200      	movs	r2, #0
 800c814:	623b      	str	r3, [r7, #32]
 800c816:	627a      	str	r2, [r7, #36]	@ 0x24
 800c818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c81c:	f7fc f8c0 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c820:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 80eb 	beq.w	800ca00 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82e:	4a3b      	ldr	r2, [pc, #236]	@ (800c91c <UART_SetConfig+0x248>)
 800c830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c834:	461a      	mov	r2, r3
 800c836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c838:	fbb3 f3f2 	udiv	r3, r3, r2
 800c83c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	4413      	add	r3, r2
 800c848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d305      	bcc.n	800c85a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c856:	429a      	cmp	r2, r3
 800c858:	d903      	bls.n	800c862 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c860:	e048      	b.n	800c8f4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c864:	2200      	movs	r2, #0
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	61fa      	str	r2, [r7, #28]
 800c86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86e:	4a2b      	ldr	r2, [pc, #172]	@ (800c91c <UART_SetConfig+0x248>)
 800c870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c874:	b29b      	uxth	r3, r3
 800c876:	2200      	movs	r2, #0
 800c878:	613b      	str	r3, [r7, #16]
 800c87a:	617a      	str	r2, [r7, #20]
 800c87c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c884:	f7f4 f9d6 	bl	8000c34 <__aeabi_uldivmod>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4610      	mov	r0, r2
 800c88e:	4619      	mov	r1, r3
 800c890:	f04f 0200 	mov.w	r2, #0
 800c894:	f04f 0300 	mov.w	r3, #0
 800c898:	020b      	lsls	r3, r1, #8
 800c89a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c89e:	0202      	lsls	r2, r0, #8
 800c8a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8a2:	6849      	ldr	r1, [r1, #4]
 800c8a4:	0849      	lsrs	r1, r1, #1
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	eb12 0804 	adds.w	r8, r2, r4
 800c8b0:	eb43 0905 	adc.w	r9, r3, r5
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	60fa      	str	r2, [r7, #12]
 800c8be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f4 f9b5 	bl	8000c34 <__aeabi_uldivmod>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8d8:	d308      	bcc.n	800c8ec <UART_SetConfig+0x218>
 800c8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8e0:	d204      	bcs.n	800c8ec <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8e8:	60da      	str	r2, [r3, #12]
 800c8ea:	e003      	b.n	800c8f4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c8f2:	e085      	b.n	800ca00 <UART_SetConfig+0x32c>
 800c8f4:	e084      	b.n	800ca00 <UART_SetConfig+0x32c>
 800c8f6:	bf00      	nop
 800c8f8:	44002400 	.word	0x44002400
 800c8fc:	cfff69f3 	.word	0xcfff69f3
 800c900:	54002400 	.word	0x54002400
 800c904:	40013800 	.word	0x40013800
 800c908:	40004400 	.word	0x40004400
 800c90c:	40004800 	.word	0x40004800
 800c910:	40004c00 	.word	0x40004c00
 800c914:	40005000 	.word	0x40005000
 800c918:	40006400 	.word	0x40006400
 800c91c:	0800e5c8 	.word	0x0800e5c8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c928:	d13c      	bne.n	800c9a4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c92a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c92c:	2200      	movs	r2, #0
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	607a      	str	r2, [r7, #4]
 800c932:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c936:	f7fc f833 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c93a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d05e      	beq.n	800ca00 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c946:	4a39      	ldr	r2, [pc, #228]	@ (800ca2c <UART_SetConfig+0x358>)
 800c948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c94c:	461a      	mov	r2, r3
 800c94e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c950:	fbb3 f3f2 	udiv	r3, r3, r2
 800c954:	005a      	lsls	r2, r3, #1
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	085b      	lsrs	r3, r3, #1
 800c95c:	441a      	add	r2, r3
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	fbb2 f3f3 	udiv	r3, r2, r3
 800c966:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96a:	2b0f      	cmp	r3, #15
 800c96c:	d916      	bls.n	800c99c <UART_SetConfig+0x2c8>
 800c96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c974:	d212      	bcs.n	800c99c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c978:	b29b      	uxth	r3, r3
 800c97a:	f023 030f 	bic.w	r3, r3, #15
 800c97e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c982:	085b      	lsrs	r3, r3, #1
 800c984:	b29b      	uxth	r3, r3
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c98e:	4313      	orrs	r3, r2
 800c990:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c998:	60da      	str	r2, [r3, #12]
 800c99a:	e031      	b.n	800ca00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c9a2:	e02d      	b.n	800ca00 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c9a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	469a      	mov	sl, r3
 800c9aa:	4693      	mov	fp, r2
 800c9ac:	4650      	mov	r0, sl
 800c9ae:	4659      	mov	r1, fp
 800c9b0:	f7fb fff6 	bl	80089a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c9b4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d021      	beq.n	800ca00 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c0:	4a1a      	ldr	r2, [pc, #104]	@ (800ca2c <UART_SetConfig+0x358>)
 800c9c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	441a      	add	r2, r3
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e2:	2b0f      	cmp	r3, #15
 800c9e4:	d909      	bls.n	800c9fa <UART_SetConfig+0x326>
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9ec:	d205      	bcs.n	800c9fa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	60da      	str	r2, [r3, #12]
 800c9f8:	e002      	b.n	800ca00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca02:	2201      	movs	r2, #1
 800ca04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca12:	2200      	movs	r2, #0
 800ca14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	2200      	movs	r2, #0
 800ca1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3750      	adds	r7, #80	@ 0x50
 800ca24:	46bd      	mov	sp, r7
 800ca26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800e5c8 	.word	0x0800e5c8

0800ca30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	f003 0308 	and.w	r3, r3, #8
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	f003 0302 	and.w	r3, r3, #2
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00a      	beq.n	800cae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae6:	f003 0320 	and.w	r3, r3, #32
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00a      	beq.n	800cb04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	430a      	orrs	r2, r1
 800cb02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d01a      	beq.n	800cb46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	430a      	orrs	r2, r1
 800cb24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb2e:	d10a      	bne.n	800cb46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00a      	beq.n	800cb68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	430a      	orrs	r2, r1
 800cb66:	605a      	str	r2, [r3, #4]
  }
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b098      	sub	sp, #96	@ 0x60
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb84:	f7f6 fc82 	bl	800348c <HAL_GetTick>
 800cb88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0308 	and.w	r3, r3, #8
 800cb94:	2b08      	cmp	r3, #8
 800cb96:	d12f      	bne.n	800cbf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cba0:	2200      	movs	r2, #0
 800cba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f88e 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d022      	beq.n	800cbf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbba:	e853 3f00 	ldrex	r3, [r3]
 800cbbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cbd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbd8:	e841 2300 	strex	r3, r2, [r1]
 800cbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e6      	bne.n	800cbb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e063      	b.n	800ccc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d149      	bne.n	800cc9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f857 	bl	800ccc8 <UART_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d03c      	beq.n	800cc9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	623b      	str	r3, [r7, #32]
   return(result);
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc46:	e841 2300 	strex	r3, r2, [r1]
 800cc4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1e6      	bne.n	800cc20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3308      	adds	r3, #8
 800cc58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	e853 3f00 	ldrex	r3, [r3]
 800cc60:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f023 0301 	bic.w	r3, r3, #1
 800cc68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc72:	61fa      	str	r2, [r7, #28]
 800cc74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc76:	69b9      	ldr	r1, [r7, #24]
 800cc78:	69fa      	ldr	r2, [r7, #28]
 800cc7a:	e841 2300 	strex	r3, r2, [r1]
 800cc7e:	617b      	str	r3, [r7, #20]
   return(result);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1e5      	bne.n	800cc52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2220      	movs	r2, #32
 800cc8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e012      	b.n	800ccc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2220      	movs	r2, #32
 800cca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3758      	adds	r7, #88	@ 0x58
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccd8:	e04f      	b.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce0:	d04b      	beq.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cce2:	f7f6 fbd3 	bl	800348c <HAL_GetTick>
 800cce6:	4602      	mov	r2, r0
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	69ba      	ldr	r2, [r7, #24]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d302      	bcc.n	800ccf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e04e      	b.n	800cd9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d037      	beq.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b80      	cmp	r3, #128	@ 0x80
 800cd0e:	d034      	beq.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b40      	cmp	r3, #64	@ 0x40
 800cd14:	d031      	beq.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b08      	cmp	r3, #8
 800cd22:	d110      	bne.n	800cd46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2208      	movs	r2, #8
 800cd2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f000 f972 	bl	800d016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2208      	movs	r2, #8
 800cd36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e029      	b.n	800cd9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69db      	ldr	r3, [r3, #28]
 800cd4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd54:	d111      	bne.n	800cd7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 f958 	bl	800d016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2220      	movs	r2, #32
 800cd6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e00f      	b.n	800cd9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	69da      	ldr	r2, [r3, #28]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	4013      	ands	r3, r2
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	bf0c      	ite	eq
 800cd8a:	2301      	moveq	r3, #1
 800cd8c:	2300      	movne	r3, #0
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	461a      	mov	r2, r3
 800cd92:	79fb      	ldrb	r3, [r7, #7]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d0a0      	beq.n	800ccda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b098      	sub	sp, #96	@ 0x60
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	88fa      	ldrh	r2, [r7, #6]
 800cdc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2222      	movs	r2, #34	@ 0x22
 800cdd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d07c      	beq.n	800ceda <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cde6:	4a68      	ldr	r2, [pc, #416]	@ (800cf88 <UART_Start_Receive_DMA+0x1e4>)
 800cde8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdf0:	4a66      	ldr	r2, [pc, #408]	@ (800cf8c <UART_Start_Receive_DMA+0x1e8>)
 800cdf2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdfa:	4a65      	ldr	r2, [pc, #404]	@ (800cf90 <UART_Start_Receive_DMA+0x1ec>)
 800cdfc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce04:	2200      	movs	r2, #0
 800ce06:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce10:	d107      	bne.n	800ce22 <UART_Start_Receive_DMA+0x7e>
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d103      	bne.n	800ce22 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d034      	beq.n	800ce9c <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d02a      	beq.n	800ce94 <UART_Start_Receive_DMA+0xf0>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d023      	beq.n	800ce94 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800ce5a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7f7 fb38 	bl	80044fc <HAL_DMAEx_List_Start_IT>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce92:	e014      	b.n	800cebe <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce9a:	e010      	b.n	800cebe <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3324      	adds	r3, #36	@ 0x24
 800cea8:	4619      	mov	r1, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800ceb4:	f7f6 fdd6 	bl	8003a64 <HAL_DMA_Start_IT>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800cebe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d009      	beq.n	800ceda <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2210      	movs	r2, #16
 800ceca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2220      	movs	r2, #32
 800ced2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e051      	b.n	800cf7e <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d018      	beq.n	800cf14 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceea:	e853 3f00 	ldrex	r3, [r3]
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cef6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	461a      	mov	r2, r3
 800cefe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf02:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cf06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf08:	e841 2300 	strex	r3, r2, [r1]
 800cf0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cf0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e6      	bne.n	800cee2 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3308      	adds	r3, #8
 800cf1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1e:	e853 3f00 	ldrex	r3, [r3]
 800cf22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	f043 0301 	orr.w	r3, r3, #1
 800cf2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3308      	adds	r3, #8
 800cf32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf34:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cf36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf3c:	e841 2300 	strex	r3, r2, [r1]
 800cf40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e5      	bne.n	800cf14 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	e853 3f00 	ldrex	r3, [r3]
 800cf56:	617b      	str	r3, [r7, #20]
   return(result);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3308      	adds	r3, #8
 800cf66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf68:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6c:	6a39      	ldr	r1, [r7, #32]
 800cf6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf70:	e841 2300 	strex	r3, r2, [r1]
 800cf74:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e5      	bne.n	800cf48 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3760      	adds	r7, #96	@ 0x60
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	0800d0e3 	.word	0x0800d0e3
 800cf8c:	0800d1d5 	.word	0x0800d1d5
 800cf90:	0800d213 	.word	0x0800d213

0800cf94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b08f      	sub	sp, #60	@ 0x3c
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	e853 3f00 	ldrex	r3, [r3]
 800cfa8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cfb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfc2:	e841 2300 	strex	r3, r2, [r1]
 800cfc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1e6      	bne.n	800cf9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	e853 3f00 	ldrex	r3, [r3]
 800cfdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cfe4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3308      	adds	r3, #8
 800cfec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfee:	61ba      	str	r2, [r7, #24]
 800cff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff2:	6979      	ldr	r1, [r7, #20]
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	e841 2300 	strex	r3, r2, [r1]
 800cffa:	613b      	str	r3, [r7, #16]
   return(result);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1e5      	bne.n	800cfce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2220      	movs	r2, #32
 800d006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d00a:	bf00      	nop
 800d00c:	373c      	adds	r7, #60	@ 0x3c
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d016:	b480      	push	{r7}
 800d018:	b095      	sub	sp, #84	@ 0x54
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d026:	e853 3f00 	ldrex	r3, [r3]
 800d02a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	461a      	mov	r2, r3
 800d03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d03c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d03e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d044:	e841 2300 	strex	r3, r2, [r1]
 800d048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e6      	bne.n	800d01e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3308      	adds	r3, #8
 800d056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	e853 3f00 	ldrex	r3, [r3]
 800d05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d066:	f023 0301 	bic.w	r3, r3, #1
 800d06a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3308      	adds	r3, #8
 800d072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d07c:	e841 2300 	strex	r3, r2, [r1]
 800d080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1e3      	bne.n	800d050 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d118      	bne.n	800d0c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	e853 3f00 	ldrex	r3, [r3]
 800d09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f023 0310 	bic.w	r3, r3, #16
 800d0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ae:	61bb      	str	r3, [r7, #24]
 800d0b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b2:	6979      	ldr	r1, [r7, #20]
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	e841 2300 	strex	r3, r2, [r1]
 800d0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1e6      	bne.n	800d090 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d0d6:	bf00      	nop
 800d0d8:	3754      	adds	r7, #84	@ 0x54
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b096      	sub	sp, #88	@ 0x58
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0ee:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0f4:	2b81      	cmp	r3, #129	@ 0x81
 800d0f6:	d057      	beq.n	800d1a8 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800d0f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d114:	653b      	str	r3, [r7, #80]	@ 0x50
 800d116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d11e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d120:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e6      	bne.n	800d100 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3308      	adds	r3, #8
 800d138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	623b      	str	r3, [r7, #32]
   return(result);
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	f023 0301 	bic.w	r3, r3, #1
 800d148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3308      	adds	r3, #8
 800d150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d152:	633a      	str	r2, [r7, #48]	@ 0x30
 800d154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d15a:	e841 2300 	strex	r3, r2, [r1]
 800d15e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1e5      	bne.n	800d132 <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d172:	2b01      	cmp	r3, #1
 800d174:	d118      	bne.n	800d1a8 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	60fb      	str	r3, [r7, #12]
   return(result);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0310 	bic.w	r3, r3, #16
 800d18a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d18c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d194:	61fb      	str	r3, [r7, #28]
 800d196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	69b9      	ldr	r1, [r7, #24]
 800d19a:	69fa      	ldr	r2, [r7, #28]
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e6      	bne.n	800d176 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d107      	bne.n	800d1c6 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d1c0:	f7ff fa7c 	bl	800c6bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d1c4:	e002      	b.n	800d1cc <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800d1c6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d1c8:	f7f5 f912 	bl	80023f0 <HAL_UART_RxCpltCallback>
}
 800d1cc:	bf00      	nop
 800d1ce:	3758      	adds	r7, #88	@ 0x58
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d109      	bne.n	800d204 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff fa5d 	bl	800c6bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d202:	e002      	b.n	800d20a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7ff fa45 	bl	800c694 <HAL_UART_RxHalfCpltCallback>
}
 800d20a:	bf00      	nop
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b086      	sub	sp, #24
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d21e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d226:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d22e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d23a:	2b80      	cmp	r3, #128	@ 0x80
 800d23c:	d109      	bne.n	800d252 <UART_DMAError+0x40>
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	2b21      	cmp	r3, #33	@ 0x21
 800d242:	d106      	bne.n	800d252 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2200      	movs	r2, #0
 800d248:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d24c:	6978      	ldr	r0, [r7, #20]
 800d24e:	f7ff fea1 	bl	800cf94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d25c:	2b40      	cmp	r3, #64	@ 0x40
 800d25e:	d109      	bne.n	800d274 <UART_DMAError+0x62>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2b22      	cmp	r3, #34	@ 0x22
 800d264:	d106      	bne.n	800d274 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2200      	movs	r2, #0
 800d26a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d26e:	6978      	ldr	r0, [r7, #20]
 800d270:	f7ff fed1 	bl	800d016 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d27a:	f043 0210 	orr.w	r2, r3, #16
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d284:	6978      	ldr	r0, [r7, #20]
 800d286:	f7ff fa0f 	bl	800c6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d28a:	bf00      	nop
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d29e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff f9fd 	bl	800c6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2ae:	bf00      	nop
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b088      	sub	sp, #32
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	e853 3f00 	ldrex	r3, [r3]
 800d2ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2d2:	61fb      	str	r3, [r7, #28]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e0:	6979      	ldr	r1, [r7, #20]
 800d2e2:	69ba      	ldr	r2, [r7, #24]
 800d2e4:	e841 2300 	strex	r3, r2, [r1]
 800d2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e6      	bne.n	800d2be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff f9be 	bl	800c680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d304:	bf00      	nop
 800d306:	3720      	adds	r7, #32
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d356:	2b01      	cmp	r3, #1
 800d358:	d101      	bne.n	800d35e <HAL_UARTEx_DisableFifoMode+0x16>
 800d35a:	2302      	movs	r3, #2
 800d35c:	e027      	b.n	800d3ae <HAL_UARTEx_DisableFifoMode+0x66>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2224      	movs	r2, #36	@ 0x24
 800d36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0201 	bic.w	r2, r2, #1
 800d384:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d38c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2220      	movs	r2, #32
 800d3a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d101      	bne.n	800d3d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	e02d      	b.n	800d42e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2224      	movs	r2, #36	@ 0x24
 800d3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f022 0201 	bic.w	r2, r2, #1
 800d3f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f850 	bl	800d4b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2220      	movs	r2, #32
 800d420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d446:	2b01      	cmp	r3, #1
 800d448:	d101      	bne.n	800d44e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d44a:	2302      	movs	r3, #2
 800d44c:	e02d      	b.n	800d4aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2224      	movs	r2, #36	@ 0x24
 800d45a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f022 0201 	bic.w	r2, r2, #1
 800d474:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	430a      	orrs	r2, r1
 800d488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f812 	bl	800d4b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2220      	movs	r2, #32
 800d49c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d108      	bne.n	800d4d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d4d4:	e031      	b.n	800d53a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d4d6:	2308      	movs	r3, #8
 800d4d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d4da:	2308      	movs	r3, #8
 800d4dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	0e5b      	lsrs	r3, r3, #25
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	f003 0307 	and.w	r3, r3, #7
 800d4ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	0f5b      	lsrs	r3, r3, #29
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	f003 0307 	and.w	r3, r3, #7
 800d4fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	7b3a      	ldrb	r2, [r7, #12]
 800d502:	4911      	ldr	r1, [pc, #68]	@ (800d548 <UARTEx_SetNbDataToProcess+0x94>)
 800d504:	5c8a      	ldrb	r2, [r1, r2]
 800d506:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d50a:	7b3a      	ldrb	r2, [r7, #12]
 800d50c:	490f      	ldr	r1, [pc, #60]	@ (800d54c <UARTEx_SetNbDataToProcess+0x98>)
 800d50e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d510:	fb93 f3f2 	sdiv	r3, r3, r2
 800d514:	b29a      	uxth	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
 800d51e:	7b7a      	ldrb	r2, [r7, #13]
 800d520:	4909      	ldr	r1, [pc, #36]	@ (800d548 <UARTEx_SetNbDataToProcess+0x94>)
 800d522:	5c8a      	ldrb	r2, [r1, r2]
 800d524:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d528:	7b7a      	ldrb	r2, [r7, #13]
 800d52a:	4908      	ldr	r1, [pc, #32]	@ (800d54c <UARTEx_SetNbDataToProcess+0x98>)
 800d52c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d52e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d532:	b29a      	uxth	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d53a:	bf00      	nop
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	0800e5e0 	.word	0x0800e5e0
 800d54c:	0800e5e8 	.word	0x0800e5e8

0800d550 <std>:
 800d550:	2300      	movs	r3, #0
 800d552:	b510      	push	{r4, lr}
 800d554:	4604      	mov	r4, r0
 800d556:	6083      	str	r3, [r0, #8]
 800d558:	8181      	strh	r1, [r0, #12]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6643      	str	r3, [r0, #100]	@ 0x64
 800d55e:	81c2      	strh	r2, [r0, #14]
 800d560:	2208      	movs	r2, #8
 800d562:	6183      	str	r3, [r0, #24]
 800d564:	e9c0 3300 	strd	r3, r3, [r0]
 800d568:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d56c:	305c      	adds	r0, #92	@ 0x5c
 800d56e:	f000 f9f9 	bl	800d964 <memset>
 800d572:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a8 <std+0x58>)
 800d574:	6224      	str	r4, [r4, #32]
 800d576:	6263      	str	r3, [r4, #36]	@ 0x24
 800d578:	4b0c      	ldr	r3, [pc, #48]	@ (800d5ac <std+0x5c>)
 800d57a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d57c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b0 <std+0x60>)
 800d57e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d580:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b4 <std+0x64>)
 800d582:	6323      	str	r3, [r4, #48]	@ 0x30
 800d584:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <std+0x68>)
 800d586:	429c      	cmp	r4, r3
 800d588:	d006      	beq.n	800d598 <std+0x48>
 800d58a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d58e:	4294      	cmp	r4, r2
 800d590:	d002      	beq.n	800d598 <std+0x48>
 800d592:	33d0      	adds	r3, #208	@ 0xd0
 800d594:	429c      	cmp	r4, r3
 800d596:	d105      	bne.n	800d5a4 <std+0x54>
 800d598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a0:	f000 ba58 	b.w	800da54 <__retarget_lock_init_recursive>
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0800d7b5 	.word	0x0800d7b5
 800d5ac:	0800d7d7 	.word	0x0800d7d7
 800d5b0:	0800d80f 	.word	0x0800d80f
 800d5b4:	0800d833 	.word	0x0800d833
 800d5b8:	2000064c 	.word	0x2000064c

0800d5bc <stdio_exit_handler>:
 800d5bc:	4a02      	ldr	r2, [pc, #8]	@ (800d5c8 <stdio_exit_handler+0xc>)
 800d5be:	4903      	ldr	r1, [pc, #12]	@ (800d5cc <stdio_exit_handler+0x10>)
 800d5c0:	4803      	ldr	r0, [pc, #12]	@ (800d5d0 <stdio_exit_handler+0x14>)
 800d5c2:	f000 b869 	b.w	800d698 <_fwalk_sglue>
 800d5c6:	bf00      	nop
 800d5c8:	200000e8 	.word	0x200000e8
 800d5cc:	0800e2fd 	.word	0x0800e2fd
 800d5d0:	200000f8 	.word	0x200000f8

0800d5d4 <cleanup_stdio>:
 800d5d4:	6841      	ldr	r1, [r0, #4]
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d608 <cleanup_stdio+0x34>)
 800d5d8:	4299      	cmp	r1, r3
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	4604      	mov	r4, r0
 800d5de:	d001      	beq.n	800d5e4 <cleanup_stdio+0x10>
 800d5e0:	f000 fe8c 	bl	800e2fc <_fflush_r>
 800d5e4:	68a1      	ldr	r1, [r4, #8]
 800d5e6:	4b09      	ldr	r3, [pc, #36]	@ (800d60c <cleanup_stdio+0x38>)
 800d5e8:	4299      	cmp	r1, r3
 800d5ea:	d002      	beq.n	800d5f2 <cleanup_stdio+0x1e>
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 fe85 	bl	800e2fc <_fflush_r>
 800d5f2:	68e1      	ldr	r1, [r4, #12]
 800d5f4:	4b06      	ldr	r3, [pc, #24]	@ (800d610 <cleanup_stdio+0x3c>)
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	d004      	beq.n	800d604 <cleanup_stdio+0x30>
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d600:	f000 be7c 	b.w	800e2fc <_fflush_r>
 800d604:	bd10      	pop	{r4, pc}
 800d606:	bf00      	nop
 800d608:	2000064c 	.word	0x2000064c
 800d60c:	200006b4 	.word	0x200006b4
 800d610:	2000071c 	.word	0x2000071c

0800d614 <global_stdio_init.part.0>:
 800d614:	b510      	push	{r4, lr}
 800d616:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <global_stdio_init.part.0+0x30>)
 800d618:	2104      	movs	r1, #4
 800d61a:	4c0b      	ldr	r4, [pc, #44]	@ (800d648 <global_stdio_init.part.0+0x34>)
 800d61c:	4a0b      	ldr	r2, [pc, #44]	@ (800d64c <global_stdio_init.part.0+0x38>)
 800d61e:	4620      	mov	r0, r4
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	f7ff ff94 	bl	800d550 <std>
 800d628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d62c:	2201      	movs	r2, #1
 800d62e:	2109      	movs	r1, #9
 800d630:	f7ff ff8e 	bl	800d550 <std>
 800d634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d638:	2202      	movs	r2, #2
 800d63a:	2112      	movs	r1, #18
 800d63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d640:	f7ff bf86 	b.w	800d550 <std>
 800d644:	20000784 	.word	0x20000784
 800d648:	2000064c 	.word	0x2000064c
 800d64c:	0800d5bd 	.word	0x0800d5bd

0800d650 <__sfp_lock_acquire>:
 800d650:	4801      	ldr	r0, [pc, #4]	@ (800d658 <__sfp_lock_acquire+0x8>)
 800d652:	f000 ba00 	b.w	800da56 <__retarget_lock_acquire_recursive>
 800d656:	bf00      	nop
 800d658:	2000078d 	.word	0x2000078d

0800d65c <__sfp_lock_release>:
 800d65c:	4801      	ldr	r0, [pc, #4]	@ (800d664 <__sfp_lock_release+0x8>)
 800d65e:	f000 b9fb 	b.w	800da58 <__retarget_lock_release_recursive>
 800d662:	bf00      	nop
 800d664:	2000078d 	.word	0x2000078d

0800d668 <__sinit>:
 800d668:	b510      	push	{r4, lr}
 800d66a:	4604      	mov	r4, r0
 800d66c:	f7ff fff0 	bl	800d650 <__sfp_lock_acquire>
 800d670:	6a23      	ldr	r3, [r4, #32]
 800d672:	b11b      	cbz	r3, 800d67c <__sinit+0x14>
 800d674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d678:	f7ff bff0 	b.w	800d65c <__sfp_lock_release>
 800d67c:	4b04      	ldr	r3, [pc, #16]	@ (800d690 <__sinit+0x28>)
 800d67e:	6223      	str	r3, [r4, #32]
 800d680:	4b04      	ldr	r3, [pc, #16]	@ (800d694 <__sinit+0x2c>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1f5      	bne.n	800d674 <__sinit+0xc>
 800d688:	f7ff ffc4 	bl	800d614 <global_stdio_init.part.0>
 800d68c:	e7f2      	b.n	800d674 <__sinit+0xc>
 800d68e:	bf00      	nop
 800d690:	0800d5d5 	.word	0x0800d5d5
 800d694:	20000784 	.word	0x20000784

0800d698 <_fwalk_sglue>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	4607      	mov	r7, r0
 800d69e:	4688      	mov	r8, r1
 800d6a0:	4614      	mov	r4, r2
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6a8:	f1b9 0901 	subs.w	r9, r9, #1
 800d6ac:	d505      	bpl.n	800d6ba <_fwalk_sglue+0x22>
 800d6ae:	6824      	ldr	r4, [r4, #0]
 800d6b0:	2c00      	cmp	r4, #0
 800d6b2:	d1f7      	bne.n	800d6a4 <_fwalk_sglue+0xc>
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d907      	bls.n	800d6d0 <_fwalk_sglue+0x38>
 800d6c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	d003      	beq.n	800d6d0 <_fwalk_sglue+0x38>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4638      	mov	r0, r7
 800d6cc:	47c0      	blx	r8
 800d6ce:	4306      	orrs	r6, r0
 800d6d0:	3568      	adds	r5, #104	@ 0x68
 800d6d2:	e7e9      	b.n	800d6a8 <_fwalk_sglue+0x10>

0800d6d4 <iprintf>:
 800d6d4:	b40f      	push	{r0, r1, r2, r3}
 800d6d6:	b507      	push	{r0, r1, r2, lr}
 800d6d8:	4906      	ldr	r1, [pc, #24]	@ (800d6f4 <iprintf+0x20>)
 800d6da:	ab04      	add	r3, sp, #16
 800d6dc:	6808      	ldr	r0, [r1, #0]
 800d6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e2:	6881      	ldr	r1, [r0, #8]
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	f000 fadb 	bl	800dca0 <_vfiprintf_r>
 800d6ea:	b003      	add	sp, #12
 800d6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f0:	b004      	add	sp, #16
 800d6f2:	4770      	bx	lr
 800d6f4:	200000f4 	.word	0x200000f4

0800d6f8 <_puts_r>:
 800d6f8:	6a03      	ldr	r3, [r0, #32]
 800d6fa:	b570      	push	{r4, r5, r6, lr}
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	460e      	mov	r6, r1
 800d700:	6884      	ldr	r4, [r0, #8]
 800d702:	b90b      	cbnz	r3, 800d708 <_puts_r+0x10>
 800d704:	f7ff ffb0 	bl	800d668 <__sinit>
 800d708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d70a:	07db      	lsls	r3, r3, #31
 800d70c:	d405      	bmi.n	800d71a <_puts_r+0x22>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	0598      	lsls	r0, r3, #22
 800d712:	d402      	bmi.n	800d71a <_puts_r+0x22>
 800d714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d716:	f000 f99e 	bl	800da56 <__retarget_lock_acquire_recursive>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	0719      	lsls	r1, r3, #28
 800d71e:	d502      	bpl.n	800d726 <_puts_r+0x2e>
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d135      	bne.n	800d792 <_puts_r+0x9a>
 800d726:	4621      	mov	r1, r4
 800d728:	4628      	mov	r0, r5
 800d72a:	f000 f8c5 	bl	800d8b8 <__swsetup_r>
 800d72e:	b380      	cbz	r0, 800d792 <_puts_r+0x9a>
 800d730:	f04f 35ff 	mov.w	r5, #4294967295
 800d734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d736:	07da      	lsls	r2, r3, #31
 800d738:	d405      	bmi.n	800d746 <_puts_r+0x4e>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	059b      	lsls	r3, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_puts_r+0x4e>
 800d740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d742:	f000 f989 	bl	800da58 <__retarget_lock_release_recursive>
 800d746:	4628      	mov	r0, r5
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	da04      	bge.n	800d758 <_puts_r+0x60>
 800d74e:	69a2      	ldr	r2, [r4, #24]
 800d750:	429a      	cmp	r2, r3
 800d752:	dc17      	bgt.n	800d784 <_puts_r+0x8c>
 800d754:	290a      	cmp	r1, #10
 800d756:	d015      	beq.n	800d784 <_puts_r+0x8c>
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	6022      	str	r2, [r4, #0]
 800d75e:	7019      	strb	r1, [r3, #0]
 800d760:	68a3      	ldr	r3, [r4, #8]
 800d762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d766:	3b01      	subs	r3, #1
 800d768:	60a3      	str	r3, [r4, #8]
 800d76a:	2900      	cmp	r1, #0
 800d76c:	d1ed      	bne.n	800d74a <_puts_r+0x52>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	da11      	bge.n	800d796 <_puts_r+0x9e>
 800d772:	4622      	mov	r2, r4
 800d774:	210a      	movs	r1, #10
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f85f 	bl	800d83a <__swbuf_r>
 800d77c:	3001      	adds	r0, #1
 800d77e:	d0d7      	beq.n	800d730 <_puts_r+0x38>
 800d780:	250a      	movs	r5, #10
 800d782:	e7d7      	b.n	800d734 <_puts_r+0x3c>
 800d784:	4622      	mov	r2, r4
 800d786:	4628      	mov	r0, r5
 800d788:	f000 f857 	bl	800d83a <__swbuf_r>
 800d78c:	3001      	adds	r0, #1
 800d78e:	d1e7      	bne.n	800d760 <_puts_r+0x68>
 800d790:	e7ce      	b.n	800d730 <_puts_r+0x38>
 800d792:	3e01      	subs	r6, #1
 800d794:	e7e4      	b.n	800d760 <_puts_r+0x68>
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	1c5a      	adds	r2, r3, #1
 800d79a:	6022      	str	r2, [r4, #0]
 800d79c:	220a      	movs	r2, #10
 800d79e:	701a      	strb	r2, [r3, #0]
 800d7a0:	e7ee      	b.n	800d780 <_puts_r+0x88>
	...

0800d7a4 <puts>:
 800d7a4:	4b02      	ldr	r3, [pc, #8]	@ (800d7b0 <puts+0xc>)
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	6818      	ldr	r0, [r3, #0]
 800d7aa:	f7ff bfa5 	b.w	800d6f8 <_puts_r>
 800d7ae:	bf00      	nop
 800d7b0:	200000f4 	.word	0x200000f4

0800d7b4 <__sread>:
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7bc:	f000 f8fc 	bl	800d9b8 <_read_r>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	bfab      	itete	ge
 800d7c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d7c8:	181b      	addge	r3, r3, r0
 800d7ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7ce:	bfac      	ite	ge
 800d7d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7d2:	81a3      	strhlt	r3, [r4, #12]
 800d7d4:	bd10      	pop	{r4, pc}

0800d7d6 <__swrite>:
 800d7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7da:	461f      	mov	r7, r3
 800d7dc:	898b      	ldrh	r3, [r1, #12]
 800d7de:	4605      	mov	r5, r0
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	05db      	lsls	r3, r3, #23
 800d7e4:	4616      	mov	r6, r2
 800d7e6:	d505      	bpl.n	800d7f4 <__swrite+0x1e>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f0:	f000 f8d0 	bl	800d994 <_lseek_r>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	4632      	mov	r2, r6
 800d7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d802:	81a3      	strh	r3, [r4, #12]
 800d804:	463b      	mov	r3, r7
 800d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	f000 b8e7 	b.w	800d9dc <_write_r>

0800d80e <__sseek>:
 800d80e:	b510      	push	{r4, lr}
 800d810:	460c      	mov	r4, r1
 800d812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d816:	f000 f8bd 	bl	800d994 <_lseek_r>
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	bf15      	itete	ne
 800d820:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d82a:	81a3      	strheq	r3, [r4, #12]
 800d82c:	bf18      	it	ne
 800d82e:	81a3      	strhne	r3, [r4, #12]
 800d830:	bd10      	pop	{r4, pc}

0800d832 <__sclose>:
 800d832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d836:	f000 b89d 	b.w	800d974 <_close_r>

0800d83a <__swbuf_r>:
 800d83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83c:	460e      	mov	r6, r1
 800d83e:	4614      	mov	r4, r2
 800d840:	4605      	mov	r5, r0
 800d842:	b118      	cbz	r0, 800d84c <__swbuf_r+0x12>
 800d844:	6a03      	ldr	r3, [r0, #32]
 800d846:	b90b      	cbnz	r3, 800d84c <__swbuf_r+0x12>
 800d848:	f7ff ff0e 	bl	800d668 <__sinit>
 800d84c:	69a3      	ldr	r3, [r4, #24]
 800d84e:	60a3      	str	r3, [r4, #8]
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	071a      	lsls	r2, r3, #28
 800d854:	d501      	bpl.n	800d85a <__swbuf_r+0x20>
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	b943      	cbnz	r3, 800d86c <__swbuf_r+0x32>
 800d85a:	4621      	mov	r1, r4
 800d85c:	4628      	mov	r0, r5
 800d85e:	f000 f82b 	bl	800d8b8 <__swsetup_r>
 800d862:	b118      	cbz	r0, 800d86c <__swbuf_r+0x32>
 800d864:	f04f 37ff 	mov.w	r7, #4294967295
 800d868:	4638      	mov	r0, r7
 800d86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	b2f6      	uxtb	r6, r6
 800d870:	6922      	ldr	r2, [r4, #16]
 800d872:	4637      	mov	r7, r6
 800d874:	1a98      	subs	r0, r3, r2
 800d876:	6963      	ldr	r3, [r4, #20]
 800d878:	4283      	cmp	r3, r0
 800d87a:	dc05      	bgt.n	800d888 <__swbuf_r+0x4e>
 800d87c:	4621      	mov	r1, r4
 800d87e:	4628      	mov	r0, r5
 800d880:	f000 fd3c 	bl	800e2fc <_fflush_r>
 800d884:	2800      	cmp	r0, #0
 800d886:	d1ed      	bne.n	800d864 <__swbuf_r+0x2a>
 800d888:	68a3      	ldr	r3, [r4, #8]
 800d88a:	3b01      	subs	r3, #1
 800d88c:	60a3      	str	r3, [r4, #8]
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	6022      	str	r2, [r4, #0]
 800d894:	701e      	strb	r6, [r3, #0]
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	6962      	ldr	r2, [r4, #20]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d004      	beq.n	800d8a8 <__swbuf_r+0x6e>
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	07db      	lsls	r3, r3, #31
 800d8a2:	d5e1      	bpl.n	800d868 <__swbuf_r+0x2e>
 800d8a4:	2e0a      	cmp	r6, #10
 800d8a6:	d1df      	bne.n	800d868 <__swbuf_r+0x2e>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f000 fd26 	bl	800e2fc <_fflush_r>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d0d9      	beq.n	800d868 <__swbuf_r+0x2e>
 800d8b4:	e7d6      	b.n	800d864 <__swbuf_r+0x2a>
	...

0800d8b8 <__swsetup_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4b29      	ldr	r3, [pc, #164]	@ (800d960 <__swsetup_r+0xa8>)
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	6818      	ldr	r0, [r3, #0]
 800d8c2:	b118      	cbz	r0, 800d8cc <__swsetup_r+0x14>
 800d8c4:	6a03      	ldr	r3, [r0, #32]
 800d8c6:	b90b      	cbnz	r3, 800d8cc <__swsetup_r+0x14>
 800d8c8:	f7ff fece 	bl	800d668 <__sinit>
 800d8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d0:	0719      	lsls	r1, r3, #28
 800d8d2:	d422      	bmi.n	800d91a <__swsetup_r+0x62>
 800d8d4:	06da      	lsls	r2, r3, #27
 800d8d6:	d407      	bmi.n	800d8e8 <__swsetup_r+0x30>
 800d8d8:	2209      	movs	r2, #9
 800d8da:	602a      	str	r2, [r5, #0]
 800d8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	e033      	b.n	800d950 <__swsetup_r+0x98>
 800d8e8:	0758      	lsls	r0, r3, #29
 800d8ea:	d512      	bpl.n	800d912 <__swsetup_r+0x5a>
 800d8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8ee:	b141      	cbz	r1, 800d902 <__swsetup_r+0x4a>
 800d8f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8f4:	4299      	cmp	r1, r3
 800d8f6:	d002      	beq.n	800d8fe <__swsetup_r+0x46>
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f000 f8af 	bl	800da5c <_free_r>
 800d8fe:	2300      	movs	r3, #0
 800d900:	6363      	str	r3, [r4, #52]	@ 0x34
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d908:	81a3      	strh	r3, [r4, #12]
 800d90a:	2300      	movs	r3, #0
 800d90c:	6063      	str	r3, [r4, #4]
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	f043 0308 	orr.w	r3, r3, #8
 800d918:	81a3      	strh	r3, [r4, #12]
 800d91a:	6923      	ldr	r3, [r4, #16]
 800d91c:	b94b      	cbnz	r3, 800d932 <__swsetup_r+0x7a>
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d928:	d003      	beq.n	800d932 <__swsetup_r+0x7a>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f000 fd32 	bl	800e396 <__smakebuf_r>
 800d932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d936:	f013 0201 	ands.w	r2, r3, #1
 800d93a:	d00a      	beq.n	800d952 <__swsetup_r+0x9a>
 800d93c:	2200      	movs	r2, #0
 800d93e:	60a2      	str	r2, [r4, #8]
 800d940:	6962      	ldr	r2, [r4, #20]
 800d942:	4252      	negs	r2, r2
 800d944:	61a2      	str	r2, [r4, #24]
 800d946:	6922      	ldr	r2, [r4, #16]
 800d948:	b942      	cbnz	r2, 800d95c <__swsetup_r+0xa4>
 800d94a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d94e:	d1c5      	bne.n	800d8dc <__swsetup_r+0x24>
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	0799      	lsls	r1, r3, #30
 800d954:	bf58      	it	pl
 800d956:	6962      	ldrpl	r2, [r4, #20]
 800d958:	60a2      	str	r2, [r4, #8]
 800d95a:	e7f4      	b.n	800d946 <__swsetup_r+0x8e>
 800d95c:	2000      	movs	r0, #0
 800d95e:	e7f7      	b.n	800d950 <__swsetup_r+0x98>
 800d960:	200000f4 	.word	0x200000f4

0800d964 <memset>:
 800d964:	4402      	add	r2, r0
 800d966:	4603      	mov	r3, r0
 800d968:	4293      	cmp	r3, r2
 800d96a:	d100      	bne.n	800d96e <memset+0xa>
 800d96c:	4770      	bx	lr
 800d96e:	f803 1b01 	strb.w	r1, [r3], #1
 800d972:	e7f9      	b.n	800d968 <memset+0x4>

0800d974 <_close_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	2300      	movs	r3, #0
 800d978:	4d05      	ldr	r5, [pc, #20]	@ (800d990 <_close_r+0x1c>)
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	602b      	str	r3, [r5, #0]
 800d980:	f7f4 ff5d 	bl	800283e <_close>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_close_r+0x1a>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_close_r+0x1a>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20000788 	.word	0x20000788

0800d994 <_lseek_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4604      	mov	r4, r0
 800d998:	4d06      	ldr	r5, [pc, #24]	@ (800d9b4 <_lseek_r+0x20>)
 800d99a:	4608      	mov	r0, r1
 800d99c:	4611      	mov	r1, r2
 800d99e:	2200      	movs	r2, #0
 800d9a0:	602a      	str	r2, [r5, #0]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	f7f4 ff72 	bl	800288c <_lseek>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_lseek_r+0x1e>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_lseek_r+0x1e>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	20000788 	.word	0x20000788

0800d9b8 <_read_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4d06      	ldr	r5, [pc, #24]	@ (800d9d8 <_read_r+0x20>)
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	602a      	str	r2, [r5, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f7f4 ff00 	bl	80027cc <_read>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_read_r+0x1e>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_read_r+0x1e>
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	20000788 	.word	0x20000788

0800d9dc <_write_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4604      	mov	r4, r0
 800d9e0:	4d06      	ldr	r5, [pc, #24]	@ (800d9fc <_write_r+0x20>)
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	602a      	str	r2, [r5, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f7f4 ff0b 	bl	8002806 <_write>
 800d9f0:	1c43      	adds	r3, r0, #1
 800d9f2:	d102      	bne.n	800d9fa <_write_r+0x1e>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	b103      	cbz	r3, 800d9fa <_write_r+0x1e>
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
 800d9fc:	20000788 	.word	0x20000788

0800da00 <__errno>:
 800da00:	4b01      	ldr	r3, [pc, #4]	@ (800da08 <__errno+0x8>)
 800da02:	6818      	ldr	r0, [r3, #0]
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	200000f4 	.word	0x200000f4

0800da0c <__libc_init_array>:
 800da0c:	b570      	push	{r4, r5, r6, lr}
 800da0e:	4d0d      	ldr	r5, [pc, #52]	@ (800da44 <__libc_init_array+0x38>)
 800da10:	2600      	movs	r6, #0
 800da12:	4c0d      	ldr	r4, [pc, #52]	@ (800da48 <__libc_init_array+0x3c>)
 800da14:	1b64      	subs	r4, r4, r5
 800da16:	10a4      	asrs	r4, r4, #2
 800da18:	42a6      	cmp	r6, r4
 800da1a:	d109      	bne.n	800da30 <__libc_init_array+0x24>
 800da1c:	4d0b      	ldr	r5, [pc, #44]	@ (800da4c <__libc_init_array+0x40>)
 800da1e:	2600      	movs	r6, #0
 800da20:	4c0b      	ldr	r4, [pc, #44]	@ (800da50 <__libc_init_array+0x44>)
 800da22:	f000 fd35 	bl	800e490 <_init>
 800da26:	1b64      	subs	r4, r4, r5
 800da28:	10a4      	asrs	r4, r4, #2
 800da2a:	42a6      	cmp	r6, r4
 800da2c:	d105      	bne.n	800da3a <__libc_init_array+0x2e>
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	f855 3b04 	ldr.w	r3, [r5], #4
 800da34:	3601      	adds	r6, #1
 800da36:	4798      	blx	r3
 800da38:	e7ee      	b.n	800da18 <__libc_init_array+0xc>
 800da3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da3e:	3601      	adds	r6, #1
 800da40:	4798      	blx	r3
 800da42:	e7f2      	b.n	800da2a <__libc_init_array+0x1e>
 800da44:	0800e62c 	.word	0x0800e62c
 800da48:	0800e62c 	.word	0x0800e62c
 800da4c:	0800e62c 	.word	0x0800e62c
 800da50:	0800e630 	.word	0x0800e630

0800da54 <__retarget_lock_init_recursive>:
 800da54:	4770      	bx	lr

0800da56 <__retarget_lock_acquire_recursive>:
 800da56:	4770      	bx	lr

0800da58 <__retarget_lock_release_recursive>:
 800da58:	4770      	bx	lr
	...

0800da5c <_free_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4605      	mov	r5, r0
 800da60:	2900      	cmp	r1, #0
 800da62:	d041      	beq.n	800dae8 <_free_r+0x8c>
 800da64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da68:	1f0c      	subs	r4, r1, #4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	bfb8      	it	lt
 800da6e:	18e4      	addlt	r4, r4, r3
 800da70:	f000 f8e0 	bl	800dc34 <__malloc_lock>
 800da74:	4a1d      	ldr	r2, [pc, #116]	@ (800daec <_free_r+0x90>)
 800da76:	6813      	ldr	r3, [r2, #0]
 800da78:	b933      	cbnz	r3, 800da88 <_free_r+0x2c>
 800da7a:	6063      	str	r3, [r4, #4]
 800da7c:	6014      	str	r4, [r2, #0]
 800da7e:	4628      	mov	r0, r5
 800da80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da84:	f000 b8dc 	b.w	800dc40 <__malloc_unlock>
 800da88:	42a3      	cmp	r3, r4
 800da8a:	d908      	bls.n	800da9e <_free_r+0x42>
 800da8c:	6820      	ldr	r0, [r4, #0]
 800da8e:	1821      	adds	r1, r4, r0
 800da90:	428b      	cmp	r3, r1
 800da92:	bf01      	itttt	eq
 800da94:	6819      	ldreq	r1, [r3, #0]
 800da96:	685b      	ldreq	r3, [r3, #4]
 800da98:	1809      	addeq	r1, r1, r0
 800da9a:	6021      	streq	r1, [r4, #0]
 800da9c:	e7ed      	b.n	800da7a <_free_r+0x1e>
 800da9e:	461a      	mov	r2, r3
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	b10b      	cbz	r3, 800daa8 <_free_r+0x4c>
 800daa4:	42a3      	cmp	r3, r4
 800daa6:	d9fa      	bls.n	800da9e <_free_r+0x42>
 800daa8:	6811      	ldr	r1, [r2, #0]
 800daaa:	1850      	adds	r0, r2, r1
 800daac:	42a0      	cmp	r0, r4
 800daae:	d10b      	bne.n	800dac8 <_free_r+0x6c>
 800dab0:	6820      	ldr	r0, [r4, #0]
 800dab2:	4401      	add	r1, r0
 800dab4:	1850      	adds	r0, r2, r1
 800dab6:	6011      	str	r1, [r2, #0]
 800dab8:	4283      	cmp	r3, r0
 800daba:	d1e0      	bne.n	800da7e <_free_r+0x22>
 800dabc:	6818      	ldr	r0, [r3, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4408      	add	r0, r1
 800dac2:	6053      	str	r3, [r2, #4]
 800dac4:	6010      	str	r0, [r2, #0]
 800dac6:	e7da      	b.n	800da7e <_free_r+0x22>
 800dac8:	d902      	bls.n	800dad0 <_free_r+0x74>
 800daca:	230c      	movs	r3, #12
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	e7d6      	b.n	800da7e <_free_r+0x22>
 800dad0:	6820      	ldr	r0, [r4, #0]
 800dad2:	1821      	adds	r1, r4, r0
 800dad4:	428b      	cmp	r3, r1
 800dad6:	bf02      	ittt	eq
 800dad8:	6819      	ldreq	r1, [r3, #0]
 800dada:	685b      	ldreq	r3, [r3, #4]
 800dadc:	1809      	addeq	r1, r1, r0
 800dade:	6063      	str	r3, [r4, #4]
 800dae0:	bf08      	it	eq
 800dae2:	6021      	streq	r1, [r4, #0]
 800dae4:	6054      	str	r4, [r2, #4]
 800dae6:	e7ca      	b.n	800da7e <_free_r+0x22>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	bf00      	nop
 800daec:	20000794 	.word	0x20000794

0800daf0 <sbrk_aligned>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	4e0f      	ldr	r6, [pc, #60]	@ (800db30 <sbrk_aligned+0x40>)
 800daf4:	460c      	mov	r4, r1
 800daf6:	4605      	mov	r5, r0
 800daf8:	6831      	ldr	r1, [r6, #0]
 800dafa:	b911      	cbnz	r1, 800db02 <sbrk_aligned+0x12>
 800dafc:	f000 fcaa 	bl	800e454 <_sbrk_r>
 800db00:	6030      	str	r0, [r6, #0]
 800db02:	4621      	mov	r1, r4
 800db04:	4628      	mov	r0, r5
 800db06:	f000 fca5 	bl	800e454 <_sbrk_r>
 800db0a:	1c43      	adds	r3, r0, #1
 800db0c:	d103      	bne.n	800db16 <sbrk_aligned+0x26>
 800db0e:	f04f 34ff 	mov.w	r4, #4294967295
 800db12:	4620      	mov	r0, r4
 800db14:	bd70      	pop	{r4, r5, r6, pc}
 800db16:	1cc4      	adds	r4, r0, #3
 800db18:	f024 0403 	bic.w	r4, r4, #3
 800db1c:	42a0      	cmp	r0, r4
 800db1e:	d0f8      	beq.n	800db12 <sbrk_aligned+0x22>
 800db20:	1a21      	subs	r1, r4, r0
 800db22:	4628      	mov	r0, r5
 800db24:	f000 fc96 	bl	800e454 <_sbrk_r>
 800db28:	3001      	adds	r0, #1
 800db2a:	d1f2      	bne.n	800db12 <sbrk_aligned+0x22>
 800db2c:	e7ef      	b.n	800db0e <sbrk_aligned+0x1e>
 800db2e:	bf00      	nop
 800db30:	20000790 	.word	0x20000790

0800db34 <_malloc_r>:
 800db34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db38:	1ccd      	adds	r5, r1, #3
 800db3a:	4606      	mov	r6, r0
 800db3c:	f025 0503 	bic.w	r5, r5, #3
 800db40:	3508      	adds	r5, #8
 800db42:	2d0c      	cmp	r5, #12
 800db44:	bf38      	it	cc
 800db46:	250c      	movcc	r5, #12
 800db48:	2d00      	cmp	r5, #0
 800db4a:	db01      	blt.n	800db50 <_malloc_r+0x1c>
 800db4c:	42a9      	cmp	r1, r5
 800db4e:	d904      	bls.n	800db5a <_malloc_r+0x26>
 800db50:	230c      	movs	r3, #12
 800db52:	6033      	str	r3, [r6, #0]
 800db54:	2000      	movs	r0, #0
 800db56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc30 <_malloc_r+0xfc>
 800db5e:	f000 f869 	bl	800dc34 <__malloc_lock>
 800db62:	f8d8 3000 	ldr.w	r3, [r8]
 800db66:	461c      	mov	r4, r3
 800db68:	bb44      	cbnz	r4, 800dbbc <_malloc_r+0x88>
 800db6a:	4629      	mov	r1, r5
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff ffbf 	bl	800daf0 <sbrk_aligned>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	4604      	mov	r4, r0
 800db76:	d158      	bne.n	800dc2a <_malloc_r+0xf6>
 800db78:	f8d8 4000 	ldr.w	r4, [r8]
 800db7c:	4627      	mov	r7, r4
 800db7e:	2f00      	cmp	r7, #0
 800db80:	d143      	bne.n	800dc0a <_malloc_r+0xd6>
 800db82:	2c00      	cmp	r4, #0
 800db84:	d04b      	beq.n	800dc1e <_malloc_r+0xea>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	4639      	mov	r1, r7
 800db8a:	4630      	mov	r0, r6
 800db8c:	eb04 0903 	add.w	r9, r4, r3
 800db90:	f000 fc60 	bl	800e454 <_sbrk_r>
 800db94:	4581      	cmp	r9, r0
 800db96:	d142      	bne.n	800dc1e <_malloc_r+0xea>
 800db98:	6821      	ldr	r1, [r4, #0]
 800db9a:	4630      	mov	r0, r6
 800db9c:	1a6d      	subs	r5, r5, r1
 800db9e:	4629      	mov	r1, r5
 800dba0:	f7ff ffa6 	bl	800daf0 <sbrk_aligned>
 800dba4:	3001      	adds	r0, #1
 800dba6:	d03a      	beq.n	800dc1e <_malloc_r+0xea>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	442b      	add	r3, r5
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	f8d8 3000 	ldr.w	r3, [r8]
 800dbb2:	685a      	ldr	r2, [r3, #4]
 800dbb4:	bb62      	cbnz	r2, 800dc10 <_malloc_r+0xdc>
 800dbb6:	f8c8 7000 	str.w	r7, [r8]
 800dbba:	e00f      	b.n	800dbdc <_malloc_r+0xa8>
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	1b52      	subs	r2, r2, r5
 800dbc0:	d420      	bmi.n	800dc04 <_malloc_r+0xd0>
 800dbc2:	2a0b      	cmp	r2, #11
 800dbc4:	d917      	bls.n	800dbf6 <_malloc_r+0xc2>
 800dbc6:	1961      	adds	r1, r4, r5
 800dbc8:	42a3      	cmp	r3, r4
 800dbca:	6025      	str	r5, [r4, #0]
 800dbcc:	bf18      	it	ne
 800dbce:	6059      	strne	r1, [r3, #4]
 800dbd0:	6863      	ldr	r3, [r4, #4]
 800dbd2:	bf08      	it	eq
 800dbd4:	f8c8 1000 	streq.w	r1, [r8]
 800dbd8:	5162      	str	r2, [r4, r5]
 800dbda:	604b      	str	r3, [r1, #4]
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f000 f82f 	bl	800dc40 <__malloc_unlock>
 800dbe2:	f104 000b 	add.w	r0, r4, #11
 800dbe6:	1d23      	adds	r3, r4, #4
 800dbe8:	f020 0007 	bic.w	r0, r0, #7
 800dbec:	1ac2      	subs	r2, r0, r3
 800dbee:	bf1c      	itt	ne
 800dbf0:	1a1b      	subne	r3, r3, r0
 800dbf2:	50a3      	strne	r3, [r4, r2]
 800dbf4:	e7af      	b.n	800db56 <_malloc_r+0x22>
 800dbf6:	6862      	ldr	r2, [r4, #4]
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	bf0c      	ite	eq
 800dbfc:	f8c8 2000 	streq.w	r2, [r8]
 800dc00:	605a      	strne	r2, [r3, #4]
 800dc02:	e7eb      	b.n	800dbdc <_malloc_r+0xa8>
 800dc04:	4623      	mov	r3, r4
 800dc06:	6864      	ldr	r4, [r4, #4]
 800dc08:	e7ae      	b.n	800db68 <_malloc_r+0x34>
 800dc0a:	463c      	mov	r4, r7
 800dc0c:	687f      	ldr	r7, [r7, #4]
 800dc0e:	e7b6      	b.n	800db7e <_malloc_r+0x4a>
 800dc10:	461a      	mov	r2, r3
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	42a3      	cmp	r3, r4
 800dc16:	d1fb      	bne.n	800dc10 <_malloc_r+0xdc>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	6053      	str	r3, [r2, #4]
 800dc1c:	e7de      	b.n	800dbdc <_malloc_r+0xa8>
 800dc1e:	230c      	movs	r3, #12
 800dc20:	4630      	mov	r0, r6
 800dc22:	6033      	str	r3, [r6, #0]
 800dc24:	f000 f80c 	bl	800dc40 <__malloc_unlock>
 800dc28:	e794      	b.n	800db54 <_malloc_r+0x20>
 800dc2a:	6005      	str	r5, [r0, #0]
 800dc2c:	e7d6      	b.n	800dbdc <_malloc_r+0xa8>
 800dc2e:	bf00      	nop
 800dc30:	20000794 	.word	0x20000794

0800dc34 <__malloc_lock>:
 800dc34:	4801      	ldr	r0, [pc, #4]	@ (800dc3c <__malloc_lock+0x8>)
 800dc36:	f7ff bf0e 	b.w	800da56 <__retarget_lock_acquire_recursive>
 800dc3a:	bf00      	nop
 800dc3c:	2000078c 	.word	0x2000078c

0800dc40 <__malloc_unlock>:
 800dc40:	4801      	ldr	r0, [pc, #4]	@ (800dc48 <__malloc_unlock+0x8>)
 800dc42:	f7ff bf09 	b.w	800da58 <__retarget_lock_release_recursive>
 800dc46:	bf00      	nop
 800dc48:	2000078c 	.word	0x2000078c

0800dc4c <__sfputc_r>:
 800dc4c:	6893      	ldr	r3, [r2, #8]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	6093      	str	r3, [r2, #8]
 800dc54:	b410      	push	{r4}
 800dc56:	da08      	bge.n	800dc6a <__sfputc_r+0x1e>
 800dc58:	6994      	ldr	r4, [r2, #24]
 800dc5a:	42a3      	cmp	r3, r4
 800dc5c:	db01      	blt.n	800dc62 <__sfputc_r+0x16>
 800dc5e:	290a      	cmp	r1, #10
 800dc60:	d103      	bne.n	800dc6a <__sfputc_r+0x1e>
 800dc62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc66:	f7ff bde8 	b.w	800d83a <__swbuf_r>
 800dc6a:	6813      	ldr	r3, [r2, #0]
 800dc6c:	1c58      	adds	r0, r3, #1
 800dc6e:	6010      	str	r0, [r2, #0]
 800dc70:	4608      	mov	r0, r1
 800dc72:	7019      	strb	r1, [r3, #0]
 800dc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <__sfputs_r>:
 800dc7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	460f      	mov	r7, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	18d5      	adds	r5, r2, r3
 800dc84:	42ac      	cmp	r4, r5
 800dc86:	d101      	bne.n	800dc8c <__sfputs_r+0x12>
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e007      	b.n	800dc9c <__sfputs_r+0x22>
 800dc8c:	463a      	mov	r2, r7
 800dc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc92:	4630      	mov	r0, r6
 800dc94:	f7ff ffda 	bl	800dc4c <__sfputc_r>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d1f3      	bne.n	800dc84 <__sfputs_r+0xa>
 800dc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dca0 <_vfiprintf_r>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	460d      	mov	r5, r1
 800dca6:	b09d      	sub	sp, #116	@ 0x74
 800dca8:	4614      	mov	r4, r2
 800dcaa:	4698      	mov	r8, r3
 800dcac:	4606      	mov	r6, r0
 800dcae:	b118      	cbz	r0, 800dcb8 <_vfiprintf_r+0x18>
 800dcb0:	6a03      	ldr	r3, [r0, #32]
 800dcb2:	b90b      	cbnz	r3, 800dcb8 <_vfiprintf_r+0x18>
 800dcb4:	f7ff fcd8 	bl	800d668 <__sinit>
 800dcb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcba:	07d9      	lsls	r1, r3, #31
 800dcbc:	d405      	bmi.n	800dcca <_vfiprintf_r+0x2a>
 800dcbe:	89ab      	ldrh	r3, [r5, #12]
 800dcc0:	059a      	lsls	r2, r3, #22
 800dcc2:	d402      	bmi.n	800dcca <_vfiprintf_r+0x2a>
 800dcc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcc6:	f7ff fec6 	bl	800da56 <__retarget_lock_acquire_recursive>
 800dcca:	89ab      	ldrh	r3, [r5, #12]
 800dccc:	071b      	lsls	r3, r3, #28
 800dcce:	d501      	bpl.n	800dcd4 <_vfiprintf_r+0x34>
 800dcd0:	692b      	ldr	r3, [r5, #16]
 800dcd2:	b99b      	cbnz	r3, 800dcfc <_vfiprintf_r+0x5c>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff fdee 	bl	800d8b8 <__swsetup_r>
 800dcdc:	b170      	cbz	r0, 800dcfc <_vfiprintf_r+0x5c>
 800dcde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dce0:	07dc      	lsls	r4, r3, #31
 800dce2:	d504      	bpl.n	800dcee <_vfiprintf_r+0x4e>
 800dce4:	f04f 30ff 	mov.w	r0, #4294967295
 800dce8:	b01d      	add	sp, #116	@ 0x74
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	0598      	lsls	r0, r3, #22
 800dcf2:	d4f7      	bmi.n	800dce4 <_vfiprintf_r+0x44>
 800dcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcf6:	f7ff feaf 	bl	800da58 <__retarget_lock_release_recursive>
 800dcfa:	e7f3      	b.n	800dce4 <_vfiprintf_r+0x44>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd02:	f04f 0901 	mov.w	r9, #1
 800dd06:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800debc <_vfiprintf_r+0x21c>
 800dd0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0c:	2320      	movs	r3, #32
 800dd0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd12:	2330      	movs	r3, #48	@ 0x30
 800dd14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd18:	4623      	mov	r3, r4
 800dd1a:	469a      	mov	sl, r3
 800dd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd20:	b10a      	cbz	r2, 800dd26 <_vfiprintf_r+0x86>
 800dd22:	2a25      	cmp	r2, #37	@ 0x25
 800dd24:	d1f9      	bne.n	800dd1a <_vfiprintf_r+0x7a>
 800dd26:	ebba 0b04 	subs.w	fp, sl, r4
 800dd2a:	d00b      	beq.n	800dd44 <_vfiprintf_r+0xa4>
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	4622      	mov	r2, r4
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ffa1 	bl	800dc7a <__sfputs_r>
 800dd38:	3001      	adds	r0, #1
 800dd3a:	f000 80a7 	beq.w	800de8c <_vfiprintf_r+0x1ec>
 800dd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd40:	445a      	add	r2, fp
 800dd42:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd44:	f89a 3000 	ldrb.w	r3, [sl]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 809f 	beq.w	800de8c <_vfiprintf_r+0x1ec>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295
 800dd54:	f10a 0a01 	add.w	sl, sl, #1
 800dd58:	9304      	str	r3, [sp, #16]
 800dd5a:	9307      	str	r3, [sp, #28]
 800dd5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd60:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd66:	4654      	mov	r4, sl
 800dd68:	2205      	movs	r2, #5
 800dd6a:	4854      	ldr	r0, [pc, #336]	@ (800debc <_vfiprintf_r+0x21c>)
 800dd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd70:	f000 fb80 	bl	800e474 <memchr>
 800dd74:	9a04      	ldr	r2, [sp, #16]
 800dd76:	b9d8      	cbnz	r0, 800ddb0 <_vfiprintf_r+0x110>
 800dd78:	06d1      	lsls	r1, r2, #27
 800dd7a:	bf44      	itt	mi
 800dd7c:	2320      	movmi	r3, #32
 800dd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd82:	0713      	lsls	r3, r2, #28
 800dd84:	bf44      	itt	mi
 800dd86:	232b      	movmi	r3, #43	@ 0x2b
 800dd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd90:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd92:	d015      	beq.n	800ddc0 <_vfiprintf_r+0x120>
 800dd94:	9a07      	ldr	r2, [sp, #28]
 800dd96:	4654      	mov	r4, sl
 800dd98:	2000      	movs	r0, #0
 800dd9a:	f04f 0c0a 	mov.w	ip, #10
 800dd9e:	4621      	mov	r1, r4
 800dda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dda4:	3b30      	subs	r3, #48	@ 0x30
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d94b      	bls.n	800de42 <_vfiprintf_r+0x1a2>
 800ddaa:	b1b0      	cbz	r0, 800ddda <_vfiprintf_r+0x13a>
 800ddac:	9207      	str	r2, [sp, #28]
 800ddae:	e014      	b.n	800ddda <_vfiprintf_r+0x13a>
 800ddb0:	eba0 0308 	sub.w	r3, r0, r8
 800ddb4:	46a2      	mov	sl, r4
 800ddb6:	fa09 f303 	lsl.w	r3, r9, r3
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	e7d2      	b.n	800dd66 <_vfiprintf_r+0xc6>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	1d19      	adds	r1, r3, #4
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	9103      	str	r1, [sp, #12]
 800ddca:	bfbb      	ittet	lt
 800ddcc:	425b      	neglt	r3, r3
 800ddce:	f042 0202 	orrlt.w	r2, r2, #2
 800ddd2:	9307      	strge	r3, [sp, #28]
 800ddd4:	9307      	strlt	r3, [sp, #28]
 800ddd6:	bfb8      	it	lt
 800ddd8:	9204      	strlt	r2, [sp, #16]
 800ddda:	7823      	ldrb	r3, [r4, #0]
 800dddc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddde:	d10a      	bne.n	800ddf6 <_vfiprintf_r+0x156>
 800dde0:	7863      	ldrb	r3, [r4, #1]
 800dde2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dde4:	d132      	bne.n	800de4c <_vfiprintf_r+0x1ac>
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	3402      	adds	r4, #2
 800ddea:	1d1a      	adds	r2, r3, #4
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddf2:	9203      	str	r2, [sp, #12]
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800decc <_vfiprintf_r+0x22c>
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	7821      	ldrb	r1, [r4, #0]
 800ddfe:	4650      	mov	r0, sl
 800de00:	f000 fb38 	bl	800e474 <memchr>
 800de04:	b138      	cbz	r0, 800de16 <_vfiprintf_r+0x176>
 800de06:	eba0 000a 	sub.w	r0, r0, sl
 800de0a:	2240      	movs	r2, #64	@ 0x40
 800de0c:	9b04      	ldr	r3, [sp, #16]
 800de0e:	3401      	adds	r4, #1
 800de10:	4082      	lsls	r2, r0
 800de12:	4313      	orrs	r3, r2
 800de14:	9304      	str	r3, [sp, #16]
 800de16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1a:	2206      	movs	r2, #6
 800de1c:	4828      	ldr	r0, [pc, #160]	@ (800dec0 <_vfiprintf_r+0x220>)
 800de1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de22:	f000 fb27 	bl	800e474 <memchr>
 800de26:	2800      	cmp	r0, #0
 800de28:	d03f      	beq.n	800deaa <_vfiprintf_r+0x20a>
 800de2a:	4b26      	ldr	r3, [pc, #152]	@ (800dec4 <_vfiprintf_r+0x224>)
 800de2c:	bb1b      	cbnz	r3, 800de76 <_vfiprintf_r+0x1d6>
 800de2e:	9b03      	ldr	r3, [sp, #12]
 800de30:	3307      	adds	r3, #7
 800de32:	f023 0307 	bic.w	r3, r3, #7
 800de36:	3308      	adds	r3, #8
 800de38:	9303      	str	r3, [sp, #12]
 800de3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de3c:	443b      	add	r3, r7
 800de3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de40:	e76a      	b.n	800dd18 <_vfiprintf_r+0x78>
 800de42:	fb0c 3202 	mla	r2, ip, r2, r3
 800de46:	460c      	mov	r4, r1
 800de48:	2001      	movs	r0, #1
 800de4a:	e7a8      	b.n	800dd9e <_vfiprintf_r+0xfe>
 800de4c:	2300      	movs	r3, #0
 800de4e:	3401      	adds	r4, #1
 800de50:	f04f 0c0a 	mov.w	ip, #10
 800de54:	4619      	mov	r1, r3
 800de56:	9305      	str	r3, [sp, #20]
 800de58:	4620      	mov	r0, r4
 800de5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de5e:	3a30      	subs	r2, #48	@ 0x30
 800de60:	2a09      	cmp	r2, #9
 800de62:	d903      	bls.n	800de6c <_vfiprintf_r+0x1cc>
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0c6      	beq.n	800ddf6 <_vfiprintf_r+0x156>
 800de68:	9105      	str	r1, [sp, #20]
 800de6a:	e7c4      	b.n	800ddf6 <_vfiprintf_r+0x156>
 800de6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de70:	4604      	mov	r4, r0
 800de72:	2301      	movs	r3, #1
 800de74:	e7f0      	b.n	800de58 <_vfiprintf_r+0x1b8>
 800de76:	ab03      	add	r3, sp, #12
 800de78:	462a      	mov	r2, r5
 800de7a:	a904      	add	r1, sp, #16
 800de7c:	4630      	mov	r0, r6
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4b11      	ldr	r3, [pc, #68]	@ (800dec8 <_vfiprintf_r+0x228>)
 800de82:	f3af 8000 	nop.w
 800de86:	4607      	mov	r7, r0
 800de88:	1c78      	adds	r0, r7, #1
 800de8a:	d1d6      	bne.n	800de3a <_vfiprintf_r+0x19a>
 800de8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de8e:	07d9      	lsls	r1, r3, #31
 800de90:	d405      	bmi.n	800de9e <_vfiprintf_r+0x1fe>
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	059a      	lsls	r2, r3, #22
 800de96:	d402      	bmi.n	800de9e <_vfiprintf_r+0x1fe>
 800de98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de9a:	f7ff fddd 	bl	800da58 <__retarget_lock_release_recursive>
 800de9e:	89ab      	ldrh	r3, [r5, #12]
 800dea0:	065b      	lsls	r3, r3, #25
 800dea2:	f53f af1f 	bmi.w	800dce4 <_vfiprintf_r+0x44>
 800dea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dea8:	e71e      	b.n	800dce8 <_vfiprintf_r+0x48>
 800deaa:	ab03      	add	r3, sp, #12
 800deac:	462a      	mov	r2, r5
 800deae:	a904      	add	r1, sp, #16
 800deb0:	4630      	mov	r0, r6
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <_vfiprintf_r+0x228>)
 800deb6:	f000 f87d 	bl	800dfb4 <_printf_i>
 800deba:	e7e4      	b.n	800de86 <_vfiprintf_r+0x1e6>
 800debc:	0800e5f0 	.word	0x0800e5f0
 800dec0:	0800e5fa 	.word	0x0800e5fa
 800dec4:	00000000 	.word	0x00000000
 800dec8:	0800dc7b 	.word	0x0800dc7b
 800decc:	0800e5f6 	.word	0x0800e5f6

0800ded0 <_printf_common>:
 800ded0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	4616      	mov	r6, r2
 800ded6:	4698      	mov	r8, r3
 800ded8:	688a      	ldr	r2, [r1, #8]
 800deda:	4607      	mov	r7, r0
 800dedc:	690b      	ldr	r3, [r1, #16]
 800dede:	460c      	mov	r4, r1
 800dee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dee4:	4293      	cmp	r3, r2
 800dee6:	bfb8      	it	lt
 800dee8:	4613      	movlt	r3, r2
 800deea:	6033      	str	r3, [r6, #0]
 800deec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800def0:	b10a      	cbz	r2, 800def6 <_printf_common+0x26>
 800def2:	3301      	adds	r3, #1
 800def4:	6033      	str	r3, [r6, #0]
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	0699      	lsls	r1, r3, #26
 800defa:	bf42      	ittt	mi
 800defc:	6833      	ldrmi	r3, [r6, #0]
 800defe:	3302      	addmi	r3, #2
 800df00:	6033      	strmi	r3, [r6, #0]
 800df02:	6825      	ldr	r5, [r4, #0]
 800df04:	f015 0506 	ands.w	r5, r5, #6
 800df08:	d106      	bne.n	800df18 <_printf_common+0x48>
 800df0a:	f104 0a19 	add.w	sl, r4, #25
 800df0e:	68e3      	ldr	r3, [r4, #12]
 800df10:	6832      	ldr	r2, [r6, #0]
 800df12:	1a9b      	subs	r3, r3, r2
 800df14:	42ab      	cmp	r3, r5
 800df16:	dc2b      	bgt.n	800df70 <_printf_common+0xa0>
 800df18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	3b00      	subs	r3, #0
 800df20:	bf18      	it	ne
 800df22:	2301      	movne	r3, #1
 800df24:	0692      	lsls	r2, r2, #26
 800df26:	d430      	bmi.n	800df8a <_printf_common+0xba>
 800df28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df2c:	4641      	mov	r1, r8
 800df2e:	4638      	mov	r0, r7
 800df30:	47c8      	blx	r9
 800df32:	3001      	adds	r0, #1
 800df34:	d023      	beq.n	800df7e <_printf_common+0xae>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	341a      	adds	r4, #26
 800df3a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800df3e:	f003 0306 	and.w	r3, r3, #6
 800df42:	2b04      	cmp	r3, #4
 800df44:	bf0a      	itet	eq
 800df46:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800df4a:	2500      	movne	r5, #0
 800df4c:	6833      	ldreq	r3, [r6, #0]
 800df4e:	f04f 0600 	mov.w	r6, #0
 800df52:	bf08      	it	eq
 800df54:	1aed      	subeq	r5, r5, r3
 800df56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800df5a:	bf08      	it	eq
 800df5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df60:	4293      	cmp	r3, r2
 800df62:	bfc4      	itt	gt
 800df64:	1a9b      	subgt	r3, r3, r2
 800df66:	18ed      	addgt	r5, r5, r3
 800df68:	42b5      	cmp	r5, r6
 800df6a:	d11a      	bne.n	800dfa2 <_printf_common+0xd2>
 800df6c:	2000      	movs	r0, #0
 800df6e:	e008      	b.n	800df82 <_printf_common+0xb2>
 800df70:	2301      	movs	r3, #1
 800df72:	4652      	mov	r2, sl
 800df74:	4641      	mov	r1, r8
 800df76:	4638      	mov	r0, r7
 800df78:	47c8      	blx	r9
 800df7a:	3001      	adds	r0, #1
 800df7c:	d103      	bne.n	800df86 <_printf_common+0xb6>
 800df7e:	f04f 30ff 	mov.w	r0, #4294967295
 800df82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df86:	3501      	adds	r5, #1
 800df88:	e7c1      	b.n	800df0e <_printf_common+0x3e>
 800df8a:	18e1      	adds	r1, r4, r3
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	2030      	movs	r0, #48	@ 0x30
 800df90:	3302      	adds	r3, #2
 800df92:	4422      	add	r2, r4
 800df94:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfa0:	e7c2      	b.n	800df28 <_printf_common+0x58>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	4622      	mov	r2, r4
 800dfa6:	4641      	mov	r1, r8
 800dfa8:	4638      	mov	r0, r7
 800dfaa:	47c8      	blx	r9
 800dfac:	3001      	adds	r0, #1
 800dfae:	d0e6      	beq.n	800df7e <_printf_common+0xae>
 800dfb0:	3601      	adds	r6, #1
 800dfb2:	e7d9      	b.n	800df68 <_printf_common+0x98>

0800dfb4 <_printf_i>:
 800dfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb8:	7e0f      	ldrb	r7, [r1, #24]
 800dfba:	4691      	mov	r9, r2
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	2f78      	cmp	r7, #120	@ 0x78
 800dfc2:	469a      	mov	sl, r3
 800dfc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfca:	d807      	bhi.n	800dfdc <_printf_i+0x28>
 800dfcc:	2f62      	cmp	r7, #98	@ 0x62
 800dfce:	d80a      	bhi.n	800dfe6 <_printf_i+0x32>
 800dfd0:	2f00      	cmp	r7, #0
 800dfd2:	f000 80d2 	beq.w	800e17a <_printf_i+0x1c6>
 800dfd6:	2f58      	cmp	r7, #88	@ 0x58
 800dfd8:	f000 80b9 	beq.w	800e14e <_printf_i+0x19a>
 800dfdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfe4:	e03a      	b.n	800e05c <_printf_i+0xa8>
 800dfe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dfea:	2b15      	cmp	r3, #21
 800dfec:	d8f6      	bhi.n	800dfdc <_printf_i+0x28>
 800dfee:	a101      	add	r1, pc, #4	@ (adr r1, 800dff4 <_printf_i+0x40>)
 800dff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dff4:	0800e04d 	.word	0x0800e04d
 800dff8:	0800e061 	.word	0x0800e061
 800dffc:	0800dfdd 	.word	0x0800dfdd
 800e000:	0800dfdd 	.word	0x0800dfdd
 800e004:	0800dfdd 	.word	0x0800dfdd
 800e008:	0800dfdd 	.word	0x0800dfdd
 800e00c:	0800e061 	.word	0x0800e061
 800e010:	0800dfdd 	.word	0x0800dfdd
 800e014:	0800dfdd 	.word	0x0800dfdd
 800e018:	0800dfdd 	.word	0x0800dfdd
 800e01c:	0800dfdd 	.word	0x0800dfdd
 800e020:	0800e161 	.word	0x0800e161
 800e024:	0800e08b 	.word	0x0800e08b
 800e028:	0800e11b 	.word	0x0800e11b
 800e02c:	0800dfdd 	.word	0x0800dfdd
 800e030:	0800dfdd 	.word	0x0800dfdd
 800e034:	0800e183 	.word	0x0800e183
 800e038:	0800dfdd 	.word	0x0800dfdd
 800e03c:	0800e08b 	.word	0x0800e08b
 800e040:	0800dfdd 	.word	0x0800dfdd
 800e044:	0800dfdd 	.word	0x0800dfdd
 800e048:	0800e123 	.word	0x0800e123
 800e04c:	6833      	ldr	r3, [r6, #0]
 800e04e:	1d1a      	adds	r2, r3, #4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6032      	str	r2, [r6, #0]
 800e054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e05c:	2301      	movs	r3, #1
 800e05e:	e09d      	b.n	800e19c <_printf_i+0x1e8>
 800e060:	6833      	ldr	r3, [r6, #0]
 800e062:	6820      	ldr	r0, [r4, #0]
 800e064:	1d19      	adds	r1, r3, #4
 800e066:	6031      	str	r1, [r6, #0]
 800e068:	0606      	lsls	r6, r0, #24
 800e06a:	d501      	bpl.n	800e070 <_printf_i+0xbc>
 800e06c:	681d      	ldr	r5, [r3, #0]
 800e06e:	e003      	b.n	800e078 <_printf_i+0xc4>
 800e070:	0645      	lsls	r5, r0, #25
 800e072:	d5fb      	bpl.n	800e06c <_printf_i+0xb8>
 800e074:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e078:	2d00      	cmp	r5, #0
 800e07a:	da03      	bge.n	800e084 <_printf_i+0xd0>
 800e07c:	232d      	movs	r3, #45	@ 0x2d
 800e07e:	426d      	negs	r5, r5
 800e080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e084:	4859      	ldr	r0, [pc, #356]	@ (800e1ec <_printf_i+0x238>)
 800e086:	230a      	movs	r3, #10
 800e088:	e011      	b.n	800e0ae <_printf_i+0xfa>
 800e08a:	6821      	ldr	r1, [r4, #0]
 800e08c:	6833      	ldr	r3, [r6, #0]
 800e08e:	0608      	lsls	r0, r1, #24
 800e090:	f853 5b04 	ldr.w	r5, [r3], #4
 800e094:	d402      	bmi.n	800e09c <_printf_i+0xe8>
 800e096:	0649      	lsls	r1, r1, #25
 800e098:	bf48      	it	mi
 800e09a:	b2ad      	uxthmi	r5, r5
 800e09c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e09e:	6033      	str	r3, [r6, #0]
 800e0a0:	4852      	ldr	r0, [pc, #328]	@ (800e1ec <_printf_i+0x238>)
 800e0a2:	bf14      	ite	ne
 800e0a4:	230a      	movne	r3, #10
 800e0a6:	2308      	moveq	r3, #8
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0ae:	6866      	ldr	r6, [r4, #4]
 800e0b0:	2e00      	cmp	r6, #0
 800e0b2:	60a6      	str	r6, [r4, #8]
 800e0b4:	bfa2      	ittt	ge
 800e0b6:	6821      	ldrge	r1, [r4, #0]
 800e0b8:	f021 0104 	bicge.w	r1, r1, #4
 800e0bc:	6021      	strge	r1, [r4, #0]
 800e0be:	b90d      	cbnz	r5, 800e0c4 <_printf_i+0x110>
 800e0c0:	2e00      	cmp	r6, #0
 800e0c2:	d04b      	beq.n	800e15c <_printf_i+0x1a8>
 800e0c4:	4616      	mov	r6, r2
 800e0c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0ca:	fb03 5711 	mls	r7, r3, r1, r5
 800e0ce:	5dc7      	ldrb	r7, [r0, r7]
 800e0d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0d4:	462f      	mov	r7, r5
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	42bb      	cmp	r3, r7
 800e0da:	d9f4      	bls.n	800e0c6 <_printf_i+0x112>
 800e0dc:	2b08      	cmp	r3, #8
 800e0de:	d10b      	bne.n	800e0f8 <_printf_i+0x144>
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	07df      	lsls	r7, r3, #31
 800e0e4:	d508      	bpl.n	800e0f8 <_printf_i+0x144>
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	6861      	ldr	r1, [r4, #4]
 800e0ea:	4299      	cmp	r1, r3
 800e0ec:	bfde      	ittt	le
 800e0ee:	2330      	movle	r3, #48	@ 0x30
 800e0f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0f8:	1b92      	subs	r2, r2, r6
 800e0fa:	6122      	str	r2, [r4, #16]
 800e0fc:	464b      	mov	r3, r9
 800e0fe:	aa03      	add	r2, sp, #12
 800e100:	4621      	mov	r1, r4
 800e102:	4640      	mov	r0, r8
 800e104:	f8cd a000 	str.w	sl, [sp]
 800e108:	f7ff fee2 	bl	800ded0 <_printf_common>
 800e10c:	3001      	adds	r0, #1
 800e10e:	d14a      	bne.n	800e1a6 <_printf_i+0x1f2>
 800e110:	f04f 30ff 	mov.w	r0, #4294967295
 800e114:	b004      	add	sp, #16
 800e116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	f043 0320 	orr.w	r3, r3, #32
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	2778      	movs	r7, #120	@ 0x78
 800e124:	4832      	ldr	r0, [pc, #200]	@ (800e1f0 <_printf_i+0x23c>)
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e12c:	061f      	lsls	r7, r3, #24
 800e12e:	6831      	ldr	r1, [r6, #0]
 800e130:	f851 5b04 	ldr.w	r5, [r1], #4
 800e134:	d402      	bmi.n	800e13c <_printf_i+0x188>
 800e136:	065f      	lsls	r7, r3, #25
 800e138:	bf48      	it	mi
 800e13a:	b2ad      	uxthmi	r5, r5
 800e13c:	6031      	str	r1, [r6, #0]
 800e13e:	07d9      	lsls	r1, r3, #31
 800e140:	bf44      	itt	mi
 800e142:	f043 0320 	orrmi.w	r3, r3, #32
 800e146:	6023      	strmi	r3, [r4, #0]
 800e148:	b11d      	cbz	r5, 800e152 <_printf_i+0x19e>
 800e14a:	2310      	movs	r3, #16
 800e14c:	e7ac      	b.n	800e0a8 <_printf_i+0xf4>
 800e14e:	4827      	ldr	r0, [pc, #156]	@ (800e1ec <_printf_i+0x238>)
 800e150:	e7e9      	b.n	800e126 <_printf_i+0x172>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	f023 0320 	bic.w	r3, r3, #32
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	e7f6      	b.n	800e14a <_printf_i+0x196>
 800e15c:	4616      	mov	r6, r2
 800e15e:	e7bd      	b.n	800e0dc <_printf_i+0x128>
 800e160:	6833      	ldr	r3, [r6, #0]
 800e162:	6825      	ldr	r5, [r4, #0]
 800e164:	1d18      	adds	r0, r3, #4
 800e166:	6961      	ldr	r1, [r4, #20]
 800e168:	6030      	str	r0, [r6, #0]
 800e16a:	062e      	lsls	r6, r5, #24
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	d501      	bpl.n	800e174 <_printf_i+0x1c0>
 800e170:	6019      	str	r1, [r3, #0]
 800e172:	e002      	b.n	800e17a <_printf_i+0x1c6>
 800e174:	0668      	lsls	r0, r5, #25
 800e176:	d5fb      	bpl.n	800e170 <_printf_i+0x1bc>
 800e178:	8019      	strh	r1, [r3, #0]
 800e17a:	2300      	movs	r3, #0
 800e17c:	4616      	mov	r6, r2
 800e17e:	6123      	str	r3, [r4, #16]
 800e180:	e7bc      	b.n	800e0fc <_printf_i+0x148>
 800e182:	6833      	ldr	r3, [r6, #0]
 800e184:	2100      	movs	r1, #0
 800e186:	1d1a      	adds	r2, r3, #4
 800e188:	6032      	str	r2, [r6, #0]
 800e18a:	681e      	ldr	r6, [r3, #0]
 800e18c:	6862      	ldr	r2, [r4, #4]
 800e18e:	4630      	mov	r0, r6
 800e190:	f000 f970 	bl	800e474 <memchr>
 800e194:	b108      	cbz	r0, 800e19a <_printf_i+0x1e6>
 800e196:	1b80      	subs	r0, r0, r6
 800e198:	6060      	str	r0, [r4, #4]
 800e19a:	6863      	ldr	r3, [r4, #4]
 800e19c:	6123      	str	r3, [r4, #16]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1a4:	e7aa      	b.n	800e0fc <_printf_i+0x148>
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	4640      	mov	r0, r8
 800e1ae:	47d0      	blx	sl
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	d0ad      	beq.n	800e110 <_printf_i+0x15c>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	079b      	lsls	r3, r3, #30
 800e1b8:	d413      	bmi.n	800e1e2 <_printf_i+0x22e>
 800e1ba:	68e0      	ldr	r0, [r4, #12]
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	4298      	cmp	r0, r3
 800e1c0:	bfb8      	it	lt
 800e1c2:	4618      	movlt	r0, r3
 800e1c4:	e7a6      	b.n	800e114 <_printf_i+0x160>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	47d0      	blx	sl
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d09d      	beq.n	800e110 <_printf_i+0x15c>
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	68e3      	ldr	r3, [r4, #12]
 800e1d8:	9903      	ldr	r1, [sp, #12]
 800e1da:	1a5b      	subs	r3, r3, r1
 800e1dc:	42ab      	cmp	r3, r5
 800e1de:	dcf2      	bgt.n	800e1c6 <_printf_i+0x212>
 800e1e0:	e7eb      	b.n	800e1ba <_printf_i+0x206>
 800e1e2:	2500      	movs	r5, #0
 800e1e4:	f104 0619 	add.w	r6, r4, #25
 800e1e8:	e7f5      	b.n	800e1d6 <_printf_i+0x222>
 800e1ea:	bf00      	nop
 800e1ec:	0800e601 	.word	0x0800e601
 800e1f0:	0800e612 	.word	0x0800e612

0800e1f4 <__sflush_r>:
 800e1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fc:	0716      	lsls	r6, r2, #28
 800e1fe:	4605      	mov	r5, r0
 800e200:	460c      	mov	r4, r1
 800e202:	d454      	bmi.n	800e2ae <__sflush_r+0xba>
 800e204:	684b      	ldr	r3, [r1, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	dc02      	bgt.n	800e210 <__sflush_r+0x1c>
 800e20a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	dd48      	ble.n	800e2a2 <__sflush_r+0xae>
 800e210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e212:	2e00      	cmp	r6, #0
 800e214:	d045      	beq.n	800e2a2 <__sflush_r+0xae>
 800e216:	2300      	movs	r3, #0
 800e218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e21c:	682f      	ldr	r7, [r5, #0]
 800e21e:	6a21      	ldr	r1, [r4, #32]
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	d030      	beq.n	800e286 <__sflush_r+0x92>
 800e224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e226:	89a3      	ldrh	r3, [r4, #12]
 800e228:	0759      	lsls	r1, r3, #29
 800e22a:	d505      	bpl.n	800e238 <__sflush_r+0x44>
 800e22c:	6863      	ldr	r3, [r4, #4]
 800e22e:	1ad2      	subs	r2, r2, r3
 800e230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e232:	b10b      	cbz	r3, 800e238 <__sflush_r+0x44>
 800e234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e236:	1ad2      	subs	r2, r2, r3
 800e238:	2300      	movs	r3, #0
 800e23a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e23c:	6a21      	ldr	r1, [r4, #32]
 800e23e:	4628      	mov	r0, r5
 800e240:	47b0      	blx	r6
 800e242:	1c43      	adds	r3, r0, #1
 800e244:	89a3      	ldrh	r3, [r4, #12]
 800e246:	d106      	bne.n	800e256 <__sflush_r+0x62>
 800e248:	6829      	ldr	r1, [r5, #0]
 800e24a:	291d      	cmp	r1, #29
 800e24c:	d82b      	bhi.n	800e2a6 <__sflush_r+0xb2>
 800e24e:	4a2a      	ldr	r2, [pc, #168]	@ (800e2f8 <__sflush_r+0x104>)
 800e250:	410a      	asrs	r2, r1
 800e252:	07d6      	lsls	r6, r2, #31
 800e254:	d427      	bmi.n	800e2a6 <__sflush_r+0xb2>
 800e256:	2200      	movs	r2, #0
 800e258:	04d9      	lsls	r1, r3, #19
 800e25a:	6062      	str	r2, [r4, #4]
 800e25c:	6922      	ldr	r2, [r4, #16]
 800e25e:	6022      	str	r2, [r4, #0]
 800e260:	d504      	bpl.n	800e26c <__sflush_r+0x78>
 800e262:	1c42      	adds	r2, r0, #1
 800e264:	d101      	bne.n	800e26a <__sflush_r+0x76>
 800e266:	682b      	ldr	r3, [r5, #0]
 800e268:	b903      	cbnz	r3, 800e26c <__sflush_r+0x78>
 800e26a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e26e:	602f      	str	r7, [r5, #0]
 800e270:	b1b9      	cbz	r1, 800e2a2 <__sflush_r+0xae>
 800e272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e276:	4299      	cmp	r1, r3
 800e278:	d002      	beq.n	800e280 <__sflush_r+0x8c>
 800e27a:	4628      	mov	r0, r5
 800e27c:	f7ff fbee 	bl	800da5c <_free_r>
 800e280:	2300      	movs	r3, #0
 800e282:	6363      	str	r3, [r4, #52]	@ 0x34
 800e284:	e00d      	b.n	800e2a2 <__sflush_r+0xae>
 800e286:	2301      	movs	r3, #1
 800e288:	4628      	mov	r0, r5
 800e28a:	47b0      	blx	r6
 800e28c:	4602      	mov	r2, r0
 800e28e:	1c50      	adds	r0, r2, #1
 800e290:	d1c9      	bne.n	800e226 <__sflush_r+0x32>
 800e292:	682b      	ldr	r3, [r5, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d0c6      	beq.n	800e226 <__sflush_r+0x32>
 800e298:	2b1d      	cmp	r3, #29
 800e29a:	d001      	beq.n	800e2a0 <__sflush_r+0xac>
 800e29c:	2b16      	cmp	r3, #22
 800e29e:	d11d      	bne.n	800e2dc <__sflush_r+0xe8>
 800e2a0:	602f      	str	r7, [r5, #0]
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	e021      	b.n	800e2ea <__sflush_r+0xf6>
 800e2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	e01a      	b.n	800e2e4 <__sflush_r+0xf0>
 800e2ae:	690f      	ldr	r7, [r1, #16]
 800e2b0:	2f00      	cmp	r7, #0
 800e2b2:	d0f6      	beq.n	800e2a2 <__sflush_r+0xae>
 800e2b4:	0793      	lsls	r3, r2, #30
 800e2b6:	680e      	ldr	r6, [r1, #0]
 800e2b8:	600f      	str	r7, [r1, #0]
 800e2ba:	bf0c      	ite	eq
 800e2bc:	694b      	ldreq	r3, [r1, #20]
 800e2be:	2300      	movne	r3, #0
 800e2c0:	eba6 0807 	sub.w	r8, r6, r7
 800e2c4:	608b      	str	r3, [r1, #8]
 800e2c6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ca:	ddea      	ble.n	800e2a2 <__sflush_r+0xae>
 800e2cc:	4643      	mov	r3, r8
 800e2ce:	463a      	mov	r2, r7
 800e2d0:	6a21      	ldr	r1, [r4, #32]
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e2d6:	47b0      	blx	r6
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	dc08      	bgt.n	800e2ee <__sflush_r+0xfa>
 800e2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ee:	4407      	add	r7, r0
 800e2f0:	eba8 0800 	sub.w	r8, r8, r0
 800e2f4:	e7e7      	b.n	800e2c6 <__sflush_r+0xd2>
 800e2f6:	bf00      	nop
 800e2f8:	dfbffffe 	.word	0xdfbffffe

0800e2fc <_fflush_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	690b      	ldr	r3, [r1, #16]
 800e300:	4605      	mov	r5, r0
 800e302:	460c      	mov	r4, r1
 800e304:	b913      	cbnz	r3, 800e30c <_fflush_r+0x10>
 800e306:	2500      	movs	r5, #0
 800e308:	4628      	mov	r0, r5
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	b118      	cbz	r0, 800e316 <_fflush_r+0x1a>
 800e30e:	6a03      	ldr	r3, [r0, #32]
 800e310:	b90b      	cbnz	r3, 800e316 <_fflush_r+0x1a>
 800e312:	f7ff f9a9 	bl	800d668 <__sinit>
 800e316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d0f3      	beq.n	800e306 <_fflush_r+0xa>
 800e31e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e320:	07d0      	lsls	r0, r2, #31
 800e322:	d404      	bmi.n	800e32e <_fflush_r+0x32>
 800e324:	0599      	lsls	r1, r3, #22
 800e326:	d402      	bmi.n	800e32e <_fflush_r+0x32>
 800e328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e32a:	f7ff fb94 	bl	800da56 <__retarget_lock_acquire_recursive>
 800e32e:	4628      	mov	r0, r5
 800e330:	4621      	mov	r1, r4
 800e332:	f7ff ff5f 	bl	800e1f4 <__sflush_r>
 800e336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e338:	4605      	mov	r5, r0
 800e33a:	07da      	lsls	r2, r3, #31
 800e33c:	d4e4      	bmi.n	800e308 <_fflush_r+0xc>
 800e33e:	89a3      	ldrh	r3, [r4, #12]
 800e340:	059b      	lsls	r3, r3, #22
 800e342:	d4e1      	bmi.n	800e308 <_fflush_r+0xc>
 800e344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e346:	f7ff fb87 	bl	800da58 <__retarget_lock_release_recursive>
 800e34a:	e7dd      	b.n	800e308 <_fflush_r+0xc>

0800e34c <__swhatbuf_r>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	460c      	mov	r4, r1
 800e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e354:	b096      	sub	sp, #88	@ 0x58
 800e356:	4615      	mov	r5, r2
 800e358:	2900      	cmp	r1, #0
 800e35a:	461e      	mov	r6, r3
 800e35c:	da0c      	bge.n	800e378 <__swhatbuf_r+0x2c>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	2100      	movs	r1, #0
 800e362:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e366:	bf14      	ite	ne
 800e368:	2340      	movne	r3, #64	@ 0x40
 800e36a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e36e:	2000      	movs	r0, #0
 800e370:	6031      	str	r1, [r6, #0]
 800e372:	602b      	str	r3, [r5, #0]
 800e374:	b016      	add	sp, #88	@ 0x58
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	466a      	mov	r2, sp
 800e37a:	f000 f849 	bl	800e410 <_fstat_r>
 800e37e:	2800      	cmp	r0, #0
 800e380:	dbed      	blt.n	800e35e <__swhatbuf_r+0x12>
 800e382:	9901      	ldr	r1, [sp, #4]
 800e384:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e388:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e38c:	4259      	negs	r1, r3
 800e38e:	4159      	adcs	r1, r3
 800e390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e394:	e7eb      	b.n	800e36e <__swhatbuf_r+0x22>

0800e396 <__smakebuf_r>:
 800e396:	898b      	ldrh	r3, [r1, #12]
 800e398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e39a:	079d      	lsls	r5, r3, #30
 800e39c:	4606      	mov	r6, r0
 800e39e:	460c      	mov	r4, r1
 800e3a0:	d507      	bpl.n	800e3b2 <__smakebuf_r+0x1c>
 800e3a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	6123      	str	r3, [r4, #16]
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	6163      	str	r3, [r4, #20]
 800e3ae:	b003      	add	sp, #12
 800e3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b2:	ab01      	add	r3, sp, #4
 800e3b4:	466a      	mov	r2, sp
 800e3b6:	f7ff ffc9 	bl	800e34c <__swhatbuf_r>
 800e3ba:	9f00      	ldr	r7, [sp, #0]
 800e3bc:	4605      	mov	r5, r0
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7ff fbb7 	bl	800db34 <_malloc_r>
 800e3c6:	b948      	cbnz	r0, 800e3dc <__smakebuf_r+0x46>
 800e3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3cc:	059a      	lsls	r2, r3, #22
 800e3ce:	d4ee      	bmi.n	800e3ae <__smakebuf_r+0x18>
 800e3d0:	f023 0303 	bic.w	r3, r3, #3
 800e3d4:	f043 0302 	orr.w	r3, r3, #2
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	e7e2      	b.n	800e3a2 <__smakebuf_r+0xc>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	6020      	str	r0, [r4, #0]
 800e3e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3ec:	b15b      	cbz	r3, 800e406 <__smakebuf_r+0x70>
 800e3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f000 f81e 	bl	800e434 <_isatty_r>
 800e3f8:	b128      	cbz	r0, 800e406 <__smakebuf_r+0x70>
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	f023 0303 	bic.w	r3, r3, #3
 800e400:	f043 0301 	orr.w	r3, r3, #1
 800e404:	81a3      	strh	r3, [r4, #12]
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	431d      	orrs	r5, r3
 800e40a:	81a5      	strh	r5, [r4, #12]
 800e40c:	e7cf      	b.n	800e3ae <__smakebuf_r+0x18>
	...

0800e410 <_fstat_r>:
 800e410:	b538      	push	{r3, r4, r5, lr}
 800e412:	2300      	movs	r3, #0
 800e414:	4d06      	ldr	r5, [pc, #24]	@ (800e430 <_fstat_r+0x20>)
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	602b      	str	r3, [r5, #0]
 800e41e:	f7f4 fa1a 	bl	8002856 <_fstat>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d102      	bne.n	800e42c <_fstat_r+0x1c>
 800e426:	682b      	ldr	r3, [r5, #0]
 800e428:	b103      	cbz	r3, 800e42c <_fstat_r+0x1c>
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	bf00      	nop
 800e430:	20000788 	.word	0x20000788

0800e434 <_isatty_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	2300      	movs	r3, #0
 800e438:	4d05      	ldr	r5, [pc, #20]	@ (800e450 <_isatty_r+0x1c>)
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	602b      	str	r3, [r5, #0]
 800e440:	f7f4 fa19 	bl	8002876 <_isatty>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_isatty_r+0x1a>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_isatty_r+0x1a>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	20000788 	.word	0x20000788

0800e454 <_sbrk_r>:
 800e454:	b538      	push	{r3, r4, r5, lr}
 800e456:	2300      	movs	r3, #0
 800e458:	4d05      	ldr	r5, [pc, #20]	@ (800e470 <_sbrk_r+0x1c>)
 800e45a:	4604      	mov	r4, r0
 800e45c:	4608      	mov	r0, r1
 800e45e:	602b      	str	r3, [r5, #0]
 800e460:	f7f4 fa22 	bl	80028a8 <_sbrk>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_sbrk_r+0x1a>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_sbrk_r+0x1a>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	20000788 	.word	0x20000788

0800e474 <memchr>:
 800e474:	b2c9      	uxtb	r1, r1
 800e476:	4603      	mov	r3, r0
 800e478:	4402      	add	r2, r0
 800e47a:	b510      	push	{r4, lr}
 800e47c:	4293      	cmp	r3, r2
 800e47e:	4618      	mov	r0, r3
 800e480:	d101      	bne.n	800e486 <memchr+0x12>
 800e482:	2000      	movs	r0, #0
 800e484:	e003      	b.n	800e48e <memchr+0x1a>
 800e486:	7804      	ldrb	r4, [r0, #0]
 800e488:	3301      	adds	r3, #1
 800e48a:	428c      	cmp	r4, r1
 800e48c:	d1f6      	bne.n	800e47c <memchr+0x8>
 800e48e:	bd10      	pop	{r4, pc}

0800e490 <_init>:
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	bf00      	nop
 800e494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e496:	bc08      	pop	{r3}
 800e498:	469e      	mov	lr, r3
 800e49a:	4770      	bx	lr

0800e49c <_fini>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr
